{"version":3,"sources":["System/Collections/Enumeration/InfiniteEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;OAGI,EAAC,oBAAoB,EAAC,MAAM,wBAAwB;OACpD,eAAe,MAAM,kBAAkB;AAE9C,MAAM,SAAS,GAAG,eAAe,CAAC;AAclC,wCAA2C,oBAAoB;IAM9D,YAAoB,QAAgC;QAEnD,OAAO,CAAC;QAFW,aAAQ,GAAR,QAAQ,CAAwB;IAGpD,CAAC;IAES,YAAY;QAErB,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC;IAC5B,CAAC;IAED,QAAQ;QAEP,MAAM,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;QACnB,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED,OAAO;QAEN,KAAK,CAAC,OAAO,EAAE,CAAC;QACV,IAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,CAAC;AAEF,CAAC;AAED,eAAe,kBAAkB,CAAC","file":"InfiniteEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * An aggregate/reduce style factory function that expects a previous value and the current index of the enumeration.\r\n */\r\nexport interface InfiniteValueFactory<T>\r\n{\r\n\t(previous?:T, index?:number):T;\r\n}\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n */\r\nexport class InfiniteEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * See InfiniteValueFactory\r\n\t * @param _factory\r\n\t */\r\n\tconstructor(private _factory:InfiniteValueFactory<T>)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\treturn this._factory!=null;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar f = _._factory;\r\n\t\tif(f) {\r\n\t\t\t_._current = f(_._current, _.incrementIndex());\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\t(<any>this)._factory = null;\r\n\t}\r\n\r\n}\r\n\r\nexport default InfiniteEnumerator;"]}