{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;OAII,EAAC,oBAAoB,EAAC,MAAM,wBAAwB;OACpD,eAAe,MAAM,kBAAkB;AAE9C,MAAM,SAAS,GAAG,eAAe,CAAC;AAElC,MAAM,KAAK,GAAO,KAAK,CAAC,CAAC;AAQzB,wCAA2C,oBAAoB;IAM9D,YAAoB,SAAsB,EAAU,UAAmB;QAEtE,OAAO,CAAC;QAFW,cAAS,GAAT,SAAS,CAAa;QAAU,eAAU,GAAV,UAAU,CAAS;IAGvE,CAAC;IAES,WAAW;QAEpB,MAAM,CAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,KAAU;QAElB,MAAM,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;QACpB,EAAE,CAAA,CAAC,CAAC,CAAC,CACL,CAAC;YACA,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YACpD,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC;YACrB,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACvB,IAAI;gBAAC,MAAM,CAAC,IAAI,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED,OAAO;QAEN,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACxB,CAAC;IAES,YAAY;QAErB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC;IAClD,CAAC;AACF,CAAC;AAED,eAAe,kBAAkB,CAAC","file":"IteratorEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(private _iterator:IIterator<T>, private _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tvar r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._iterator = VOID0;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn !!this._isEndless && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}