{"version":3,"sources":["System/Collections/List.ts"],"names":[],"mappings":"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","file":"System/Collections/List.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {remove, indexOf, contains, copyTo, removeIndex} from \"./Array/Utility\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport {ArrayEnumerator} from \"./Enumeration/ArrayEnumerator\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IList} from \"./IList\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport class List<T>\r\nextends CollectionBase<T> implements IList<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected _source:T[];\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tconst _ = this;\r\n\t\tif(Array.isArray(source))\r\n\t\t{\r\n\t\t\t_._source = source.slice();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._source = [];\r\n\t\t\t_._importEntries(source);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._source.length;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._source.push(entry);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\treturn remove(\r\n\t\t\tthis._source, entry, max,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar len = this._source.length;\r\n\t\tthis._source.length = 0;\r\n\t\treturn len;\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tif(Type.isArrayLike(entries))\r\n\t\t{\r\n\t\t\tvar len = entries.length;\r\n\t\t\tif(!len) return 0;\r\n\t\t\tvar s = this._source;\r\n\r\n\t\t\tvar first = s.length;\r\n\t\t\ts.length += len;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\ts[i + first] = entries[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn len;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn super._importEntries(entries);\r\n\t\t}\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\treturn this._source[index];\r\n\t}\r\n\r\n\tset(index:number, value:T):boolean\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length && areEqual(value, s[index]))\r\n\t\t\treturn false;\r\n\r\n\t\ts[index] = value;\r\n\t\tthis._onModified();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\treturn indexOf(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tinsert(index:number, value:T):void\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length)\r\n\t\t{\r\n\t\t\tthis._source.splice(index, 0, value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._source[index] = value;\r\n\t\t}\r\n\t\tthis._onModified();\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tif(removeIndex(this._source, index))\r\n\t\t{\r\n\t\t\tthis._onModified();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn contains(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<any>>(target:TTarget, index?:number):TTarget\r\n\t{\r\n\t\treturn copyTo(this._source, target, 0, index);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn new ArrayEnumerator(this._source);\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn forEach(useCopy ? s.slice() : s, action);\r\n\t}\r\n\r\n}\r\n\r\nexport default List;"]}