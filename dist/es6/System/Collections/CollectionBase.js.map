{"version":3,"sources":["System/Collections/CollectionBase.ts"],"names":[],"mappings":"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","file":"System/Collections/CollectionBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\nimport {ILinqEnumerable} from \"../../System.Linq/Enumerable\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {isCommonJS, isRequireJS, isNodeJS} from \"../Environment\";\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n//noinspection SpellCheckingInspection\r\nconst\r\n\tNAME = \"CollectionBase\",\r\n\tCMDC = \"Cannot modify a disposed collection.\",\r\n\tCMRO = \"Cannot modify a read-only collection.\";\r\nconst\r\n\tLINQ_PATH = \"../../System.Linq/Linq\";\r\n\r\nexport abstract class CollectionBase<T>\r\nextends DisposableBase implements ICollection<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tprotected _equalityComparer:EqualityComparison<T|null|undefined> = areEqual)\r\n\t{\r\n\t\tsuper();\r\n\t\tconst _ = this;\r\n\t\t_._disposableObjectName = NAME;\r\n\t\t_._importEntries(source);\r\n\t\t_._updateRecursion = 0;\r\n\t\t_._modifiedCount = 0;\r\n\t\t_._version = 0;\r\n\t}\r\n\r\n\r\n\tprotected abstract getCount():number;\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this.getCount();\r\n\t}\r\n\r\n\tprotected getIsReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn this.getIsReadOnly();\r\n\t}\r\n\r\n\tprotected assertModifiable():void\r\n\t{\r\n\t\tthis.throwIfDisposed(CMDC);\r\n\t\tif(this.getIsReadOnly())\r\n\t\t\tthrow new InvalidOperationException(CMRO);\r\n\t}\r\n\r\n\tprotected _version:number; // Provides an easy means of tracking changes and invalidating enumerables.\r\n\tassertVersion(version:number):void\r\n\t{\r\n\t\tif(version!=this._version)\r\n\t\t\tthrow new InvalidOperationException(\"Collection was modified.\");\r\n\t}\r\n\r\n\t/*\r\n\t * Note: Avoid changing modified count by any means but ++;\r\n\t * If setting modified count by the result of a closure it may be a negative number or NaN and ruin the pattern.\r\n\t */\r\n\tprivate _modifiedCount:number;\r\n\tprivate _updateRecursion:number;\r\n\r\n\tprotected _onModified():void {}\r\n\r\n\tprotected _signalModification(increment?:boolean):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(increment) _._modifiedCount++;\r\n\t\tif(_._modifiedCount && !this._updateRecursion)\r\n\t\t{\r\n\t\t\t_._modifiedCount = 0;\r\n\t\t\t_._version++;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onModified();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\t// Avoid fatal errors which may have been caused by consumer.\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _incrementModified():void { this._modifiedCount++; }\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isUpdating():boolean { return this._updateRecursion!=0; }\r\n\r\n\t/**\r\n\t * Takes a closure that if returning true will propagate an update signal.\r\n\t * Multiple update operations can be occurring at once or recursively and the onModified signal will only occur once they're done.\r\n\t * @param closure\r\n\t * @returns {boolean}\r\n\t */\r\n\thandleUpdate(closure?:() => boolean):boolean\r\n\t{\r\n\t\tif(!closure) return false;\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\t\tvar updated:boolean = false;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(updated = closure())\r\n\t\t\t\t_._modifiedCount++;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._updateRecursion--;\r\n\t\t}\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn updated;\r\n\t}\r\n\r\n\tprotected abstract _addInternal(entry:T):boolean;\r\n\r\n\t/*\r\n\t * Note: for a slight amount more code, we avoid creating functions/closures.\r\n\t * Calling handleUpdate is the correct pattern, but if possible avoid creating another function scope.\r\n\t */\r\n\r\n\tadd(entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\ttry\r\n\t\t{ if(_._addInternal(entry)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tprotected abstract _removeInternal(entry:T, max?:number):number;\r\n\r\n\tremove(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._removeInternal(entry, max)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected abstract _clearInternal():number;\r\n\r\n\tclear():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._clearInternal()) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._clearInternal();\r\n\t\tthis._version = 0;\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tvar l = this._linq;\r\n\t\tthis._linq = <any>null;\r\n\t\tif(l) l.dispose();\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>|null|undefined):number\r\n\t{\r\n\t\tvar added = 0;\r\n\t\tif(entries)\r\n\t\t{\r\n\t\t\tif(Array.isArray(entries))\r\n\t\t\t{\r\n\t\t\t\t// Optimize for avoiding a new closure.\r\n\t\t\t\tfor(let e of entries)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tforEach(entries, e=>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn added;\r\n\t}\r\n\r\n\timportEntries(entries:IEnumerableOrArray<T>|null|undefined):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!entries) return 0;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._importEntries(entries)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\t// Fundamentally the most important part of the collection.\r\n\tabstract getEnumerator():IEnumerator<T>;\r\n\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tif(!this.getCount()) return false;\r\n\t\tvar found:boolean = false, equals = this._equalityComparer;\r\n\t\tthis.forEach(e => !(found = equals(entry, e)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tvar a = this.toArray();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\treturn forEach(a, action);\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\ta.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn forEach(this.getEnumerator(), action);\r\n\t\t}\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<T>>(\r\n\t\ttarget:TTarget,\r\n\t\tindex:number = 0):TTarget\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException('target');\r\n\r\n\t\tvar count = this.getCount(), newLength = count + index;\r\n\t\tif(target.length<newLength) target.length = newLength;\r\n\r\n\t\tvar e = this.getEnumerator();\r\n\t\twhile(e.moveNext()) // Disposes when finished.\r\n\t\t{\r\n\t\t\ttarget[index++] = <any>e.current;\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar count = this.getCount();\r\n\t\treturn this.copyTo(count>65536 ? new Array<T>(count) : []);\r\n\t}\r\n\r\n\tprivate _linq:ILinqEnumerable<T>;\r\n\r\n\t/**\r\n\t * .linq will return an ILinqEnumerable if .linqAsync() has completed successfully or the default module loader is NodeJS+CommonJS.\r\n\t * @returns {ILinqEnumerable}\r\n\t */\r\n\tget linq():ILinqEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tvar e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\t\t\tif(!isNodeJS || !isCommonJS)\r\n\t\t\t\tthrow `using .linq to load and initialize a ILinqEnumerable is currently only supported within a NodeJS environment.\r\nImport System.Linq/Linq and use Enumerable.from(e) instead.\r\nOr use .linqAsync(callback) for AMD/RequireJS.`;\r\n\r\n\t\t\tthis._linq = e = eval(\"require\")(LINQ_PATH).default.from(this);\r\n\t\t}\r\n\r\n\t\treturn e;\r\n\t}\r\n\r\n\t/**\r\n\t * .linqAsync() is for use with deferred loading.\r\n\t * Ensures an instance of the Linq extensions is available and then passes it to the callback.\r\n\t * Returns an ILinqEnumerable if one is already available, otherwise undefined.\r\n\t * Passing no parameters will still initiate loading and initializing the ILinqEnumerable which can be useful for pre-loading.\r\n\t * Any call to .linqAsync() where an ILinqEnumerable is returned can be assured that any subsequent calls to .linq will return the same instance.\r\n\t * @param callback\r\n\t * @returns {ILinqEnumerable}\r\n\t */\r\n\tlinqAsync(callback?:(linq:ILinqEnumerable<T>)=>void):ILinqEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tvar e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\t\t\tif(isRequireJS)\r\n\t\t\t{\r\n\t\t\t\teval(\"require\")([LINQ_PATH], (linq:any)=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Could end up being called more than once, be sure to check for ._linq before setting...\r\n\t\t\t\t\te = this._linq;\r\n\t\t\t\t\tif(!e) this._linq = e = linq.default.from(this);\r\n\t\t\t\t\tif(callback) callback(e);\r\n\t\t\t\t\tcallback = void 0; // In case this is return synchronously..\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if(isNodeJS && isCommonJS)\r\n\t\t\t{\r\n\t\t\t\te = this.linq;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow \"Cannot find a compatible loader for importing System.Linq/Linq\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(e && callback) callback(e);\r\n\r\n\t\treturn e;\r\n\t}\r\n}\r\n\r\ndeclare var require:any;\r\n"]}