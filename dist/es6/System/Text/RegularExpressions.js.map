{"version":3,"sources":["System/Text/RegularExpressions.ts"],"names":[],"mappings":"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","file":"System/Text/RegularExpressions.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Named groups based on: http://trentrichardson.com/2011/08/02/javascript-regexp-match-named-captures/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n// NOTE: Avoid real (types/interfaces only = ok) dependencies so this class can be used cleanly.\r\nimport {IMap} from \"../Collections/Dictionaries/IDictionary\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {Selector} from \"../FunctionTypes\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst EMPTY:string = \"\";\r\nconst UNDEFINED:string = \"undefined\";\r\nconst _I = 'i', _G = 'g', _M = 'm', _U = 'u', _W = 'w', _Y = 'y';\r\n\r\n\r\n/**\r\n * https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regexoptions%28v=vs.110%29.aspx\r\n */\r\nexport module RegexOptions\r\n{\r\n\t/**\r\n\t * Specifies case-insensitive matching. For more information, see the \"Case-Insensitive Matching \" section in the Regular Expression Options topic.\r\n\t */\r\n\texport const IGNORE_CASE:string = _I;\r\n\texport const I:string = _I;\r\n\r\n\t/**\r\n\t * Specifies global matching instead of single.\r\n\t */\r\n\texport const GLOBAL:string = _G;\r\n\texport const G:string = _G;\r\n\r\n\t/**\r\n\t * treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)\r\n\t */\r\n\texport const MULTI_LINE:string = _M;\r\n\texport const M:string = _M;\r\n\r\n\t/**\r\n\t * treat pattern as a sequence of unicode code points\r\n\t */\r\n\texport const UNICODE:string = _U;\r\n\texport const U:string = _U;\r\n\r\n\t/**\r\n\t * matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).\r\n\t */\r\n\texport const STICKY:string = _Y;\r\n\texport const Y:string = _Y;\r\n\r\n\t/**\r\n\t * Modifies the pattern to ignore standard whitespace characters.\r\n\t */\r\n\texport const IGNORE_PATTERN_WHITESPACE:string = _W;\r\n\texport const W:string = _W;\r\n\r\n\texport type Global = 'g';\r\n\texport type IgnoreCase = 'i';\r\n\texport type MultiLine = 'm';\r\n\texport type Unicode = 'u';\r\n\texport type Sticky = 'y';\r\n\texport type IgnorePatternWhitespace = \"w\";\r\n\r\n\texport type Literal = Global | IgnoreCase | MultiLine | Unicode | Sticky | IgnorePatternWhitespace;\r\n}\r\n\r\nexport interface MatchEvaluator extends Selector<Match,Primitive>\r\n{\r\n}\r\n\r\nexport class Regex\r\n{\r\n\tprivate _re:RegExp;\r\n\tprivate _keys:string[];\r\n\r\n\tconstructor(\r\n\t\tpattern:string|RegExp,\r\n\t\toptions?:RegexOptions.Literal|RegexOptions.Literal[],\r\n\t\t...extra:RegexOptions.Literal[])\r\n\t{\r\n\t\tif(!pattern) throw new Error(\"'pattern' cannot be null or empty.\");\r\n\r\n\t\tvar patternString:string,\r\n\t\t    flags:string\r\n\t\t\t    = (options && (Array.isArray(options) ? options : [options]).concat(extra) || extra)\r\n\t\t\t    .join(EMPTY)\r\n\t\t\t    .toLowerCase();\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tlet p = <RegExp>pattern;\r\n\t\t\tif(p.ignoreCase && flags.indexOf(_I)=== -1)\r\n\t\t\t\tflags += _I;\r\n\t\t\tif(p.multiline && flags.indexOf(_M)=== -1)\r\n\t\t\t\tflags += _M;\r\n\t\t\tpatternString = p.source;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpatternString = pattern;\r\n\t\t}\r\n\t\tvar ignoreWhiteSpace = flags.indexOf(_W)!= -1;\r\n\r\n\t\t// For the majority of expected behavior, we need to eliminate global and whitespace ignore.\r\n\t\tflags = flags.replace(/[gw]/g, EMPTY);\r\n\r\n\t\t// find the keys inside the pattern, and place in mapping array {0:'key1', 1:'key2', ...}\r\n\t\tvar keys:string[] = [];\r\n\t\t{\r\n\t\t\tlet k = patternString.match(/(?!\\(\\?<)(\\w+)(?=>)/g);\r\n\t\t\tif(k)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0, len = k.length; i<len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tkeys[i + 1] = k[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove keys from regexp leaving standard regexp\r\n\t\t\t\tpatternString = patternString.replace(/\\?<\\w+>/g, EMPTY);\r\n\t\t\t\tthis._keys = keys;\r\n\t\t\t}\r\n\r\n\t\t\tif(ignoreWhiteSpace)\r\n\t\t\t\tpatternString = patternString.replace(/\\s+/g, \"\\\\s*\");\r\n\r\n\t\t\tthis._re = new RegExp(patternString, flags);\r\n\r\n\t\t}\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\tmatch(input:string, startIndex:number = 0):Match\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar r:RegExpExecArray;\r\n\t\tif(!input\r\n\t\t\t|| startIndex>=input.length\r\n\t\t\t|| !(r = this._re.exec(input.substring(startIndex))))\r\n\t\t\treturn Match.Empty;\r\n\r\n\t\tif(!(startIndex>0)) startIndex = 0;\r\n\r\n\t\tvar first                = startIndex + r.index,\r\n\t\t    loc                  = first,\r\n\t\t    groups:Group[]       = [],\r\n\t\t    groupMap:IMap<Group> = {};\r\n\r\n\t\tfor(let i = 0, len = r.length; i<len; ++i)\r\n\t\t{\r\n\t\t\tlet text = r[i];\r\n\t\t\tlet g = EmptyGroup;\r\n\t\t\tif(text!==null || text!== void 0)\r\n\t\t\t{\r\n\t\t\t\t// Empty string might mean \\b match or similar.\r\n\t\t\t\tg = new Group(text, loc);\r\n\t\t\t\tg.freeze();\r\n\t\t\t}\r\n\t\t\tif(i && _._keys && i<_._keys.length) groupMap[_._keys[i]] = g;\r\n\t\t\tgroups.push(g);\r\n\t\t\tif(i!==0) loc += text.length;\r\n\t\t}\r\n\r\n\t\tvar m = new Match(r[0], first, groups, groupMap);\r\n\t\tm.freeze();\r\n\t\treturn m;\r\n\t}\r\n\r\n\tmatches(input:string):Match[]\r\n\t{\r\n\t\tvar matches:Match[] = [], m:Match, p = 0, end = input && input.length || 0;\r\n\t\twhile(p<end && (m = this.match(input, p)) && m.success)\r\n\t\t{\r\n\t\t\tmatches.push(m);\r\n\t\t\tp = m.index + m.length;\r\n\t\t}\r\n\t\treturn Object.freeze(matches);\r\n\t}\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\treplacement:Primitive,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tevaluator:MatchEvaluator,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tr:any,\r\n\t\tcount:number = Infinity):string\r\n\t{\r\n\t\tif(!input || r===null || r=== void 0 || !(count>0)) return input;\r\n\t\tvar result:string[] = [];\r\n\t\tvar p = 0, end = input.length, isEvaluator = typeof r==\"function\";\r\n\r\n\t\tvar m:Match, i:number = 0;\r\n\t\twhile(i<count && p<end && (m = this.match(input, p)) && m.success)\r\n\t\t{\r\n\t\t\tlet {index, length} = m;\r\n\t\t\tif(p!==index) result.push(input.substring(p, index));\r\n\t\t\tresult.push(isEvaluator ? r(m, i++) : r);\r\n\t\t\tp = index + length;\r\n\t\t}\r\n\r\n\t\tif(p<end) result.push(input.substring(p));\r\n\r\n\t\treturn result.join(EMPTY);\r\n\t}\r\n\r\n\tisMatch(input:string):boolean\r\n\t{\r\n\t\treturn this._re.test(input);\r\n\t}\r\n\r\n\tstatic isMatch(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\toptions?:RegexOptions.Literal[]):boolean\r\n\t{\r\n\t\tvar r = new Regex(pattern, options);\r\n\t\treturn r.isMatch(input);\r\n\t}\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\treplacement:string,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\tevaluator:MatchEvaluator,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\te:any,\r\n\t\toptions?:RegexOptions.Literal[]):string\r\n\t{\r\n\t\tvar r = new Regex(pattern, options);\r\n\t\treturn r.replace(input, e);\r\n\t}\r\n}\r\n\r\nexport class Capture\r\n{\r\n\r\n\tget length():number\r\n\t{\r\n\t\tvar v = this.value;\r\n\t\treturn v && v.length || 0;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tpublic value:string = EMPTY,\r\n\t\tpublic index:number = -1)\r\n\t{\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tObject.freeze(this);\r\n\t}\r\n}\r\n\r\nexport class Group extends Capture\r\n{\r\n\tget success():boolean\r\n\t{\r\n\t\treturn this.index!= -1;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tvalue:string = EMPTY,\r\n\t\tindex:number = -1)\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tstatic get Empty():Group\r\n\t{\r\n\t\treturn EmptyGroup;\r\n\t}\r\n\r\n}\r\nconst EmptyGroup = new Group();\r\nEmptyGroup.freeze();\r\n\r\nexport class Match extends Group\r\n{\r\n\r\n\tconstructor(\r\n\t\tvalue:string = EMPTY,\r\n\t\tindex:number = -1,\r\n\t\tpublic groups:Group[] = [],\r\n\t\tpublic namedGroups:IMap<Group> = {})\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tif(!this.groups) throw new Error(\"'groups' cannot be null.\");\r\n\t\tif(!this.namedGroups) throw new Error(\"'groupMap' cannot be null.\");\r\n\t\tObject.freeze(this.groups.slice());\r\n\t\tObject.freeze(this.namedGroups);\r\n\t\tsuper.freeze();\r\n\t}\r\n\r\n\tstatic get Empty():Match\r\n\t{\r\n\t\treturn EmptyMatch;\r\n\t}\r\n}\r\nconst EmptyMatch = new Match();\r\nEmptyMatch.freeze();\r\n\r\n\r\nexport default Regex;"]}