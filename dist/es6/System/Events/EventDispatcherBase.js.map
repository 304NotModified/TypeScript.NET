{"version":3,"sources":["System/Events/EventDispatcherBase.ts"],"names":[],"mappings":"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","file":"EventDispatcherBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport * as AU from \"../Collections/Array/Utility\";\r\nimport {shallowCopy} from \"../Utility/shallowCopy\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {dispose} from \"../Disposable/dispose\";\r\nimport {IEventListener} from \"./IEventListener\";\r\nimport {EventDispatcherEntry} from \"./EventDispatcherEntry\";\r\nimport {IEventDispatcher} from \"./IEventDispatcher\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst DISPOSING:string = 'disposing',\r\n      DISPOSED:string  = 'disposed';\r\n\r\n// The following interfaces are exported for sub class implementation.\r\n\r\nexport interface IEventBase<TTarget>\r\n{\r\n\ttype:string;\r\n\ttarget:TTarget;\r\n}\r\n\r\nexport interface IEvent extends IEventBase<any>\r\n{\r\n\r\n}\r\n\r\nexport interface IEntryParams\r\n{\r\n\tpriority:number;\r\n\tdispatcher:EventDispatcherBase;\r\n}\r\n\r\nfunction entryFinalizer()\r\n{\r\n\tvar p:IEntryParams = this.params;\r\n\tp.dispatcher.removeEntry(this);\r\n\t(<any>p).dispatcher = null;\r\n}\r\n\r\nexport default\r\nclass EventDispatcherBase extends DisposableBase implements IEventDispatcher\r\n{\r\n\r\n\tprotected _entries:EventDispatcherEntry<IEntryParams>[];\r\n\r\n\taddEventListener(\r\n\t\ttype:string,\r\n\t\tlistener:IEventListener,\r\n\t\tpriority:number = 0):void\r\n\t{\r\n\t\tvar e = this._entries;\r\n\t\tif(!e) this._entries = e = [];\r\n\r\n\t\t// flash/vibe.js means of adding is indiscriminate and will double add listeners...\r\n\t\t// we can then avoid double adds by including a 'registerEventListener' method.\r\n\t\te.push(\r\n\t\t\tnew EventDispatcherEntry(type, listener, {\r\n\t\t\t\t\tpriority: priority || 0,\r\n\t\t\t\t\tdispatcher: this\r\n\t\t\t\t},\r\n\t\t\t\tentryFinalizer));\r\n\t}\r\n\r\n\tremoveEntry(entry:EventDispatcherEntry<IEntryParams>):boolean\r\n\t{\r\n\t\treturn !!this._entries && AU.remove(this._entries, entry)!=0;\r\n\t}\r\n\r\n\t// Allow for simple add once mechanism.\r\n\tregisterEventListener(\r\n\t\ttype:string,\r\n\t\tlistener:IEventListener,\r\n\t\tpriority:number = 0):void//, useWeakReference: boolean= false)\r\n\t{\r\n\t\tif(!this.hasEventListener(type, listener))\r\n\t\t\tthis.addEventListener(type, listener, priority);\r\n\t}\r\n\r\n\thasEventListener(type:string, listener?:IEventListener):boolean\r\n\t{\r\n\t\tvar e = this._entries;\r\n\t\treturn e && e.some(\r\n\t\t\t\t(value:EventDispatcherEntry<IEntryParams>):boolean =>\r\n\t\t\t\ttype==value.type && (!listener || listener==value.listener)\r\n\t\t\t);\r\n\t}\r\n\r\n\tremoveEventListener(\r\n\t\ttype:string,\r\n\t\tlistener:IEventListener):void\r\n\t{\r\n\t\tdispose.these(this._entries.filter(entry=> entry.matches(type, listener)));\r\n\t}\r\n\r\n\tdispatchEvent(type:string, params?:any):boolean;\r\n\tdispatchEvent(event:IEvent):boolean;\r\n\tdispatchEvent(e:any, params?:any):boolean\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\r\n\r\n\t\tvar l = _._entries;\r\n\t\tif(!l || !l.length)\r\n\t\t\treturn false;\r\n\r\n\t\tvar event:IEventBase<any>;\r\n\r\n\t\tif(typeof e==\"string\")\r\n\t\t{\r\n\t\t\tevent = <any>(Event && Object.create(Event) || {});\r\n\t\t\tif(!params)\r\n\t\t\t\tparams = {};\r\n\t\t\tif(params['cancellable'])\r\n\t\t\t\t(<any>event).cancellable = true;\r\n\t\t\tevent.target = _;\r\n\t\t\tevent.type = e;\r\n\t\t}\r\n\t\telse\r\n\t\t\tevent = e;\r\n\r\n\t\tvar type = event.type;\r\n\r\n\t\t// noinspection JSMismatchedCollectionQueryUpdate\r\n\t\tvar entries:EventDispatcherEntry<IEntryParams>[] = l.filter(e=>e.type==type);//, propagate = true, prevent = false;\r\n\t\tif(!entries.length)\r\n\t\t\treturn false;\r\n\r\n\t\tentries.sort((a, b)=>\r\n\t\t\t(b.params ? b.params.priority : 0)\r\n\t\t\t- (a.params ? a.params.priority : 0)\r\n\t\t);\r\n\r\n\t\t// For now... Just use simple...\r\n\t\tentries.forEach(\r\n\t\t\tentry=>\r\n\t\t\t{\r\n\t\t\t\tvar newEvent:any = Object.create(Event);\r\n\t\t\t\tshallowCopy(event, newEvent);\r\n\t\t\t\tnewEvent.target = this;\r\n\t\t\t\tentry.dispatch(newEvent);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tstatic get DISPOSING() { return DISPOSING; }\r\n\r\n\tstatic get DISPOSED() { return DISPOSED; }\r\n\r\n\t// When dispatching events, we need a way to prevent recursion when disposing.\r\n\tprivate _isDisposing:boolean = false;\r\n\tget isDisposing():boolean\r\n\t{\r\n\t\treturn this._isDisposing;\r\n\t}\r\n\r\n\t// Override the public method here since EventDispatcher will end up doing things a bit differently from here on.\r\n\tpublic dispose()\r\n\t{\r\n\r\n\t\t// Having a disposing event can allow for child objects to automatically release themselves when their parent is disposed.\r\n\t\tconst _ = this;\r\n\t\tif(!_.wasDisposed && !_._isDisposing)\r\n\t\t{\r\n\t\t\t_._isDisposing = true;\r\n\t\t\t_.dispatchEvent(DISPOSING);\r\n\r\n\t\t\tsuper.dispose();\r\n\r\n\t\t\t_.dispatchEvent(DISPOSED);\r\n\r\n\t\t\tvar l = _._entries;\r\n\t\t\tif(l)\r\n\t\t\t{\r\n\t\t\t\tthis._entries = <any>null;\r\n\t\t\t\tl.forEach(e=> e.dispose());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n"]}