{"version":3,"sources":["System/Serialization/Utility.ts"],"names":[],"mappings":"AAAA;;;GAGG;OAEI,EAAC,IAAI,EAAC,MAAM,UAAU;OACtB,EAAC,yBAAyB,EAAC,MAAM,yCAAyC;AAKjF,MAAM,KAAK,GAAG,EAAE,EAAE,IAAI,GAAG,MAAM,EAAE,KAAK,GAAG,OAAO,CAAC;AAEjD,yBACC,KAA6B,EAC7B,iBAAyB;IAGzB,IAAI,CAAC,GAAQ,KAAK,CAAC;IACnB,MAAM,CAAA,CAAC,OAAO,CAAC,CAAC,CAChB,CAAC;QACA,KAAK,IAAI,CAAC,SAAS,CAAC;QACpB,KAAK,IAAI,CAAC,MAAM;YACf,MAAM,CAAC,CAAC,CAAC;QACV,KAAK,IAAI,CAAC,OAAO;YAChB,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;QACzB,KAAK,IAAI,CAAC,MAAM;YACf,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;QAClB;YAEC,EAAE,CAAA,CAAC,CAAC,KAAG,IAAI,CAAC;gBACX,MAAM,CAAC,CAAC,CAAC;YAEV,EAAE,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;YACtB,IAAI,CAAC,EAAE,CAAA,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,iBAAiB,CAAC;YAE1B,IAAI,EAAE,GAAG,IAAI,yBAAyB,CAAC,8CAA8C,CAAC,CAAC;YACvF,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACrB,MAAM,EAAE,CAAC;IAEX,CAAC;AAEF,CAAC;AAED,+BAA+B,QAAY;IAC1C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAgB,QAAQ,EAAC,WAAW,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAChF,CAAC;AAED,4BACC,KAAY,EACZ,eAAwB,EACxB,cAAkC;IAIlC,EAAE,CAAA,CAAC,KAAK,CAAC,CACT,CAAC;QACA,EAAE,CAAA,CAAC,eAAe,CAAC;YAAC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAEhD,MAAM,CAAA,CAAC,KAAK,CAAC,CACb,CAAC;YACA,KAAK,MAAM;gBACV,MAAM,CAAC,IAAI,CAAC;YACb,KAAK,IAAI,CAAC,SAAS;gBAClB,MAAM,CAAC,SAAS,CAAC;YAClB,KAAK,IAAI;gBACR,MAAM,CAAC,IAAI,CAAC;YACb,KAAK,KAAK;gBACT,MAAM,CAAC,KAAK,CAAC;YACd;gBAEC,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,EAAC,KAAK,CAAC,CAAC;gBAClD,EAAE,CAAA,CAAC,OAAO,CAAC,CAAC,CAAC;oBAEZ,EAAE,CAAA,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC3B,IAAI,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;wBAC5B,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAAC,MAAM,CAAC,GAAG,CAAC;oBAC5B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,IAAI,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;wBAC/B,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;4BAAC,MAAM,CAAC,MAAM,CAAC;oBAClC,CAAC;gBAEF,CAAC;gBAKD,EAAE,CAAA,CAAC,cAAc,CAAC;oBAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBAEjD,KAAK,CAAC;QACR,CAAC;IAEF,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AAEd,CAAC","file":"System/Serialization/Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ISerializable} from \"./ISerializable\";\r\nimport {Primitive} from \"../Primitive\";\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tvar v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.UNDEFINED:\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v===null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(arguments.length>1)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tvar ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable {\r\n\treturn Type.hasMemberOfType<ISerializable>(instance,'serialize',Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn undefined;\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tvar cleaned = value.replace(/^\\s+|,|\\s+$/g,EMPTY);\r\n\t\t\t\tif(cleaned) {\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned)) {\r\n\t\t\t\t\t\tvar int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}