{"version":3,"sources":["System/Observable/SubscribableBase.ts"],"names":[],"mappings":"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","file":"SubscribableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {dispose} from \"../Disposable/dispose\";\r\nimport {Subscription} from \"./Subscription\";\r\nimport {ILinkedNodeWithValue} from \"../Collections/ILinkedListNode\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\nexport class SubscribableBase<TSubscriber>\r\nextends DisposableBase\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]|null\r\n\t{\r\n\t\tvar s = this.__subscriptions;\r\n\t\treturn s\r\n\t\t\t? s.map(node=><TSubscriber>(node && node.value && node.value.subscriber))\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>|null\r\n\t{\r\n\t\tvar s = this.__subscriptions;\r\n\t\treturn s && s.find(n=>!!n.value && n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn <IDisposable>n.value;\r\n\r\n\t\tvar _s = _.__subscriptions;\r\n\t\tif(!_s) _.__subscriptions = _s\r\n\t\t\t= new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_s.addNode({value: s});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t// _.throwIfDisposed(); If it was disposed, then it's still safe to try and unsubscribe.\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\t_.__subscriptions.removeNode(n);\r\n\t\t\tif(s) s.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]|null\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar _s = _.__subscriptions;\r\n\t\tif(!_s) return null;\r\n\t\tvar s = _s.map(n=>n.value);\r\n\t\tvar u = returnSubscribers ? s.map(o=>o!.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tdispose.these(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._unsubscribeAll();\r\n\t\tvar s = this.__subscriptions;\r\n\t\tthis.__subscriptions = <any>null;\r\n\t\tdispose(s);\r\n\t}\r\n\r\n}\r\n\r\nexport default SubscribableBase;\r\n"]}