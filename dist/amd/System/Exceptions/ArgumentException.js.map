{"version":3,"sources":["System/Exceptions/ArgumentException.js","System/Exceptions/ArgumentException.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","SystemException_1","NAME","ArgumentException","_super","ArgumentException.constructor","ArgumentException.getName","ArgumentException.toString","defineProperty","value"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,qBAAsB,SAAUC,EAASC,EAASC,GCChF,GAAMC,GAAc,oBAEpBC,EAAA,SAAAC,GAOCD,QAAAA,GACCA,EACAA,EACAA,GADAE,SAAAA,IAAAA,EAAAA,MACAA,SAAAA,IAAAA,EAAAA,MAEAA,KAAKA,UAAYA,EACjBA,EAAAA,KAAAA,KAAMA,EAASA,GAiBjBF,MA7BgCA,WAAAA,EAAAA,GAgBrBA,EAAAA,UAAAA,QAAVA,WAECG,MAAOA,IAGRH,EAAAA,UAAAA,SAAAA,WAECI,GAAIA,GAAIA,KAAMA,EAAKA,EAAEA,SAGrBA,OAFAA,GAAKA,EAAMA,IAAMA,EAAKA,KAAQA,GAEvBA,IAAMA,EAAEA,KAAOA,KAAOA,EAAKA,EAAEA,QAAUA,KAGhDJ,GA7BgCF,EAAAA,WADhCL,QAAAY,eAAAR,EAAA,cAAAS,OAAA,IDkBIT,EAAAA,WAAkBG","file":"System/Exceptions/ArgumentException.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine([\"require\", \"exports\", './SystemException'], function (require, exports, SystemException_1) {\r\n    var NAME = 'ArgumentException';\r\n    var ArgumentException = (function (_super) {\r\n        __extends(ArgumentException, _super);\r\n        function ArgumentException(paramName, message, innerException) {\r\n            if (message === void 0) { message = null; }\r\n            if (innerException === void 0) { innerException = null; }\r\n            this.paramName = paramName;\r\n            _super.call(this, message, innerException);\r\n        }\r\n        ArgumentException.prototype.getName = function () {\r\n            return NAME;\r\n        };\r\n        ArgumentException.prototype.toString = function () {\r\n            var _ = this, pn = _.paramName;\r\n            pn = pn ? ('{' + pn + '} ') : '';\r\n            return '[' + _.name + ': ' + pn + _.message + ']';\r\n        };\r\n        return ArgumentException;\r\n    })(SystemException_1.default);\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = ArgumentException;\r\n});\r\n//# sourceMappingURL=ArgumentException.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\nimport Type from '../Types';\r\nimport Exception from '../Exception';\r\nimport SystemException from './SystemException';\r\n\r\n\r\nconst NAME:string = 'ArgumentException';\r\n\r\nexport default\r\nclass ArgumentException extends SystemException\r\n{\r\n\r\n\tparamName:string;\r\n\r\n\t// For simplicity and consistency, lets stick with 1 signature.\r\n\tconstructor(\r\n\t\tparamName:string,\r\n\t\tmessage:string = null,\r\n\t\tinnerException:Exception = null)\r\n\t{\r\n\t\tthis.paramName = paramName;\r\n\t\tsuper(message, innerException);\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\tvar _ = this, pn = _.paramName;\r\n\t\tpn = pn ? ('{' + pn + '} ') : '';\r\n\r\n\t\treturn '[' + _.name + ': ' + pn + _.message + ']';\r\n\t}\r\n\r\n}\r\n"]}