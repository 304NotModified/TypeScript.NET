{"version":3,"sources":["System/Uri/QueryBuilder.js","System/Uri/QueryBuilder.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Types_1","QueryParams","OrderedStringKeyDictionary_1","Enumerator_1","QueryBuilder","_super","query","decodeValues","call","importQuery","init","isString","importFromString","Array","isArray","isEnumerable","importPairs","importMap","values","deserialize","_","parse","key","value","containsKey","prev","getValue","push","setValue","encode","prefixIfNotEmpty","toString","defineProperty"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,WAAY,gBAAiB,yDAA0D,yCAA0C,SAAUC,EAASC,EAASC,EAASC,EAAaC,EAA8BC,GCA/O,YAcA,IAAAC,GAAA,SAAAC,GAIC,QAAAD,GACCE,EACAC,GAAA,SAAAA,IAAAA,GAAA,GAEAF,EAAAG,KAAArB,MAEAA,KAAKsB,YAAYH,EAAMC,GA8EzB,MAvF2BrB,WAAAkB,EAAAC,GAanBD,EAAAM,KAAP,SACCJ,EACAC,GAEA,MAFA,UAAAA,IAAAA,GAAA,GAEO,GAAIH,GAAaE,EAAOC,IAGhCH,EAAAV,UAAAe,YAAA,SACCH,EACAC,GAeA,MAfA,UAAAA,IAAAA,GAAA,GAEGP,EAAAA,WAAKW,SAASL,GAEhBnB,KAAKyB,iBAAyBN,EAAOC,GAE9BM,MAAMC,QAAQR,IAAUH,EAAAY,aAAaT,GAE5CnB,KAAK6B,YAAYV,GAIjBnB,KAAK8B,UAA4BX,GAG3BnB,MAURiB,EAAAV,UAAAkB,iBAAA,SACCM,EACAC,EACAZ,GADA,SAAAY,IAAAA,GAAA,GACA,SAAAZ,IAAAA,GAAA,EAEA,IAAIa,GAAIjC,IAkBR,OAjBAc,GAAYoB,MAAMH,EACjB,SAACI,EAAKC,GAEL,GAAGH,EAAEI,YAAYF,GACjB,CACC,GAAIG,GAAOL,EAAEM,SAASJ,EACnBT,OAAMC,QAAQW,GAChBA,EAAKE,KAAKJ,GAEVH,EAAEQ,SAASN,GAAyBG,EAAMF,QAG3CH,GAAEQ,SAASN,EAAKC,IAElBJ,EACAZ,GAEMpB,MAQRiB,EAAAV,UAAAmC,OAAA,SAAOC,GAEN,MAAO7B,GAAY4B,OAAO1C,KAAM2C,IAGjC1B,EAAAV,UAAAqC,SAAA,WAEC,MAAO5C,MAAK0C,UAEdzB,GAvF2BF,EAAAA,WAD3BP,QAAAqC,eAAAjC,EAAA,cAAAwB,OAAA,IDsCIxB,EAAAA,WAAkBK","file":"System/Uri/QueryBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../Types', './QueryParams', '../Collections/Dictionaries/OrderedStringKeyDictionary', '../Collections/Enumeration/Enumerator'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Types_1 = require('../Types');\r\n    var QueryParams = require('./QueryParams');\r\n    var OrderedStringKeyDictionary_1 = require('../Collections/Dictionaries/OrderedStringKeyDictionary');\r\n    var Enumerator_1 = require('../Collections/Enumeration/Enumerator');\r\n    var QueryBuilder = (function (_super) {\r\n        __extends(QueryBuilder, _super);\r\n        function QueryBuilder(query, decodeValues) {\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            _super.call(this);\r\n            this.importQuery(query, decodeValues);\r\n        }\r\n        QueryBuilder.init = function (query, decodeValues) {\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            return new QueryBuilder(query, decodeValues);\r\n        };\r\n        QueryBuilder.prototype.importQuery = function (query, decodeValues) {\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            if (Types_1.default.isString(query)) {\r\n                this.importFromString(query, decodeValues);\r\n            }\r\n            else if (Array.isArray(query) || Enumerator_1.isEnumerable(query)) {\r\n                this.importPairs(query);\r\n            }\r\n            else {\r\n                this.importMap(query);\r\n            }\r\n            return this;\r\n        };\r\n        QueryBuilder.prototype.importFromString = function (values, deserialize, decodeValues) {\r\n            if (deserialize === void 0) { deserialize = true; }\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            var _ = this;\r\n            QueryParams.parse(values, function (key, value) {\r\n                if (_.containsKey(key)) {\r\n                    var prev = _.getValue(key);\r\n                    if (Array.isArray(prev))\r\n                        prev.push(value);\r\n                    else\r\n                        _.setValue(key, [prev, value]);\r\n                }\r\n                else\r\n                    _.setValue(key, value);\r\n            }, deserialize, decodeValues);\r\n            return this;\r\n        };\r\n        QueryBuilder.prototype.encode = function (prefixIfNotEmpty) {\r\n            return QueryParams.encode(this, prefixIfNotEmpty);\r\n        };\r\n        QueryBuilder.prototype.toString = function () {\r\n            return this.encode();\r\n        };\r\n        return QueryBuilder;\r\n    }(OrderedStringKeyDictionary_1.default));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = QueryBuilder;\r\n});\r\n//# sourceMappingURL=QueryBuilder.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../Serialization/ISerializable.d.ts\"/>\r\n///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport * as Serialization from '../Serialization/Utility';\r\nimport * as QueryParams from './QueryParams';\r\nimport OrderedStringKeyDictionary from '../Collections/Dictionaries/OrderedStringKeyDictionary';\r\nimport {isEnumerable} from '../Collections/Enumeration/Enumerator';\r\n\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport default\r\nclass QueryBuilder extends OrderedStringKeyDictionary<UriComponentValue|UriComponentValue[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:QueryParamsConvertible,\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query,decodeValues);\r\n\t}\r\n\r\n\r\n\tstatic init(\r\n\t\tquery:QueryParamsConvertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:QueryParamsConvertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder {\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(Array.isArray(query) || isEnumerable(query))\r\n\t\t{\r\n\t\t\tthis.importPairs(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<IUriComponentMap>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tQueryParams.parse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar prev = _.getValue(key);\r\n\t\t\t\t\tif(Array.isArray(prev))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponentValue>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\treturn QueryParams.encode(this, prefixIfNotEmpty);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n"]}