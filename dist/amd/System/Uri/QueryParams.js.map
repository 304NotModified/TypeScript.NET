{"version":3,"sources":["System/Uri/QueryParams.js","System/Uri/QueryParams.ts"],"names":["define","require","exports","Types_1","Serialization","KeyValueExtract_1","Enumerator_1","encode","values","prefixIfNotEmpty","entries","Array","isArray","isEnumerable","forEach","entry","key","value","appendKeyValue","Object","keys","length","join","ENTRY_SEPARATOR","appendKeyValueSingle","push","KEY_VALUE_SEPARATOR","encodeValue","v","isUriComponentFormattable","toUriComponent","indexOf","encodeURIComponent","toString","instance","hasMemberOfType","FUNCTION","parse","query","entryHandler","deserialize","decodeValues","replace","split","_i","entries_1","si","substring","decodeURIComponent","toPrimitive","parseToMap","result","prev","parseToArray","Separator","Entry","KeyValue","freeze"],"mappings":"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","file":"System/Uri/QueryParams.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../Types', '../Serialization/Utility', '../KeyValueExtract', '../Collections/Enumeration/Enumerator'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    ///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n    ///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n    ///<reference path=\"../Primitive.d.ts\"/>\r\n    'use strict'; // For compatibility with (let, const, function, class);\r\n    var Types_1 = require('../Types');\r\n    var Serialization = require('../Serialization/Utility');\r\n    var KeyValueExtract_1 = require('../KeyValueExtract');\r\n    var Enumerator_1 = require('../Collections/Enumeration/Enumerator');\r\n    /*\r\n     * This module is provided as a lighter weight utility for acquiring query params.\r\n     * If more detailed operations are necessary, consider importing QueryBuilder.\r\n     */\r\n    var ENTRY_SEPARATOR = \"&\", KEY_VALUE_SEPARATOR = \"=\";\r\n    /**\r\n     * Returns the encoded URI string\r\n     * @param values\r\n     * @param prefixIfNotEmpty\r\n     * @returns {string}\r\n     */\r\n    function encode(values, prefixIfNotEmpty) {\r\n        if (!values)\r\n            return '';\r\n        var entries = [];\r\n        if (Array.isArray(values) || Enumerator_1.isEnumerable(values)) {\r\n            Enumerator_1.forEach(values, function (entry) {\r\n                return KeyValueExtract_1.default(entry, function (key, value) { return appendKeyValue(entries, key, value); });\r\n            });\r\n        }\r\n        else {\r\n            Object.keys(values).forEach(function (key) { return appendKeyValue(entries, key, values[key]); });\r\n        }\r\n        return (entries.length && prefixIfNotEmpty ? '?' : '')\r\n            + entries.join(ENTRY_SEPARATOR);\r\n    }\r\n    exports.encode = encode;\r\n    function appendKeyValueSingle(entries, key, value) {\r\n        entries.push(key + KEY_VALUE_SEPARATOR + encodeValue(value));\r\n    }\r\n    // According to spec, if there is an array of values with the same key, then each value is replicated with that key.\r\n    function appendKeyValue(entries, key, value) {\r\n        if (Array.isArray(value) || Enumerator_1.isEnumerable(value)) {\r\n            Enumerator_1.forEach(value, function (v) { return appendKeyValueSingle(entries, key, v); });\r\n        }\r\n        else {\r\n            appendKeyValueSingle(entries, key, value);\r\n        }\r\n    }\r\n    /**\r\n     * Converts any primitive, serializable or uri-component object to an encoded string.\r\n     * @param value\r\n     * @returns {string}\r\n     */\r\n    function encodeValue(value) {\r\n        var v = null;\r\n        if (isUriComponentFormattable(value)) {\r\n            v = value.toUriComponent();\r\n            if (v && v.indexOf('&') != 1)\r\n                throw '.toUriComponent() did not encode the value.';\r\n        }\r\n        else {\r\n            v = encodeURIComponent(Serialization.toString(v));\r\n        }\r\n        return v;\r\n    }\r\n    exports.encodeValue = encodeValue;\r\n    /**\r\n     * A shortcut for identifying an IUriComponentFormattable object.\r\n     * @param instance\r\n     * @returns {boolean}\r\n     */\r\n    function isUriComponentFormattable(instance) {\r\n        return Types_1.default.hasMemberOfType(instance, \"toUriComponent\", Types_1.default.FUNCTION);\r\n    }\r\n    exports.isUriComponentFormattable = isUriComponentFormattable;\r\n    /**\r\n     * Parses a string for valid query param entries and pipes them through a handler.\r\n     * @param query\r\n     * @param entryHandler\r\n     * @param deserialize Default is true.\r\n     * @param decodeValues Default is true.\r\n     */\r\n    function parse(query, entryHandler, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        if (query && (query = query.replace(/^\\s*\\?+/, ''))) {\r\n            var entries = query.split(ENTRY_SEPARATOR);\r\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n                var entry = entries_1[_i];\r\n                /*\r\n                 * Since it is technically possible to have multiple '=' we need to identify the first one.\r\n                 * And if there is no '=' then the entry is ignored.\r\n                 */\r\n                var si = entry.indexOf(KEY_VALUE_SEPARATOR);\r\n                if (si != -1) {\r\n                    var key = entry.substring(0, si);\r\n                    var value = entry.substring(si + 1);\r\n                    if (decodeValues)\r\n                        value = decodeURIComponent(value);\r\n                    if (deserialize)\r\n                        value = Serialization.toPrimitive(value);\r\n                    entryHandler(key, value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.parse = parse;\r\n    /**\r\n     * Parses a string for valid query params and returns a key-value map of the entries.\r\n     * @param query\r\n     * @param deserialize Default is true.\r\n     * @param decodeValues Default is true.\r\n     * @returns {IMap<Primitive>}\r\n     */\r\n    function parseToMap(query, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        var result = {};\r\n        parse(query, function (key, value) {\r\n            if ((key) in (result)) {\r\n                var prev = result[key];\r\n                if (!(Array.isArray(prev)))\r\n                    result[key] = prev = [prev];\r\n                prev.push(value);\r\n            }\r\n            else\r\n                result[key] = value;\r\n        }, deserialize, decodeValues);\r\n        return result;\r\n    }\r\n    exports.parseToMap = parseToMap;\r\n    /**\r\n     * Parses a string for valid query params and returns a key-value pair array of the entries.\r\n     * @param query\r\n     * @param deserialize Default is true.\r\n     * @param decodeValues Default is true.\r\n     * @returns {IKeyValuePair<string, Primitive>[]}\r\n     */\r\n    function parseToArray(query, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        var result = [];\r\n        parse(query, function (key, value) { result.push({ key: key, value: value }); }, deserialize, decodeValues);\r\n        return result;\r\n    }\r\n    exports.parseToArray = parseToArray;\r\n    var Separator;\r\n    (function (Separator) {\r\n        Separator.Entry = ENTRY_SEPARATOR;\r\n        Separator.KeyValue = KEY_VALUE_SEPARATOR;\r\n    })(Separator = exports.Separator || (exports.Separator = {}));\r\n    Object.freeze(Separator);\r\n});\r\n//# sourceMappingURL=QueryParams.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport * as Serialization from '../Serialization/Utility';\r\nimport extractKeyValue from '../KeyValueExtract';\r\nimport {isEnumerable,forEach} from '../Collections/Enumeration/Enumerator';\r\n\r\n/*\r\n * This module is provided as a lighter weight utility for acquiring query params.\r\n * If more detailed operations are necessary, consider importing QueryBuilder.\r\n */\r\n\r\nconst\r\n\tENTRY_SEPARATOR = \"&\",\r\n\tKEY_VALUE_SEPARATOR = \"=\";\r\n\r\n\r\n/**\r\n * Returns the encoded URI string\r\n * @param values\r\n * @param prefixIfNotEmpty\r\n * @returns {string}\r\n */\r\nexport function encode(\r\n\tvalues:IUriComponentMap|QueryParamArray|QueryParamEnumerable,\r\n\tprefixIfNotEmpty?:boolean):string\r\n{\r\n\tif(!values) return '';\r\n\tvar entries:string[] = [];\r\n\r\n\tif(Array.isArray(values) || isEnumerable(values))\r\n\t{\r\n\t\tforEach(values, entry=>\r\n\t\t\textractKeyValue(entry,\r\n\t\t\t\t(key, value)=> appendKeyValue(entries, key, value))\r\n\t\t);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tObject.keys(values).forEach(\r\n\t\t\tkey=> appendKeyValue(entries, key, values[key])\r\n\t\t);\r\n\t}\r\n\r\n\treturn (entries.length && prefixIfNotEmpty ? '?' : '')\r\n\t\t+ entries.join(ENTRY_SEPARATOR);\r\n}\r\n\r\nfunction appendKeyValueSingle(\r\n\tentries:string[],\r\n\tkey:string,\r\n\tvalue:UriComponentValue):void\r\n{\r\n\tentries.push(key + KEY_VALUE_SEPARATOR + encodeValue(value));\r\n}\r\n\r\n// According to spec, if there is an array of values with the same key, then each value is replicated with that key.\r\nfunction appendKeyValue(\r\n\tentries:string[],\r\n\tkey:string,\r\n\tvalue:UriComponentValue|UriComponentValue[]|IEnumerable<UriComponentValue>):void\r\n{\r\n\tif(Array.isArray(value) || isEnumerable(value))\r\n\t{\r\n\t\tforEach(value, v=> appendKeyValueSingle(entries, key, v));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tappendKeyValueSingle(entries, key, value)\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts any primitive, serializable or uri-component object to an encoded string.\r\n * @param value\r\n * @returns {string}\r\n */\r\nexport function encodeValue(value:UriComponentValue):string\r\n{\r\n\tvar v:string = null;\r\n\tif(isUriComponentFormattable(value))\r\n\t{\r\n\t\tv = value.toUriComponent();\r\n\t\tif(v && v.indexOf('&')!=1)\r\n\t\t\tthrow '.toUriComponent() did not encode the value.';\r\n\t}\r\n\telse\r\n\t{\r\n\t\tv = encodeURIComponent(Serialization.toString(v));\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n/**\r\n * A shortcut for identifying an IUriComponentFormattable object.\r\n * @param instance\r\n * @returns {boolean}\r\n */\r\nexport function isUriComponentFormattable(instance:any):instance is IUriComponentFormattable\r\n{\r\n\treturn Type.hasMemberOfType<IUriComponentFormattable>(instance, \"toUriComponent\", Type.FUNCTION);\r\n}\r\n\r\n/**\r\n * Parses a string for valid query param entries and pipes them through a handler.\r\n * @param query\r\n * @param entryHandler\r\n * @param deserialize Default is true.\r\n * @param decodeValues Default is true.\r\n */\r\nexport function parse(\r\n\tquery:string,\r\n\tentryHandler:(key:string, value:Primitive)=>void,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):void\r\n{\r\n\tif(query && (query = query.replace(/^\\s*\\?+/, '')))\r\n\t{\r\n\t\tvar entries = query.split(ENTRY_SEPARATOR);\r\n\t\tfor(let entry of entries)\r\n\t\t{\r\n\t\t\t/*\r\n\t\t\t * Since it is technically possible to have multiple '=' we need to identify the first one.\r\n\t\t\t * And if there is no '=' then the entry is ignored.\r\n\t\t\t */\r\n\t\t\tvar si = entry.indexOf(KEY_VALUE_SEPARATOR);\r\n\t\t\tif(si!= -1)\r\n\t\t\t{\r\n\t\t\t\tvar key = entry.substring(0, si);\r\n\t\t\t\tvar value = <any>entry.substring(si + 1);\r\n\t\t\t\tif(decodeValues) value = decodeURIComponent(value);\r\n\t\t\t\tif(deserialize) value = Serialization.toPrimitive(value);\r\n\t\t\t\tentryHandler(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Parses a string for valid query params and returns a key-value map of the entries.\r\n * @param query\r\n * @param deserialize Default is true.\r\n * @param decodeValues Default is true.\r\n * @returns {IMap<Primitive>}\r\n */\r\nexport function parseToMap(\r\n\tquery:string,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):IMap<Primitive|Primitive[]>\r\n{\r\n\tvar result:IMap<Primitive|Primitive[]> = {};\r\n\tparse(query,\r\n\t\t(key, value)=>\r\n\t\t{\r\n\t\t\tif((key)in(result))\r\n\t\t\t{\r\n\t\t\t\tvar prev:any = result[key];\r\n\t\t\t\tif(!(Array.isArray(prev)))\r\n\t\t\t\t\tresult[key] = prev = [prev];\r\n\t\t\t\tprev.push(value);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult[key] = value;\r\n\t\t},\r\n\t\tdeserialize,\r\n\t\tdecodeValues);\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Parses a string for valid query params and returns a key-value pair array of the entries.\r\n * @param query\r\n * @param deserialize Default is true.\r\n * @param decodeValues Default is true.\r\n * @returns {IKeyValuePair<string, Primitive>[]}\r\n */\r\nexport function parseToArray(\r\n\tquery:string,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):IStringKeyValuePair<Primitive>[]\r\n{\r\n\tvar result:IStringKeyValuePair<Primitive>[] = [];\r\n\tparse(query,\r\n\t\t(key, value)=> {result.push({key: key, value: value});},\r\n\t\tdeserialize,\r\n\t\tdecodeValues\r\n\t);\r\n\treturn result;\r\n}\r\n\r\n\r\nexport module Separator\r\n{\r\n\texport const Entry:string = ENTRY_SEPARATOR;\r\n\texport const KeyValue:string = KEY_VALUE_SEPARATOR;\r\n}\r\nObject.freeze(Separator);\r\n\r\n"]}