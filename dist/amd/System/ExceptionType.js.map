{"version":3,"sources":["System/ExceptionType.js","System/ExceptionType.ts"],"names":["define","require","exports","Error","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],"mappings":";;;;AAIAA,QAAQ,UAAW,WAAY,SAAUC,EAASC,GCalDA,EAAAC,MAAQ,QAMRD,EAAAE,UAAY,YAMZF,EAAAG,WAAa,aAObH,EAAAI,eAAiB,iBAMjBJ,EAAAK,YAAc,cAMdL,EAAAM,UAAY,YAMZN,EAAAO,SAAW","file":"System/ExceptionType.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\"], function (require, exports) {\r\n    /*\r\n     * Since the 'Error' type in JavaScript is simply {name:string, message:string},\r\n     * Exception types provide a means for identifying and properly reusing 'name'.\r\n     *\r\n     * This is mostly for reference.\r\n     */\r\n    /**\r\n     * An error in the eval() function has occurred.\r\n     */\r\n    exports.Error = 'Error';\r\n    /**\r\n     * An error in the eval() function has occurred.\r\n     */\r\n    exports.EvalError = 'EvalError';\r\n    /**\r\n     * Out of range number value has occurred.\r\n     */\r\n    exports.RangeError = 'RangeError';\r\n    /**\r\n     * An illegal reference has occurred.\r\n     */\r\n    exports.ReferenceError = 'ReferenceError';\r\n    /**\r\n     * A syntax error within code inside the eval() function has occurred. All other syntax errors are not caught by try/catch/finally, and will trigger the default browser error message associated with the error. To catch actual syntax errors, you may use the onerror event.\r\n     */\r\n    exports.SyntaxError = 'SyntaxError';\r\n    /**\r\n     * An error in the expected variable type has occurred.\r\n     */\r\n    exports.TypeError = 'TypeError';\r\n    /**\r\n     * An error when encoding or decoding the URI has occurred (ie: when calling encodeURI()).\r\n     */\r\n    exports.URIError = 'URIError';\r\n});\r\n//# sourceMappingURL=ExceptionType.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/*\r\n * Since the 'Error' type in JavaScript is simply {name:string, message:string},\r\n * Exception types provide a means for identifying and properly reusing 'name'.\r\n *\r\n * This is mostly for reference.\r\n */\r\n\r\n\r\n/**\r\n * An error in the eval() function has occurred.\r\n */\r\nexport const\r\nError = 'Error';\r\n\r\n/**\r\n * An error in the eval() function has occurred.\r\n */\r\nexport const\r\nEvalError = 'EvalError';\r\n\r\n/**\r\n * Out of range number value has occurred.\r\n */\r\nexport const\r\nRangeError = 'RangeError';\r\n\r\n\r\n/**\r\n * An illegal reference has occurred.\r\n */\r\nexport const\r\nReferenceError = 'ReferenceError';\r\n\r\n/**\r\n * A syntax error within code inside the eval() function has occurred. All other syntax errors are not caught by try/catch/finally, and will trigger the default browser error message associated with the error. To catch actual syntax errors, you may use the onerror event.\r\n */\r\nexport const\r\nSyntaxError = 'SyntaxError';\r\n\r\n/**\r\n * An error in the expected variable type has occurred.\r\n */\r\nexport const\r\nTypeError = 'TypeError';\r\n\r\n/**\r\n * An error when encoding or decoding the URI has occurred (ie: when calling encodeURI()).\r\n */\r\nexport const\r\nURIError = 'URIError';\r\n\r\n"]}