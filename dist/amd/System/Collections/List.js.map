{"version":3,"sources":["System/Collections/List.js","System/Collections/List.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Compare_1","Utility_1","Enumerator_1","Types_1","ArrayEnumerator_1","CollectionBase_1","List","_super","source","equalityComparer","areEqual","call","_","Array","isArray","_source","slice","_importEntries","getCount","length","_addInternal","entry","push","_removeInternal","max","Infinity","remove","_equalityComparer","_clearInternal","len","entries","isArrayLike","s","first","i","get","index","set","value","_onModified","indexOf","item","insert","splice","removeAt","removeIndex","contains","copyTo","target","getEnumerator","forEach","action","useCopy","defineProperty"],"mappings":"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","file":"System/Collections/List.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Compare\", \"./Array/Utility\", \"./Enumeration/Enumerator\", \"../Types\", \"./Enumeration/ArrayEnumerator\", \"./CollectionBase\"], function (require, exports, Compare_1, Utility_1, Enumerator_1, Types_1, ArrayEnumerator_1, CollectionBase_1) {\n    \"use strict\";\n    var List = (function (_super) {\n        __extends(List, _super);\n        function List(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            if (Array.isArray(source)) {\n                _._source = source.slice();\n            }\n            else {\n                _._source = [];\n                _._importEntries(source);\n            }\n        }\n        List.prototype.getCount = function () {\n            return this._source.length;\n        };\n        List.prototype._addInternal = function (entry) {\n            this._source.push(entry);\n            return true;\n        };\n        List.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            return Utility_1.remove(this._source, entry, max, this._equalityComparer);\n        };\n        List.prototype._clearInternal = function () {\n            var len = this._source.length;\n            this._source.length = 0;\n            return len;\n        };\n        List.prototype._importEntries = function (entries) {\n            if (Types_1.default.isArrayLike(entries)) {\n                var len = entries.length;\n                if (!len)\n                    return 0;\n                var s = this._source;\n                var first = s.length;\n                s.length += len;\n                for (var i = 0; i < len; i++) {\n                    s[i + first] = entries[i];\n                }\n                return len;\n            }\n            else {\n                return _super.prototype._importEntries.call(this, entries);\n            }\n        };\n        List.prototype.get = function (index) {\n            return this._source[index];\n        };\n        List.prototype.set = function (index, value) {\n            var s = this._source;\n            if (index < s.length && Compare_1.areEqual(value, s[index]))\n                return false;\n            s[index] = value;\n            this._onModified();\n            return true;\n        };\n        List.prototype.indexOf = function (item) {\n            return Utility_1.indexOf(this._source, item, this._equalityComparer);\n        };\n        List.prototype.insert = function (index, value) {\n            var s = this._source;\n            if (index < s.length) {\n                this._source.splice(index, 0, value);\n            }\n            else {\n                this._source[index] = value;\n            }\n            this._onModified();\n        };\n        List.prototype.removeAt = function (index) {\n            if (Utility_1.removeIndex(this._source, index)) {\n                this._onModified();\n                return true;\n            }\n            return false;\n        };\n        List.prototype.contains = function (item) {\n            return Utility_1.contains(this._source, item, this._equalityComparer);\n        };\n        List.prototype.copyTo = function (target, index) {\n            return Utility_1.copyTo(this._source, target, 0, index);\n        };\n        List.prototype.getEnumerator = function () {\n            return new ArrayEnumerator_1.default(this._source);\n        };\n        List.prototype.forEach = function (action, useCopy) {\n            var s = this._source;\n            Enumerator_1.forEach(useCopy ? s.slice() : s, action);\n        };\n        return List;\n    }(CollectionBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = List;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ICollection.d.ts\"/>\r\n\r\n// A means for interfacing an array with ICollection<T> and for use as a base class.\r\nimport {areEqual} from \"../Compare\";\r\nimport {remove, indexOf, contains, copyTo, removeIndex} from \"./Array/Utility\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport Type from \"../Types\";\r\nimport ArrayEnumerator from \"./Enumeration/ArrayEnumerator\";\r\nimport CollectionBase from \"./CollectionBase\";\r\nexport default class List<T>\r\nextends CollectionBase<T>\r\nimplements IList<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected _source:T[];\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null,equalityComparer);\r\n\t\tvar _ = this;\r\n\t\tif(Array.isArray(source))\r\n\t\t{\r\n\t\t\t_._source = source.slice();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._source = [];\r\n\t\t\t_._importEntries(source);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._source.length;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._source.push(entry);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\treturn remove(\r\n\t\t\tthis._source, entry, max,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar len = this._source.length;\r\n\t\tthis._source.length = 0;\r\n\t\treturn len;\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tif(Type.isArrayLike(entries))\r\n\t\t{\r\n\t\t\tvar len = entries.length;\r\n\t\t\tif(!len) return 0;\r\n\t\t\tvar s = this._source;\r\n\r\n\t\t\tvar first = s.length;\r\n\t\t\ts.length += len;\r\n\t\t\tfor(let i = 0;i<len;i++) {\r\n\t\t\t\ts[i+first] = entries[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn len;\r\n\t\t} else\r\n\t\t{\r\n\t\t\treturn super._importEntries(entries);\r\n\t\t}\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\treturn this._source[index];\r\n\t}\r\n\r\n\tset(index:number, value:T):boolean\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length && areEqual(value, s[index]))\r\n\t\t\treturn false;\r\n\r\n\t\ts[index] = value;\r\n\t\tthis._onModified();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\treturn indexOf(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tinsert(index:number, value:T):void\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length)\r\n\t\t{\r\n\t\t\tthis._source.splice(index, 0, value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._source[index] = value;\r\n\t\t}\r\n\t\tthis._onModified();\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tif(removeIndex(this._source, index))\r\n\t\t{\r\n\t\t\tthis._onModified();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn contains(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<any>>(target:TTarget, index?:number):TTarget\r\n\t{\r\n\t\treturn copyTo(this._source, target, 0, index);\r\n\t}\r\n\t\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn new ArrayEnumerator(this._source);\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):void\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tforEach(useCopy ? s.slice() : s, action);\r\n\t}\r\n\r\n}"]}