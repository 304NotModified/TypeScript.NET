{"version":3,"sources":["System/Collections/SetBase.js","System/Collections/SetBase.ts"],"names":["define","require","exports","LinkedNodeList_1","ArgumentNullException_1","Enumerator_1","EmptyEnumerator_1","dispose_1","Compare_1","CollectionBase_1","extends_1","__extends","VOID0","OTHER","SetBase","_super","source","_this","call","this","areEqual","_importEntries","prototype","_getSet","s","_set","LinkedNodeList","getCount","unsafeCount","exceptWith","other","_","ArgumentNullException","forEach","v","_removeInternal","_incrementModified","_signalModification","intersectWith","n","contains","value","using","newUsing","o","isProperSubsetOf","isProperSupersetOf","count","result","isSupersetOf","add","isSubsetOf","overlaps","setEquals","symmetricExceptWith","_addInternal","unionWith","importEntries","_clearInternal","clear","_onDispose","item","_getNode","getEnumerator","throwIfDisposed","valueEnumeratorFrom","EmptyEnumerator","action","useCopy","node","i","_removeNode","remove","removeFirst","first","removeLast","last","CollectionBase","Object","defineProperty"],"mappings":"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","file":"SetBase.js","sourcesContent":["define([\"require\", \"exports\", \"./LinkedNodeList\", \"../Exceptions/ArgumentNullException\", \"./Enumeration/Enumerator\", \"./Enumeration/EmptyEnumerator\", \"../Disposable/dispose\", \"../Compare\", \"./CollectionBase\", \"../../extends\"], function (require, exports, LinkedNodeList_1, ArgumentNullException_1, Enumerator_1, EmptyEnumerator_1, dispose_1, Compare_1, CollectionBase_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var OTHER = 'other';\n    var SetBase = (function (_super) {\n        __extends(SetBase, _super);\n        function SetBase(source) {\n            var _this = _super.call(this, VOID0, Compare_1.areEqual) || this;\n            _this._importEntries(source);\n            return _this;\n        }\n        SetBase.prototype._getSet = function () {\n            var s = this._set;\n            if (!s)\n                this._set = s = new LinkedNodeList_1.LinkedNodeList();\n            return s;\n        };\n        SetBase.prototype.getCount = function () {\n            return this._set ? this._set.unsafeCount : 0;\n        };\n        SetBase.prototype.exceptWith = function (other) {\n            var _ = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            Enumerator_1.forEach(other, function (v) {\n                if (_._removeInternal(v))\n                    _._incrementModified();\n            });\n            _._signalModification();\n        };\n        SetBase.prototype.intersectWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                var s = _._set;\n                if (s)\n                    s.forEach(function (n) {\n                        if (!other.contains(n.value) && _._removeInternal(n.value))\n                            _._incrementModified();\n                    }, true);\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(_.newUsing(other), function (o) { return _.intersectWith(o); });\n            }\n        };\n        SetBase.prototype.isProperSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isProperSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isProperSupersetOf(_this); });\n        };\n        SetBase.prototype.isProperSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true, count;\n            if (other instanceof SetBase) {\n                result = this.isSupersetOf(other);\n                count = other.getCount();\n            }\n            else {\n                count = dispose_1.using(this.newUsing(), function (o) {\n                    Enumerator_1.forEach(other, function (v) {\n                        o.add(v);\n                        return result = _this.contains(v);\n                    });\n                    return o.getCount();\n                });\n            }\n            return result && this.getCount() > count;\n        };\n        SetBase.prototype.isSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isSupersetOf(_this); });\n        };\n        SetBase.prototype.isSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true;\n            Enumerator_1.forEach(other, function (v) {\n                return result = _this.contains(v);\n            });\n            return result;\n        };\n        SetBase.prototype.overlaps = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = false;\n            Enumerator_1.forEach(other, function (v) { return !(result = _this.contains(v)); });\n            return result;\n        };\n        SetBase.prototype.setEquals = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return this.getCount() == (other instanceof SetBase\n                ? other.getCount()\n                : dispose_1.using(this.newUsing(other), function (o) { return o.getCount(); }))\n                && this.isSubsetOf(other);\n        };\n        SetBase.prototype.symmetricExceptWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                Enumerator_1.forEach(other, function (v) {\n                    if (_.contains(v)) {\n                        if (_._removeInternal(v))\n                            _._incrementModified();\n                    }\n                    else {\n                        if (_._addInternal(v))\n                            _._incrementModified();\n                    }\n                });\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(this.newUsing(other), function (o) { return _.symmetricExceptWith(o); });\n            }\n        };\n        SetBase.prototype.unionWith = function (other) {\n            this.importEntries(other);\n        };\n        SetBase.prototype._clearInternal = function () {\n            var s = this._set;\n            return s ? s.clear() : 0;\n        };\n        SetBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._set = null;\n        };\n        SetBase.prototype.contains = function (item) {\n            return !(!this.getCount() || !this._getNode(item));\n        };\n        SetBase.prototype.getEnumerator = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var s = _._set;\n            return s && _.getCount()\n                ? LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(s)\n                : EmptyEnumerator_1.EmptyEnumerator;\n        };\n        SetBase.prototype.forEach = function (action, useCopy) {\n            return useCopy\n                ? _super.prototype.forEach.call(this, action, useCopy)\n                : this._set.forEach(function (node, i) { return action(node.value, i); });\n        };\n        SetBase.prototype._removeNode = function (node) {\n            return !!node\n                && this.remove(node.value) != 0;\n        };\n        SetBase.prototype.removeFirst = function () {\n            var s = this._set;\n            return this._removeNode(s && s.first);\n        };\n        SetBase.prototype.removeLast = function () {\n            var s = this._set;\n            return this._removeNode(s && s.last);\n        };\n        return SetBase;\n    }(CollectionBase_1.CollectionBase));\n    exports.SetBase = SetBase;\n    function wipe(map, depth) {\n        if (depth === void 0) { depth = 1; }\n        if (map && depth) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var v = map[key];\n                delete map[key];\n                wipe(v, depth - 1);\n            }\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SetBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"./Enumeration/EmptyEnumerator\";\r\nimport {using} from \"../Disposable/dispose\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {ILinkedNodeWithValue} from \"./ILinkedListNode\";\r\nimport {ActionWithIndex, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IMap} from \"./Dictionaries/IDictionary\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ISet} from \"./ISet\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\nconst OTHER = 'other';\r\n\r\nexport abstract class SetBase<T>\r\nextends CollectionBase<T> implements ISet<T>, IDisposable\r\n{\r\n\r\n\tconstructor(source?:IEnumerableOrArray<T>)\r\n\t{\r\n\t\tsuper(VOID0, areEqual);\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tprotected abstract newUsing(source?:IEnumerableOrArray<T>):SetBase<T>;\r\n\r\n\tprotected _set:LinkedNodeList<ILinkedNodeWithValue<T>>;\r\n\r\n\tprotected _getSet():LinkedNodeList<ILinkedNodeWithValue<T>>\r\n\t{\r\n\t\tlet s = this._set;\r\n\t\tif(!s) this._set = s = new LinkedNodeList<ILinkedNodeWithValue<T>>();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._set ? this._set.unsafeCount : 0;\r\n\t}\r\n\r\n\texceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t_._incrementModified();\r\n\t\t});\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tintersectWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tconst _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tlet s = _._set;\r\n\t\t\tif(s) s.forEach(n=>\r\n\t\t\t{\r\n\t\t\t\tif(!other.contains(n.value) && _._removeInternal(<any>n.value))\r\n\t\t\t\t\t_._incrementModified();\r\n\t\t\t},true);\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(_.newUsing(other), o=>_.intersectWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tisProperSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isProperSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isProperSupersetOf(this));\r\n\t}\r\n\r\n\tisProperSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = true, count:number;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tresult = this.isSupersetOf(other);\r\n\t\t\tcount = other.getCount();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcount = using(this.newUsing(), o=>\r\n\t\t\t{\r\n\t\t\t\tforEach(other, v=>\r\n\t\t\t\t{\r\n\t\t\t\t\to.add(v); // We have to add to another set in order to filter out duplicates.\r\n\t\t\t\t\t// contains == false will cause this to exit.\r\n\t\t\t\t\treturn result = this.contains(v);\r\n\t\t\t\t});\r\n\t\t\t\treturn o.getCount();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result && this.getCount()>count;\r\n\t}\r\n\r\n\tisSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isSupersetOf(this));\r\n\t}\r\n\r\n\tisSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = true;\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\treturn result = this.contains(v);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\toverlaps(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = false;\r\n\t\tforEach(other, v => !(result = this.contains(v)));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsetEquals(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn this.getCount()==(\r\n\t\t\t\tother instanceof SetBase\r\n\t\t\t\t\t? other.getCount()\r\n\t\t\t\t\t: using(this.newUsing(other), o=> o.getCount()))\r\n\t\t\t&& this.isSubsetOf(other);\r\n\t}\r\n\r\n\tsymmetricExceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tconst _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tforEach(other, v=>\r\n\t\t\t{\r\n\t\t\t\tif(_.contains(v))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._addInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(other), o=>_.symmetricExceptWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tunionWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tthis.importEntries(other);\r\n\t}\r\n\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn s ? s.clear() : 0;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._set = <any>null;\r\n\t}\r\n\r\n\tprotected abstract _getNode(item:T):ILinkedNodeWithValue<T>|undefined;\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn !(!this.getCount() || !this._getNode(item));\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst s = _._set;\r\n\t\treturn s && _.getCount()\r\n\t\t\t? LinkedNodeList.valueEnumeratorFrom<T>(s)\r\n\t\t\t: EmptyEnumerator;\r\n\t}\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._set.forEach((node, i)=>action(<any>node.value, i));\r\n\t}\r\n\r\n\tprotected _removeNode(node:ILinkedNodeWithValue<T>|null|undefined):boolean\r\n\t{\r\n\t\treturn !!node\r\n\t\t\t&& this.remove(<any>node.value)!=0;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn this._removeNode(s && s.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn this._removeNode(s && s.last);\r\n\t}\r\n\r\n\r\n}\r\n\r\nfunction wipe(map:IMap<any>, depth:number = 1):void\r\n{\r\n\tif(map && depth)\r\n\t{\r\n\t\tfor(let key of Object.keys(map))\r\n\t\t{\r\n\t\t\tconst v = map[key];\r\n\t\t\tdelete map[key];\r\n\t\t\twipe(v, depth - 1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default SetBase;"]}