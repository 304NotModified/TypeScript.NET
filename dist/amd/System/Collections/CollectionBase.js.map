{"version":3,"sources":["System/Collections/CollectionBase.js","System/Collections/CollectionBase.ts"],"names":["define","require","exports","Enumerator_1","Compare_1","ArgumentNullException_1","InvalidOperationException_1","DisposableBase_1","extends_1","Environment_1","__extends","NAME","CMDC","CMRO","LINQ_PATH","CollectionBase","_super","source","_equalityComparer","areEqual","_this","call","this","_","_disposableObjectName","_importEntries","_updateRecursion","_modifiedCount","_version","Object","defineProperty","prototype","get","getCount","enumerable","configurable","getIsReadOnly","assertModifiable","throwIfDisposed","InvalidOperationException","assertVersion","version","_onModified","_signalModification","increment","ex","console","error","_incrementModified","handleUpdate","closure","updated","add","entry","_addInternal","remove","max","Infinity","n","NaN","_removeInternal","clear","_clearInternal","_onDispose","l","_linq","dispose","entries","added","Array","isArray","_i","entries_1","length","e","forEach","importEntries","contains","found","equals","action","useCopy","wasDisposed","getEnumerator","a","toArray","copyTo","target","index","ArgumentNullException","count","newLength","moveNext","current","isNodeJS","isCommonJS","eval","from","linqAsync","callback","isRequireJS","linq","DisposableBase"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,2BAA4B,aAAc,sCAAuC,0CAA2C,+BAAgC,gBAAiB,kBAAmB,SAAUC,QAASC,QAASC,aAAcC,UAAWC,wBAAyBC,4BAA6BC,iBAAkBC,UAAWC,eAClW,YCmBJ,IAAMC,WAAYF,UAAAA,WAIjBG,KAAO,iBACPC,KAAO,uCACPC,KAAO,wCAEPC,UAAY,yBAEbC,eAAA,SAAAC,QAIC,QAAAD,gBACCE,EACUC,GAAA,SAAAA,IAAAA,EAAAd,UAAAe,SAFX,IAAAC,GAICJ,OAAAK,KAAAC,OAAOA,IAFGF,GAAAF,kBAAAA,CAGV,IAAMK,GAAIH,CDtBA,OCuBVG,GAAEC,sBAAwBb,KAC1BY,EAAEE,eAAeR,GACjBM,EAAEG,iBAAmB,EACrBH,EAAEI,eAAiB,EACnBJ,EAAEK,SAAW,ED3BIR,ECqXnB,MAvWQV,WAAAK,eAAAC,QAmBPa,OAAAC,eAAIf,eAAAgB,UAAA,SD9BOC,IC8BX,WAEC,MAAOV,MAAKW,YD7BFC,YAAY,EACZC,cAAc,IC+BfpB,eAAAgB,UAAAK,cAAV,WAEC,OAAO,GAIRP,OAAAC,eAAIf,eAAAgB,UAAA,cD/BOC,IC+BX,WAEC,MAAOV,MAAKc,iBD9BFF,YAAY,EACZC,cAAc,ICgCfpB,eAAAgB,UAAAM,iBAAV,WAGC,GADAf,KAAKgB,gBAAgB1B,MAClBU,KAAKc,gBACP,KAAM,IAAI9B,6BAAAiC,0BAA0B1B,OAItCE,eAAAgB,UAAAS,cAAA,SAAcC,GAEb,GAAGA,IAAUnB,KAAKM,SACjB,KAAM,IAAItB,6BAAAiC,0BAA0B,6BAU5BxB,eAAAgB,UAAAW,YAAV,aAEU3B,eAAAgB,UAAAY,oBAAV,SAA8BC,GAE7B,GAAMrB,GAAID,IAEV,IADGsB,GAAWrB,EAAEI,iBACbJ,EAAEI,iBAAmBL,KAAKI,iBAC7B,CACCH,EAAEI,eAAiB,EACnBJ,EAAEK,UACF,KAECL,EAAEmB,cAEH,MAAMG,GAGLC,QAAQC,MAAMF,GAEf,OAAO,EAER,OAAO,GAGE9B,eAAAgB,UAAAiB,mBAAV,WAAsC1B,KAAKK,kBAG3CE,OAAAC,eAAIf,eAAAgB,UAAA,cDjDOC,ICiDX,WAA2B,MAA8B,IAAvBV,KAAKI,kBDhD5BQ,YAAY,EACZC,cAAc,ICuDzBpB,eAAAgB,UAAAkB,aAAA,SAAaC,GAEZ,IAAIA,EAAS,OAAO,CACpB,IAAM3B,GAAID,IACVC,GAAEc,mBACFd,EAAEG,kBACF,IAAIyB,IAAkB,CAEtB,MAEIA,EAAUD,MACZ3B,EAAEI,iBDrDM,QCyDTJ,EAAEG,mBAKH,MAFAH,GAAEoB,sBAEKQ,GAURpC,eAAAgB,UAAAqB,IAAA,SAAIC,GAEH,GAAM9B,GAAID,IACVC,GAAEc,mBACFd,EAAEG,kBAEF,KACKH,EAAE+B,aAAaD,IAAQ9B,EAAEI,iBDjEpB,QCmERJ,EAAEG,mBAEJH,EAAEoB,uBAKH5B,eAAAgB,UAAAwB,OAAA,SAAOF,EAASG,GAAA,SAAAA,IAAAA,EAAAC,EAAAA,EAEf,IAAMlC,GAAID,IACVC,GAAEc,mBACFd,EAAEG,kBAEF,IAAIgC,GAAWC,GACf,MACKD,EAAInC,EAAEqC,gBAAgBP,EAAOG,KAAMjC,EAAEI,iBDnEhC,QCqERJ,EAAEG,mBAGJ,MADAH,GAAEoB,sBACKe,GAKR3C,eAAAgB,UAAA8B,MAAA,WAEC,GAAMtC,GAAID,IACVC,GAAEc,mBACFd,EAAEG,kBAEF,IAAIgC,GAAWC,GACf,MACKD,EAAInC,EAAEuC,mBAAkBvC,EAAEI,iBDtErB,QCwERJ,EAAEG,mBAIJ,MAFAH,GAAEoB,sBAEKe,GAGE3C,eAAAgB,UAAAgC,WAAV,WAEC/C,OAAAe,UAAMgC,WAAU1C,KAAAC,MAChBA,KAAKwC,iBACLxC,KAAKM,SAAW,EAChBN,KAAKI,iBAAmB,EACxBJ,KAAKK,eAAiB,CACtB,IAAMqC,GAAI1C,KAAK2C,KACf3C,MAAK2C,MAAQ,OACVD,GAAGA,EAAEE,WAGCnD,eAAAgB,UAAAN,eAAV,SAAyB0C,GAAzB,GAAA/C,GAAAE,KAEK8C,EAAQ,CACZ,IAAGD,EAEF,GAAGE,MAAMC,QAAQH,GAGhB,IAAa,GAAAI,GAAA,EAAAC,EAAAL,EAAAI,EAAAC,EAAAC,OAAAF,IAAO,CAAhB,GAAIG,GAACF,EAAAD,EAELjD,MAAKgC,aAAaoB,IAAIN,QAK1BjE,cAAAwE,QAAQR,EAAS,SAAAO,GAEbtD,EAAKkC,aAAaoB,IAAIN,KAI5B,OAAOA,IAGRrD,eAAAgB,UAAA6C,cAAA,SAAcT,GAEb,GAAM5C,GAAID,IACV,KAAI6C,EAAS,MAAO,EACpB5C,GAAEc,mBACFd,EAAEG,kBAEF,IAAIgC,EACJ,MACKA,EAAInC,EAAEE,eAAe0C,KAAU5C,EAAEI,iBD5E5B,QC8ERJ,EAAEG,mBAGJ,MADAH,GAAEoB,sBACKe,EAAIC,KAMZ5C,eAAAgB,UAAA8C,SAAA,SAASxB,GAER,IAAI/B,KAAKW,WAAY,OAAO,CAC5B,IAAI6C,IAAgB,EACdC,EAASzD,KAAKJ,iBAEpB,OADAI,MAAKqD,QAAQ,SAAAD,GAAK,QAAEI,EAAQC,EAAO1B,EAAOqB,MACnCI,GAMR/D,eAAAgB,UAAA4C,QAAA,SAAQK,EAAmDC,GAE1D,GAAG3D,KAAK4D,YACP,MAAO,EAER,KAAGD,EAcF,MAAO9E,cAAAwE,QAAQrD,KAAK6D,gBAAiBH,EAZrC,IAAMI,GAAI9D,KAAK+D,SACf,KAEC,MAAOlF,cAAAwE,QAAQS,EAAGJ,GDvFN,QC2FZI,EAAEX,OAAS,IASd1D,eAAAgB,UAAAuD,OAAA,SACCC,EACAC,GAEA,GAFA,SAAAA,IAAAA,EAAA,IAEID,EAAQ,KAAM,IAAIlF,yBAAAoF,sBAAsB,SAE5C,IAAMC,GAAQpE,KAAKW,UACnB,IAAGyD,EACH,CACC,GAAMC,GAAYD,EAAQF,CACvBD,GAAOd,OAAOkB,IAAWJ,EAAOd,OAASkB,EAG5C,KADA,GAAMjB,GAAIpD,KAAK6D,gBACTT,EAAEkB,YAEPL,EAAOC,KAAgBd,EAAEmB,QAG3B,MAAON,IAGRxE,eAAAgB,UAAAsD,QAAA,WAEC,GAAMK,GAAQpE,KAAKW,UACnB,OAAOyD,GACJpE,KAAKgE,OAAOI,EAAM,MAAQ,GAAIrB,OAASqB,WAU3C7D,OAAAC,eAAIf,eAAAgB,UAAA,QDxGOC,ICwGX,WAECV,KAAKgB,iBACL,IAAIoC,GAAIpD,KAAK2C,KAEb,KAAIS,EACJ,CACC,IAAIjE,cAAAqF,WAAarF,cAAAsF,WAChB,KAAM,4NAKP,IADAzE,KAAK2C,MAAQS,EAAIsB,KAAK,WAAWlF,WAAhBkF,WAAmCC,KAAK3E,OACrDoD,EAAG,KAAM,iDAGd,MAAOA,ID5GGxC,YAAY,EACZC,cAAc,ICuHzBpB,eAAAgB,UAAAmE,UAAA,SAAUC,UAAV,GAAA/E,OAAAE,IAECA,MAAKgB,iBACL,IAAIoC,GAAIpD,KAAK2C,KAEb,KAAIS,EAEH,GAAGjE,cAAA2F,YAEFJ,KAAK,YAAYlF,WAAY,SAACuF,GAK7B,GAFA3B,EAAItD,MAAK6C,MACLS,IAAGtD,MAAK6C,MAAQS,EAAI2B,EAAAA,WAAaJ,KAAK7E,SACtCsD,EAAG,KAAM,gDACVyB,WAAUA,SAASzB,GACtByB,SAAW,aAGR,CAAA,IAAG1F,cAAAqF,WAAYrF,cAAAsF,WAMnB,KAAM,gEAJNrB,GAAIpD,KAAK+E,KAUX,MAFG3B,IAAKyB,UAAUA,SAASzB,GAEpBA,GAET3D,gBAvWQR,iBAAA+F,eADRpG,SAAAa,eAAAA","file":"CollectionBase.js","sourcesContent":["define([\"require\", \"exports\", \"./Enumeration/Enumerator\", \"../Compare\", \"../Exceptions/ArgumentNullException\", \"../Exceptions/InvalidOperationException\", \"../Disposable/DisposableBase\", \"../../extends\", \"../Environment\"], function (require, exports, Enumerator_1, Compare_1, ArgumentNullException_1, InvalidOperationException_1, DisposableBase_1, extends_1, Environment_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var NAME = \"CollectionBase\", CMDC = \"Cannot modify a disposed collection.\", CMRO = \"Cannot modify a read-only collection.\";\n    var LINQ_PATH = \"../../System.Linq/Linq\";\n    var CollectionBase = (function (_super) {\n        __extends(CollectionBase, _super);\n        function CollectionBase(source, _equalityComparer) {\n            if (_equalityComparer === void 0) { _equalityComparer = Compare_1.areEqual; }\n            var _this = _super.call(this) || this;\n            _this._equalityComparer = _equalityComparer;\n            var _ = _this;\n            _._disposableObjectName = NAME;\n            _._importEntries(source);\n            _._updateRecursion = 0;\n            _._modifiedCount = 0;\n            _._version = 0;\n            return _this;\n        }\n        Object.defineProperty(CollectionBase.prototype, \"count\", {\n            get: function () {\n                return this.getCount();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.getIsReadOnly = function () {\n            return false;\n        };\n        Object.defineProperty(CollectionBase.prototype, \"isReadOnly\", {\n            get: function () {\n                return this.getIsReadOnly();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.assertModifiable = function () {\n            this.throwIfDisposed(CMDC);\n            if (this.getIsReadOnly())\n                throw new InvalidOperationException_1.InvalidOperationException(CMRO);\n        };\n        CollectionBase.prototype.assertVersion = function (version) {\n            if (version !== this._version)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Collection was modified.\");\n        };\n        CollectionBase.prototype._onModified = function () { };\n        CollectionBase.prototype._signalModification = function (increment) {\n            var _ = this;\n            if (increment)\n                _._modifiedCount++;\n            if (_._modifiedCount && !this._updateRecursion) {\n                _._modifiedCount = 0;\n                _._version++;\n                try {\n                    _._onModified();\n                }\n                catch (ex) {\n                    console.error(ex);\n                }\n                return true;\n            }\n            return false;\n        };\n        CollectionBase.prototype._incrementModified = function () { this._modifiedCount++; };\n        Object.defineProperty(CollectionBase.prototype, \"isUpdating\", {\n            get: function () { return this._updateRecursion != 0; },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.handleUpdate = function (closure) {\n            if (!closure)\n                return false;\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var updated = false;\n            try {\n                if (updated = closure())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return updated;\n        };\n        CollectionBase.prototype.add = function (entry) {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            try {\n                if (_._addInternal(entry))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n        };\n        CollectionBase.prototype.remove = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n = NaN;\n            try {\n                if (n = _._removeInternal(entry, max))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype.clear = function () {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n = NaN;\n            try {\n                if (n = _._clearInternal())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._clearInternal();\n            this._version = 0;\n            this._updateRecursion = 0;\n            this._modifiedCount = 0;\n            var l = this._linq;\n            this._linq = void 0;\n            if (l)\n                l.dispose();\n        };\n        CollectionBase.prototype._importEntries = function (entries) {\n            var _this = this;\n            var added = 0;\n            if (entries) {\n                if (Array.isArray(entries)) {\n                    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                        var e = entries_1[_i];\n                        if (this._addInternal(e))\n                            added++;\n                    }\n                }\n                else {\n                    Enumerator_1.forEach(entries, function (e) {\n                        if (_this._addInternal(e))\n                            added++;\n                    });\n                }\n            }\n            return added;\n        };\n        CollectionBase.prototype.importEntries = function (entries) {\n            var _ = this;\n            if (!entries)\n                return 0;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n;\n            try {\n                if (n = _._importEntries(entries))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n = NaN;\n        };\n        CollectionBase.prototype.contains = function (entry) {\n            if (!this.getCount())\n                return false;\n            var found = false;\n            var equals = this._equalityComparer;\n            this.forEach(function (e) { return !(found = equals(entry, e)); });\n            return found;\n        };\n        CollectionBase.prototype.forEach = function (action, useCopy) {\n            if (this.wasDisposed)\n                return 0;\n            if (useCopy) {\n                var a = this.toArray();\n                try {\n                    return Enumerator_1.forEach(a, action);\n                }\n                finally {\n                    a.length = 0;\n                }\n            }\n            else {\n                return Enumerator_1.forEach(this.getEnumerator(), action);\n            }\n        };\n        CollectionBase.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException('target');\n            var count = this.getCount();\n            if (count) {\n                var newLength = count + index;\n                if (target.length < newLength)\n                    target.length = newLength;\n                var e = this.getEnumerator();\n                while (e.moveNext()) {\n                    target[index++] = e.current;\n                }\n            }\n            return target;\n        };\n        CollectionBase.prototype.toArray = function () {\n            var count = this.getCount();\n            return count\n                ? this.copyTo(count > 65536 ? new Array(count) : [])\n                : [];\n        };\n        Object.defineProperty(CollectionBase.prototype, \"linq\", {\n            get: function () {\n                this.throwIfDisposed();\n                var e = this._linq;\n                if (!e) {\n                    if (!Environment_1.isNodeJS || !Environment_1.isCommonJS)\n                        throw \"using .linq to load and initialize a ILinqEnumerable is currently only supported within a NodeJS environment.\\nImport System.Linq/Linq and use Enumerable.from(e) instead.\\nOr use .linqAsync(callback) for AMD/RequireJS.\";\n                    this._linq = e = eval(\"require\")(LINQ_PATH).default.from(this);\n                    if (!e)\n                        throw \"There was a problem importing System.Linq/Linq\";\n                }\n                return e;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.linqAsync = function (callback) {\n            var _this = this;\n            this.throwIfDisposed();\n            var e = this._linq;\n            if (!e) {\n                if (Environment_1.isRequireJS) {\n                    eval(\"require\")([LINQ_PATH], function (linq) {\n                        e = _this._linq;\n                        if (!e)\n                            _this._linq = e = linq.default.from(_this);\n                        if (!e)\n                            throw \"There was a problem importing System.Linq/Linq\";\n                        if (callback)\n                            callback(e);\n                        callback = void 0;\n                    });\n                }\n                else if (Environment_1.isNodeJS && Environment_1.isCommonJS) {\n                    e = this.linq;\n                }\n                else {\n                    throw \"Cannot find a compatible loader for importing System.Linq/Linq\";\n                }\n            }\n            if (e && callback)\n                callback(e);\n            return e;\n        };\n        return CollectionBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.CollectionBase = CollectionBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {EqualityComparison, Action, PredicateWithIndex, ActionWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\nimport {ILinqEnumerable} from \"../../System.Linq/Enumerable\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {isCommonJS, isRequireJS, isNodeJS} from \"../Environment\";\r\n\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n//noinspection SpellCheckingInspection\r\nconst\r\n\tNAME = \"CollectionBase\",\r\n\tCMDC = \"Cannot modify a disposed collection.\",\r\n\tCMRO = \"Cannot modify a read-only collection.\";\r\nconst\r\n\tLINQ_PATH = \"../../System.Linq/Linq\";\r\n\r\nexport abstract class CollectionBase<T>\r\nextends DisposableBase implements ICollection<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tprotected _equalityComparer:EqualityComparison<T|null|undefined> = areEqual)\r\n\t{\r\n\t\tsuper();\r\n\t\tconst _ = this;\r\n\t\t_._disposableObjectName = NAME;\r\n\t\t_._importEntries(source);\r\n\t\t_._updateRecursion = 0;\r\n\t\t_._modifiedCount = 0;\r\n\t\t_._version = 0;\r\n\t}\r\n\r\n\r\n\tprotected abstract getCount():number;\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this.getCount();\r\n\t}\r\n\r\n\tprotected getIsReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn this.getIsReadOnly();\r\n\t}\r\n\r\n\tprotected assertModifiable():void\r\n\t{\r\n\t\tthis.throwIfDisposed(CMDC);\r\n\t\tif(this.getIsReadOnly())\r\n\t\t\tthrow new InvalidOperationException(CMRO);\r\n\t}\r\n\r\n\tprotected _version:number; // Provides an easy means of tracking changes and invalidating enumerables.\r\n\tassertVersion(version:number):void\r\n\t{\r\n\t\tif(version!==this._version)\r\n\t\t\tthrow new InvalidOperationException(\"Collection was modified.\");\r\n\t}\r\n\r\n\t/*\r\n\t * Note: Avoid changing modified count by any means but ++;\r\n\t * If setting modified count by the result of a closure it may be a negative number or NaN and ruin the pattern.\r\n\t */\r\n\tprivate _modifiedCount:number;\r\n\tprivate _updateRecursion:number;\r\n\r\n\tprotected _onModified():void {}\r\n\r\n\tprotected _signalModification(increment?:boolean):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(increment) _._modifiedCount++;\r\n\t\tif(_._modifiedCount && !this._updateRecursion)\r\n\t\t{\r\n\t\t\t_._modifiedCount = 0;\r\n\t\t\t_._version++;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onModified();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\t// Avoid fatal errors which may have been caused by consumer.\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _incrementModified():void { this._modifiedCount++; }\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\tget isUpdating():boolean { return this._updateRecursion!=0; }\r\n\r\n\t/**\r\n\t * Takes a closure that if returning true will propagate an update signal.\r\n\t * Multiple update operations can be occurring at once or recursively and the onModified signal will only occur once they're done.\r\n\t * @param closure\r\n\t * @returns {boolean}\r\n\t */\r\n\thandleUpdate(closure?:() => boolean):boolean\r\n\t{\r\n\t\tif(!closure) return false;\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\t\tlet updated:boolean = false;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(updated = closure())\r\n\t\t\t\t_._modifiedCount++;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._updateRecursion--;\r\n\t\t}\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn updated;\r\n\t}\r\n\r\n\tprotected abstract _addInternal(entry:T):boolean;\r\n\r\n\t/*\r\n\t * Note: for a slight amount more code, we avoid creating functions/closures.\r\n\t * Calling handleUpdate is the correct pattern, but if possible avoid creating another function scope.\r\n\t */\r\n\r\n\tadd(entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\ttry\r\n\t\t{ if(_._addInternal(entry)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tprotected abstract _removeInternal(entry:T, max?:number):number;\r\n\r\n\tremove(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._removeInternal(entry, max)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected abstract _clearInternal():number;\r\n\r\n\tclear():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number = NaN;\r\n\t\ttry\r\n\t\t{ if(n = _._clearInternal()) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._clearInternal();\r\n\t\tthis._version = 0;\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tconst l = this._linq;\r\n\t\tthis._linq = void 0;\r\n\t\tif(l) l.dispose();\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>|null|undefined):number\r\n\t{\r\n\t\tlet added = 0;\r\n\t\tif(entries)\r\n\t\t{\r\n\t\t\tif(Array.isArray(entries))\r\n\t\t\t{\r\n\t\t\t\t// Optimize for avoiding a new closure.\r\n\t\t\t\tfor(let e of entries)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tforEach(entries, e=>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn added;\r\n\t}\r\n\r\n\timportEntries(entries:IEnumerableOrArray<T>|null|undefined):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!entries) return 0;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tlet n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._importEntries(entries)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n = NaN;\r\n\t}\r\n\r\n\t// Fundamentally the most important part of the collection.\r\n\tabstract getEnumerator():IEnumerator<T>;\r\n\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tif(!this.getCount()) return false;\r\n\t\tlet found:boolean = false;\r\n\t\tconst equals = this._equalityComparer;\r\n\t\tthis.forEach(e => !(found = equals(entry, e)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tif(this.wasDisposed)\r\n\t\t\treturn 0;\r\n\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tconst a = this.toArray();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\treturn forEach(a, action);\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\ta.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn forEach(this.getEnumerator(), action);\r\n\t\t}\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<T>>(\r\n\t\ttarget:TTarget,\r\n\t\tindex:number = 0):TTarget\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException('target');\r\n\r\n\t\tconst count = this.getCount();\r\n\t\tif(count)\r\n\t\t{\r\n\t\t\tconst newLength = count + index;\r\n\t\t\tif(target.length<newLength) target.length = newLength;\r\n\r\n\t\t\tconst e = this.getEnumerator();\r\n\t\t\twhile(e.moveNext()) // Disposes when finished.\r\n\t\t\t{\r\n\t\t\t\ttarget[index++] = <any>e.current;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tconst count = this.getCount();\r\n\t\treturn count\r\n\t\t\t? this.copyTo(count>65536 ? new Array<T>(count) : [])\r\n\t\t\t: [];\r\n\t}\r\n\r\n\tprivate _linq?:ILinqEnumerable<T>;\r\n\r\n\t/**\r\n\t * .linq will return an ILinqEnumerable if .linqAsync() has completed successfully or the default module loader is NodeJS+CommonJS.\r\n\t * @returns {ILinqEnumerable}\r\n\t */\r\n\tget linq():ILinqEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tlet e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\t\t\tif(!isNodeJS || !isCommonJS)\r\n\t\t\t\tthrow `using .linq to load and initialize a ILinqEnumerable is currently only supported within a NodeJS environment.\r\nImport System.Linq/Linq and use Enumerable.from(e) instead.\r\nOr use .linqAsync(callback) for AMD/RequireJS.`;\r\n\r\n\t\t\tthis._linq = e = eval(\"require\")(LINQ_PATH).default.from(this);\r\n\t\t\tif(!e) throw \"There was a problem importing System.Linq/Linq\";\r\n\t\t}\r\n\r\n\t\treturn e;\r\n\t}\r\n\r\n\t/**\r\n\t * .linqAsync() is for use with deferred loading.\r\n\t * Ensures an instance of the Linq extensions is available and then passes it to the callback.\r\n\t * Returns an ILinqEnumerable if one is already available, otherwise undefined.\r\n\t * Passing no parameters will still initiate loading and initializing the ILinqEnumerable which can be useful for pre-loading.\r\n\t * Any call to .linqAsync() where an ILinqEnumerable is returned can be assured that any subsequent calls to .linq will return the same instance.\r\n\t * @param callback\r\n\t * @returns {ILinqEnumerable}\r\n\t */\r\n\tlinqAsync(callback?:Action<ILinqEnumerable<T>>):ILinqEnumerable<T>|undefined\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tlet e = this._linq;\r\n\r\n\t\tif(!e)\r\n\t\t{\r\n\t\t\tif(isRequireJS)\r\n\t\t\t{\r\n\t\t\t\teval(\"require\")([LINQ_PATH], (linq:any)=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Could end up being called more than once, be sure to check for ._linq before setting...\r\n\t\t\t\t\te = this._linq;\r\n\t\t\t\t\tif(!e) this._linq = e = linq.default.from(this);\r\n\t\t\t\t\tif(!e) throw \"There was a problem importing System.Linq/Linq\";\r\n\t\t\t\t\tif(callback) callback(e);\r\n\t\t\t\t\tcallback = void 0; // In case this is return synchronously..\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if(isNodeJS && isCommonJS)\r\n\t\t\t{\r\n\t\t\t\te = this.linq;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow \"Cannot find a compatible loader for importing System.Linq/Linq\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(e && callback) callback(e);\r\n\r\n\t\treturn e;\r\n\t}\r\n}\r\n"]}