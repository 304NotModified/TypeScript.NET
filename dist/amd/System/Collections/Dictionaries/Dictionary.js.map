{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.js","System/Collections/Dictionaries/Dictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Compare_1","Types_1","Functions_1","DictionaryBase_1","EnumeratorBase_1","callHasOwnProperty","target","key","call","computeHashCode","obj","VOID0","toString","FUNCTION","HashEntry","value","prev","next","EntryList","first","last","addLast","entry","_","replace","newEntry","remove","clear","forEach","closure","currentEntry","Dictionary","_super","compareSelector","Identity","_count","_entries","_buckets","setKV","allowOverwrite","buckets","entries","comparer","compareKey","hash","equal","areEqual","array","i","length","old","Error","changed","splice","_onValueUpdate","push","undefined","addByKeyValue","getValue","_i","array_1","setValue","containsKey","len","count","getCount","getEnumerator","yielder","result","yieldReturn","yieldBreak","getKeys","getValues","defineProperty"],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../../Compare', '../../Types', '../../Functions', './DictionaryBase', '../Enumeration/EnumeratorBase'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Compare_1 = require('../../Compare');\r\n    var Types_1 = require('../../Types');\r\n    var Functions_1 = require('../../Functions');\r\n    var DictionaryBase_1 = require('./DictionaryBase');\r\n    var EnumeratorBase_1 = require('../Enumeration/EnumeratorBase');\r\n    var VOID0 = void 0;\r\n    var HashEntry = (function () {\r\n        function HashEntry(key, value, prev, next) {\r\n            this.key = key;\r\n            this.value = value;\r\n            this.prev = prev;\r\n            this.next = next;\r\n        }\r\n        return HashEntry;\r\n    }());\r\n    var EntryList = (function () {\r\n        function EntryList(first, last) {\r\n            this.first = first;\r\n            this.last = last;\r\n        }\r\n        EntryList.prototype.addLast = function (entry) {\r\n            var _ = this;\r\n            if (_.last != null) {\r\n                _.last.next = entry;\r\n                entry.prev = _.last;\r\n                _.last = entry;\r\n            }\r\n            else\r\n                _.first = _.last = entry;\r\n        };\r\n        EntryList.prototype.replace = function (entry, newEntry) {\r\n            var _ = this;\r\n            if (entry.prev != null) {\r\n                entry.prev.next = newEntry;\r\n                newEntry.prev = entry.prev;\r\n            }\r\n            else\r\n                _.first = newEntry;\r\n            if (entry.next != null) {\r\n                entry.next.prev = newEntry;\r\n                newEntry.next = entry.next;\r\n            }\r\n            else\r\n                _.last = newEntry;\r\n        };\r\n        EntryList.prototype.remove = function (entry) {\r\n            var _ = this;\r\n            if (entry.prev != null)\r\n                entry.prev.next = entry.next;\r\n            else\r\n                _.first = entry.next;\r\n            if (entry.next != null)\r\n                entry.next.prev = entry.prev;\r\n            else\r\n                _.last = entry.prev;\r\n        };\r\n        EntryList.prototype.clear = function () {\r\n            var _ = this;\r\n            while (_.last) {\r\n                _.remove(_.last);\r\n            }\r\n        };\r\n        EntryList.prototype.forEach = function (closure) {\r\n            var _ = this, currentEntry = _.first;\r\n            while (currentEntry) {\r\n                closure(currentEntry);\r\n                currentEntry = currentEntry.next;\r\n            }\r\n        };\r\n        return EntryList;\r\n    }());\r\n    function callHasOwnProperty(target, key) {\r\n        return Object.prototype.hasOwnProperty.call(target, key);\r\n    }\r\n    function computeHashCode(obj) {\r\n        if (obj === null)\r\n            return \"null\";\r\n        if (obj === VOID0)\r\n            return \"undefined\";\r\n        return (typeof obj.toString === Types_1.default.FUNCTION)\r\n            ? obj.toString()\r\n            : Object.prototype.toString.call(obj);\r\n    }\r\n    var Dictionary = (function (_super) {\r\n        __extends(Dictionary, _super);\r\n        function Dictionary(compareSelector) {\r\n            if (compareSelector === void 0) { compareSelector = Functions_1.default.Identity; }\r\n            _super.call(this);\r\n            this.compareSelector = compareSelector;\r\n            this._count = 0;\r\n            this._entries = new EntryList();\r\n            this._buckets = {};\r\n        }\r\n        Dictionary.prototype.setKV = function (key, value, allowOverwrite) {\r\n            var _ = this, buckets = _._buckets, entries = _._entries, comparer = _.compareSelector;\r\n            var compareKey = comparer(key);\r\n            var hash = computeHashCode(compareKey), entry;\r\n            if (callHasOwnProperty(buckets, hash)) {\r\n                var equal = Compare_1.areEqual;\r\n                var array = buckets[hash];\r\n                for (var i = 0; i < array.length; i++) {\r\n                    var old = array[i];\r\n                    if (comparer(old.key) === compareKey) {\r\n                        if (!allowOverwrite)\r\n                            throw new Error(\"Key already exists.\");\r\n                        var changed = !equal(old.value, value);\r\n                        if (changed) {\r\n                            if (value === VOID0) {\r\n                                entries.remove(old);\r\n                                array.splice(i, 1);\r\n                                if (!array.length)\r\n                                    delete buckets[hash];\r\n                                --_._count;\r\n                            }\r\n                            else {\r\n                                entry = new HashEntry(key, value);\r\n                                entries.replace(old, entry);\r\n                                array[i] = entry;\r\n                            }\r\n                            _._onValueUpdate(key, value, old.value);\r\n                        }\r\n                        return changed;\r\n                    }\r\n                }\r\n                array.push(entry = entry || new HashEntry(key, value));\r\n            }\r\n            else {\r\n                if (value === VOID0) {\r\n                    if (allowOverwrite)\r\n                        return false;\r\n                    else\r\n                        throw new Error(\"Cannot add 'undefined' value.\");\r\n                }\r\n                buckets[hash] = [entry = new HashEntry(key, value)];\r\n            }\r\n            ++_._count;\r\n            entries.addLast(entry);\r\n            _._onValueUpdate(key, value, undefined);\r\n            return true;\r\n        };\r\n        Dictionary.prototype.addByKeyValue = function (key, value) {\r\n            this.setKV(key, value, false);\r\n        };\r\n        Dictionary.prototype.getValue = function (key) {\r\n            var buckets = this._buckets, comparer = this.compareSelector;\r\n            var compareKey = comparer(key);\r\n            var hash = computeHashCode(compareKey);\r\n            if (!callHasOwnProperty(buckets, hash))\r\n                return undefined;\r\n            var array = buckets[hash];\r\n            for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\r\n                var entry = array_1[_i];\r\n                if (comparer(entry.key) === compareKey)\r\n                    return entry.value;\r\n            }\r\n            return undefined;\r\n        };\r\n        Dictionary.prototype.setValue = function (key, value) {\r\n            return this.setKV(key, value, true);\r\n        };\r\n        Dictionary.prototype.containsKey = function (key) {\r\n            var _ = this, buckets = _._buckets, comparer = _.compareSelector;\r\n            var compareKey = comparer(key);\r\n            var hash = computeHashCode(compareKey);\r\n            if (!callHasOwnProperty(buckets, hash))\r\n                return false;\r\n            var array = buckets[hash];\r\n            for (var i = 0, len = array.length; i < len; i++) {\r\n                if (comparer(array[i].key) === compareKey)\r\n                    return true;\r\n            }\r\n            return false;\r\n        };\r\n        Dictionary.prototype.clear = function () {\r\n            var _ = this, buckets = _._buckets, count = _super.prototype.clear.call(this);\r\n            _._count = 0;\r\n            for (var key in buckets) {\r\n                if (buckets.hasOwnProperty(key))\r\n                    delete buckets[key];\r\n            }\r\n            _._entries.clear();\r\n            return count;\r\n        };\r\n        Dictionary.prototype.getCount = function () {\r\n            return this._count;\r\n        };\r\n        Dictionary.prototype.getEnumerator = function () {\r\n            var _ = this, currentEntry;\r\n            return new EnumeratorBase_1.default(function () { currentEntry = _._entries.first; }, function (yielder) {\r\n                if (currentEntry != null) {\r\n                    var result = { key: currentEntry.key, value: currentEntry.value };\r\n                    currentEntry = currentEntry.next;\r\n                    return yielder.yieldReturn(result);\r\n                }\r\n                return yielder.yieldBreak();\r\n            });\r\n        };\r\n        Dictionary.prototype.getKeys = function () {\r\n            var _ = this, result = [];\r\n            _._entries.forEach(function (entry) { return result.push(entry.key); });\r\n            return result;\r\n        };\r\n        Dictionary.prototype.getValues = function () {\r\n            var _ = this, result = [];\r\n            _._entries.forEach(function (entry) { return result.push(entry.value); });\r\n            return result;\r\n        };\r\n        return Dictionary;\r\n    }(DictionaryBase_1.default));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Dictionary;\r\n});\r\n//# sourceMappingURL=Dictionary.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual} from '../../Compare';\r\nimport Type from '../../Types';\r\nimport Functions from '../../Functions';\r\nimport DictionaryAbstractBase from './DictionaryBase';\r\nimport EnumeratorBase from '../Enumeration/EnumeratorBase';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key?:TKey,\r\n\t\tpublic value?:TValue,\r\n\t\tpublic prev?:HashEntry<TKey, TValue>,\r\n\t\tpublic next?:HashEntry<TKey, TValue>)\r\n\t{ }\r\n}\r\n\r\nclass EntryList<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic first?:HashEntry<TKey, TValue>,\r\n\t\tpublic last?:HashEntry<TKey, TValue>)\r\n\t{ }\r\n\r\n\taddLast(entry:HashEntry<TKey, TValue>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_.last!=null)\r\n\t\t{\r\n\t\t\t_.last.next = entry;\r\n\t\t\tentry.prev = _.last;\r\n\t\t\t_.last = entry;\r\n\t\t}\r\n\t\telse\r\n\t\t\t_.first = _.last = entry;\r\n\t}\r\n\r\n\treplace(entry:HashEntry<TKey, TValue>, newEntry:HashEntry<TKey, TValue>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(entry.prev!=null)\r\n\t\t{\r\n\t\t\tentry.prev.next = newEntry;\r\n\t\t\tnewEntry.prev = entry.prev;\r\n\t\t}\r\n\t\telse _.first = newEntry;\r\n\r\n\t\tif(entry.next!=null)\r\n\t\t{\r\n\t\t\tentry.next.prev = newEntry;\r\n\t\t\tnewEntry.next = entry.next;\r\n\t\t}\r\n\t\telse _.last = newEntry;\r\n\r\n\t}\r\n\r\n\tremove(entry:HashEntry<TKey, TValue>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(entry.prev!=null) entry.prev.next = entry.next;\r\n\t\telse _.first = entry.next;\r\n\r\n\t\tif(entry.next!=null) entry.next.prev = entry.prev;\r\n\t\telse _.last = entry.prev;\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\twhile(_.last)\r\n\t\t{\r\n\t\t\t_.remove(_.last);\r\n\t\t}\r\n\t}\r\n\r\n\tforEach(closure:(entry:HashEntry<TKey, TValue>) => void):void\r\n\t{\r\n\t\tvar _ = this, currentEntry:HashEntry<TKey, TValue> = _.first;\r\n\t\twhile(currentEntry)\r\n\t\t{\r\n\t\t\tclosure(currentEntry);\r\n\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nfunction computeHashCode(obj:any):string\r\n{\r\n\tif(obj===null) return \"null\";\r\n\tif(obj===VOID0) return \"undefined\";\r\n\r\n\treturn (typeof obj.toString===Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport default\r\nclass Dictionary<TKey, TValue> extends DictionaryAbstractBase<TKey, TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _entries = new EntryList<TKey, TValue>();\r\n\tprivate _buckets:IMap<HashEntry<TKey, TValue>[]> = {};\r\n\r\n\tconstructor(private compareSelector:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\r\n\tprivate setKV(key:TKey, value:TValue, allowOverwrite:boolean):boolean\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, entries = _._entries, comparer = _.compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey), entry:HashEntry<TKey, TValue>;\r\n\r\n\t\tif(callHasOwnProperty(buckets, hash))\r\n\t\t{\r\n\t\t\tvar equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\t\tvar array = buckets[hash];\r\n\t\t\tfor(let i = 0; i<array.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar old = array[i];\r\n\t\t\t\tif(comparer(old.key)===compareKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!allowOverwrite)\r\n\t\t\t\t\t\tthrow new Error(\"Key already exists.\");\r\n\r\n\t\t\t\t\tvar changed = !equal(old.value, value);\r\n\t\t\t\t\tif(changed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(value===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentries.remove(old);\r\n\t\t\t\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t\t\t\tif(!array.length)\r\n\t\t\t\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\t\t\t--_._count;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentry = new HashEntry<TKey, TValue>(key, value);\r\n\t\t\t\t\t\t\tentries.replace(old, entry);\r\n\t\t\t\t\t\t\tarray[i] = entry;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_._onValueUpdate(key, value, old.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn changed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tarray.push(entry = entry || new HashEntry<TKey, TValue>(key, value));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif(allowOverwrite)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"Cannot add 'undefined' value.\");\r\n\t\t\t}\r\n\t\t\tbuckets[hash] = [entry = new HashEntry<TKey, TValue>(key, value)];\r\n\t\t}\r\n\t\t++_._count;\r\n\t\tentries.addLast(entry);\r\n\t\t_._onValueUpdate(key, value, undefined);\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddByKeyValue(key:TKey, value:TValue):void\r\n\t{\r\n\t\tthis.setKV(key, value, false);\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar buckets = this._buckets, comparer = this.compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return undefined;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let entry of array)\r\n\t\t{\r\n\t\t\tif(comparer(entry.key)===compareKey) return entry.value;\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tsetValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\treturn this.setKV(key, value, true);\r\n\t}\r\n\r\n\tcontainsKey(key:TKey):boolean\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, comparer = _.compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return false;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(comparer(array[i].key)===compareKey) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, count = super.clear(); // Remove one by one to allow for signaling.\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\t_._count = 0;\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t\tdelete buckets[key];\r\n\t\t}\r\n\r\n\t\t_._entries.clear();\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tvar _ = this, currentEntry:HashEntry<TKey, TValue>;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() => { currentEntry = _._entries.first; },\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tvar _ = this, result:TKey[] = [];\r\n\t\t_._entries.forEach(entry=> result.push(entry.key));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\t_._entries.forEach(entry=> result.push(entry.value));\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n"]}