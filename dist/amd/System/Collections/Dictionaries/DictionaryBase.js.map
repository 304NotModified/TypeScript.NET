{"version":3,"sources":["System/Collections/Dictionaries/DictionaryBase.js","System/Collections/Dictionaries/DictionaryBase.ts"],"names":["define","require","exports","Compare_1","Enumerator_1","CollectionBase_1","EnumeratorBase_1","ArgumentNullException_1","InvalidOperationException_1","KeyValueExtract_1","extends_1","KeyNotFoundException_1","__extends","VOID0","DictionaryBase","_super","source","call","this","prototype","_onValueModified","key","value","old","_addInternal","item","_this","ArgumentNullException","extractKeyValue","addByKeyValue","_clearInternal","_","count","_i","_a","keys","length","removeByKey","contains","getCount","v","getValue","areEqual","_removeInternal","Object","defineProperty","get","getKeys","enumerable","configurable","getValues","InvalidOperationException","containsKey","ex","data","setValue","getAssuredValue","KeyNotFoundException","tryGetValue","out","assertModifiable","changed","_setValueInternal","_signalModification","_getEntry","containsValue","e","getEnumerator","moveNext","current","dispose","removeByValue","importEntries","pairs","_importEntries","forEach","pair","throwIfDisposed","ver","len","index","EnumeratorBase","_version","yielder","assertVersion","yieldReturn","yieldBreak","CollectionBase"],"mappings":"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","file":"DictionaryBase.js","sourcesContent":["define([\"require\", \"exports\", \"../../Compare\", \"../Enumeration/Enumerator\", \"../CollectionBase\", \"../Enumeration/EnumeratorBase\", \"../../Exceptions/ArgumentNullException\", \"../../Exceptions/InvalidOperationException\", \"../../KeyValueExtract\", \"../../../extends\", \"../KeyNotFoundException\"], function (require, exports, Compare_1, Enumerator_1, CollectionBase_1, EnumeratorBase_1, ArgumentNullException_1, InvalidOperationException_1, KeyValueExtract_1, extends_1, KeyNotFoundException_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var DictionaryBase = (function (_super) {\n        __extends(DictionaryBase, _super);\n        function DictionaryBase(source) {\n            _super.call(this, source);\n        }\n        DictionaryBase.prototype._onValueModified = function (key, value, old) {\n        };\n        DictionaryBase.prototype._addInternal = function (item) {\n            var _this = this;\n            if (!item)\n                throw new ArgumentNullException_1.ArgumentNullException('item', 'Dictionaries must use a valid key/value pair. \\'' + item + '\\' is not allowed.');\n            return KeyValueExtract_1.extractKeyValue(item, function (key, value) { return _this.addByKeyValue(key, value); });\n        };\n        DictionaryBase.prototype._clearInternal = function () {\n            var _ = this;\n            var count = 0;\n            for (var _i = 0, _a = _.keys; _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (_.removeByKey(key))\n                    count++;\n            }\n            return count;\n        };\n        DictionaryBase.prototype.contains = function (item) {\n            var _this = this;\n            if (!item || !this.getCount())\n                return false;\n            return KeyValueExtract_1.extractKeyValue(item, function (key, value) {\n                var v = _this.getValue(key);\n                return Compare_1.areEqual(value, v);\n            });\n        };\n        DictionaryBase.prototype._removeInternal = function (item) {\n            var _this = this;\n            if (!item)\n                return 0;\n            return KeyValueExtract_1.extractKeyValue(item, function (key, value) {\n                var v = _this.getValue(key);\n                return (Compare_1.areEqual(value, v) && _this.removeByKey(key))\n                    ? 1 : 0;\n            });\n        };\n        Object.defineProperty(DictionaryBase.prototype, \"keys\", {\n            get: function () { return this.getKeys(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DictionaryBase.prototype, \"values\", {\n            get: function () { return this.getValues(); },\n            enumerable: true,\n            configurable: true\n        });\n        DictionaryBase.prototype.addByKeyValue = function (key, value) {\n            if (value === VOID0)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot add 'undefined' as a value.\");\n            var _ = this;\n            if (_.containsKey(key)) {\n                var ex = new InvalidOperationException_1.InvalidOperationException(\"Adding a key/value when the key already exists.\");\n                ex.data['key'] = key;\n                ex.data['value'] = value;\n                throw ex;\n            }\n            return _.setValue(key, value);\n        };\n        DictionaryBase.prototype.getAssuredValue = function (key) {\n            var value = this.getValue(key);\n            if (value === VOID0)\n                throw new KeyNotFoundException_1.KeyNotFoundException(\"Key '\" + key + \"' not found.\");\n            return value;\n        };\n        DictionaryBase.prototype.tryGetValue = function (key, out) {\n            var value = this.getValue(key);\n            if (value !== VOID0) {\n                out(value);\n                return true;\n            }\n            return false;\n        };\n        DictionaryBase.prototype.setValue = function (key, value) {\n            var _ = this;\n            _.assertModifiable();\n            var changed = false;\n            var old = _.getValue(key);\n            if (!Compare_1.areEqual(value, old) && _._setValueInternal(key, value)) {\n                changed = true;\n                _._onValueModified(key, value, old);\n            }\n            _._signalModification(changed);\n            return changed;\n        };\n        DictionaryBase.prototype.containsKey = function (key) {\n            return !!this._getEntry(key);\n        };\n        DictionaryBase.prototype.containsValue = function (value) {\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                if (Compare_1.areEqual(e.current, value, true)) {\n                    e.dispose();\n                    return true;\n                }\n            }\n            return false;\n        };\n        DictionaryBase.prototype.removeByKey = function (key) {\n            return this.setValue(key, VOID0);\n        };\n        DictionaryBase.prototype.removeByValue = function (value) {\n            var _ = this;\n            var count = 0;\n            for (var _i = 0, _a = _.getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (Compare_1.areEqual(_.getValue(key), value, true)) {\n                    _.removeByKey(key);\n                    count++;\n                }\n            }\n            return count;\n        };\n        DictionaryBase.prototype.importEntries = function (pairs) {\n            return _super.prototype.importEntries.call(this, pairs);\n        };\n        DictionaryBase.prototype._importEntries = function (pairs) {\n            var _ = this;\n            if (!pairs)\n                return 0;\n            var changed = 0;\n            Enumerator_1.forEach(pairs, function (pair) { return KeyValueExtract_1.extractKeyValue(pair, function (key, value) {\n                if (_._setValueInternal(key, value))\n                    changed++;\n            }); });\n            return changed;\n        };\n        DictionaryBase.prototype.getEnumerator = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var ver, keys, len, index = 0;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                _.throwIfDisposed();\n                ver = _._version;\n                keys = _.getKeys();\n                len = keys.length;\n            }, function (yielder) {\n                _.throwIfDisposed();\n                _.assertVersion(ver);\n                while (index < len) {\n                    var key = keys[index++], value = _.getValue(key);\n                    if (value !== VOID0)\n                        return yielder.yieldReturn({ key: key, value: value });\n                }\n                return yielder.yieldBreak();\n            });\n        };\n        return DictionaryBase;\n    }(CollectionBase_1.CollectionBase));\n    exports.DictionaryBase = DictionaryBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = DictionaryBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../../Compare\";\r\nimport {forEach} from \"../Enumeration/Enumerator\";\r\nimport {CollectionBase} from \"../CollectionBase\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../../Exceptions/InvalidOperationException\";\r\nimport {extractKeyValue} from \"../../KeyValueExtract\";\r\nimport {IKeyValuePair, KeyValuePair} from \"../../KeyValuePair\";\r\nimport {IDictionary} from \"./IDictionary\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"../IEnumerableOrArray\";\r\nimport __extendsImport from \"../../../extends\";\r\nimport {KeyNotFoundException} from \"../KeyNotFoundException\";\r\nimport {Action} from \"../../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n// Design Note: Should DictionaryAbstractBase be IDisposable?\r\nexport abstract class DictionaryBase<TKey, TValue>\r\nextends CollectionBase<IKeyValuePair<TKey,TValue>> implements IDictionary<TKey, TValue>\r\n{\r\n\tconstructor(source?:IEnumerableOrArray<IKeyValuePair<TKey,TValue>>)\r\n\t{\r\n\t\tsuper(source);\r\n\t}\r\n\r\n\r\n\t//noinspection JSUnusedLocalSymbols\r\n\tprotected _onValueModified(key:TKey, value:TValue|undefined, old:TValue|undefined):void\r\n\t{\r\n\t}\r\n\r\n\tprotected _addInternal(item:KeyValuePair<TKey, TValue>):boolean\r\n\t{\r\n\t\tif(!item)\r\n\t\t\tthrow new ArgumentNullException(\r\n\t\t\t\t'item', 'Dictionaries must use a valid key/value pair. \\'' + item + '\\' is not allowed.'\r\n\t\t\t);\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>this.addByKeyValue(key, value));\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet count = 0;\r\n\r\n\t\tfor(let key of _.keys)\r\n\t\t{\r\n\t\t\tif(_.removeByKey(key)) count++;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tcontains(item:KeyValuePair<TKey, TValue>):boolean\r\n\t{\r\n\t\t// Should never have a null object in the collection.\r\n\t\tif(!item || !this.getCount()) return false;\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\t// Leave as variable for debugging...\r\n\t\t\t\tlet v = this.getValue(key);\r\n\t\t\t\treturn areEqual(value, v);\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\tprotected _removeInternal(item:IKeyValuePair<TKey, TValue>|[TKey,TValue]):number\r\n\t{\r\n\t\tif(!item) return 0;\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\t// Leave as variable for debugging...\r\n\t\t\t\tlet v = this.getValue(key);\r\n\t\t\t\treturn (areEqual(value, v) && this.removeByKey(key))\r\n\t\t\t\t\t? 1 : 0;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/////////////////////////////////////////\r\n\t// IDictionary<TKey,TValue>\r\n\t/////////////////////////////////////////\r\n\r\n\tprotected abstract getKeys():TKey[];\r\n\r\n\tget keys():TKey[] { return this.getKeys(); }\r\n\r\n\tprotected abstract getValues():TValue[];\r\n\r\n\tget values():TValue[] { return this.getValues(); }\r\n\r\n\r\n\taddByKeyValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\tif(value===VOID0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot add 'undefined' as a value.\");\r\n\r\n\t\tconst _ = this;\r\n\t\tif(_.containsKey(key))\r\n\t\t{\r\n\t\t\tconst ex = new InvalidOperationException(\"Adding a key/value when the key already exists.\");\r\n\t\t\tex.data['key'] = key;\r\n\t\t\tex.data['value'] = value;\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\r\n\t\treturn _.setValue(key, value);\r\n\t}\r\n\r\n\tprotected abstract _getEntry(key:TKey):IKeyValuePair<TKey,TValue>|null;\r\n\r\n\tabstract getValue(key:TKey):TValue|undefined;\r\n\r\n\tgetAssuredValue(key:TKey):TValue\r\n\t{\r\n\t\tconst value = this.getValue(key);\r\n\t\tif(value===VOID0)\r\n\t\t\tthrow new KeyNotFoundException(`Key '${key}' not found.`);\r\n\t\treturn value;\r\n\t}\r\n\r\n\ttryGetValue(key:TKey,out:Action<TValue>):boolean {\r\n\t\tconst value = this.getValue(key);\r\n\t\tif(value!==VOID0) {\r\n\t\t\tout(value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected abstract _setValueInternal(key:TKey, value:TValue|undefined):boolean;\r\n\r\n\t/**\r\n\t * Sets the value of an entry.\r\n\t * It's important to know that 'undefined' cannot exist as a value in the dictionary and is used as a flag for removal.\r\n\t * @param key\r\n\t * @param value\r\n\t * @returns {boolean}\r\n\t */\r\n\tsetValue(key:TKey, value:TValue|undefined):boolean\r\n\t{\r\n\t\t// setValue shouldn't need to worry about recursion...\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\tlet changed = false;\r\n\t\tconst old = _.getValue(key); // get the old value here and pass to internal.\r\n\t\tif(!areEqual(value, old) && _._setValueInternal(key, value))\r\n\t\t{\r\n\t\t\tchanged = true;\r\n\t\t\t_._onValueModified(key, value, old)\r\n\t\t}\r\n\r\n\t\t_._signalModification(changed);\r\n\t\treturn changed;\r\n\t}\r\n\r\n\tcontainsKey(key:TKey):boolean\r\n\t{\r\n\t\treturn !!this._getEntry(key);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tconst e = this.getEnumerator();\r\n\t\twhile(e.moveNext())\r\n\t\t{\r\n\t\t\tif(areEqual(e.current, value, true))\r\n\t\t\t{\r\n\t\t\t\te.dispose();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveByKey(key:TKey):boolean\r\n\t{\r\n\t\treturn this.setValue(key, VOID0);\r\n\t}\r\n\r\n\tremoveByValue(value:TValue):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet count = 0;\r\n\t\tfor(let key of _.getKeys())\r\n\t\t{\r\n\t\t\tif(areEqual(_.getValue(key), value, true))\r\n\t\t\t{\r\n\t\t\t\t_.removeByKey(key);\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\timportEntries(pairs:IEnumerableOrArray<KeyValuePair<TKey, TValue>>|null|undefined):number\r\n\t{\r\n\t\t// Allow piping through to trigger onModified properly.\r\n\t\treturn super.importEntries(<any>pairs);\r\n\t}\r\n\r\n\tprotected _importEntries(pairs:IEnumerableOrArray<KeyValuePair<TKey, TValue>>|null|undefined):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!pairs) return 0;\r\n\t\tlet changed:number = 0;\r\n\t\tforEach(pairs,\r\n\t\t\tpair=>extractKeyValue(pair, (key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_._setValueInternal(key, value))\r\n\t\t\t\t\tchanged++;\r\n\t\t\t})\r\n\t\t);\r\n\t\treturn changed;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet ver:number, keys:TKey[], len:number, index = 0;\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\tver = _._version; // Track the version since getKeys is a copy.\r\n\t\t\t\tkeys = _.getKeys();\r\n\t\t\t\tlen = keys.length;\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t_.assertVersion(ver);\r\n\r\n\t\t\t\twhile(index<len)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst key = keys[index++], value = _.getValue(key);\r\n\t\t\t\t\tif(value!==VOID0) // Still valid?\r\n\t\t\t\t\t\treturn yielder.yieldReturn({key: key, value: value});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport default DictionaryBase;"]}