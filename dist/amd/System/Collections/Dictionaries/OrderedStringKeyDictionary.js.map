{"version":3,"sources":["System/Collections/Dictionaries/OrderedStringKeyDictionary.js","System/Collections/Dictionaries/OrderedStringKeyDictionary.ts"],"names":["define","require","exports","StringKeyDictionary_1","ArgumentOutOfRangeException_1","Utility_1","extends_1","__extends","VOID0","OrderedStringKeyDictionary","_super","_this","call","this","_order","prototype","indexOfKey","key","o","length","indexOf","getValueByIndex","index","getValue","setValue","value","keepIndex","_","exists","remove","push","setByIndex","order","ArgumentOutOfRangeException","importValues","values","handleUpdate","changed","i","setValues","_i","arguments","removeByIndex","getKeys","filter","containsKey","StringKeyDictionary","Object","defineProperty"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,wBAAyB,+CAAgD,mBAAoB,oBAAqB,SAAUC,EAASC,EAASC,EAAuBC,EAA+BC,EAAWC,GACzO,YCSJ,IAAMC,GAAYD,EAAAA,WAEZE,EAAkB,OAExBC,EAAA,SAAAC,GAOC,QAAAD,KAAA,GAAAE,GAECD,EAAAE,KAAAC,OAAOA,IDZG,OCQHF,GAAAG,UDRUH,ECyFnB,MArFQJ,GAAAE,EAAAC,GAWPD,EAAAM,UAAAC,WAAA,SAAWC,GAEV,GAAMC,GAAIL,KAAKC,MACf,OAAOI,GAAEC,OAASD,EAAEE,QAAQH,EAAK,OAGlCR,EAAAM,UAAAM,gBAAA,SAAgBC,GAEf,GAAMJ,GAAIL,KAAKC,MACf,OAAOQ,GAAMJ,EAAEC,OAASN,KAAKU,SAASL,EAAEI,IAAUd,GAInDC,EAAAM,UAAAS,SAAA,SAASP,EAAYQ,EAAwBC,GAG5C,GAAMC,GAAId,KACNe,EAASD,EAAEX,WAAWC,MAM1B,OALIW,IAAWH,IAAQjB,IAASkB,EAExBE,GAAUH,IAAQjB,IAAUkB,GACnCrB,EAAAwB,OAAOF,EAAEb,OAAQG,GAFjBU,EAAEb,OAAOgB,KAAKb,GAIRP,EAAAK,UAAMS,SAAQZ,KAAAC,KAACI,EAAKQ,IAG5BhB,EAAAM,UAAAgB,WAAA,SAAWT,EAAcG,GAExB,GAAME,GAAId,KACJmB,EAAQL,EAAEb,MAChB,IAAGQ,EAAM,EACR,KAAM,IAAIlB,GAAA6B,4BAA4B,QAASX,EAAO,qBACvD,IAAGA,GAAOU,EAAMb,OACf,KAAM,IAAIf,GAAA6B,4BAA4B,QAASX,EAAO,6BACvD,OAAOK,GAAEH,SAASQ,EAAMV,GAAQG,IAIjChB,EAAAM,UAAAmB,aAAA,SAAaC,GAEZ,GAAMR,GAAId,IACV,OAAOc,GAAES,aACR,WAGC,IAAI,GADAC,IAAkB,EACdC,EAAI,EAAGA,EAAEH,EAAOhB,OAAQmB,IAE5BX,EAAEI,WAAWO,EAAGH,EAAOG,MACzBD,GAAU,EAEZ,OAAOA,MAOV5B,EAAAM,UAAAwB,UAAA,WD3BW,IC2BD,GAAAJ,MAAAK,EAAA,EAAAA,EAAAC,UAAAtB,OAAAqB,IAAAL,EAAAK,GAAAC,UAAAD,EAET,OAAO3B,MAAKqB,aAAaC,IAG1B1B,EAAAM,UAAA2B,cAAA,SAAcpB,GAEb,MAAOT,MAAKkB,WAAWT,EAAOd,IAGrBC,EAAAM,UAAA4B,QAAV,WAEC,GAAMhB,GAAId,KACJK,EAAIS,EAAEb,MACZ,OAAOI,GAAEC,QAAUD,EAAE0B,OAAO,SAAA3B,GAAM,MAAAU,GAAEkB,YAAY5B,UAGlDR,GArFQN,EAAA2C,oBADK5C,GAAAO,2BAAAA,ED0DTsC,OAAOC,eAAe9C,EAAS,cAAgBuB,OAAO,IC8B1DvB,EAAAA,WAAeO","file":"OrderedStringKeyDictionary.js","sourcesContent":["define([\"require\", \"exports\", \"./StringKeyDictionary\", \"../../Exceptions/ArgumentOutOfRangeException\", \"../Array/Utility\", \"../../../extends\"], function (require, exports, StringKeyDictionary_1, ArgumentOutOfRangeException_1, Utility_1, extends_1) {\n    \"use strict\";\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var OrderedStringKeyDictionary = (function (_super) {\n        __extends(OrderedStringKeyDictionary, _super);\n        function OrderedStringKeyDictionary() {\n            var _this = _super.call(this) || this;\n            // noinspection JSMismatchedCollectionQueryUpdate\n            _this._order = []; // Maintains indexes.\n            return _this;\n        }\n        OrderedStringKeyDictionary.prototype.indexOfKey = function (key) {\n            var o = this._order;\n            return o.length ? o.indexOf(key, 0) : -1;\n        };\n        OrderedStringKeyDictionary.prototype.getValueByIndex = function (index) {\n            var o = this._order;\n            return index < o.length ? this.getValue(o[index]) : VOID0;\n        };\n        // adding keepIndex allows for clearing a value while still retaining it's index.\n        OrderedStringKeyDictionary.prototype.setValue = function (key, value, keepIndex) {\n            // TODO: This may be inefficient and could be improved.\n            var _ = this;\n            var exists = _.indexOfKey(key) != -1;\n            if (!exists && (value !== VOID0 || keepIndex))\n                _._order.push(key);\n            else if (exists && value === VOID0 && !keepIndex)\n                Utility_1.remove(_._order, key);\n            return _super.prototype.setValue.call(this, key, value);\n        };\n        OrderedStringKeyDictionary.prototype.setByIndex = function (index, value) {\n            var _ = this;\n            var order = _._order;\n            if (index < 0)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('index', index, 'Is less than zero.');\n            if (index >= order.length)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('index', index, 'Is greater than the count.');\n            return _.setValue(order[index], value);\n        };\n        // importValues([x,y,z]);\n        OrderedStringKeyDictionary.prototype.importValues = function (values) {\n            var _ = this;\n            return _.handleUpdate(function () {\n                var changed = false;\n                for (var i = 0; i < values.length; i++) {\n                    if (_.setByIndex(i, values[i]))\n                        changed = true;\n                }\n                return changed;\n            });\n        };\n        // setValues(x,y,z);\n        OrderedStringKeyDictionary.prototype.setValues = function () {\n            var values = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                values[_i] = arguments[_i];\n            }\n            return this.importValues(values);\n        };\n        OrderedStringKeyDictionary.prototype.removeByIndex = function (index) {\n            return this.setByIndex(index, VOID0);\n        };\n        OrderedStringKeyDictionary.prototype.getKeys = function () {\n            var _ = this;\n            var o = _._order;\n            return o.length && o.filter(function (key) { return _.containsKey(key); }) || [];\n        };\n        return OrderedStringKeyDictionary;\n    }(StringKeyDictionary_1.StringKeyDictionary));\n    exports.OrderedStringKeyDictionary = OrderedStringKeyDictionary;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = OrderedStringKeyDictionary;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {StringKeyDictionary} from \"./StringKeyDictionary\";\r\nimport {ArgumentOutOfRangeException} from \"../../Exceptions/ArgumentOutOfRangeException\";\r\nimport {IOrderedDictionary} from \"./IDictionary\";\r\nimport {remove} from \"../Array/Utility\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport class OrderedStringKeyDictionary<TValue>\r\nextends StringKeyDictionary<TValue> implements IOrderedDictionary<string, TValue>\r\n{\r\n\r\n\t// noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _order:string[] = []; // Maintains indexes.\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tindexOfKey(key:string):number\r\n\t{\r\n\t\tconst o = this._order;\r\n\t\treturn o.length ? o.indexOf(key, 0) : -1;\r\n\t}\r\n\r\n\tgetValueByIndex(index:number):TValue|undefined\r\n\t{\r\n\t\tconst o = this._order;\r\n\t\treturn index<o.length ? this.getValue(o[index]) : VOID0;\r\n\t}\r\n\r\n\t// adding keepIndex allows for clearing a value while still retaining it's index.\r\n\tsetValue(key:string, value:TValue|undefined, keepIndex?:boolean):boolean\r\n\t{\r\n\t\t// TODO: This may be inefficient and could be improved.\r\n\t\tconst _ = this;\r\n\t\tlet exists = _.indexOfKey(key)!= -1;\r\n\t\tif(!exists && (value!==VOID0 || keepIndex))\r\n\t\t\t_._order.push(key);\r\n\t\telse if(exists && value===VOID0 && !keepIndex)\r\n\t\t\tremove(_._order, key);\r\n\r\n\t\treturn super.setValue(key, value);\r\n\t}\r\n\r\n\tsetByIndex(index:number, value:TValue|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst order = _._order;\r\n\t\tif(index<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is less than zero.');\r\n\t\tif(index>=order.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is greater than the count.');\r\n\t\treturn _.setValue(order[index], value);\r\n\t}\r\n\r\n\t// importValues([x,y,z]);\r\n\timportValues(values:TValue[]):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet changed:boolean = false;\r\n\t\t\t\tfor(let i = 0; i<values.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_.setByIndex(i, values[i]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t// setValues(x,y,z);\r\n\tsetValues(...values:TValue[]):boolean\r\n\t{\r\n\t\treturn this.importValues(values);\r\n\t}\r\n\r\n\tremoveByIndex(index:number):boolean\r\n\t{\r\n\t\treturn this.setByIndex(index, VOID0);\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst o = _._order;\r\n\t\treturn o.length && o.filter(key=> _.containsKey(key)) || [];\r\n\t}\r\n\r\n}\r\n\r\nexport default OrderedStringKeyDictionary;\r\n"]}