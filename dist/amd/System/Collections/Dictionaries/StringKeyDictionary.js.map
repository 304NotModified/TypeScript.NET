{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.js","System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Compare_1","DictionaryAbstractBase_1","StringKeyDictionary","_super","StringKeyDictionary.constructor","StringKeyDictionary.containsKey","StringKeyDictionary.containsValue","StringKeyDictionary.getValue","StringKeyDictionary.setValue","StringKeyDictionary.importMap","StringKeyDictionary.toMap","get","StringKeyDictionary.keys","enumerable","configurable","StringKeyDictionary.values","StringKeyDictionary.count","defineProperty","value"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,gBAAiB,4BAA6B,SAAUC,EAASC,EAASC,EAAWC,GCCnH,GAAAC,GAAA,SAAAC,GAAAD,QAAAA,KAEQE,EAAAA,MAAAA,KAAAA,WAECA,KAAAA,OAAgBA,EAChBA,KAAAA,QAqGTF,MAxGQA,WAAAA,EAAAA,GAMPA,EAAAA,UAAAA,YAAAA,SAAYA,GACXG,MAAOA,KAAOA,MAAKA,MAGpBH,EAAAA,UAAAA,cAAAA,SAAcA,GACbI,GAAIA,GAAMA,KAAKA,KAAMA,EAAmDA,EAAAA,QACxEA,KAAIA,GAAIA,KAAOA,GACdA,GAAGA,EAAIA,eAAeA,IAAQA,EAAMA,EAAIA,GAAMA,GAC7CA,OAAOA,CAETA,QAAOA,GAIRJ,EAAAA,UAAAA,SAAAA,SAASA,GACRK,MAAOA,MAAKA,KAAKA,IAGlBL,EAAAA,UAAAA,SAAAA,SAASA,EAAYA,GACpBM,GAAIA,GAAIA,KAAMA,EAAMA,EAAEA,KAAMA,EAAMA,EAAIA,EACtCA,OAAGA,KAAMA,GAEGA,SAARA,EACCA,IAAOA,WACFA,GAAIA,KACTA,EAAEA,SAIAA,IAAOA,MACTA,EAAEA,OACLA,EAAIA,GAAOA,GAGZA,EAAEA,eAAeA,EAAKA,EAAOA,IACtBA,IAEDA,GAIRN,EAAAA,UAAAA,UAAAA,SAAUA,GACTO,GAAIA,GAAIA,IACRA,OAAOA,GAAEA,aACRA,WACCA,GAAIA,IAAkBA,CACtBA,KAAIA,GAAIA,KAAOA,GACXA,EAAOA,eAAeA,IAAQA,EAAEA,SAASA,EAAKA,EAAOA,MACvDA,GAAUA,EAEZA,OAAOA,MAKVP,EAAAA,UAAAA,MAAAA,SAAMA,GACLQ,GAAIA,GAAIA,KAAMA,IACdA,KAAIA,GAAIA,KAAOA,GAAEA,KAChBA,GAAGA,EAAEA,KAAKA,eAAeA,GACzBA,CACCA,GAAIA,GAAQA,EAAEA,KAAKA,EAChBA,KACFA,EAAQA,EAASA,EAAKA,IACZA,SAARA,IACFA,EAAOA,GAAOA,GAGjBA,MAAOA,IAGRR,OAAAA,eAAIA,EAAAA,UAAAA,QDbOS,ICaXT,WAECU,GAAIA,GAAIA,KAAMA,IACdA,KAAIA,GAAIA,KAAOA,GAAEA,KACbA,EAAEA,KAAKA,eAAeA,IACxBA,EAAOA,KAAKA,EAGdA,OAAOA,IDbGC,YAAY,EACZC,cAAc,ICgBzBZ,OAAAA,eAAIA,EAAAA,UAAAA,UDbOS,ICaXT,WAECa,GAAIA,GAAIA,KAAMA,IACdA,KAAIA,GAAIA,KAAOA,GAAEA,KACbA,EAAEA,KAAKA,eAAeA,IACxBA,EAAOA,KAAKA,EAAEA,KAAKA,GAGrBA,OAAOA,IDbGF,YAAY,EACZC,cAAc,ICezBZ,OAAAA,eAAIA,EAAAA,UAAAA,SDZOS,ICYXT,WACCc,MAAOA,MAAKA,QDVFH,YAAY,EACZC,cAAc,ICa1BZ,GAxGQD,EAAAA,WAFRN,QAAAsB,eAAAlB,EAAA,cAAAmB,OAAA,IDkGInB,EAAAA,WAAkBG","file":"System/Collections/Dictionaries/StringKeyDictionary.js","sourcesContent":["///<reference path=\"IDictionary.d.ts\"/>\r\n/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport { areEqual } from '../../Compare';\r\nimport DictionaryAbstractBase from './DictionaryAbstractBase';\r\nexport default class StringKeyDictionary extends DictionaryAbstractBase {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this._count = 0;\r\n        this._map = {};\r\n    }\r\n    containsKey(key) {\r\n        return key in this._map;\r\n    }\r\n    containsValue(value) {\r\n        var map = this._map, equal = areEqual;\r\n        for (let key in map) {\r\n            if (map.hasOwnProperty(key) && equal(map[key], value))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    getValue(key) {\r\n        return this._map[key];\r\n    }\r\n    setValue(key, value) {\r\n        var _ = this, map = _._map, old = map[key];\r\n        if (old !== value) {\r\n            if (value === undefined) {\r\n                if (key in map) {\r\n                    delete map[key];\r\n                    --_._count;\r\n                }\r\n            }\r\n            else {\r\n                if (!(key in map))\r\n                    ++_._count;\r\n                map[key] = value;\r\n            }\r\n            _._onValueUpdate(key, value, old);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    importMap(values) {\r\n        var _ = this;\r\n        return _.handleUpdate(() => {\r\n            var changed = false;\r\n            for (let key in values) {\r\n                if (values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n                    changed = true;\r\n            }\r\n            return changed;\r\n        });\r\n    }\r\n    toMap(selector) {\r\n        var _ = this, result = {};\r\n        for (let key in _._map) {\r\n            if (_._map.hasOwnProperty(key)) {\r\n                var value = _._map[key];\r\n                if (selector)\r\n                    value = selector(key, value);\r\n                if (value !== undefined)\r\n                    result[key] = value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    get keys() {\r\n        var _ = this, result = [];\r\n        for (let key in _._map) {\r\n            if (_._map.hasOwnProperty(key))\r\n                result.push(key);\r\n        }\r\n        return result;\r\n    }\r\n    get values() {\r\n        var _ = this, result = [];\r\n        for (let key in _._map) {\r\n            if (_._map.hasOwnProperty(key))\r\n                result.push(_._map[key]);\r\n        }\r\n        return result;\r\n    }\r\n    get count() {\r\n        return this._count;\r\n    }\r\n}\r\n//# sourceMappingURL=StringKeyDictionary.js.map","///<reference path=\"IDictionary.d.ts\"/>\r\n/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from '../../Compare';\r\nimport DictionaryAbstractBase from './DictionaryAbstractBase';\r\nimport ArgumentNullException from '../../Exceptions/ArgumentNullException';\r\n\r\n\r\nexport default\r\nclass StringKeyDictionary<TValue>\r\nextends DictionaryAbstractBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _map:IMap<TValue> = {};\r\n\r\n\r\n\tcontainsKey(key:string):boolean {\r\n\t\treturn key in this._map;\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean {\r\n\t\tvar map = this._map, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key in map) {\r\n\t\t\tif(map.hasOwnProperty(key) && equal(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue {\r\n\t\treturn this._map[key];\r\n\t}\r\n\r\n\tsetValue(key:string, value:TValue):boolean {\r\n\t\tvar _ = this, map = _._map, old = map[key];\r\n\t\tif(old!==value) {\r\n\r\n\t\t\tif(value===undefined) {\r\n\t\t\t\tif(key in map) {\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t--_._count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(!(key in map))\r\n\t\t\t\t\t++_._count;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\t_._onValueUpdate(key, value, old);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean {\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() => {\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let key in values) {\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue> {\r\n\t\tvar _ = this, result:IMap<TValue> = {};\r\n\t\tfor(let key in _._map) {\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tvar value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==undefined)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tget keys():string[] {\r\n\r\n\t\tvar _ = this, result:string[] = [];\r\n\t\tfor(let key in _._map) {\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(key);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tget values():TValue[] {\r\n\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tfor(let key in _._map) {\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(_._map[key]);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tget count():number {\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n"]}