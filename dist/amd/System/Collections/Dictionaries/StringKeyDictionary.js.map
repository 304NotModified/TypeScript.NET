{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.js","System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Compare_1","DictionaryBase_1","VOID0","StringKeyDictionary","_super","apply","arguments","_count","_map","containsKey","key","containsValue","value","map","equal","areEqual","getValue","setValue","_","old","_onValueUpdate","importMap","values","handleUpdate","changed","toMap","selector","result","getKeys","push","getValues","getCount","defineProperty"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,gBAAiB,oBAAqB,SAAUC,EAASC,EAASC,EAAWC,GCH3G,YAMA,IAAMC,GAAY,OAElBC,EAAA,SAAAC,GAAA,QAAAD,KAEQC,EAAAC,MAAAlB,KAAAmB,WAECnB,KAAAoB,OAAgB,EAChBpB,KAAAqB,QAwHT,MA3HQtB,WAAAiB,EAAAC,GAMPD,EAAAT,UAAAe,YAAA,SAAYC,GAEX,MAAO,KAAQvB,MAAS,MAGzBgB,EAAAT,UAAAiB,cAAA,SAAcC,GAEb,GAAIC,GAAM1B,KAAKqB,KAAMM,EAAmDd,EAAAe,QACxE,KAAI,GAAIL,KAAOG,GAEd,GAAGA,EAAIpB,eAAeiB,IAAQI,EAAMD,EAAIH,GAAME,GAC7C,OAAO,CAET,QAAO,GAIRT,EAAAT,UAAAsB,SAAA,SAASN,GAER,MAAOvB,MAAKqB,KAAKE,IAGlBP,EAAAT,UAAAuB,SAAA,SAASP,EAAYE,GAEpB,GAAIM,GAAI/B,KAAM0B,EAAMK,EAAEV,KAAMW,EAAMN,EAAIH,EACtC,OAAGS,KAAMP,GAGLA,IAAQV,EAEP,IAAO,WAEFW,GAAIH,KACTQ,EAAEX,SAKA,IAAO,MACTW,EAAEX,OACLM,EAAIH,GAAOE,GAGZM,EAAEE,eAAeV,EAAKE,EAAOO,IACtB,IAED,GAIRhB,EAAAT,UAAA2B,UAAA,SAAUC,GAET,GAAIJ,GAAI/B,IACR,OAAO+B,GAAEK,aACR,WAEC,GAAIC,IAAkB,CACtB,KAAI,GAAId,KAAOY,GAEXA,EAAO7B,eAAeiB,IAAQQ,EAAED,SAASP,EAAKY,EAAOZ,MACvDc,GAAU,EAEZ,OAAOA,MAKVrB,EAAAT,UAAA+B,MAAA,SAAMC,GAEL,GAAIR,GAAI/B,KAAMwC,IACd,KAAI,GAAIjB,KAAOQ,GAAEV,KAEhB,GAAGU,EAAEV,KAAKf,eAAeiB,GACzB,CACC,GAAIE,GAAQM,EAAEV,KAAKE,EAChBgB,KACFd,EAAQc,EAAShB,EAAKE,IACpBA,IAAQV,IACVyB,EAAOjB,GAAOE,GAGjB,MAAOe,IAGExB,EAAAT,UAAAkC,QAAV,WAGC,GAAIV,GAAI/B,KAAMwC,IACd,KAAI,GAAIjB,KAAOQ,GAAEV,KAEbU,EAAEV,KAAKf,eAAeiB,IACxBiB,EAAOE,KAAKnB,EAGd,OAAOiB,IAIExB,EAAAT,UAAAoC,UAAV,WAGC,GAAIZ,GAAI/B,KAAMwC,IACd,KAAI,GAAIjB,KAAOQ,GAAEV,KAEbU,EAAEV,KAAKf,eAAeiB,IACxBiB,EAAOE,KAAKX,EAAEV,KAAKE,GAGrB,OAAOiB,IAGExB,EAAAT,UAAAqC,SAAV,WAEC,MAAO5C,MAAKoB,QAIdJ,GA3HQF,EAAAA,WAFRN,QAAAqC,eAAAjC,EAAA,cAAAa,OAAA,IDoFIb,EAAAA,WAAkBI","file":"System/Collections/Dictionaries/StringKeyDictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../../Compare', './DictionaryBase'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Compare_1 = require('../../Compare');\r\n    var DictionaryBase_1 = require('./DictionaryBase');\r\n    var VOID0 = void 0;\r\n    var StringKeyDictionary = (function (_super) {\r\n        __extends(StringKeyDictionary, _super);\r\n        function StringKeyDictionary() {\r\n            _super.apply(this, arguments);\r\n            this._count = 0;\r\n            this._map = {};\r\n        }\r\n        StringKeyDictionary.prototype.containsKey = function (key) {\r\n            return (key) in (this._map);\r\n        };\r\n        StringKeyDictionary.prototype.containsValue = function (value) {\r\n            var map = this._map, equal = Compare_1.areEqual;\r\n            for (var key in map) {\r\n                if (map.hasOwnProperty(key) && equal(map[key], value))\r\n                    return true;\r\n            }\r\n            return false;\r\n        };\r\n        StringKeyDictionary.prototype.getValue = function (key) {\r\n            return this._map[key];\r\n        };\r\n        StringKeyDictionary.prototype.setValue = function (key, value) {\r\n            var _ = this, map = _._map, old = map[key];\r\n            if (old !== value) {\r\n                if (value === VOID0) {\r\n                    if ((key) in (map)) {\r\n                        delete map[key];\r\n                        --_._count;\r\n                    }\r\n                }\r\n                else {\r\n                    if (!((key) in (map)))\r\n                        ++_._count;\r\n                    map[key] = value;\r\n                }\r\n                _._onValueUpdate(key, value, old);\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        StringKeyDictionary.prototype.importMap = function (values) {\r\n            var _ = this;\r\n            return _.handleUpdate(function () {\r\n                var changed = false;\r\n                for (var key in values) {\r\n                    if (values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n                        changed = true;\r\n                }\r\n                return changed;\r\n            });\r\n        };\r\n        StringKeyDictionary.prototype.toMap = function (selector) {\r\n            var _ = this, result = {};\r\n            for (var key in _._map) {\r\n                if (_._map.hasOwnProperty(key)) {\r\n                    var value = _._map[key];\r\n                    if (selector)\r\n                        value = selector(key, value);\r\n                    if (value !== VOID0)\r\n                        result[key] = value;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        StringKeyDictionary.prototype.getKeys = function () {\r\n            var _ = this, result = [];\r\n            for (var key in _._map) {\r\n                if (_._map.hasOwnProperty(key))\r\n                    result.push(key);\r\n            }\r\n            return result;\r\n        };\r\n        StringKeyDictionary.prototype.getValues = function () {\r\n            var _ = this, result = [];\r\n            for (var key in _._map) {\r\n                if (_._map.hasOwnProperty(key))\r\n                    result.push(_._map[key]);\r\n            }\r\n            return result;\r\n        };\r\n        StringKeyDictionary.prototype.getCount = function () {\r\n            return this._count;\r\n        };\r\n        return StringKeyDictionary;\r\n    }(DictionaryBase_1.default));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = StringKeyDictionary;\r\n});\r\n//# sourceMappingURL=StringKeyDictionary.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IDictionary.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual} from '../../Compare';\r\nimport DictionaryBase from './DictionaryBase';\r\nimport ArgumentNullException from '../../Exceptions/ArgumentNullException';\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport default\r\nclass StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _map:IMap<TValue> = {};\r\n\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\treturn (key)in(this._map);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tvar map = this._map, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && equal(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue\r\n\t{\r\n\t\treturn this._map[key];\r\n\t}\r\n\r\n\tsetValue(key:string, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key)in(map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t--_._count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!((key)in(map)))\r\n\t\t\t\t\t++_._count;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\t_._onValueUpdate(key, value, old);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tvar _ = this, result:IMap<TValue> = {};\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tvar value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\r\n\t\tvar _ = this, result:string[] = [];\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(key);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tfor(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t\tresult.push(_._map[key]);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n"]}