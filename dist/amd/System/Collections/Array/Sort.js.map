{"version":3,"sources":["System/Collections/Array/Sort.js","System/Collections/Array/Sort.ts"],"names":["define","require","exports","Types_1","Compare_1","ensureArray","value","createComparer","selector","order","equivalentToNaN","by"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,cAAe,iBAAkB,SAAUC,EAASC,EAASC,EAASC,GCepG,QAAAC,GAAwBC,GAEvBD,MAAOA,aAAiBA,OAChBA,GACDA,GA0BR,QAAAE,GACCC,EACAC,EACAC,GADAH,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,IAEAA,IAAIA,IAAoBA,EAAAA,WAAKA,UAAUA,EAEvCA,OAAOA,UAACA,EAAqBA,GAQ5BA,IAAIA,GALAA,GAASA,EAAYA,EAASA,IAC9BA,EAASA,EAAYA,EAASA,IAC9BA,EAAMA,KAAKA,IAAIA,EAAOA,OAAQA,EAAOA,QAErCA,EAAiBA,YAAiBA,OAAiBA,EAAQA,KACvDA,EAAIA,EAAKA,EAAFA,EAAOA,IACtBA,CACCA,GAAIA,GAAKA,EAAOA,GAAIA,EAAKA,EAAOA,GAC5BA,EAAKA,EACDA,EAAEA,EAAOA,OAASA,EAAOA,GAAKA,EACxBA,CAEXA,KAECA,EAAAA,WAAKA,UAAUA,KACjBA,EAAKA,GACHA,EAAAA,WAAKA,UAAUA,KACjBA,EAAKA,GAIPA,IAAIA,GAAIA,EAAAA,QAAQA,EAAIA,EACpBA,IAAOA,IAAJA,EACFA,MAAOA,GAAEA,EAIXA,MAAOA,IArCOL,EAAAK,eAAcA,EA0CXL,EAAAA,WAAOK,EACPL,EAAAS,GAAEJ","file":"System/Collections/Array/Sort.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport Type from '../../Types';\r\nimport { compare } from '../../Compare';\r\nfunction ensureArray(value) {\r\n    return value instanceof Array\r\n        ? value\r\n        : [value];\r\n}\r\nexport function createComparer(selector, order = 1, equivalentToNaN = NaN) {\r\n    var nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);\r\n    return (a, b) => {\r\n        var aValue = ensureArray(selector(a));\r\n        var bValue = ensureArray(selector(b));\r\n        var len = Math.min(aValue.length, bValue.length);\r\n        var oArray = order instanceof Array ? order : null;\r\n        for (let i = 0; i < len; i++) {\r\n            var vA = aValue[i], vB = bValue[i], o = oArray\r\n                ? (i < oArray.length ? oArray[i] : 1)\r\n                : order;\r\n            if (nanHasEquivalent) {\r\n                if (Type.isTrueNaN(vA))\r\n                    vA = equivalentToNaN;\r\n                if (Type.isTrueNaN(vB))\r\n                    vB = equivalentToNaN;\r\n            }\r\n            var r = compare(vA, vB);\r\n            if (r !== 0)\r\n                return o * r;\r\n        }\r\n        return 0;\r\n    };\r\n}\r\nexport { createComparer as default, createComparer as by };\r\n//# sourceMappingURL=Sort.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n\r\nimport Type from '../../Types';\r\nimport {compare,CompareResult} from '../../Compare';\r\n\r\n/**\r\n * Enum representation of sorting order.\r\n */\r\nexport const enum Order\r\n{\r\n\tAscending  = +1,\r\n\tDescending = -1\r\n}\r\n\r\nfunction ensureArray<T>(value:T|T[]):T[]\r\n{\r\n\treturn value instanceof Array\r\n\t\t? <T[]>value\r\n\t\t: [<T>value];\r\n}\r\n\r\n/**\r\n * A factory function that creates a comparer to be used in multi-dimensional sorting.\r\n *\r\n * <h4>Example</h4>\r\n * ```typescript\r\n * var myArray = [{a:1:b:2},{a:3,b:4},{a:1,b:3}];\r\n *\r\n * // First sort by a, then by b.\r\n * myArray.sort(\r\n *   createComparer(\r\n *     (e)=> [e.a, e.b],\r\n *     [Order.Ascending, Order.Descending]\r\n *   )\r\n * );\r\n *\r\n * // result: [{a:1,b:3},{a:1:b:2},{a:3,b:4}]\r\n * ```\r\n *\r\n * @param selector\r\n * @param order\r\n * @param equivalentToNaN\r\n * @returns {function((TSource|TSource[]), (TSource|TSource[])): CompareResult}\r\n */\r\nexport function createComparer<TSource,T>(\r\n\tselector:Selector<TSource|TSource[],T>,\r\n\torder:Order | Order[] = Order.Ascending,\r\n\tequivalentToNaN:any = NaN):Comparison<TSource|TSource[]>\r\n{\r\n\tvar nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);\r\n\r\n\treturn (a:TSource|TSource[], b:TSource|TSource[]):CompareResult=>\r\n\t{\r\n\t\t// Use an array always to ensure a single code path.\r\n\t\tvar aValue = ensureArray(selector(a));\r\n\t\tvar bValue = ensureArray(selector(b));\r\n\t\tvar len = Math.min(aValue.length, bValue.length);\r\n\r\n\t\tvar oArray:Order[] = order instanceof Array ? <Order[]>order : null;\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar vA = aValue[i], vB = bValue[i],\r\n\t\t\t    o  = oArray\r\n\t\t\t\t    ? (i<oArray.length ? oArray[i] : Order.Ascending)\r\n\t\t\t\t    : <Order>order;\r\n\r\n\t\t\tif(nanHasEquivalent)\r\n\t\t\t{\r\n\t\t\t\tif(Type.isTrueNaN(vA))\r\n\t\t\t\t\tvA = equivalentToNaN;\r\n\t\t\t\tif(Type.isTrueNaN(vB))\r\n\t\t\t\t\tvB = equivalentToNaN;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = compare(vA, vB);\r\n\t\t\tif(r!==CompareResult.Equal)\r\n\t\t\t\treturn o*r;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t};\r\n}\r\n\r\nexport {\r\n\tcreateComparer as default, // Allow for default import.\r\n\tcreateComparer as by // Alias for Sort.by(...) instead of Sort.createComparer\r\n}\r\n"]}