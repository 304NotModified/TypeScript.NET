{"version":3,"sources":["System/Collections/Array/Procedure.js","System/Collections/Array/Procedure.ts"],"names":["define","require","exports","sum","source","ignoreNaN","average","product","ifSet","start","predicate","min","max"],"mappings":";;;;AAIAA,QAAQ,UAAW,WAAY,SAAUC,EAASC,GCElD,QAAAC,GAAoBC,EAAiBC,GAEpCF,GAFoCA,SAAAA,IAAAA,GAAAA,IAEhCA,IAAWA,EAAOA,OACrBA,MAAOA,EAERA,IAAIA,GAASA,CAabA,OAZGA,GACFA,EAAOA,QAAQA,SAAAA,GAEVA,MAAMA,KAAIA,GAAUA,KAGzBA,EAAOA,MAAMA,SAAAA,GAGZA,MADAA,IAAUA,GACFA,MAAMA,KAGTA,EAGR,QAAAG,GAAwBF,EAAiBC,GAExCC,GAFwCA,SAAAA,IAAAA,GAAAA,IAEpCA,IAAWA,EAAOA,OACrBA,MAAOA,IAERA,IAAgBA,GAAZA,EAASA,CAyBbA,OAxBGA,IAEFA,EAAQA,EACRA,EAAOA,QAAQA,SAAAA,GAEVA,MAAMA,KAETA,GAAUA,EACVA,SAOFA,EAAQA,EAAOA,OACfA,EAAOA,MAAMA,SAAAA,GAGZA,MADAA,IAAUA,GACFA,MAAMA,OAKPA,GAASA,MAAMA,GAAWA,IAAOA,EAAOA,EAGlD,QAAAC,GAAwBH,EAAiBC,GAExCE,GAFwCA,SAAAA,IAAAA,GAAAA,IAEpCA,IAAWA,EAAOA,OACrBA,MAAOA,IAERA,IAAIA,GAASA,CACbA,IAAGA,EACHA,CACCA,GAAIA,IAAQA,CACZA,GAAOA,QAAQA,SAAAA,GAEVA,MAAMA,KAETA,GAAUA,EACNA,IAAOA,GAAQA,MAIjBA,IACHA,EAASA,SAIVA,GAAOA,MAAMA,SAAAA,GAEZA,MAAGA,OAAMA,IAERA,EAASA,KACFA,IAGRA,GAAUA,GAEHA,IAITA,OAAOA,GAGR,QAAAC,GACCJ,EACAK,EACAJ,EACAK,GAEAF,IAAIA,IAAWA,EAAOA,OACrBA,MAAOA,IAERA,IAAIA,GAASA,CACbA,IAAGA,EACHA,CACCA,GAAIA,IAAQA,CACZA,GAAOA,QAAQA,SAAAA,GAEVA,MAAMA,KAENA,EAAUA,EAAGA,KACfA,EAASA,GACNA,IAAOA,GAAQA,MAIjBA,IACHA,EAASA,SAIVA,GAAOA,MAAMA,SAAAA,GAEZA,MAAGA,OAAMA,IAERA,EAASA,KACFA,IAGLA,EAAUA,EAAGA,KACfA,EAASA,IAEHA,IAGTA,OAAOA,GAIR,QAAAG,GAAoBP,EAAiBC,GAEpCM,MAFoCA,UAAAA,IAAAA,GAAAA,GAE7BA,EAAMA,IAASA,EAAAA,GAAUA,EAAWA,SAACA,EAAGA,GAAWA,MAAEA,GAAFA,IAG3D,QAAAC,GAAoBR,EAAiBC,GAEpCO,MAFoCA,UAAAA,IAAAA,GAAAA,GAE7BA,EAAMA,IAASA,EAAAA,GAAUA,EAAWA,SAACA,EAAGA,GAAWA,MAAAA,GAAEA,IAnJ7CV,EAAAC,IAAGA,EAqBHD,EAAAI,QAAOA,EAiCPJ,EAAAK,QAAOA,EAsFPL,EAAAS,IAAGA,EAKHT,EAAAU,IAAGA","file":"System/Collections/Array/Procedure.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\ndefine([\"require\", \"exports\"], function (require, exports) {\r\n    function sum(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        if (!source || !source.length)\r\n            return 0;\r\n        var result = 0;\r\n        if (ignoreNaN)\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n))\r\n                    result += n;\r\n            });\r\n        else\r\n            source.every(function (n) {\r\n                result += n;\r\n                return !isNaN(result);\r\n            });\r\n        return result;\r\n    }\r\n    exports.sum = sum;\r\n    function average(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        if (!source || !source.length)\r\n            return NaN;\r\n        var result = 0, count;\r\n        if (ignoreNaN) {\r\n            count = 0;\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n)) {\r\n                    result += n;\r\n                    count++;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            count = source.length;\r\n            source.every(function (n) {\r\n                result += n;\r\n                return !isNaN(result);\r\n            });\r\n        }\r\n        return (!count || isNaN(result)) ? NaN : (result / count);\r\n    }\r\n    exports.average = average;\r\n    function product(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        if (!source || !source.length)\r\n            return NaN;\r\n        var result = 1;\r\n        if (ignoreNaN) {\r\n            var found = false;\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n)) {\r\n                    result *= n;\r\n                    if (!found)\r\n                        found = true;\r\n                }\r\n            });\r\n            if (!found)\r\n                result = NaN;\r\n        }\r\n        else {\r\n            source.every(function (n) {\r\n                if (isNaN(n)) {\r\n                    result = NaN;\r\n                    return false;\r\n                }\r\n                result *= n;\r\n                return true;\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    exports.product = product;\r\n    function ifSet(source, start, ignoreNaN, predicate) {\r\n        if (!source || !source.length)\r\n            return NaN;\r\n        var result = start;\r\n        if (ignoreNaN) {\r\n            var found = false;\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n)) {\r\n                    if (predicate(n, result))\r\n                        result = n;\r\n                    if (!found)\r\n                        found = true;\r\n                }\r\n            });\r\n            if (!found)\r\n                result = NaN;\r\n        }\r\n        else {\r\n            source.every(function (n) {\r\n                if (isNaN(n)) {\r\n                    result = NaN;\r\n                    return false;\r\n                }\r\n                if (predicate(n, result))\r\n                    result = n;\r\n                return true;\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    function min(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        return ifSet(source, +Infinity, ignoreNaN, function (n, result) { return n < result; });\r\n    }\r\n    exports.min = min;\r\n    function max(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        return ifSet(source, -Infinity, ignoreNaN, function (n, result) { return n > result; });\r\n    }\r\n    exports.max = max;\r\n});\r\n//# sourceMappingURL=Procedure.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nexport function sum(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn 0;\r\n\r\n\tvar result = 0;\r\n\tif(ignoreNaN)\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n)) result += n;\r\n\t\t});\r\n\telse\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tresult += n;\r\n\t\t\treturn !isNaN(result);\r\n\t\t});\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function average(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = 0, count:number;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tcount = 0;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult += n;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\telse\r\n\t{\r\n\t\tcount = source.length;\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tresult += n;\r\n\t\t\treturn !isNaN(result);\r\n\t\t});\r\n\r\n\t}\r\n\r\n\treturn (!count || isNaN(result)) ? NaN : (result/count);\r\n}\r\n\r\nexport function product(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = 1;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tvar found = false;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult *= n;\r\n\t\t\t\tif(!found) found = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(!found)\r\n\t\t\tresult = NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tif(isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult = NaN;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tresult *= n;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction ifSet(\r\n\tsource:number[],\r\n\tstart:number,\r\n\tignoreNaN:boolean,\r\n\tpredicate:(n:number, result:number) => boolean)\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = start;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tvar found = false;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tif(predicate(n, result))\r\n\t\t\t\t\tresult = n;\r\n\t\t\t\tif(!found) found = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(!found)\r\n\t\t\tresult = NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tif(isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult = NaN;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif(predicate(n, result))\r\n\t\t\t\tresult = n;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\treturn result;\r\n\r\n}\r\n\r\nexport function min(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, +Infinity, ignoreNaN, (n, result) => n<result);\r\n}\r\n\r\nexport function max(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, -Infinity, ignoreNaN, (n, result) => n>result);\r\n}\r\n"]}