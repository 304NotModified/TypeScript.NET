{"version":3,"sources":["System/Collections/Array/ReadOnlyArrayWrapper.js","System/Collections/Array/ReadOnlyArrayWrapper.ts"],"names":["define","require","exports","ArgumentNullException_1","ReadOnlyCollectionBase_1","Enumerator_1","extends_1","__extends","ReadOnlyArrayWrapper","_super","array","_this","call","this","ArgumentNullException","_","_getCount","length","getEnumerator","from","getValueAt","i","ReadOnlyCollectionBase","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,yCAA0C,4BAA6B,4BAA6B,oBAAqB,SAAUC,EAASC,EAASC,EAAyBC,EAA0BC,EAAcC,GAChP,YCMJ,IAAMC,GAAYD,EAAAA,WAElBE,EAAA,SAAAC,GAGC,QAAAD,GAAYE,GAAZ,GAAAC,GAECF,EAAAG,KAAAC,OAAOA,IACP,KAAIH,EACH,KAAM,IAAIP,GAAAW,sBAAsB,QAEjC,IAAMC,GAAIJ,CDJA,OCKVI,GAAEC,UAAY,WAAM,MAAAN,GAAMO,QAC1BF,EAAEG,cAAgB,WAAM,MAAAb,GAAAc,KAAeT,IACvCK,EAAEK,WAAa,SAAAC,GAAK,MAAAX,GAAMW,IDPTV,ECWnB,MAhBqDJ,GAAAC,EAAAC,GAgBrDD,GAhBqDJ,EAAAkB,uBDSjDC,QAAOC,eAAetB,EAAS,cAAgBuB,OAAO,IACtDvB,EAAAA,WAAkBM","file":"ReadOnlyArrayWrapper.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../../Exceptions/ArgumentNullException\", \"../ReadOnlyCollectionBase\", \"../Enumeration/Enumerator\", \"../../../extends\"], function (require, exports, ArgumentNullException_1, ReadOnlyCollectionBase_1, Enumerator_1, extends_1) {\n    \"use strict\";\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var ReadOnlyArrayWrapper = (function (_super) {\n        __extends(ReadOnlyArrayWrapper, _super);\n        function ReadOnlyArrayWrapper(array) {\n            var _this = _super.call(this) || this;\n            if (!array)\n                throw new ArgumentNullException_1.ArgumentNullException('array');\n            var _ = _this;\n            _._getCount = function () { return array.length; };\n            _.getEnumerator = function () { return Enumerator_1.from(array); };\n            _.getValueAt = function (i) { return array[i]; };\n            return _this;\n        }\n        return ReadOnlyArrayWrapper;\n    }(ReadOnlyCollectionBase_1.ReadOnlyCollectionBase));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ReadOnlyArrayWrapper;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {ReadOnlyCollectionBase} from \"../ReadOnlyCollectionBase\";\r\nimport {IArray} from \"./IArray\";\r\nimport {from as enumeratorFrom} from \"../Enumeration/Enumerator\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport default class ReadOnlyArrayWrapper<T> extends ReadOnlyCollectionBase<T>\r\n{\r\n\r\n\tconstructor(array:IArray<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!array)\r\n\t\t\tthrow new ArgumentNullException('array');\r\n\r\n\t\tconst _ = this;\r\n\t\t_._getCount = () => array.length;\r\n\t\t_.getEnumerator = () => enumeratorFrom(array);\r\n\t\t_.getValueAt = i => array[i];\r\n\t}\r\n\r\n\tgetValueAt:(index:number)=>T;\r\n}\r\n"]}