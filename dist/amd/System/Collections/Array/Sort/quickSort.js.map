{"version":3,"sources":["System/Collections/Array/Sort/quickSort.js","System/Collections/Array/Sort/quickSort.ts"],"names":["define","require","exports","ArgumentNullException_1","quickSort","target","low","high","length","ArgumentNullException","swap","pivotIndex","Math","floor","i","j"],"mappings":";;;;;AAKAA,QAAQ,UAAW,UAAW,6CAA8C,SAAUC,EAASC,EAASC,GACpG,YCYJ,SAAAC,GACCC,EACAC,EACAC,GAEA,GAHA,SAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAcF,GAAWA,EAAOG,OAAS,IAErCH,EAAQ,KAAM,IAAIF,GAAAM,sBAAsB,SAC5C,IAAGH,EAAIC,EACP,CAEC,GAAIG,GAAQC,EAAaC,KAAKC,OAAOP,EAAMC,GAAM,EAEjDG,GAAOL,EAAOM,GACdN,EAAOM,GAAcN,EAAOE,GAC5BF,EAAOE,GAAQG,CAGf,KAAI,GADAI,GAAIR,EACAS,EAAIT,EAAKS,EAAER,EAAMQ,IAErBV,EAAOU,GAAGV,EAAOE,KAEnBG,EAAOL,EAAOS,GACdT,EAAOS,GAAKT,EAAOU,GACnBV,EAAOU,GAAKL,EACZI,IAIFJ,GAAOL,EAAOS,GACdT,EAAOS,GAAKT,EAAOE,GACnBF,EAAOE,GAAQG,EAEfN,EAAUC,EAAQC,EAAKQ,EAAI,GAC3BV,EAAUC,EAAQS,EAAI,EAAGP,GAG1B,MAAOF,GAnCQH,EAAAE,UAASA","file":"System/Collections/Array/Sort/quickSort.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Special thanks to: Sebastian Belmar\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../../../Exceptions/ArgumentNullException\"], function (require, exports, ArgumentNullException_1) {\n    \"use strict\";\n    function quickSort(target, low, high) {\n        if (low === void 0) { low = 0; }\n        if (high === void 0) { high = target && (target.length - 1); }\n        if (!target)\n            throw new ArgumentNullException_1.ArgumentNullException(\"target\");\n        if (low < high) {\n            var swap, pivotIndex = Math.floor((low + high) / 2);\n            swap = target[pivotIndex];\n            target[pivotIndex] = target[high];\n            target[high] = swap;\n            var i = low;\n            for (var j = low; j < high; j++) {\n                if (target[j] < target[high]) {\n                    swap = target[i];\n                    target[i] = target[j];\n                    target[j] = swap;\n                    i++;\n                }\n            }\n            swap = target[i];\n            target[i] = target[high];\n            target[high] = swap;\n            quickSort(target, low, i - 1);\n            quickSort(target, i + 1, high);\n        }\n        return target;\n    }\n    exports.quickSort = quickSort;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Special thanks to: Sebastian Belmar\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Primitive} from \"../../../Primitive\";\r\nimport {ArgumentNullException} from \"../../../Exceptions/ArgumentNullException\";\r\n\r\n/**\r\n * Quick sort O (n log n)\r\n * Warning: Uses recursion.\r\n * @param target\r\n * @param low\r\n * @param high\r\n * @returns {Array}\r\n */\r\nexport function quickSort<T extends Primitive>(\r\n\ttarget:T[],\r\n\tlow:number = 0,\r\n\thigh:number = target && (target.length - 1)):T[]\r\n{\r\n\tif(!target) throw new ArgumentNullException(\"target\");\r\n\tif(low<high)\r\n\t{\r\n\t\t// Partition first...\r\n\t\tvar swap:T, pivotIndex = Math.floor((low + high)/2);\r\n\r\n\t\tswap = target[pivotIndex];\r\n\t\ttarget[pivotIndex] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tvar i = low;\r\n\t\tfor(let j = low; j<high; j++)\r\n\t\t{\r\n\t\t\tif(target[j]<target[high])\r\n\t\t\t{\r\n\t\t\t\tswap = target[i];\r\n\t\t\t\ttarget[i] = target[j];\r\n\t\t\t\ttarget[j] = swap;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswap = target[i];\r\n\t\ttarget[i] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tquickSort(target, low, i - 1);\r\n\t\tquickSort(target, i + 1, high);\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n"]}