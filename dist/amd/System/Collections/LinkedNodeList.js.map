{"version":3,"sources":["System/Collections/LinkedNodeList.js","System/Collections/LinkedNodeList.ts"],"names":["define","require","exports","TextUtility","InvalidOperationException_1","ArgumentException_1","ArgumentNullException_1","EnumeratorBase_1","assertValidDetached","node","propName","next","previous","LinkedNodeList","this","_first","_last","unsafeCount","Object","defineProperty","prototype","get","enumerable","configurable","i","forEach","action","current","first","index","map","selector","result","push","clear","n","_","cF","cL","console","warn","dispose","contains","indexOf","getNodeAt","find","condition","c","removeFirst","removeNode","removeLast","prev","a","b","format","removed","addNode","addNodeAfter","addNodeBefore","before","after","replace","replacement","valueEnumeratorFrom","list","yielder","yieldReturn","value","yieldBreak","copyValues","array"],"mappings":"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","file":"System/Collections/LinkedNodeList.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../Text/Utility\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentException\", \"../Exceptions/ArgumentNullException\", \"./Enumeration/EnumeratorBase\"], function (require, exports, TextUtility, InvalidOperationException_1, ArgumentException_1, ArgumentNullException_1, EnumeratorBase_1) {\n    'use strict';\n    var LinkedNodeList = (function () {\n        function LinkedNodeList() {\n            this._first = null;\n            this._last = null;\n            this.unsafeCount = 0;\n        }\n        Object.defineProperty(LinkedNodeList.prototype, \"first\", {\n            get: function () {\n                return this._first;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedNodeList.prototype, \"last\", {\n            get: function () {\n                return this._last;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedNodeList.prototype, \"count\", {\n            get: function () {\n                var next = this._first, i = 0;\n                while (next) {\n                    i++;\n                    next = next.next;\n                }\n                return i;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedNodeList.prototype.forEach = function (action) {\n            var current = null, next = this.first, index = 0;\n            do {\n                current = next;\n                next = current && current.next;\n            } while (current\n                && action(current, index++) !== false);\n        };\n        LinkedNodeList.prototype.map = function (selector) {\n            if (!selector)\n                throw new ArgumentNullException_1.default('selector');\n            var result = [];\n            this.forEach(function (node) {\n                result.push(selector(node));\n            });\n            return result;\n        };\n        LinkedNodeList.prototype.clear = function () {\n            var _ = this, n, cF = 0, cL = 0;\n            n = _._first;\n            _._first = null;\n            while (n) {\n                cF++;\n                var current = n;\n                n = n.next;\n                current.next = null;\n            }\n            n = _._last;\n            _._last = null;\n            while (n) {\n                cL++;\n                var current = n;\n                n = n.previous;\n                current.previous = null;\n            }\n            if (cF !== cL)\n                console.warn('LinkedNodeList: Forward versus reverse count does not match when clearing. Forward: ' + cF + \", Reverse: \" + cL);\n            _.unsafeCount = 0;\n            return cF;\n        };\n        LinkedNodeList.prototype.dispose = function () {\n            this.clear();\n        };\n        LinkedNodeList.prototype.contains = function (node) {\n            return this.indexOf(node) != -1;\n        };\n        LinkedNodeList.prototype.getNodeAt = function (index) {\n            if (index < 0)\n                return null;\n            var next = this._first, i = 0;\n            while (next && index < i++) {\n                next = next.next;\n            }\n            return next;\n        };\n        LinkedNodeList.prototype.find = function (condition) {\n            var node = null;\n            this.forEach(function (n, i) {\n                if (condition(n, i)) {\n                    node = n;\n                    return false;\n                }\n            });\n            return node;\n        };\n        LinkedNodeList.prototype.indexOf = function (node) {\n            if (node && (node.previous || node.next)) {\n                var index = 0;\n                var c, n = this._first;\n                do {\n                    c = n;\n                    if (c === node)\n                        return index;\n                    index++;\n                } while ((n = c && c.next));\n            }\n            return -1;\n        };\n        LinkedNodeList.prototype.removeFirst = function () {\n            return this.removeNode(this._first);\n        };\n        LinkedNodeList.prototype.removeLast = function () {\n            return this.removeNode(this._last);\n        };\n        LinkedNodeList.prototype.removeNode = function (node) {\n            if (node == null)\n                throw new ArgumentNullException_1.default('node');\n            var _ = this;\n            var prev = node.previous, next = node.next, a = false, b = false;\n            if (prev)\n                prev.next = next;\n            else if (_._first == node)\n                _._first = next;\n            else\n                a = true;\n            if (next)\n                next.previous = prev;\n            else if (_._last == node)\n                _._last = prev;\n            else\n                b = true;\n            if (a !== b) {\n                throw new ArgumentException_1.default('node', TextUtility.format(\"Provided node is has no {0} reference but is not the {1} node!\", a ? \"previous\" : \"next\", a ? \"first\" : \"last\"));\n            }\n            var removed = !a && !b;\n            if (removed)\n                _.unsafeCount--;\n            return removed;\n        };\n        LinkedNodeList.prototype.addNode = function (node) {\n            this.addNodeAfter(node);\n        };\n        LinkedNodeList.prototype.addNodeBefore = function (node, before) {\n            assertValidDetached(node);\n            var _ = this;\n            if (!before) {\n                before = _._first;\n            }\n            if (before) {\n                var prev = before.previous;\n                node.previous = prev;\n                node.next = before;\n                before.previous = node;\n                if (prev)\n                    prev.next = node;\n                if (before == _._first)\n                    _._last = node;\n            }\n            else {\n                _._first = _._last = node;\n            }\n            _.unsafeCount++;\n        };\n        LinkedNodeList.prototype.addNodeAfter = function (node, after) {\n            assertValidDetached(node);\n            var _ = this;\n            if (!after) {\n                after = _._last;\n            }\n            if (after) {\n                var next = after.next;\n                node.next = next;\n                node.previous = after;\n                after.next = node;\n                if (next)\n                    next.previous = node;\n                if (after == _._last)\n                    _._last = node;\n            }\n            else {\n                _._first = _._last = node;\n            }\n            _.unsafeCount++;\n        };\n        LinkedNodeList.prototype.replace = function (node, replacement) {\n            if (node == null)\n                throw new ArgumentNullException_1.default('node');\n            assertValidDetached(replacement, 'replacement');\n            var _ = this;\n            replacement.previous = node.previous;\n            replacement.next = node.next;\n            if (node.previous)\n                node.previous.next = replacement;\n            if (node.next)\n                node.next.previous = replacement;\n            if (node == _._first)\n                _._first = replacement;\n            if (node == _._last)\n                _._last = replacement;\n        };\n        LinkedNodeList.valueEnumeratorFrom = function (list) {\n            if (!list)\n                throw new ArgumentNullException_1.default('list');\n            var _ = this, current, next;\n            return new EnumeratorBase_1.default(function () {\n                current = null;\n                next = list.first;\n            }, function (yielder) {\n                if (next) {\n                    current = next;\n                    next = current && current.next;\n                    return yielder.yieldReturn(current.value);\n                }\n                return yielder.yieldBreak();\n            });\n        };\n        LinkedNodeList.copyValues = function (list, array, index) {\n            if (index === void 0) { index = 0; }\n            if (list && list.first) {\n                if (!array)\n                    throw new ArgumentNullException_1.default('array');\n                list.forEach(function (node, i) {\n                    array[index + i] = node.value;\n                });\n            }\n            return array;\n        };\n        return LinkedNodeList;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = LinkedNodeList;\n    function assertValidDetached(node, propName) {\n        if (propName === void 0) { propName = 'node'; }\n        if (node == null)\n            throw new ArgumentNullException_1.default(propName);\n        if (node.next || node.previous)\n            throw new InvalidOperationException_1.default(\"Cannot add a node to a LinkedNodeList that is already linked.\");\n    }\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ILinkedListNode.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as TextUtility from \"../Text/Utility\";\r\nimport InvalidOperationException from \"../Exceptions/InvalidOperationException\";\r\nimport ArgumentException from \"../Exceptions/ArgumentException\";\r\nimport ArgumentNullException from \"../Exceptions/ArgumentNullException\";\r\nimport EnumeratorBase from \"./Enumeration/EnumeratorBase\";\r\n\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/**\r\n * This class is useful for managing a list of linked nodes, but it does not protect against modifying individual links.\r\n * If the consumer modifies a link (sets the previous or next value) it will effectively break the collection.\r\n *\r\n * It is possible to declare a node type of any kind as long as it contains a previous and next value that can reference another node.\r\n * Although not as safe as the included LinkedList, this class has less overhead and is more flexible.\r\n *\r\n * The count (or length) of this LinkedNodeList is not tracked since it could be corrupted at any time.\r\n */\r\nexport default\r\nclass LinkedNodeList<TNode extends ILinkedNode<TNode>>\r\nimplements ILinkedNodeList<TNode>, IEnumerateEach<TNode>, IDisposable\r\n{\r\n\r\n\tprivate _first:TNode;\r\n\tprivate _last:TNode;\r\n\tunsafeCount:number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis._first = null;\r\n\t\tthis._last = null;\r\n\t\tthis.unsafeCount = 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * The first node.  Will be null if the collection is empty.\r\n\t */\r\n\tget first():TNode\r\n\t{\r\n\t\treturn this._first;\r\n\t}\r\n\r\n\t/**\r\n\t * The last node.\r\n\t */\r\n\tget last():TNode\r\n\t{\r\n\t\treturn this._last;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Iteratively counts the number of linked nodes and returns the value.\r\n\t * @returns {number}\r\n\t */\r\n\tget count():number\r\n\t{\r\n\r\n\t\tvar next = this._first, i:number = 0;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\ti++;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\r\n\t\treturn i;\r\n\t}\r\n\r\n\t// Note, no need for 'useCopy' since this avoids any modification conflict.\r\n\t// If iterating over a copy is necessary, a copy should be made manually.\r\n\tforEach(\r\n\t\taction:Predicate<TNode> | Action<TNode>):void\r\n\t{\r\n\t\tvar current:TNode = null,\r\n\t\t    next:TNode    = this.first, // Be sure to track the next node so if current node is removed.\r\n\t\t    index:number  = 0;\r\n\r\n\t\tdo {\r\n\t\t\tcurrent = next;\r\n\t\t\tnext = current && current.next;\r\n\t\t}\r\n\t\twhile(current\r\n\t\t&& <any>action(current, index++)!==false);\r\n\t}\r\n\r\n\tmap<T>(selector:Selector<TNode,T>):T[]\r\n\t{\r\n\t\tif(!selector) throw new ArgumentNullException('selector');\r\n\r\n\t\tvar result:T[] = [];\r\n\t\tthis.forEach(node=>\r\n\t\t{\r\n\t\t\tresult.push(selector(node));\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Erases the linked node's references to each other and returns the number of nodes.\r\n\t * @returns {number}\r\n\t */\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this, n:TNode, cF:number = 0, cL:number = 0;\r\n\r\n\t\t// First, clear in the forward direction.\r\n\t\tn = _._first;\r\n\t\t_._first = null;\r\n\r\n\t\twhile(n)\r\n\t\t{\r\n\t\t\tcF++;\r\n\t\t\tlet current = n;\r\n\t\t\tn = n.next;\r\n\t\t\tcurrent.next = null;\r\n\t\t}\r\n\r\n\t\t// Last, clear in the reverse direction.\r\n\t\tn = _._last;\r\n\t\t_._last = null;\r\n\r\n\t\twhile(n)\r\n\t\t{\r\n\t\t\tcL++;\r\n\t\t\tlet current = n;\r\n\t\t\tn = n.previous;\r\n\t\t\tcurrent.previous = null;\r\n\t\t}\r\n\r\n\t\tif(cF!==cL) console.warn('LinkedNodeList: Forward versus reverse count does not match when clearing. Forward: ' + cF + \", Reverse: \" + cL);\r\n\r\n\t\t_.unsafeCount = 0;\r\n\r\n\t\treturn cF;\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the list.\r\n\t */\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates the list to see if a node exists.\r\n\t * @param node\r\n\t * @returns {boolean}\r\n\t */\r\n\tcontains(node:TNode):boolean\r\n\t{\r\n\t\treturn this.indexOf(node)!= -1;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets the index of a particular node.\r\n\t * @param index\r\n\t */\r\n\tgetNodeAt(index:number):TNode\r\n\t{\r\n\t\tif(index<0)\r\n\t\t\treturn null;\r\n\r\n\t\tvar next = this._first, i:number = 0;\r\n\t\twhile(next && index<i++)\r\n\t\t{\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\r\n\t\treturn next;\r\n\r\n\t}\r\n\r\n\tfind(condition:Predicate<TNode>):TNode {\r\n\t\tvar node:TNode = null;\r\n\t\tthis.forEach((n,i)=>{\r\n\t\t\tif(condition(n,i)) {\r\n\t\t\t\tnode = n;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates the list to find the specified node and returns its index.\r\n\t * @param node\r\n\t * @returns {boolean}\r\n\t */\r\n\tindexOf(node:TNode):number\r\n\t{\r\n\t\tif(node && (node.previous || node.next))\r\n\t\t{\r\n\r\n\t\t\tvar index = 0;\r\n\t\t\tvar c:TNode, n:TNode = this._first;\r\n\t\t\tdo {\r\n\t\t\t\tc = n;\r\n\t\t\t\tif(c===node) return index;\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\twhile((n = c && c.next));\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the first node and returns true if successful.\r\n\t * @returns {boolean}\r\n\t */\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\treturn this.removeNode(this._first);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the last node and returns true if successful.\r\n\t * @returns {boolean}\r\n\t */\r\n\tremoveLast():boolean\r\n\t{\r\n\t\treturn this.removeNode(this._last);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Removes the specified node.\r\n\t * Returns true if successful and false if not found (already removed).\r\n\t * @param node\r\n\t * @returns {boolean}\r\n\t */\r\n\tremoveNode(node:TNode):boolean\r\n\t{\r\n\t\tif(node==null)\r\n\t\t\tthrow new ArgumentNullException('node');\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prev = node.previous, next = node.next, a:boolean = false, b:boolean = false;\r\n\r\n\t\tif(prev) prev.next = next;\r\n\t\telse if(_._first==node) _._first = next;\r\n\t\telse a = true;\r\n\r\n\t\tif(next) next.previous = prev;\r\n\t\telse if(_._last==node) _._last = prev;\r\n\t\telse b = true;\r\n\r\n\t\tif(a!==b)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(\r\n\t\t\t\t'node', TextUtility.format(\r\n\t\t\t\t\t\"Provided node is has no {0} reference but is not the {1} node!\",\r\n\t\t\t\t\ta ? \"previous\" : \"next\", a ? \"first\" : \"last\"\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tvar removed = !a && !b;\r\n\t\tif(removed) _.unsafeCount--;\r\n\t\treturn removed;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a node to the end of the list.\r\n\t * @param node\r\n\t */\r\n\taddNode(node:TNode):void\r\n\t{\r\n\t\tthis.addNodeAfter(node);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inserts a node before the specified 'before' node.\r\n\t * If no 'before' node is specified, it inserts it as the first node.\r\n\t * @param node\r\n\t * @param before\r\n\t */\r\n\taddNodeBefore(node:TNode, before?:TNode):void\r\n\t{\r\n\t\tassertValidDetached(node);\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!before)\r\n\t\t{\r\n\t\t\tbefore = _._first;\r\n\t\t}\r\n\r\n\t\tif(before)\r\n\t\t{\r\n\t\t\tlet prev = before.previous;\r\n\t\t\tnode.previous = prev;\r\n\t\t\tnode.next = before;\r\n\r\n\t\t\tbefore.previous = node;\r\n\t\t\tif(prev) prev.next = node;\r\n\t\t\tif(before==_._first) _._last = node;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._first = _._last = node;\r\n\t\t}\r\n\r\n\t\t_.unsafeCount++;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a node after the specified 'after' node.\r\n\t * If no 'after' node is specified, it appends it as the last node.\r\n\t * @param node\r\n\t * @param after\r\n\t */\r\n\taddNodeAfter(node:TNode, after?:TNode):void\r\n\t{\r\n\t\tassertValidDetached(node);\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!after)\r\n\t\t{\r\n\t\t\tafter = _._last;\r\n\t\t}\r\n\r\n\t\tif(after)\r\n\t\t{\r\n\t\t\tlet next = after.next;\r\n\t\t\tnode.next = next;\r\n\t\t\tnode.previous = after;\r\n\r\n\t\t\tafter.next = node;\r\n\t\t\tif(next) next.previous = node;\r\n\t\t\tif(after==_._last) _._last = node;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._first = _._last = node;\r\n\t\t}\r\n\r\n\t\t_.unsafeCount++;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Takes and existing node and replaces it.\r\n\t * @param node\r\n\t * @param replacement\r\n\t */\r\n\treplace(node:TNode, replacement:TNode):void\r\n\t{\r\n\r\n\t\tif(node==null)\r\n\t\t\tthrow new ArgumentNullException('node');\r\n\r\n\t\tassertValidDetached(replacement, 'replacement');\r\n\r\n\t\tvar _ = this;\r\n\t\treplacement.previous = node.previous;\r\n\t\treplacement.next = node.next;\r\n\r\n\t\tif(node.previous) node.previous.next = replacement;\r\n\t\tif(node.next) node.next.previous = replacement;\r\n\r\n\t\tif(node==_._first) _._first = replacement;\r\n\t\tif(node==_._last) _._last = replacement;\r\n\t}\r\n\r\n\tstatic valueEnumeratorFrom<T>(list:LinkedNodeList<ILinkedNodeWithValue<T>>):IEnumerator<T> {\r\n\r\n\t\tif(!list) throw new ArgumentNullException('list');\r\n\r\n\t\tvar _ = this,\r\n\t\t    current:ILinkedNodeWithValue<T>,\r\n\t\t    next:ILinkedNodeWithValue<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Initialize anchor...\r\n\t\t\t\tcurrent = null;\r\n\t\t\t\tnext = list.first;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(next)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrent = next;\r\n\t\t\t\t\tnext = current && current.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(current.value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic copyValues<T,TDestination extends IArray<any>>(\r\n\t\tlist:LinkedNodeList<ILinkedNodeWithValue<T>>,\r\n\t\tarray:TDestination,\r\n\t\tindex:number = 0):TDestination\r\n\t{\r\n\t\tif(list && list.first)\r\n\t\t{\r\n\t\t\tif(!array) throw new ArgumentNullException('array');\r\n\r\n\t\t\tlist.forEach(\r\n\t\t\t\t(node, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tarray[index + i] = node.value;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\t}\r\n\r\n}\r\n\r\nfunction assertValidDetached<TNode extends ILinkedNode<TNode>>(node:TNode, propName:string = 'node')\r\n{\r\n\r\n\tif(node==null)\r\n\t\tthrow new ArgumentNullException(propName);\r\n\r\n\tif(node.next || node.previous)\r\n\t\tthrow new InvalidOperationException(\"Cannot add a node to a LinkedNodeList that is already linked.\");\r\n\r\n}"]}