{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":["define","require","exports","dispose_1","Types_1","ArrayEnumerator_1","IndexEnumerator_1","UnsupportedEnumerableException_1","throwIfEndless","isEndless","UnsupportedEnumerableException","ENDLESS_EXCEPTION_MESSAGE","initArrayFrom","source","Array","isArray","Type","isString","len","length","isFinite","result","from","Empty","ArrayEnumerator","isArrayLike","IndexEnumerator","pointer","step","isPrimitive","isEnumerable","getEnumerator","Error","instance","hasMemberOfType","FUNCTION","isEnumerableOrArrayLike","isEnumerator","forEach","e","action","VOID0","i","index","moveNext","current","using","f","toArray","STRING_EMPTY","slice","map","selector","EmptyEnumerator","Object","defineProperty","prototype","get","enumerable","configurable","nextValue","next","value","done","reset","dispose","freeze","empty"],"mappings":"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","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../../Disposable/dispose\", \"../../Types\", \"./ArrayEnumerator\", \"./IndexEnumerator\", \"./UnsupportedEnumerableException\"], function (require, exports, dispose_1, Types_1, ArrayEnumerator_1, IndexEnumerator_1, UnsupportedEnumerableException_1) {\n    \"use strict\";\n    var VOID0 = void (0), STRING_EMPTY = \"\", ENDLESS_EXCEPTION_MESSAGE = 'Cannot call forEach on an endless enumerable. ' +\n        'Would result in an infinite loop that could hang the current process.';\n    function throwIfEndless(isEndless) {\n        if (isEndless)\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\n    }\n    exports.throwIfEndless = throwIfEndless;\n    function initArrayFrom(source) {\n        if (Array.isArray(source) || Types_1.Type.isString(source)) {\n            var len = source.length;\n            if (isFinite(len)) {\n                if (len > 65535)\n                    return new Array(len);\n                var result = [];\n                result.length = len;\n                return result;\n            }\n        }\n        return [];\n    }\n    var EmptyEnumerator = (function () {\n        function EmptyEnumerator() {\n        }\n        Object.defineProperty(EmptyEnumerator.prototype, \"current\", {\n            get: function () {\n                return VOID0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        EmptyEnumerator.prototype.moveNext = function () {\n            return false;\n        };\n        EmptyEnumerator.prototype.nextValue = function () {\n            return VOID0;\n        };\n        EmptyEnumerator.prototype.next = function () {\n            return {\n                value: VOID0,\n                done: true\n            };\n        };\n        EmptyEnumerator.prototype.reset = function () { };\n        EmptyEnumerator.prototype.dispose = function () { };\n        Object.defineProperty(EmptyEnumerator.prototype, \"isEndless\", {\n            get: function () {\n                return false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return EmptyEnumerator;\n    }());\n    var Empty = new EmptyEnumerator();\n    Object.freeze(Empty);\n    exports.empty = Empty;\n    function from(source) {\n        if (!source)\n            return Empty;\n        if (Array.isArray(source))\n            return new ArrayEnumerator_1.ArrayEnumerator(source);\n        if (Types_1.Type.isArrayLike(source)) {\n            return new IndexEnumerator_1.IndexEnumerator(function () {\n                return {\n                    source: source,\n                    length: source.length,\n                    pointer: 0,\n                    step: 1\n                };\n            });\n        }\n        if (!Types_1.Type.isPrimitive(source)) {\n            if (isEnumerable(source))\n                return source.getEnumerator();\n        }\n        throw new Error(\"Unknown enumerable.\");\n    }\n    exports.from = from;\n    function isEnumerable(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"getEnumerator\", Types_1.Type.FUNCTION);\n    }\n    exports.isEnumerable = isEnumerable;\n    function isEnumerableOrArrayLike(instance) {\n        return Types_1.Type.isArrayLike(instance) || isEnumerable(instance);\n    }\n    exports.isEnumerableOrArrayLike = isEnumerableOrArrayLike;\n    function isEnumerator(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"moveNext\", Types_1.Type.FUNCTION);\n    }\n    exports.isEnumerator = isEnumerator;\n    function forEach(e, action) {\n        if (e !== VOID0 && e !== null) {\n            if (Types_1.Type.isArrayLike(e)) {\n                throwIfEndless(!isFinite(e.length));\n                for (var i = 0; i < e.length; i++) {\n                    if (action(e[i], i) === false)\n                        break;\n                }\n                return true;\n            }\n            if (isEnumerator(e)) {\n                throwIfEndless(e.isEndless);\n                var index = 0;\n                while (e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n                return true;\n            }\n            if (isEnumerable(e)) {\n                throwIfEndless(e.isEndless);\n                dispose_1.using(e.getEnumerator(), function (f) { return forEach(f, action); });\n                return true;\n            }\n            return false;\n        }\n    }\n    exports.forEach = forEach;\n    function toArray(source) {\n        if (source === STRING_EMPTY)\n            return [];\n        if (Array.isArray(source))\n            return source.slice();\n        var result = initArrayFrom(source);\n        if (!forEach(source, function (e, i) { result[i] = e; }))\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n        return result;\n    }\n    exports.toArray = toArray;\n    function map(source, selector) {\n        var result = initArrayFrom(source);\n        if (!forEach(source, function (e, i) { result[i] = selector(e); }))\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n        return result;\n    }\n    exports.map = map;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {using} from \"../../Disposable/dispose\";\r\nimport {Type} from \"../../Types\";\r\nimport {ArrayEnumerator} from \"./ArrayEnumerator\";\r\nimport {IndexEnumerator} from \"./IndexEnumerator\";\r\nimport {UnsupportedEnumerableException} from \"./UnsupportedEnumerableException\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IEnumerable} from \"./IEnumerable\";\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IEnumerableOrArray} from \"../IEnumerableOrArray\";\r\n\r\nconst\r\n\tVOID0:any                 = void(0),\r\n\tSTRING_EMPTY:string       = \"\",\r\n\tENDLESS_EXCEPTION_MESSAGE =\r\n\t\t'Cannot call forEach on an endless enumerable. ' +\r\n\t\t'Would result in an infinite loop that could hang the current process.';\r\n\r\nexport function throwIfEndless(isEndless:boolean):void\r\n{\r\n\tif(isEndless) throw new UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\r\n}\r\n\r\nfunction initArrayFrom(source:IEnumerableOrArray<any>|IEnumerator<any>):any[]\r\n{\r\n\tif(Array.isArray(source) || Type.isString(source))\r\n\t{\r\n\t\tvar len = source.length;\r\n\t\tif(isFinite(len))\r\n\t\t{\r\n\t\t\tif(len>65535) return new Array(len);\r\n\t\t\tvar result:any[] = [];\r\n\t\t\tresult.length = len;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n}\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn VOID0;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tnextValue():any\r\n\t{\r\n\t\treturn VOID0;\r\n\t}\r\n\r\n\tnext():IIteratorResult<any>\r\n\t{\r\n\t\treturn {\r\n\t\t\tvalue: VOID0,\r\n\t\t\tdone: true\r\n\t\t}\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\nObject.freeze(Empty);\r\n\r\nexport const empty:IEnumerator<any> = Empty;\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerableOrArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\tif(Type.isArrayLike<T>(source))\r\n\t{\r\n\t\treturn new IndexEnumerator<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsource: source,\r\n\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\tstep: 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerableOrArrayLike<T>(instance:any):instance is IEnumerableOrArray<T>\r\n{\r\n\treturn Type.isArrayLike(instance) || isEnumerable(instance);\r\n}\r\n\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\n/**\r\n * Flexible method for iterating any enumerable, enumerable, array, or array-like object.\r\n * @param e\r\n * @param action\r\n * @returns true if enumerated, false if null or unrecognized enumerable, void if nothing done\r\n */\r\nexport function forEach<T>(\r\n\te:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\taction:(element:T, index?:number) => any):boolean|void\r\n{\r\n\tif(e!==VOID0 && e!==null) // Allow for empty string.\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(e))\r\n\t\t{\r\n\t\t\t// Assume e.length is constant or at least doesn't deviate to infinite or NaN.\r\n\t\t\tthrowIfEndless(!isFinite(e.length));\r\n\r\n\t\t\tfor(let i = 0; i<e.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(action(e[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\tvar index = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\t// For enumerators that aren't EnumerableBase, ensure dispose is called.\r\n\t\t\tusing(\r\n\t\t\t\t(<IEnumerable<T>>e).getEnumerator(),\r\n\t\t\t\tf=>forEach(f, action)\r\n\t\t\t);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array.\r\n * @param source\r\n * @returns {any}\r\n */\r\nexport function toArray<T>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>):T[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn source.slice();\r\n\r\n\tvar result:T[] = initArrayFrom(source);\r\n\tif(!forEach(source, (e, i) => { result[i] = e; }))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array of selected values.\r\n * @param source\r\n * @param selector\r\n * @returns {TResult[]}\r\n */\r\nexport function map<T,TResult>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\tselector:Selector<T,TResult>):TResult[]\r\n{\r\n\tvar result:TResult[] = initArrayFrom(source);\r\n\tif(!forEach(source, (e, i) => { result[i] = selector(e); }))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}"]}