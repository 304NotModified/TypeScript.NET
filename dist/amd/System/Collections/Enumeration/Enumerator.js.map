{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":["define","require","exports","Types_1","ArrayEnumerator_1","IndexEnumerator_1","from","source","Empty","Array","isArray","isPrimitive","isArrayLike","length","pointer","step","isEnumerable","getEnumerator","Error","instance","hasMemberOfType","FUNCTION","isEnumerableOrArrayLike","isEnumerator","forEach","e","action","i","index","moveNext","current","VOID0","EmptyEnumerator","Object","defineProperty","prototype","get","enumerable","configurable","nextValue","next","value","done","reset","dispose","freeze","empty"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,cAAe,oBAAqB,qBAAsB,SAAUC,EAASC,EAASC,EAASC,EAAmBC,GCOhJ,YA2CA,SAAAC,GAAwBC,GAGvB,IAAIA,EACH,MAAOC,EAER,IAAGC,MAAMC,QAAQH,GAChB,MAAO,IAAIH,GAAAA,WAAwBG,EAGpC,KAAIJ,EAAAA,WAAKQ,YAAYJ,GACrB,CACC,GAAGJ,EAAAA,WAAKS,YAAeL,GAEtB,MAAO,IAAIF,GAAAA,WACV,WAEC,OACCE,OAAQA,EACRM,OAAQN,EAAOM,OACfC,QAAS,EACTC,KAAM,IAKV,IAAGC,EAAgBT,GAClB,MAAOA,GAAOU,gBAIhB,KAAM,IAAIC,OAAM,uBAGjB,QAAAF,GAAgCG,GAE/B,MAAOhB,GAAAA,WAAKiB,gBAAgCD,EAAU,gBAAiBhB,EAAAA,WAAKkB,UAG7E,QAAAC,GAA2CH,GAE1C,MAAOhB,GAAAA,WAAKS,YAAYO,IAAaH,EAAaG,GAInD,QAAAI,GAAgCJ,GAE/B,MAAOhB,GAAAA,WAAKiB,gBAAgCD,EAAU,WAAYhB,EAAAA,WAAKkB,UAGxE,QAAAG,GACCC,EACAC,GAEA,GAAGD,EACH,CACC,GAAGtB,EAAAA,WAAKS,YAAea,GACvB,CACC,IAAI,GAAIE,GAAE,EAAEA,EAAEF,EAAEZ,QACZa,EAAOD,EAAEE,GAAGA,MAAK,EADGA,KAGxB,OASD,GANGX,EAAgBS,KAGlBA,EAAqBA,EAAGR,iBAGtBM,EAAgBE,GAIlB,IAFA,GAAIG,GAAQ,EAENH,EAAEI,YAEJH,EAAOD,EAAEK,QAASF,QAAW,MAjHpC,GAAMG,GAAY,OAElBC,EAAA,WAAA,QAAAA,MA2BA,MAzBCC,QAAAC,eAAIF,EAAAG,UAAA,WDVOC,ICUX,WAEC,MAAOL,IDTGM,YAAY,EACZC,cAAc,ICWzBN,EAAAG,UAAAN,SAAA,WAEC,OAAO,GAGRG,EAAAG,UAAAI,UAAA,WACC,MAAOR,IAGRC,EAAAG,UAAAK,KAAA,WAEC,OACCC,MAAMV,EACNW,MAAK,IAIPV,EAAAG,UAAAQ,MAAA,aAEAX,EAAAG,UAAAS,QAAA,aACDZ,KAEMxB,EAAQ,GAAIwB,EAClBC,QAAOY,OAAOrC,GAEDN,EAAA4C,MAAyBtC,EAGtBN,EAAAI,KAAIA,EAkCJJ,EAAAc,aAAYA,EAKZd,EAAAoB,wBAAuBA,EAMvBpB,EAAAqB,aAAYA,EAKZrB,EAAAsB,QAAOA","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../../Types\", \"./ArrayEnumerator\", \"./IndexEnumerator\"], function (require, exports, Types_1, ArrayEnumerator_1, IndexEnumerator_1) {\n    'use strict';\n    var VOID0 = void (0);\n    var EmptyEnumerator = (function () {\n        function EmptyEnumerator() {\n        }\n        Object.defineProperty(EmptyEnumerator.prototype, \"current\", {\n            get: function () {\n                return VOID0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        EmptyEnumerator.prototype.moveNext = function () {\n            return false;\n        };\n        EmptyEnumerator.prototype.nextValue = function () {\n            return VOID0;\n        };\n        EmptyEnumerator.prototype.next = function () {\n            return {\n                value: VOID0,\n                done: true\n            };\n        };\n        EmptyEnumerator.prototype.reset = function () { };\n        EmptyEnumerator.prototype.dispose = function () { };\n        return EmptyEnumerator;\n    }());\n    var Empty = new EmptyEnumerator();\n    Object.freeze(Empty);\n    exports.empty = Empty;\n    function from(source) {\n        if (!source)\n            return Empty;\n        if (Array.isArray(source))\n            return new ArrayEnumerator_1.default(source);\n        if (!Types_1.default.isPrimitive(source)) {\n            if (Types_1.default.isArrayLike(source)) {\n                return new IndexEnumerator_1.default(function () {\n                    return {\n                        source: source,\n                        length: source.length,\n                        pointer: 0,\n                        step: 1\n                    };\n                });\n            }\n            if (isEnumerable(source))\n                return source.getEnumerator();\n        }\n        throw new Error(\"Unknown enumerable.\");\n    }\n    exports.from = from;\n    function isEnumerable(instance) {\n        return Types_1.default.hasMemberOfType(instance, \"getEnumerator\", Types_1.default.FUNCTION);\n    }\n    exports.isEnumerable = isEnumerable;\n    function isEnumerableOrArrayLike(instance) {\n        return Types_1.default.isArrayLike(instance) || isEnumerable(instance);\n    }\n    exports.isEnumerableOrArrayLike = isEnumerableOrArrayLike;\n    function isEnumerator(instance) {\n        return Types_1.default.hasMemberOfType(instance, \"moveNext\", Types_1.default.FUNCTION);\n    }\n    exports.isEnumerator = isEnumerator;\n    function forEach(e, action) {\n        if (e) {\n            if (Types_1.default.isArrayLike(e)) {\n                for (var i = 0; i < e.length; i++)\n                    if (action(e[i], i) === false)\n                        break;\n                return;\n            }\n            if (isEnumerable(e)) {\n                e = e.getEnumerator();\n            }\n            if (isEnumerator(e)) {\n                var index = 0;\n                while (e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            }\n        }\n    }\n    exports.forEach = forEach;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\n///<reference path=\"../IEnumerableOrArray.d.ts\"/>\r\n///<reference path=\"IIterator.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from \"../../Types\";\r\nimport ArrayEnumerator from \"./ArrayEnumerator\";\r\nimport IndexEnumerator from \"./IndexEnumerator\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn VOID0;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tnextValue():any {\r\n\t\treturn VOID0;\r\n\t}\r\n\r\n\tnext():IIteratorResult<any>\r\n\t{\r\n\t\treturn {\r\n\t\t\tvalue:VOID0,\r\n\t\t\tdone:true\r\n\t\t}\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\nObject.freeze(Empty);\r\n\r\nexport const empty:IEnumerator<any> = Empty;\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerableOrArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(source))\r\n\t\t{\r\n\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsource: source,\r\n\t\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\t\tstep: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerableOrArrayLike<T>(instance:any):instance is IEnumerableOrArray<T>\r\n{\r\n\treturn Type.isArrayLike(instance) || isEnumerable(instance);\r\n}\r\n\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\nexport function forEach<T>(\r\n\te:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\taction:(element:T, index?:number) => any):void\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(e))\r\n\t\t{\r\n\t\t\tfor(let i=0;i<e.length; i++)\r\n\t\t\t\tif(action(e[i],i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\t// EnumeratorBase auto-disposes when complete.\r\n\t\t\te = (<IEnumerable<T>>e).getEnumerator();\r\n\t\t}\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tvar index = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"]}