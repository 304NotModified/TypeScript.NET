{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.js","System/Collections/Enumeration/IndexEnumerator.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","EnumeratorBase_1","IndexEnumerator","_super","sourceFactory","source","call","length","step","Error","pointer","Math","floor","yielder","len","yieldBreak","current","yieldReturn","defineProperty","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,oBAAqB,SAAUC,EAASC,EAASC,GCJ/E,YAIA,IAAAC,GAAA,SAAAC,GAIC,QAAAD,GACCE,GAGA,GAAIC,EACJF,GAAAG,KAAAlB,KACC,WAGC,GADAiB,EAASD,IACNC,GAAUA,EAAOA,OACpB,CACC,GAAGA,EAAOE,QAAwB,IAAdF,EAAOG,KAC1B,KAAM,IAAIC,OAAM,0CAEjB,IAAIC,GAAUL,EAAOK,OACrB,IAAIA,GAEC,GAAGA,GAASC,KAAKC,MAAMF,GAC3B,KAAM,IAAID,OAAM,0CAA4CC,EAAU,sBAFtEL,GAAOK,QAAU,CAGlBL,GAAOK,QAAUA,CAEjB,IAAIF,GAAOH,EAAOG,IAClB,IAAIA,GAEC,GAAGA,GAAMG,KAAKC,MAAMJ,GACxB,KAAM,IAAIC,OAAM,uCAAyCD,EAAO,sBAFhEH,GAAOG,KAAO,CAGfH,GAAOG,KAAOA,IAIhB,SAACK,GAEA,GAAIC,GAAOT,GAAUA,EAAOA,OAAUA,EAAOE,OAAS,CACtD,KAAIO,EACH,MAAOD,GAAQE,YAChB,IAAIC,GAAUX,EAAOK,OAErB,OADAL,GAAOK,SAAWL,EAAOG,KACTM,EAARE,GAAeA,GAAS,EAC7BH,EAAQI,YAAYZ,EAAOA,OAAOW,IAClCH,EAAQE,cAGZ,WAEIV,IAEFA,EAAOA,OAAS,QAKrB,MAtDiClB,WAAAe,EAAAC,GAsDjCD,GAtDiCD,EAAAA,WADjCL,QAAAsB,eAAAlB,EAAA,cAAAmB,OAAA,ID0CInB,EAAAA,WAAkBE","file":"System/Collections/Enumeration/IndexEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", './EnumeratorBase'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var EnumeratorBase_1 = require('./EnumeratorBase');\r\n    var IndexEnumerator = (function (_super) {\r\n        __extends(IndexEnumerator, _super);\r\n        function IndexEnumerator(sourceFactory) {\r\n            var source;\r\n            _super.call(this, function () {\r\n                source = sourceFactory();\r\n                if (source && source.source) {\r\n                    if (source.length && source.step === 0)\r\n                        throw new Error(\"Invalid IndexEnumerator step value (0).\");\r\n                    var pointer = source.pointer;\r\n                    if (!pointer)\r\n                        source.pointer = 0;\r\n                    else if (pointer != Math.floor(pointer))\r\n                        throw new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n                    source.pointer = pointer;\r\n                    var step = source.step;\r\n                    if (!step)\r\n                        source.step = 1;\r\n                    else if (step != Math.floor(step))\r\n                        throw new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n                    source.step = step;\r\n                }\r\n            }, function (yielder) {\r\n                var len = (source && source.source) ? source.length : 0;\r\n                if (!len)\r\n                    return yielder.yieldBreak();\r\n                var current = source.pointer;\r\n                source.pointer += source.step;\r\n                return (current < len && current >= 0)\r\n                    ? yielder.yieldReturn(source.source[current])\r\n                    : yielder.yieldBreak();\r\n            }, function () {\r\n                if (source) {\r\n                    source.source = null;\r\n                }\r\n            });\r\n        }\r\n        return IndexEnumerator;\r\n    }(EnumeratorBase_1.default));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = IndexEnumerator;\r\n});\r\n//# sourceMappingURL=IndexEnumerator.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport EnumeratorBase from './EnumeratorBase';\r\n\r\nexport default\r\nclass IndexEnumerator<T> extends EnumeratorBase<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsourceFactory:() => { source: { [index: number]: T }; pointer: number; length: number; step: number })\r\n\t{\r\n\r\n\t\tvar source:{ source: { [index: number]: T }; pointer: number; length: number; step: number };\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = sourceFactory();\r\n\t\t\t\tif(source && source.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(source.length && source.step===0)\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (0).\");\r\n\r\n\t\t\t\t\tvar pointer = source.pointer;\r\n\t\t\t\t\tif(!pointer)\r\n\t\t\t\t\t\tsource.pointer = 0;\r\n\t\t\t\t\telse if(pointer!=Math.floor(pointer))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n\t\t\t\t\tsource.pointer = pointer;\r\n\r\n\t\t\t\t\tvar step = source.step;\r\n\t\t\t\t\tif(!step)\r\n\t\t\t\t\t\tsource.step = 1;\r\n\t\t\t\t\telse if(step!=Math.floor(step))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n\t\t\t\t\tsource.step = step;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tvar len = (source && source.source) ? source.length : 0;\r\n\t\t\t\tif(!len)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\tvar current = source.pointer;\r\n\t\t\t\tsource.pointer += source.step;\r\n\t\t\t\treturn (current<len && current>=0)\r\n\t\t\t\t\t? yielder.yieldReturn(source.source[current])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(source)\r\n\t\t\t\t{\r\n\t\t\t\t\tsource.source = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n"]}