{"version":3,"sources":["System/Collections/Enumeration/InfiniteEnumerator.js","System/Collections/Enumeration/InfiniteEnumerator.ts"],"names":["define","require","exports","SimpleEnumerableBase_1","extends_1","__extends","InfiniteEnumerator","_super","_factory","call","this","prototype","_canMoveNext","moveNext","_","f","_current","incrementIndex","dispose","SimpleEnumerableBase","Object","defineProperty","value"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,yBAA0B,oBAAqB,SAAUC,EAASC,EAASC,EAAwBC,GAC7H,YCMJ,IAAMC,GAAYD,EAAAA,WAclBE,EAAA,SAAAC,GAMC,QAAAD,GAAoBE,GAEnBD,EAAAE,KAAAC,MAFmBA,KAAAF,SAAAA,EA2BrB,MAjC2CH,GAAAC,EAAAC,GAWhCD,EAAAK,UAAAC,aAAV,WAEC,MAAsB,OAAfF,KAAKF,UAGbF,EAAAK,UAAAE,SAAA,WAEC,GAAMC,GAAIJ,KACJK,EAAID,EAAEN,QACZ,SAAGO,IACFD,EAAEE,SAAWD,EAAED,EAAEE,SAAUF,EAAEG,mBACtB,IAKTX,EAAAK,UAAAO,QAAA,WAECX,EAAAI,UAAMO,QAAOT,KAAAC,MACPA,KAAMF,SAAW,MAGzBF,GAjC2CH,EAAAgB,qBAA9BjB,GAAAI,mBAAkBA,EAmC/Bc,OAAAC,eAAAnB,EAAA,cAAAoB,OAAA,ID3BIpB,EAAAA,WC2BWI","file":"InfiniteEnumerator.js","sourcesContent":["define([\"require\", \"exports\", \"./SimpleEnumerableBase\", \"../../../extends\"], function (require, exports, SimpleEnumerableBase_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var InfiniteEnumerator = (function (_super) {\n        __extends(InfiniteEnumerator, _super);\n        function InfiniteEnumerator(_factory) {\n            _super.call(this);\n            this._factory = _factory;\n        }\n        InfiniteEnumerator.prototype._canMoveNext = function () {\n            return this._factory != null;\n        };\n        InfiniteEnumerator.prototype.moveNext = function () {\n            var _ = this;\n            var f = _._factory;\n            if (f) {\n                _._current = f(_._current, _.incrementIndex());\n                return true;\n            }\n            return false;\n        };\n        InfiniteEnumerator.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            this._factory = null;\n        };\n        return InfiniteEnumerator;\n    }(SimpleEnumerableBase_1.SimpleEnumerableBase));\n    exports.InfiniteEnumerator = InfiniteEnumerator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = InfiniteEnumerator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * An aggregate/reduce style factory function that expects a previous value and the current index of the enumeration.\r\n */\r\nexport interface InfiniteValueFactory<T>\r\n{\r\n\t(previous?:T, index?:number):T;\r\n}\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n */\r\nexport class InfiniteEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * See InfiniteValueFactory\r\n\t * @param _factory\r\n\t */\r\n\tconstructor(private _factory:InfiniteValueFactory<T>)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\treturn this._factory!=null;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst f = _._factory;\r\n\t\tif(f) {\r\n\t\t\t_._current = f(_._current, _.incrementIndex());\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\t(<any>this)._factory = null;\r\n\t}\r\n\r\n}\r\n\r\nexport default InfiniteEnumerator;"]}