{"version":3,"sources":["System/Collections/Enumeration/EnumeratorBase.js","System/Collections/Enumeration/EnumeratorBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Types_1","DisposableBase_1","ObjectPool_1","yielder","recycle","yielderPool","ObjectPool","Yielder","yieldBreak","add","take","EnumeratorState","VOID0","_current","defineProperty","get","enumerable","configurable","yieldReturn","value","dispose","EnumeratorBase","_super","_initializer","_tryGetNext","disposer","isEndless","call","reset","Type","isBoolean","_isEndless","isFunction","_disposer","_yielder","current","_","throwIfDisposed","y","_state","Before","moveNext","Running","initializer","After","e","nextValue","next","done","_onDispose","DisposableBase"],"mappings":"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","file":"System/Collections/Enumeration/EnumeratorBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../../Types\", \"../../Disposable/DisposableBase\", \"../../Disposable/ObjectPool\"], function (require, exports, Types_1, DisposableBase_1, ObjectPool_1) {\n    \"use strict\";\n    var VOID0 = void (0);\n    var yielderPool;\n    function yielder(recycle) {\n        if (!yielderPool)\n            yielderPool\n                = new ObjectPool_1.ObjectPool(40, function () { return new Yielder(); });\n        if (!recycle)\n            return yielderPool.take();\n        recycle.yieldBreak();\n        yielderPool.add(recycle);\n    }\n    var Yielder = (function () {\n        function Yielder() {\n            this._current = VOID0;\n        }\n        Object.defineProperty(Yielder.prototype, \"current\", {\n            get: function () { return this._current; },\n            enumerable: true,\n            configurable: true\n        });\n        Yielder.prototype.yieldReturn = function (value) {\n            this._current = value;\n            return true;\n        };\n        Yielder.prototype.yieldBreak = function () {\n            this._current = VOID0;\n            return false;\n        };\n        Yielder.prototype.dispose = function () {\n            this.yieldBreak();\n        };\n        return Yielder;\n    }());\n    var EnumeratorState;\n    (function (EnumeratorState) {\n        EnumeratorState[EnumeratorState[\"Before\"] = 0] = \"Before\";\n        EnumeratorState[EnumeratorState[\"Running\"] = 1] = \"Running\";\n        EnumeratorState[EnumeratorState[\"After\"] = 2] = \"After\";\n    })(EnumeratorState || (EnumeratorState = {}));\n    var EnumeratorBase = (function (_super) {\n        __extends(EnumeratorBase, _super);\n        function EnumeratorBase(_initializer, _tryGetNext, disposer, isEndless) {\n            _super.call(this);\n            this._initializer = _initializer;\n            this._tryGetNext = _tryGetNext;\n            this.reset();\n            if (Types_1.Type.isBoolean(isEndless))\n                this._isEndless = isEndless;\n            else if (Types_1.Type.isBoolean(disposer))\n                this._isEndless = disposer;\n            if (Types_1.Type.isFunction(disposer))\n                this._disposer = disposer;\n        }\n        Object.defineProperty(EnumeratorBase.prototype, \"current\", {\n            get: function () {\n                return this._yielder.current;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EnumeratorBase.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        EnumeratorBase.prototype.reset = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var y = _._yielder;\n            if (y)\n                y.yieldBreak();\n            else\n                _._yielder = yielder();\n            _._state = EnumeratorState.Before;\n        };\n        EnumeratorBase.prototype.moveNext = function () {\n            var _ = this;\n            try {\n                switch (_._state) {\n                    case EnumeratorState.Before:\n                        _._state = EnumeratorState.Running;\n                        var initializer = _._initializer;\n                        if (initializer)\n                            initializer();\n                    case EnumeratorState.Running:\n                        if (_._tryGetNext(_._yielder)) {\n                            return true;\n                        }\n                        else {\n                            this.dispose();\n                            return false;\n                        }\n                    case EnumeratorState.After:\n                        return false;\n                }\n            }\n            catch (e) {\n                this.dispose();\n                throw e;\n            }\n        };\n        EnumeratorBase.prototype.nextValue = function () {\n            return this.moveNext()\n                ? this._yielder.current\n                : VOID0;\n        };\n        EnumeratorBase.prototype.next = function () {\n            return this.moveNext() ?\n                {\n                    value: this._yielder.current,\n                    done: false\n                } : {\n                value: VOID0,\n                done: true\n            };\n        };\n        EnumeratorBase.prototype._onDispose = function () {\n            var _ = this, disposer = _._disposer;\n            _._initializer = null;\n            _._disposer = null;\n            var y = _._yielder;\n            _._yielder = null;\n            yielder(y);\n            try {\n                if (disposer)\n                    disposer();\n            }\n            finally {\n                this._state = EnumeratorState.After;\n            }\n        };\n        return EnumeratorBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.EnumeratorBase = EnumeratorBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = EnumeratorBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IDisposable} from \"../../Disposable/IDisposable\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IYield} from \"./IYield\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\nvar yielderPool:ObjectPool<Yielder<any>>;\r\nfunction yielder():Yielder<any>;\r\nfunction yielder(recycle?:Yielder<any>):void;\r\nfunction yielder(recycle?:Yielder<any>):Yielder<any>\r\n{\r\n\tif(!yielderPool)\r\n\t\tyielderPool\r\n\t\t\t= new ObjectPool<Yielder<any>>(40, ()=>new Yielder<any>());\r\n\tif(!recycle) return yielderPool.take();\r\n\trecycle.yieldBreak();\r\n\tyielderPool.add(recycle);\r\n}\r\n\r\nclass Yielder<T> implements IYield<T>, IDisposable\r\n{\r\n\tprivate _current:T = VOID0;\r\n\tget current():T { return this._current; }\r\n\r\n\tyieldReturn(value:T):boolean\r\n\t{\r\n\t\tthis._current = value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tyieldBreak():boolean\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.yieldBreak();\r\n\t}\r\n}\r\n\r\ntype ActionVoid = ()=>void;\r\n\r\n// IEnumerator State\r\nenum EnumeratorState { Before, Running, After }\r\n\r\n// \"Enumerator\" is conflict JScript's \"Enumerator\"\r\n// Naming this class EnumeratorBase to avoid collision with IE.\r\nexport class EnumeratorBase<T> extends DisposableBase implements IEnumerator<T>\r\n{\r\n\r\n\tprivate _yielder:Yielder<T>;\r\n\tprivate _state:EnumeratorState;\r\n\tprivate _disposer:()=>void;\r\n\r\n\tget current():T\r\n\t{\r\n\t\treturn this._yielder.current;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tinitializer:() => void,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tinitializer:() => void,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:()=>void,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tprivate _initializer:() => void,\r\n\t\tprivate _tryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:ActionVoid|boolean,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.reset();\r\n\t\tif(Type.isBoolean(isEndless))\r\n\t\t\tthis._isEndless = isEndless;\r\n\t\telse if(Type.isBoolean(disposer))\r\n\t\t\tthis._isEndless = disposer;\r\n\r\n\t\tif(Type.isFunction(disposer))\r\n\t\t\tthis._disposer = disposer;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\t/*\r\n\t * Provides a mechanism to indicate if this enumerable never ends.\r\n\t * If set to true, some operations that expect a finite result may throw.\r\n\t * Explicit false means it has an end.\r\n\t * Implicit void means unknown.\r\n\t */\r\n\tget isEndless():boolean {\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tvar y = _._yielder;\r\n\t\tif(y) y.yieldBreak(); // Already exists? Reset.\r\n\t\telse _._yielder = yielder(); // New? Get one from the object pool.\r\n\t\t_._state = EnumeratorState.Before;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(_._state)\r\n\t\t\t{\r\n\t\t\t\tcase EnumeratorState.Before:\r\n\t\t\t\t\t_._state = EnumeratorState.Running;\r\n\t\t\t\t\tvar initializer = _._initializer;\r\n\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\tinitializer();\r\n\t\t\t\t// fall through\r\n\t\t\t\tcase EnumeratorState.Running:\r\n\t\t\t\t\tif(_._tryGetNext(_._yielder))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.dispose();\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnumeratorState.After:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\tnextValue():T\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? this._yielder.current\r\n\t\t\t: VOID0;\r\n\t}\r\n\r\n\t/**\r\n\t * Exposed for compatibility with generators.\r\n\t */\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext() ?\r\n\t\t{\r\n\t\t\tvalue: this._yielder.current,\r\n\t\t\tdone: false\r\n\t\t} : {\r\n\t\t\tvalue: VOID0,\r\n\t\t\tdone: true\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this, disposer = _._disposer;\r\n\r\n\t\t_._initializer = null;\r\n\t\t_._disposer = null;\r\n\r\n\r\n\t\tvar y = _._yielder;\r\n\t\t_._yielder = null;\r\n\t\tyielder(y);\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(disposer)\r\n\t\t\t\tdisposer();\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t//if(this._state==EnumeratorState.Running)\r\n\t\t\tthis._state = EnumeratorState.After;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport default EnumeratorBase;\r\n"]}