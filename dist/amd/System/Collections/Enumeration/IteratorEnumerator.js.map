{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.js","System/Collections/Enumeration/IteratorEnumerator.ts"],"names":["define","require","exports","SimpleEnumerableBase_1","extends_1","__extends","IteratorEnumerator","_super","_iterator","_isEndless","call","this","prototype","_canMoveNext","moveNext","value","_","i","r","arguments","length","next","_current","done","dispose","getIsEndless","Boolean","SimpleEnumerableBase","Object","defineProperty"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,yBAA0B,oBAAqB,SAAUC,EAASC,EAASC,EAAwBC,GAC7H,YCOJ,IAAMC,GAAYD,EAAAA,WAQlBE,EAAA,SAAAC,GAMC,QAAAD,GAAoBE,EAAgCC,GAEnDF,EAAAG,KAAAC,MAFmBA,KAAAH,UAAAA,EAAgCG,KAAAF,WAAAA,EAkCrD,MAxC2CJ,GAAAC,EAAAC,GAWhCD,EAAAM,UAAAC,aAAV,WAEC,MAAuB,OAAhBF,KAAKH,WAGbF,EAAAM,UAAAE,SAAA,SAASC,GAER,GAAMC,GAAIL,KACJM,EAAID,EAAER,SACZ,IAAGS,EACH,CACC,GAAMC,GAAIC,UAAUC,OAASH,EAAEI,KAAKN,GAASE,EAAEI,MAE/C,IADAL,EAAEM,SAAWJ,EAAEH,OACZG,EAAEK,KACA,OAAO,CADDP,GAAEQ,UAGd,OAAO,GAGRlB,EAAAM,UAAAY,QAAA,WAECjB,EAAAK,UAAMY,QAAOd,KAAAC,MACPA,KAAMH,UAAY,MAGfF,EAAAM,UAAAa,aAAV,WAEC,MAAOC,SAAQf,KAAKF,aAAeF,EAAAK,UAAMa,aAAYf,KAAAC,OAEvDL,GAxC2CH,EAAAwB,qBAA9BzB,GAAAI,mBAAkBA,EA0C/BsB,OAAAC,eAAA3B,EAAA,cAAAa,OAAA,IDrBIb,EAAAA,WCqBWI","file":"IteratorEnumerator.js","sourcesContent":["define([\"require\", \"exports\", \"./SimpleEnumerableBase\", \"../../../extends\"], function (require, exports, SimpleEnumerableBase_1, extends_1) {\n    \"use strict\";\n    var __extends = extends_1.default;\n    var IteratorEnumerator = (function (_super) {\n        __extends(IteratorEnumerator, _super);\n        function IteratorEnumerator(_iterator, _isEndless) {\n            _super.call(this);\n            this._iterator = _iterator;\n            this._isEndless = _isEndless;\n        }\n        IteratorEnumerator.prototype._canMoveNext = function () {\n            return this._iterator != null;\n        };\n        IteratorEnumerator.prototype.moveNext = function (value) {\n            var _ = this;\n            var i = _._iterator;\n            if (i) {\n                var r = arguments.length ? i.next(value) : i.next();\n                _._current = r.value;\n                if (r.done)\n                    _.dispose();\n                else\n                    return true;\n            }\n            return false;\n        };\n        IteratorEnumerator.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            this._iterator = null;\n        };\n        IteratorEnumerator.prototype.getIsEndless = function () {\n            return Boolean(this._isEndless) && _super.prototype.getIsEndless.call(this);\n        };\n        return IteratorEnumerator;\n    }(SimpleEnumerableBase_1.SimpleEnumerableBase));\n    exports.IteratorEnumerator = IteratorEnumerator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = IteratorEnumerator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(private _iterator:IIterator<T>, private _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tconst r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\t(<any>this)._iterator = null;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn Boolean(this._isEndless) && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}