{"version":3,"sources":["System/Disposable/DisposableBase.js","System/Disposable/DisposableBase.ts"],"names":["define","require","exports","ObjectDisposedException_1","DisposableBase","_finalizer","this","_wasDisposed","Object","defineProperty","prototype","get","enumerable","configurable","throwIfDisposed","message","objectName","_disposableObjectName","dispose","_","_onDispose","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,6BAA8B,SAAUC,EAASC,EAASC,GCExF,YAIA,IAAAC,GAAA,WAGC,QAAAA,GAAoBC,GAAAC,KAAAD,WAAAA,EAIZC,KAAAC,cAAuB,EA0ChC,MAzCCC,QAAAC,eAAIL,EAAAM,UAAA,eDNOC,ICMX,WAEC,MAAOL,MAAKC,cDLFK,YAAY,EACZC,cAAc,ICUfT,EAAAM,UAAAI,gBAAV,SACCC,EACAC,GAEA,GAFA,SAAAA,IAAAA,EAAoBV,KAAKW,uBAEtBX,KAAKC,aACP,KAAM,IAAIJ,GAAAA,WAAwBa,EAAYD,EAC/C,QAAO,GAIRX,EAAAM,UAAAQ,QAAA,WAEC,GAAIC,GAAIb,IACR,KAAIa,EAAEZ,aACN,CAGCY,EAAEZ,cAAe,CACjB,KAECY,EAAEC,aDfU,QCmBTD,EAAEd,YACJc,EAAEd,gBAMID,EAAAM,UAAAU,WAAV,aAEDhB,IAEAI,QAAAC,eAAAP,EAAA,cAAAmB,OAAA,IDpBInB,EAAAA,WCoBWE","file":"System/Disposable/DisposableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", './ObjectDisposedException'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var ObjectDisposedException_1 = require('./ObjectDisposedException');\r\n    var DisposableBase = (function () {\r\n        function DisposableBase(_finalizer) {\r\n            this._finalizer = _finalizer;\r\n            this._wasDisposed = false;\r\n        }\r\n        Object.defineProperty(DisposableBase.prototype, \"wasDisposed\", {\r\n            get: function () {\r\n                return this._wasDisposed;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DisposableBase.prototype.throwIfDisposed = function (message, objectName) {\r\n            if (objectName === void 0) { objectName = this._disposableObjectName; }\r\n            if (this._wasDisposed)\r\n                throw new ObjectDisposedException_1.default(objectName, message);\r\n            return true;\r\n        };\r\n        DisposableBase.prototype.dispose = function () {\r\n            var _ = this;\r\n            if (!_._wasDisposed) {\r\n                _._wasDisposed = true;\r\n                try {\r\n                    _._onDispose();\r\n                }\r\n                finally {\r\n                    if (_._finalizer)\r\n                        _._finalizer();\r\n                }\r\n            }\r\n        };\r\n        DisposableBase.prototype._onDispose = function () { };\r\n        return DisposableBase;\r\n    }());\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = DisposableBase;\r\n});\r\n//# sourceMappingURL=DisposableBase.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IDisposableAware.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport ObjectDisposedException from './ObjectDisposedException';\r\n\r\nabstract class DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tconstructor(private _finalizer?:() => void)\r\n\t{\r\n\t}\r\n\r\n\tprivate _wasDisposed:boolean = false;\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this._wasDisposed;\r\n\t}\r\n\r\n\t// Allow for simple override of name.\r\n\tprotected _disposableObjectName:string;\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):boolean\r\n\t{\r\n\t\tif(this._wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_._wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_._finalizer) // Private finalizer...\r\n\t\t\t\t\t_._finalizer();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Placeholder for overrides.\r\n\tprotected _onDispose():void { }\r\n\r\n}\r\n\r\nexport default DisposableBase;"]}