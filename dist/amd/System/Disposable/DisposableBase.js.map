{"version":3,"sources":["System/Disposable/DisposableBase.js","System/Disposable/DisposableBase.ts"],"names":["define","require","exports","ObjectDisposedException_1","DisposableBase","DisposableBase.constructor","get","DisposableBase.wasDisposed","enumerable","configurable","DisposableBase.throwIfDisposed","DisposableBase.dispose","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,6BAA8B,SAAUC,EAASC,EAASC,GCExF,YAIA,IAAAC,GAAA,WAGCA,QAAAA,GAAoBA,GAAAC,KAAAA,WAAAA,EAIZA,KAAAA,cAAuBA,EA0ChCD,MAzCCA,QAAAA,eAAIA,EAAAA,UAAAA,eDNOE,ICMXF,WAECG,MAAOA,MAAKA,cDLFC,YAAY,EACZC,cAAc,ICUfL,EAAAA,UAAAA,gBAAVA,SACCA,EACAA,GAEAM,GAFAA,SAAAA,IAAAA,EAAoBA,KAAKA,uBAEtBA,KAAKA,aACPA,KAAMA,IAAIA,GAAAA,WAAwBA,EAAYA,EAC/CA,QAAOA,GAIRN,EAAAA,UAAAA,QAAAA,WAECO,GAAIA,GAAIA,IACRA,KAAIA,EAAEA,aACNA,CAGCA,EAAEA,cAAeA,CACjBA,KAECA,EAAEA,aDfU,QCmBTA,EAAEA,YACJA,EAAEA,gBAMIP,EAAAA,UAAAA,WAAVA,aAEDA,IAEAQ,QAAAC,eAAAX,EAAA,cAAAY,OAAA,IDpBIZ,EAAAA,WCoBWE","file":"System/Disposable/DisposableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", './ObjectDisposedException'], function (require, exports, ObjectDisposedException_1) {\n    'use strict';\n    var DisposableBase = (function () {\n        function DisposableBase(_finalizer) {\n            this._finalizer = _finalizer;\n            this._wasDisposed = false;\n        }\n        Object.defineProperty(DisposableBase.prototype, \"wasDisposed\", {\n            get: function () {\n                return this._wasDisposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DisposableBase.prototype.throwIfDisposed = function (message, objectName) {\n            if (objectName === void 0) { objectName = this._disposableObjectName; }\n            if (this._wasDisposed)\n                throw new ObjectDisposedException_1.default(objectName, message);\n            return true;\n        };\n        DisposableBase.prototype.dispose = function () {\n            var _ = this;\n            if (!_._wasDisposed) {\n                _._wasDisposed = true;\n                try {\n                    _._onDispose();\n                }\n                finally {\n                    if (_._finalizer)\n                        _._finalizer();\n                }\n            }\n        };\n        DisposableBase.prototype._onDispose = function () { };\n        return DisposableBase;\n    })();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = DisposableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IDisposableAware.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport ObjectDisposedException from './ObjectDisposedException';\r\n\r\nabstract class DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tconstructor(private _finalizer?:() => void)\r\n\t{\r\n\t}\r\n\r\n\tprivate _wasDisposed:boolean = false;\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this._wasDisposed;\r\n\t}\r\n\r\n\t// Allow for simple override of name.\r\n\tprotected _disposableObjectName:string;\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):boolean\r\n\t{\r\n\t\tif(this._wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_._wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_._finalizer) // Private finalizer...\r\n\t\t\t\t\t_._finalizer();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Placeholder for overrides.\r\n\tprotected _onDispose():void { }\r\n\r\n}\r\n\r\nexport default DisposableBase;"]}