{"version":3,"sources":["System/Disposable/ObjectDisposedException.js","System/Disposable/ObjectDisposedException.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","InvalidOperationException_1","NAME","ObjectDisposedException","_super","ObjectDisposedException.constructor","ObjectDisposedException.getName","ObjectDisposedException.toString","ObjectDisposedException.throwIfDisposed","defineProperty","value"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,2CAA4C,SAAUC,EAASC,EAASC,GCCtG,GAAMC,GAAc,0BAEpBC,EAAA,SAAAC,GAQCD,QAAAA,GACCA,EACAA,EACAA,GADAE,SAAAA,IAAAA,EAAAA,MACAA,SAAAA,IAAAA,EAAAA,MAEAA,EAAAA,KAAAA,KAAMA,EAASA,EAAgBA,SAACA,GAC/BA,EAAEA,WAAaA,IA2BlBF,MAvCQA,WAAAA,EAAAA,GAiBGA,EAAAA,UAAAA,QAAVA,WAECG,MAAOA,IAGRH,EAAAA,UAAAA,SAAAA,WAECI,GAAIA,GAAIA,KAAMA,EAAQA,EAAEA,UAGxBA,OAFAA,GAAQA,EAASA,IAAMA,EAAQA,KAAQA,GAEhCA,IAAMA,EAAEA,KAAOA,KAAOA,EAAQA,EAAEA,QAAUA,KAG3CJ,EAAAA,gBAAPA,SACCA,EACAA,EACAA,GAEAK,GAAGA,EAAWA,YACbA,KAAMA,IAAIA,GAAwBA,EAAYA,IAGjDL,GAvCQF,EAAAA,WAFRL,QAAAa,eAAAT,EAAA,cAAAU,OAAA,IDuBIV,EAAAA,WAAkBG","file":"System/Disposable/ObjectDisposedException.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\nconst NAME = 'ObjectDisposedException';\r\nexport default class ObjectDisposedException extends InvalidOperationException {\r\n    constructor(objectName, message = null, innerException = null) {\r\n        super(message, innerException, (_) => {\r\n            _.objectName = objectName;\r\n        });\r\n    }\r\n    getName() {\r\n        return NAME;\r\n    }\r\n    toString() {\r\n        var _ = this, oName = _.objectName;\r\n        oName = oName ? ('{' + oName + '} ') : '';\r\n        return '[' + _.name + ': ' + oName + _.message + ']';\r\n    }\r\n    static throwIfDisposed(disposable, objectName, message) {\r\n        if (disposable.wasDisposed)\r\n            throw new ObjectDisposedException(objectName, message);\r\n    }\r\n}\r\n//# sourceMappingURL=ObjectDisposedException.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\n///<reference path=\"IDisposableAware.d.ts\"/>\r\nimport Exception from '../Exception';\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\n\r\n\r\nconst NAME:string = 'ObjectDisposedException';\r\n\r\nexport default\r\nclass ObjectDisposedException\r\nextends InvalidOperationException\r\n{\r\n\r\n\tobjectName:string;\r\n\r\n\t// For simplicity and consistency, lets stick with 1 signature.\r\n\tconstructor(\r\n\t\tobjectName:string,\r\n\t\tmessage:string = null,\r\n\t\tinnerException:Exception = null)\r\n\t{\r\n\t\tsuper(message, innerException, (_)=>{\r\n\t\t\t_.objectName = objectName;\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\tvar _ = this, oName = _.objectName;\r\n\t\toName = oName ? ('{' + oName + '} ') : '';\r\n\r\n\t\treturn '[' + _.name + ': ' + oName + _.message + ']';\r\n\t}\r\n\r\n\tstatic throwIfDisposed(\r\n\t\tdisposable:IDisposableAware,\r\n\t\tobjectName?:string,\r\n\t\tmessage?:string):void\r\n\t{\r\n\t\tif(disposable.wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t}\r\n\r\n}\r\n"]}