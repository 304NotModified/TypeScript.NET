{"version":3,"sources":["System/Utility/applyMixins.js","System/Utility/applyMixins.ts"],"names":["define","require","exports","applyMixins","derivedConstructor","baseConstructors","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,WAAY,SAAUC,EAASC,GCClD,QAAAC,GAAoCC,EAAwBC,GAE3DF,EACEA,QAAQA,SAAAA,GAERA,OAAOA,oBAAoBA,EAAGA,WAAWA,QACvCA,SAAAA,GAEAA,EAAmBA,UAAUA,GAAQA,EAAGA,UAAUA,OARvDG,OAAAC,eAAAL,EAAA,cAAAM,OAAA,IDSIN,EAAAA,WAAkBC","file":"System/Utility/applyMixins.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nexport default function applyMixins(derivedConstructor, baseConstructors) {\r\n    baseConstructors\r\n        .forEach(bc => {\r\n        Object.getOwnPropertyNames(bc.prototype).forEach(name => {\r\n            derivedConstructor.prototype[name] = bc.prototype[name];\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=applyMixins.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nexport default function applyMixins(derivedConstructor:any, baseConstructors:any[]):void\r\n{\r\n\tbaseConstructors\r\n\t\t.forEach(bc =>\r\n\t\t{\r\n\t\t\tObject.getOwnPropertyNames(bc.prototype).forEach(\r\n\t\t\t\t\tname =>\r\n\t\t\t\t{\r\n\t\t\t\t\tderivedConstructor.prototype[name] = bc.prototype[name];\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t);\r\n}\r\n"]}