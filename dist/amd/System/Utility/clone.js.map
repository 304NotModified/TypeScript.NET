{"version":3,"sources":["System/Utility/clone.js","System/Utility/clone.ts"],"names":["define","require","exports","Types_1","clone","source","depth","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,YAAa,SAAUC,EAASC,EAASC,GCGvE,QAAAC,GAA8BC,EAAYC,GAEzCF,GAFyCA,SAAAA,IAAAA,EAAAA,GAEhCA,EAANA,EACFA,MAAOA,EAGRA,KAAIA,EAAAA,WAAKA,SAASA,GAASA,MAAOA,EAElCA,IAAIA,EACJA,IAAGA,MAAMA,QAAQA,IAGhBA,GADAA,EAAeA,EAAQA,QACpBA,EAAMA,EAERA,IAAIA,GAAIA,GAAIA,EAAGA,EAAEA,EAAOA,OAAQA,IAE/BA,EAAOA,GAAKA,EAAMA,EAAOA,GAAIA,EAAQA,OAOvCA,IADAA,KACGA,EAAMA,EAAGA,IAAIA,GAAIA,KAAKA,GAGxBA,EAAOA,GAAKA,EAAMA,EAAOA,GAAIA,EAAQA,EAIvCA,OAAOA,GA9BRG,OAAAC,eAAAN,EAAA,cAAAO,OAAA,IDuBIP,EAAAA,WAAkBE","file":"System/Utility/clone.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", '../Types'], function (require, exports, Types_1) {\n    function clone(source, depth) {\n        if (depth === void 0) { depth = 0; }\n        if (depth < 0)\n            return source;\n        if (!Types_1.default.isObject(source))\n            return source;\n        var result;\n        if (Array.isArray(source)) {\n            result = source.slice();\n            if (depth > 0) {\n                for (var i = 0; i < result.length; i++) {\n                    result[i] = clone(result[i], depth - 1);\n                }\n            }\n        }\n        else {\n            result = {};\n            if (depth > 0)\n                for (var k in source) {\n                    result[k] = clone(source[k], depth - 1);\n                }\n        }\n        return result;\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = clone;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from '../Types';\r\n\r\nexport default function clone(source:any, depth:number = 0):any\r\n{\r\n\tif(depth<0)\r\n\t\treturn source;\r\n\r\n\t// return primitives as is.\r\n\tif(!Type.isObject(source)) return source;\r\n\r\n\tvar result:any;\r\n\tif(Array.isArray(source))\r\n\t{\r\n\t\tresult = (<any>source).slice();\r\n\t\tif(depth>0)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i<result.length; i++)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = clone(result[i], depth - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tresult = {};\r\n\t\tif(depth>0) for(let k in source)\r\n\t\t{\r\n\t\t\t//noinspection JSUnfilteredForInLoop\r\n\t\t\tresult[k] = clone(source[k], depth - 1);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n"]}