{"version":3,"sources":["System/Validation/ValidationResult.ts","System/Validation/ValidationResult.js"],"names":["define","require","exports","valid","ValidationResult","ValidationResult.constructor","ValidationResult.equals","get","ValidationResult.valid","enumerable","configurable","ValidationResult.invalid","Object","defineProperty","value"],"mappings":"AAIA,YCHAA,SAAQ,UAAW,WAAY,SAAUC,EAASC,GDQlD,GAAMC,GAAQ,GAAIC,IAAiB,GAKnCA,EAAA,WAOCA,QAAAA,GACQA,EACAA,EACAA,GAFPC,SAAAA,IAAAA,GAAAA,GACAA,SAAAA,IAAAA,EAAAA,MACAA,SAAAA,IAAAA,EAAAA,MAFOA,KAAAA,QAAAA,EACAA,KAAAA,QAAAA,EACAA,KAAAA,KAAAA,EAIPA,OAAOA,OAAOA,MAgChBD,MA1BCA,GAAAA,UAAAA,OAAAA,SAAOA,GAENE,GAAIA,GAAIA,IACRA,OAAOA,GAAEA,UAAUA,EAAMA,SACrBA,EAAEA,SAASA,EAAEA,SACbA,EAAEA,MAAMA,EAAEA,MAQfF,OAAAA,eAAWA,EAAAA,SCzBAG,IDyBXH,WACCI,MAAOA,ICvBGC,YAAY,EACZC,cAAc,ID4BlBN,EAAAA,QAAPA,SACCA,EACAA,GAEAO,MAFAA,UAAAA,IAAAA,EAAAA,MAEOA,GAAIA,IAAiBA,EAAOA,EAASA,IAE9CP,IA9CAQ,QAAAC,eAAAX,EAAA,cAAAY,OAAA,ICqBIZ,EAAAA,WAAkBE","file":"System/Validation/ValidationResult.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n/// <reference path=\"IValidationResult.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n\r\nconst valid = new ValidationResult(true);\r\n\r\n/**\r\n * A class for generating responses to validation.\r\n */\r\nexport default\r\nclass ValidationResult\r\nimplements IValidationResult, IEquatable<IValidationResult>\r\n{\r\n\t/**\r\n\t * Allows for rare cases that ValidationResult.valid and ValidationResult.invalid() don't cover.\r\n\t */\r\n\tconstructor(\r\n\t\tpublic isValid:boolean = false,\r\n\t\tpublic message:string = null,\r\n\t\tpublic data:any = null)\r\n\t{\r\n\r\n\t\t// Readonly...\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Allows for comparing another IValidationResult to see if they are equal.\r\n\t */\r\n\tequals(other:IValidationResult):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.isValid===other.isValid\r\n\t\t\t&& _.message==_.message\r\n\t\t\t&& _.data==_.data;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Represents a single/shared instance of a valid result.\r\n\t * Allows for returning this instance like you would return 'true'.\r\n\t */\r\n\tstatic get valid():IValidationResult {\r\n\t\treturn valid;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for easily creating an invalid result.\r\n\t */\r\n\tstatic invalid(\r\n\t\tmessage:string,\r\n\t\tdata:any = null):IValidationResult\r\n\t{\r\n\t\treturn new ValidationResult(false, message, data);\r\n\t}\r\n}\r\n","'use strict';\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\"], function (require, exports) {\r\n    /// <reference path=\"IValidationResult.d.ts\"/>\r\n    ///<reference path=\"../IEquatable.d.ts\"/>\r\n    var valid = new ValidationResult(true);\r\n    var ValidationResult = (function () {\r\n        function ValidationResult(isValid, message, data) {\r\n            if (isValid === void 0) { isValid = false; }\r\n            if (message === void 0) { message = null; }\r\n            if (data === void 0) { data = null; }\r\n            this.isValid = isValid;\r\n            this.message = message;\r\n            this.data = data;\r\n            Object.freeze(this);\r\n        }\r\n        ValidationResult.prototype.equals = function (other) {\r\n            var _ = this;\r\n            return _.isValid === other.isValid\r\n                && _.message == _.message\r\n                && _.data == _.data;\r\n        };\r\n        Object.defineProperty(ValidationResult, \"valid\", {\r\n            get: function () {\r\n                return valid;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        ValidationResult.invalid = function (message, data) {\r\n            if (data === void 0) { data = null; }\r\n            return new ValidationResult(false, message, data);\r\n        };\r\n        return ValidationResult;\r\n    })();\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = ValidationResult;\r\n});\r\n//# sourceMappingURL=ValidationResult.js.map"]}