{"version":3,"sources":["System/Time/ClockTime.js","System/Time/ClockTime.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","TimeQuantity_1","pluralize","value","label","ClockTime","_super","ClockTime.constructor","ClockTime.from","ClockTime.millisecondsFromTime","ClockTime.toString","defineProperty"],"mappings":"AAAA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,kBAAmB,SAAUC,EAASC,EAASC,GCQ7E,YA2GA,SAAAC,GAAmBC,EAAcC,GAKhCF,MAHqBA,KAAlBA,KAAKA,IAAIA,KACXA,GAASA,KAEHA,EA1GR,GAAAG,GAAA,SAAAC,GAaCD,QAAAA,KDrBW,ICqBCE,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAEXA,GAAAA,KAAAA,KACCA,EAAKA,OAAOA,EACTA,EAAUA,qBACZA,EAAKA,IAAMA,EACXA,EAAKA,IAAMA,EACXA,EAAKA,OAAOA,GAAKA,EAAKA,IAAMA,EAC5BA,EAAKA,OAAOA,GAAKA,EAAKA,IAAMA,GAEzBA,EAAKA,OAAOA,GAAKA,EAAKA,IAAMA,EAGjCA,IAAIA,GAAIA,KACJA,EAAKA,KAAKA,IAAIA,EAAEA,wBAChBA,EAAMA,KAAKA,MAAMA,EAErBA,GAAEA,KAAkBA,KAAVA,EAAKA,GAEfA,EAAEA,KAAQA,EAAIA,MAAgCA,EAC9CA,GAAgBA,MAATA,EAAEA,KAETA,EAAEA,KAAQA,EAAIA,KAAiCA,EAC/CA,GAAgBA,KAATA,EAAEA,KAETA,EAAEA,OAAUA,EAAIA,IAAmCA,EACnDA,GAAkBA,IAAXA,EAAEA,OAETA,EAAEA,OAAUA,EAAIA,IAAmCA,EACnDA,GAAkBA,IAAXA,EAAEA,OAETA,EAAEA,YAAcA,EAEhBA,OAAOA,OAAOA,GAmDhBF,MAhGwBA,WAAAA,EAAAA,GAkDhBA,EAAAA,KAAPA,SAAYA,EAAcA,EAAgBA,EAAoBA,GAE7DG,MAFyCA,UAAAA,IAAAA,EAAAA,GAAoBA,SAAAA,IAAAA,EAAAA,GAEtDA,GAAIA,GAAUA,EAAOA,EAASA,EAASA,IAGxCH,EAAAA,qBAAPA,SACCA,EACAA,EACAA,EACAA,GADAI,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,EAEAA,IAAIA,GAAQA,CAOZA,OANAA,IAASA,GACTA,GAASA,EACTA,GAASA,GACTA,GAASA,EACTA,GAASA,IACTA,GAASA,GAIVJ,EAAAA,UAAAA,SAAAA,WAKCK,GAAIA,GAAIA,KAAMA,IAiBdA,OAfGA,GAAEA,MACJA,EAAEA,KAAKA,EAAUA,EAAEA,KAAMA,QAEvBA,EAAEA,MACJA,EAAEA,KAAKA,EAAUA,EAAEA,KAAMA,SAEvBA,EAAEA,QACJA,EAAEA,KAAKA,EAAUA,EAAEA,OAAQA,WAEzBA,EAAEA,QACJA,EAAEA,KAAKA,EAAUA,EAAEA,OAAQA,WAEzBA,EAAEA,OAAOA,GACXA,EAAEA,OAAOA,EAAEA,OAASA,EAAGA,EAAGA,OAEpBA,EAAEA,KAAKA,MAAMA,QAAQA,UAAWA,UAGzCL,GAhGwBJ,EAAAA,WADxBL,QAAAe,eAAAX,EAAA,cAAAG,OAAA,ID+CIH,EAAAA,WAAkBK","file":"System/Time/ClockTime.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", './TimeQuantity'], function (require, exports, TimeQuantity_1) {\n    'use strict';\n    var ClockTime = (function (_super) {\n        __extends(ClockTime, _super);\n        function ClockTime() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _super.call(this, args.length > 1\n                ? ClockTime.millisecondsFromTime(args[0] || 0, args[1] || 0, args.length > 2 && args[2] || 0, args.length > 3 && args[3] || 0)\n                : (args.length > 0 && args[0] || 0));\n            var _ = this;\n            var ms = Math.abs(_.getTotalMilliseconds());\n            var msi = Math.floor(ms);\n            _.tick = (ms - msi) * 10000;\n            _.days = (msi / 86400000) | 0;\n            msi -= _.days * 86400000;\n            _.hour = (msi / 3600000) | 0;\n            msi -= _.hour * 3600000;\n            _.minute = (msi / 60000) | 0;\n            msi -= _.minute * 60000;\n            _.second = (msi / 1000) | 0;\n            msi -= _.second * 1000;\n            _.millisecond = msi;\n            Object.freeze(_);\n        }\n        ClockTime.from = function (hours, minutes, seconds, milliseconds) {\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            return new ClockTime(hours, minutes, seconds, milliseconds);\n        };\n        ClockTime.millisecondsFromTime = function (hours, minutes, seconds, milliseconds) {\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            var value = hours;\n            value *= 60;\n            value += minutes;\n            value *= 60;\n            value += seconds;\n            value *= 1000;\n            value += milliseconds;\n            return value;\n        };\n        ClockTime.prototype.toString = function () {\n            var _ = this, a = [];\n            if (_.days)\n                a.push(pluralize(_.days, \"day\"));\n            if (_.hour)\n                a.push(pluralize(_.hour, \"hour\"));\n            if (_.minute)\n                a.push(pluralize(_.minute, \"minute\"));\n            if (_.second)\n                a.push(pluralize(_.second, \"second\"));\n            if (a.length > 1)\n                a.splice(a.length - 1, 0, \"and\");\n            return a.join(\", \").replace(\", and, \", \" and \");\n        };\n        return ClockTime;\n    })(TimeQuantity_1.default);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ClockTime;\n    function pluralize(value, label) {\n        if (Math.abs(value) !== 1)\n            label += \"s\";\n        return label;\n    }\n});\n","///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"ITimeQuantity.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\n///<reference path=\"../IFormatProvider.d.ts\"/>\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n\r\nexport default\r\nclass ClockTime extends TimeQuantity implements IClockTime\r\n{\r\n\r\n\tdays:number;\r\n\thour:number;\r\n\tminute:number;\r\n\tsecond:number;\r\n\tmillisecond:number;\r\n\ttick:number;\r\n\r\n\tconstructor(milliseconds:number);\r\n\tconstructor(hours:number, minutes:number, seconds?:number, milliseconds?:number);\r\n\tconstructor(...args:number[])\r\n\t{\r\n\t\tsuper(\r\n\t\t\targs.length>1\r\n\t\t\t\t? ClockTime.millisecondsFromTime(\r\n\t\t\t\targs[0] || 0,\r\n\t\t\t\targs[1] || 0,\r\n\t\t\t\targs.length>2 && args[2] || 0,\r\n\t\t\t\targs.length>3 && args[3] || 0\r\n\t\t\t)\r\n\t\t\t\t: (args.length>0 && args[0] || 0)\r\n\t\t);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar ms = Math.abs(_.getTotalMilliseconds());\r\n\t\tvar msi = Math.floor(ms);\r\n\r\n\t\t_.tick = (ms - msi)*HowMany.Ticks.Per.Millisecond;\r\n\r\n\t\t_.days = (msi/HowMany.Milliseconds.Per.Day) | 0;\r\n\t\tmsi -= _.days * HowMany.Milliseconds.Per.Day;\r\n\r\n\t\t_.hour = (msi/HowMany.Milliseconds.Per.Hour) | 0;\r\n\t\tmsi -= _.hour * HowMany.Milliseconds.Per.Hour;\r\n\r\n\t\t_.minute = (msi/HowMany.Milliseconds.Per.Minute) | 0;\r\n\t\tmsi -= _.minute * HowMany.Milliseconds.Per.Minute;\r\n\r\n\t\t_.second = (msi/HowMany.Milliseconds.Per.Second) | 0;\r\n\t\tmsi -= _.second * HowMany.Milliseconds.Per.Second;\r\n\r\n\t\t_.millisecond = msi;\r\n\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\r\n\t// Static version for relative consistency.  Constructor does allow this format.\r\n\tstatic from(hours:number, minutes:number, seconds:number = 0, milliseconds:number = 0):ClockTime\r\n\t{\r\n\t\treturn new ClockTime(hours, minutes, seconds, milliseconds);\r\n\t}\r\n\r\n\tstatic millisecondsFromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):number\r\n\t{\r\n\t\tvar value = hours;\r\n\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\tvalue += minutes;\r\n\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\tvalue += seconds;\r\n\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\tvalue += milliseconds;\r\n\t\treturn value;\r\n\t}\r\n\r\n\ttoString(/*format?:string, formatProvider?:IFormatProvider*/):string\r\n\t{\r\n\t\t/* INSERT CUSTOM FORMATTING CODE HERE */\r\n\r\n\r\n\t\tvar _ = this, a:string[] = [];\r\n\r\n\t\tif(_.days)\r\n\t\t\ta.push(pluralize(_.days, \"day\"));\r\n\r\n\t\tif(_.hour)\r\n\t\t\ta.push(pluralize(_.hour, \"hour\"));\r\n\r\n\t\tif(_.minute)\r\n\t\t\ta.push(pluralize(_.minute, \"minute\"));\r\n\r\n\t\tif(_.second)\r\n\t\t\ta.push(pluralize(_.second, \"second\"));\r\n\r\n\t\tif(a.length>1)\r\n\t\t\ta.splice(a.length - 1, 0, \"and\");\r\n\r\n\t\treturn a.join(\", \").replace(\", and, \", \" and \");\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Temporary until the full TimeSpanFormat is available.\r\nfunction pluralize(value:number, label:string):string\r\n{\r\n\tif(Math.abs(value)!==1)\r\n\t\tlabel += \"s\";\r\n\r\n\treturn label;\r\n}\r\n"]}