{"version":3,"sources":["System/Time/ClockTime.js","System/Time/ClockTime.ts"],"names":["define","require","exports","Compare_1","HowMany","TimeSpan_1","pluralize","value","label","ClockTime","ClockTime.constructor","get","ClockTime.totalMilliseconds","enumerable","configurable","ClockTime.direction","ClockTime.equals","ClockTime.compareTo","ClockTime.ticks","ClockTime.milliseconds","ClockTime.seconds","ClockTime.minutes","ClockTime.hours","ClockTime.days","ClockTime.total","ClockTime.toTimeSpan","ClockTime.from","ClockTime.toString","Object","defineProperty"],"mappings":"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","file":"System/Time/ClockTime.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../Compare', './HowMany', './TimeSpan'], function (require, exports) {\r\n    ///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n    ///<reference path=\"ITimeTotal.d.ts\"/>\r\n    ///<reference path=\"../IEquatable.d.ts\"/>\r\n    ///<reference path=\"../IComparable.d.ts\"/>\r\n    ///<reference path=\"../IFormattable.d.ts\"/>\r\n    ///<reference path=\"../IFormatProvider.d.ts\"/>\r\n    var Compare_1 = require('../Compare');\r\n    var HowMany = require('./HowMany');\r\n    var TimeSpan_1 = require('./TimeSpan');\r\n    var ClockTime = (function () {\r\n        function ClockTime() {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i - 0] = arguments[_i];\r\n            }\r\n            this._totalMilliseconds =\r\n                args.length > 1\r\n                    ? TimeSpan_1.default.millisecondsFromTime(args[0] || 0, args[1] || 0, args.length > 2 && args[2] || 0, args.length > 3 && args[3] || 0)\r\n                    : (args.length > 0 && args[0] || 0);\r\n        }\r\n        Object.defineProperty(ClockTime.prototype, \"totalMilliseconds\", {\r\n            get: function () {\r\n                return this._totalMilliseconds;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ClockTime.prototype, \"direction\", {\r\n            get: function () {\r\n                return Compare_1.compare(this._totalMilliseconds, 0);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        ClockTime.prototype.equals = function (other) {\r\n            return Compare_1.areEqual(this._totalMilliseconds, other.totalMilliseconds);\r\n        };\r\n        ClockTime.prototype.compareTo = function (other) {\r\n            if (other == null)\r\n                return 1 | 0;\r\n            return Compare_1.compare(this._totalMilliseconds, other.totalMilliseconds);\r\n        };\r\n        Object.defineProperty(ClockTime.prototype, \"ticks\", {\r\n            get: function () {\r\n                var _ = this, r = _._ticks;\r\n                if (r === undefined) {\r\n                    var ms = Math.abs(_._totalMilliseconds);\r\n                    _._ticks = r = (ms - Math.floor(ms)) * 10000;\r\n                }\r\n                return r;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ClockTime.prototype, \"milliseconds\", {\r\n            get: function () {\r\n                var _ = this, r = _._ms;\r\n                if (r === undefined)\r\n                    _._ms = r =\r\n                        (this._totalMilliseconds % 3600000) | 0;\r\n                return r;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ClockTime.prototype, \"seconds\", {\r\n            get: function () {\r\n                var _ = this, r = _._seconds;\r\n                if (r === undefined)\r\n                    _._seconds = r =\r\n                        ((this._totalMilliseconds / 3600000) % 60) | 0;\r\n                return r;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ClockTime.prototype, \"minutes\", {\r\n            get: function () {\r\n                var _ = this, r = _._minutes;\r\n                if (r === undefined)\r\n                    _._minutes = r =\r\n                        ((this._totalMilliseconds\r\n                            / 3600000\r\n                            / 60) % 60) | 0;\r\n                return r;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ClockTime.prototype, \"hours\", {\r\n            get: function () {\r\n                var _ = this, r = _._hours;\r\n                if (r === undefined)\r\n                    _._hours = r =\r\n                        ((this._totalMilliseconds\r\n                            / 3600000\r\n                            / 60\r\n                            / 60) % 24) | 0;\r\n                return r;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ClockTime.prototype, \"days\", {\r\n            get: function () {\r\n                var _ = this, r = _._days;\r\n                if (r === undefined)\r\n                    _._days = r =\r\n                        (this._totalMilliseconds\r\n                            / 3600000\r\n                            / 60\r\n                            / 60\r\n                            / 24) | 0;\r\n                return r;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ClockTime.prototype, \"total\", {\r\n            get: function () {\r\n                return this.toTimeSpan();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        ClockTime.prototype.toTimeSpan = function () {\r\n            return new TimeSpan_1.default(this._totalMilliseconds);\r\n        };\r\n        ClockTime.from = function (hours, minutes, seconds, milliseconds) {\r\n            if (seconds === void 0) { seconds = 0; }\r\n            if (milliseconds === void 0) { milliseconds = 0; }\r\n            return new ClockTime(hours, minutes, seconds, milliseconds);\r\n        };\r\n        ClockTime.prototype.toString = function () {\r\n            /* INSERT CUSTOM FORMATTING CODE HERE */\r\n            var _ = this, a = [];\r\n            if (_.days)\r\n                a.push(pluralize(_.days, \"day\"));\r\n            if (_.hours)\r\n                a.push(pluralize(_.hours, \"hour\"));\r\n            if (_.minutes)\r\n                a.push(pluralize(_.minutes, \"minute\"));\r\n            if (_.seconds)\r\n                a.push(pluralize(_.seconds, \"second\"));\r\n            if (a.length > 1)\r\n                a.splice(a.length - 1, 0, \"and\");\r\n            return a.join(\", \").replace(\", and, \", \" and \");\r\n        };\r\n        return ClockTime;\r\n    })();\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = ClockTime;\r\n    function pluralize(value, label) {\r\n        if (Math.abs(value) !== 1)\r\n            label += \"s\";\r\n        return label;\r\n    }\r\n});\r\n//# sourceMappingURL=ClockTime.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"ITimeTotal.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\n///<reference path=\"../IFormatProvider.d.ts\"/>\r\nimport {areEqual,compare} from '../Compare';\r\nimport * as HowMany from './HowMany';\r\nimport TimeSpan from './TimeSpan';\r\n\r\n\r\nexport default\r\nclass ClockTime implements ITimeMeasurement, IEquatable<ClockTime>, IComparable<ClockTime>, IFormattable, ITimeTotal\r\n{\r\n\tprivate _totalMilliseconds:number;\r\n\tget totalMilliseconds():number\r\n\t{\r\n\t\treturn this._totalMilliseconds;\r\n\t}\r\n\r\n\t// Could be in reverse or negative...\r\n\tget direction():number\r\n\t{\r\n\t\treturn compare(this._totalMilliseconds, 0);\r\n\t}\r\n\r\n\tconstructor(milliseconds:number);\r\n\tconstructor(hours:number, minutes:number, seconds?:number, milliseconds?:number);\r\n\tconstructor(...args:number[])\r\n\t{\r\n\t\tthis._totalMilliseconds =\r\n\t\t\targs.length>1\r\n\t\t\t\t? TimeSpan.millisecondsFromTime(\r\n\t\t\t\targs[0] || 0,\r\n\t\t\t\targs[1] || 0,\r\n\t\t\t\targs.length>2 && args[2] || 0,\r\n\t\t\t\targs.length>3 && args[3] || 0\r\n\t\t\t)\r\n\t\t\t\t: (args.length>0 && args[0] || 0);\r\n\t}\r\n\r\n\r\n\tequals(other:ClockTime):boolean\r\n\t{\r\n\t\treturn areEqual(this._totalMilliseconds, other.totalMilliseconds);\r\n\t}\r\n\r\n\tcompareTo(other:ClockTime):number\r\n\t{\r\n\t\tif(other==null) return 1 | 0;\r\n\r\n\t\treturn compare(this._totalMilliseconds, other.totalMilliseconds);\r\n\t}\r\n\r\n\r\n\tprivate _ticks:number;\r\n\tget ticks():number\r\n\t{\r\n\t\tvar _ = this, r = _._ticks;\r\n\t\tif(r===undefined) {\r\n\t\t\tvar ms = Math.abs(_._totalMilliseconds);\r\n\t\t\t_._ticks = r = (ms - Math.floor(ms))*HowMany.Ticks.Per.Millisecond;\r\n\t\t}\r\n\t\treturn r;\r\n\t}\r\n\r\n\tprivate _ms:number;\r\n\r\n\tget milliseconds():number\r\n\t{\r\n\t\tvar _ = this, r = _._ms;\r\n\t\tif(r===undefined)\r\n\t\t\t_._ms = r =\r\n\t\t\t\t(this._totalMilliseconds%HowMany.Milliseconds.Per.Hour) | 0;\r\n\t\treturn r;\r\n\t}\r\n\r\n\r\n\tprivate _seconds:number;\r\n\tget seconds():number\r\n\t{\r\n\t\tvar _ = this, r = _._seconds;\r\n\t\tif(r===undefined)\r\n\t\t\t_._seconds = r =\r\n\t\t\t\t((this._totalMilliseconds/HowMany.Milliseconds.Per.Hour)%HowMany.Seconds.Per.Minute) | 0;\r\n\t\treturn r;\r\n\t}\r\n\r\n\tprivate _minutes:number;\r\n\tget minutes():number\r\n\t{\r\n\t\tvar _ = this, r = _._minutes;\r\n\t\tif(r===undefined)\r\n\t\t\t_._minutes = r =\r\n\t\t\t\t((this._totalMilliseconds\r\n\t\t\t\t/HowMany.Milliseconds.Per.Hour\r\n\t\t\t\t/HowMany.Seconds.Per.Minute)%HowMany.Minutes.Per.Hour) | 0;\r\n\r\n\t\treturn r;\r\n\t}\r\n\r\n\tprivate _hours:number;\r\n\tget hours():number\r\n\t{\r\n\t\tvar _ = this, r = _._hours;\r\n\t\tif(r===undefined)\r\n\t\t\t_._hours = r =\r\n\t\t\t\t((this._totalMilliseconds\r\n\t\t\t\t/HowMany.Milliseconds.Per.Hour\r\n\t\t\t\t/HowMany.Seconds.Per.Minute\r\n\t\t\t\t/HowMany.Minutes.Per.Hour)%HowMany.Hours.Per.Day) | 0;\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\tprivate _days:number;\r\n\tget days():number\r\n\t{\r\n\t\tvar _ = this, r = _._days;\r\n\t\tif(r===undefined)\r\n\t\t\t_._days = r =\r\n\t\t\t\t(this._totalMilliseconds\r\n\t\t\t\t/HowMany.Milliseconds.Per.Hour\r\n\t\t\t\t/HowMany.Seconds.Per.Minute\r\n\t\t\t\t/HowMany.Minutes.Per.Hour\r\n\t\t\t\t/HowMany.Hours.Per.Day) | 0;\r\n\t\treturn r;\r\n\t}\r\n\r\n\tget total():ITimeMeasurement {\r\n\t\treturn this.toTimeSpan();\r\n\t}\r\n\r\n\ttoTimeSpan():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this._totalMilliseconds);\r\n\t}\r\n\r\n\t// Static version for relative consistency.  Constructor does allow this format.\r\n\tstatic from(hours:number, minutes:number, seconds:number = 0, milliseconds:number = 0):ClockTime\r\n\t{\r\n\t\treturn new ClockTime(hours, minutes, seconds, milliseconds);\r\n\t}\r\n\r\n\ttoString(/*format?:string, formatProvider?:IFormatProvider*/):string\r\n\t{\r\n\t\t/* INSERT CUSTOM FORMATTING CODE HERE */\r\n\r\n\r\n\t\tvar _ = this, a:string[] = [];\r\n\r\n\t\tif(_.days)\r\n\t\t\ta.push(pluralize(_.days, \"day\"));\r\n\r\n\t\tif(_.hours)\r\n\t\t\ta.push(pluralize(_.hours, \"hour\"));\r\n\r\n\t\tif(_.minutes)\r\n\t\t\ta.push(pluralize(_.minutes, \"minute\"));\r\n\r\n\t\tif(_.seconds)\r\n\t\t\ta.push(pluralize(_.seconds, \"second\"));\r\n\r\n\t\tif(a.length>1)\r\n\t\t\ta.splice(a.length - 1, 0, \"and\");\r\n\r\n\t\treturn a.join(\", \").replace(\", and, \", \" and \");\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Temporary until the full TimeSpanFormat is available.\r\nfunction pluralize(value:number, label:string):string\r\n{\r\n\tif(Math.abs(value)!==1)\r\n\t\tlabel += \"s\";\r\n\r\n\treturn label;\r\n}\r\n"]}