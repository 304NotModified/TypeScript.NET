{"version":3,"sources":["System/Time/TimeStamp.js","System/Time/TimeStamp.ts"],"names":["define","require","exports","Types_1","TimeStamp","year","month","day","hour","minute","second","millisecond","tick","this","Object","freeze","prototype","toJsDate","_","Date","from","d","hasMember","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","Error","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,YAAa,SAAUC,EAASC,EAASC,GCKvE,YAOA,IAAAC,GAAA,WAIC,QAAAA,GACQC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GALP,SAAAL,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GAPOC,KAAAR,KAAAA,EACAQ,KAAAP,MAAAA,EACAO,KAAAN,IAAAA,EACAM,KAAAL,KAAAA,EACAK,KAAAJ,OAAAA,EACAI,KAAAH,OAAAA,EACAG,KAAAF,YAAAA,EACAE,KAAAD,KAAAA,EAKPE,OAAOC,OAAOF,MA8BhB,MA3BCT,GAAAY,UAAAC,SAAA,WAEC,GAAIC,GAAIL,IACR,OAAO,IAAIM,MAAKD,EAAEb,KAAMa,EAAEZ,MAAOY,EAAEX,IAAKW,EAAEV,KAAMU,EAAET,OAAQS,EAAER,OAAQQ,EAAEP,YAAcO,EAAEN,KAAK,MAGrFR,EAAAgB,KAAP,SAAYC,GAIX,GAFMA,YAAaF,QAAShB,EAAAA,WAAKmB,UAAUD,EAAE,cAC5CA,EAAgBA,EAAGJ,YACjBI,YAAaF,MAEf,MAAO,IAAIf,GACViB,EAAEE,cACFF,EAAEG,WACFH,EAAEI,UACFJ,EAAEK,WACFL,EAAEM,aACFN,EAAEO,aACFP,EAAEQ,kBAKH,MAAMC,OAAM,uBAGf1B,IA/CAU,QAAAiB,eAAA7B,EAAA,cAAA8B,OAAA,IDyBI9B,EAAAA,WAAkBE","file":"System/Time/TimeStamp.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../Types'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Types_1 = require('../Types');\r\n    var TimeStamp = (function () {\r\n        function TimeStamp(year, month, day, hour, minute, second, millisecond, tick) {\r\n            if (day === void 0) { day = 1; }\r\n            if (hour === void 0) { hour = 0; }\r\n            if (minute === void 0) { minute = 0; }\r\n            if (second === void 0) { second = 0; }\r\n            if (millisecond === void 0) { millisecond = 0; }\r\n            if (tick === void 0) { tick = 0; }\r\n            this.year = year;\r\n            this.month = month;\r\n            this.day = day;\r\n            this.hour = hour;\r\n            this.minute = minute;\r\n            this.second = second;\r\n            this.millisecond = millisecond;\r\n            this.tick = tick;\r\n            Object.freeze(this);\r\n        }\r\n        TimeStamp.prototype.toJsDate = function () {\r\n            var _ = this;\r\n            return new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick / 10000);\r\n        };\r\n        TimeStamp.from = function (d) {\r\n            if (!(d instanceof Date) && Types_1.default.hasMember(d, 'toJsDate'))\r\n                d = d.toJsDate();\r\n            if (d instanceof Date) {\r\n                return new TimeStamp(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\r\n            }\r\n            else {\r\n                throw Error('Invalid date type.');\r\n            }\r\n        };\r\n        return TimeStamp;\r\n    }());\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = TimeStamp;\r\n});\r\n//# sourceMappingURL=TimeStamp.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\n\r\n/**\r\n * An alternative to Date or DateTime.  Is a model representing the exact date and time.\r\n */\r\nexport default\r\nclass TimeStamp implements ITimeStamp, IDateTime\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic year:number,\r\n\t\tpublic month:Gregorian.Month,\r\n\t\tpublic day:number = 1,\r\n\t\tpublic hour:number = 0,\r\n\t\tpublic minute:number = 0,\r\n\t\tpublic second:number = 0,\r\n\t\tpublic millisecond:number = 0,\r\n\t\tpublic tick:number = 0)\r\n\t{\r\n\r\n\t\t// TODO: Add validation or properly carry out of range values...\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick/HowMany.Ticks.Per.Millisecond);\r\n\t}\r\n\r\n\tstatic from(d:Date|IDateTime):TimeStamp\r\n\t{\r\n\t\tif (!(d instanceof Date) && Type.hasMember(d,'toJsDate'))\r\n\t\t\td = (<IDateTime>d).toJsDate();\r\n\t\tif(d instanceof Date)\r\n\t\t{\r\n\t\t\treturn new TimeStamp(\r\n\t\t\t\td.getFullYear(),\r\n\t\t\t\td.getMonth(),\r\n\t\t\t\td.getDate(),\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds()\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow Error('Invalid date type.');\r\n\t\t}\r\n\t}\r\n}\r\n"]}