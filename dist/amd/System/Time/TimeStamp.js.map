{"version":3,"sources":["System/Time/TimeStamp.js","System/Time/TimeStamp.ts"],"names":["define","require","exports","HowMany","Types_1","TimeStamp","TimeStamp.constructor","TimeStamp.toJsDate","TimeStamp.from","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,YAAa,YAAa,SAAUC,EAASC,EAASC,EAASC,GCU7F,GAAAC,GAAA,WAICA,QAAAA,GACQA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GALPC,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GAPOA,KAAAA,KAAAA,EACAA,KAAAA,MAAAA,EACAA,KAAAA,IAAAA,EACAA,KAAAA,KAAAA,EACAA,KAAAA,OAAAA,EACAA,KAAAA,OAAAA,EACAA,KAAAA,YAAAA,EACAA,KAAAA,KAAAA,EAKPA,OAAOA,OAAOA,MA8BhBD,MA3BCA,GAAAA,UAAAA,SAAAA,WAECE,GAAIA,GAAIA,IACRA,OAAOA,IAAIA,MAAKA,EAAEA,KAAMA,EAAEA,MAAOA,EAAEA,IAAKA,EAAEA,KAAMA,EAAEA,OAAQA,EAAEA,OAAQA,EAAEA,YAAcA,EAAEA,KAAKA,MAGrFF,EAAAA,KAAPA,SAAYA,GAIXG,IAFMA,EAAAA,WAAKA,aAAmBA,EAAEA,OAAUA,EAAAA,WAAKA,UAAUA,EAAEA,cAC1DA,EAAgBA,EAAGA,YACjBA,EAAAA,WAAKA,aAAmBA,EAAEA,MAE5BA,MAAOA,IAAIA,GACVA,EAAEA,cACFA,EAAEA,WACFA,EAAEA,UACFA,EAAEA,WACFA,EAAEA,aACFA,EAAEA,aACFA,EAAEA,kBAKHA,MAAMA,OAAMA,uBAGfH,IA/CAI,QAAAC,eAAAR,EAAA,cAAAS,OAAA,ID2BIT,EAAAA,WAAkBG","file":"System/Time/TimeStamp.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", './HowMany', '../Types'], function (require, exports) {\r\n    var HowMany = require('./HowMany');\r\n    var Types_1 = require('../Types');\r\n    var TimeStamp = (function () {\r\n        function TimeStamp(year, month, day, hour, minute, second, millisecond, tick) {\r\n            // TODO: Add validation or properly carry out of range values...\r\n            if (day === void 0) { day = 1; }\r\n            if (hour === void 0) { hour = 0; }\r\n            if (minute === void 0) { minute = 0; }\r\n            if (second === void 0) { second = 0; }\r\n            if (millisecond === void 0) { millisecond = 0; }\r\n            if (tick === void 0) { tick = 0; }\r\n            this.year = year;\r\n            this.month = month;\r\n            this.day = day;\r\n            this.hour = hour;\r\n            this.minute = minute;\r\n            this.second = second;\r\n            this.millisecond = millisecond;\r\n            this.tick = tick;\r\n            Object.freeze(this);\r\n        }\r\n        TimeStamp.prototype.toJsDate = function () {\r\n            var _ = this;\r\n            return new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick / 10000);\r\n        };\r\n        TimeStamp.from = function (d) {\r\n            if (!(Types_1.default.isInstanceOf(d, Date)) && Types_1.default.hasMember(d, 'toJsDate'))\r\n                d = d.toJsDate();\r\n            if (Types_1.default.isInstanceOf(d, Date)) {\r\n                return new TimeStamp(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\r\n            }\r\n            else {\r\n                throw Error('Invalid date type.');\r\n            }\r\n        };\r\n        return TimeStamp;\r\n    })();\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = TimeStamp;\r\n});\r\n//# sourceMappingURL=TimeStamp.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\nimport {Gregorian} from './Calendars';\r\nimport * as HowMany from './HowMany';\r\nimport Type from '../Types';\r\n\r\n/**\r\n * An alternative to Date or DateTime.  Is a model representing the exact date and time.\r\n */\r\nexport default\r\nclass TimeStamp implements ITimeStamp, IDateTime\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic year:number,\r\n\t\tpublic month:Gregorian.Month,\r\n\t\tpublic day:number = 1,\r\n\t\tpublic hour:number = 0,\r\n\t\tpublic minute:number = 0,\r\n\t\tpublic second:number = 0,\r\n\t\tpublic millisecond:number = 0,\r\n\t\tpublic tick:number = 0)\r\n\t{\r\n\r\n\t\t// TODO: Add validation or properly carry out of range values...\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick/HowMany.Ticks.Per.Millisecond);\r\n\t}\r\n\r\n\tstatic from(d:Date|IDateTime):TimeStamp\r\n\t{\r\n\t\tif (!(Type.isInstanceOf<Date>(d,Date)) && Type.hasMember(d,'toJsDate'))\r\n\t\t\td = (<IDateTime>d).toJsDate();\r\n\t\tif(Type.isInstanceOf<Date>(d,Date))\r\n\t\t{\r\n\t\t\treturn new TimeStamp(\r\n\t\t\t\td.getFullYear(),\r\n\t\t\t\td.getMonth(),\r\n\t\t\t\td.getDate(),\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds()\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow Error('Invalid date type.');\r\n\t\t}\r\n\t}\r\n}\r\n"]}