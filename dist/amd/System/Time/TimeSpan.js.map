{"version":3,"sources":["System/Time/TimeSpan.js","System/Time/TimeSpan.ts"],"names":["define","require","exports","Compare_1","Types_1","HowMany","TimeUnit_1","TimeUnitValue_1","ClockTime_1","assertComparisonType","other","getMilliseconds","TimeSpan","TimeSpan.constructor","TimeSpan.equals","TimeSpan.compareTo","TimeSpan.toTimeUnitValue","TimeSpan.convertToMilliseconds","TimeSpan.getTotal","get","TimeSpan.ticks","enumerable","configurable","TimeSpan.milliseconds","TimeSpan.seconds","TimeSpan.minutes","TimeSpan.hours","TimeSpan.days","TimeSpan.total","TimeSpan.time","TimeSpan.add","TimeSpan.addUnit","TimeSpan.from","TimeSpan.fromDays","TimeSpan.fromHours","TimeSpan.fromMinutes","TimeSpan.fromSeconds","TimeSpan.fromMilliseconds","TimeSpan.fromTicks","TimeSpan.fromTime","TimeSpan.millisecondsFromTime","TimeSpan.between","TimeSpan.zero","Object","defineProperty","value","timeSpanZero"],"mappings":"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","file":"System/Time/TimeSpan.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport { areEqual, compare } from '../Compare';\r\nimport Type from '../Types';\r\nimport * as HowMany from './HowMany';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeUnitValue from './TimeUnitValue';\r\nimport ClockTime from './ClockTime';\r\nexport default class TimeSpan {\r\n    constructor(value, units = TimeUnit.Milliseconds) {\r\n        this._milliseconds = TimeSpan.convertToMilliseconds(value, units);\r\n    }\r\n    equals(other) {\r\n        var otherMS = getMilliseconds(other);\r\n        if (other === undefined)\r\n            return false;\r\n        return areEqual(this._milliseconds, otherMS);\r\n    }\r\n    compareTo(other) {\r\n        if (other == null)\r\n            return 1 | 0;\r\n        assertComparisonType(other);\r\n        return compare(this._milliseconds, getMilliseconds(other));\r\n    }\r\n    toTimeUnitValue(units = TimeUnit.Milliseconds) {\r\n        return new TimeUnitValue(this.getTotal(units), units);\r\n    }\r\n    static convertToMilliseconds(value, units = TimeUnit.Milliseconds) {\r\n        switch (units) {\r\n            case TimeUnit.Days:\r\n                value *= 24;\r\n            case TimeUnit.Hours:\r\n                value *= 60;\r\n            case TimeUnit.Minutes:\r\n                value *= 60;\r\n            case TimeUnit.Seconds:\r\n                value *= 1000;\r\n            case TimeUnit.Milliseconds:\r\n                return value;\r\n            case TimeUnit.Ticks:\r\n                return value / 10000;\r\n            default:\r\n                throw new Error(\"Invalid TimeUnit.\");\r\n        }\r\n    }\r\n    getTotal(units) {\r\n        var _ = this;\r\n        switch (units) {\r\n            case TimeUnit.Days:\r\n                return _.days;\r\n            case TimeUnit.Hours:\r\n                return _.hours;\r\n            case TimeUnit.Minutes:\r\n                return _.minutes;\r\n            case TimeUnit.Seconds:\r\n                return _.seconds;\r\n            case TimeUnit.Milliseconds:\r\n                return _._milliseconds;\r\n            case TimeUnit.Ticks:\r\n                return _._milliseconds * 10000;\r\n            default:\r\n                throw new Error(\"Invalid TimeUnit.\");\r\n        }\r\n    }\r\n    get ticks() {\r\n        return this._milliseconds\r\n            * 10000;\r\n    }\r\n    get milliseconds() {\r\n        return this._milliseconds;\r\n    }\r\n    get seconds() {\r\n        return this._milliseconds\r\n            / 1000;\r\n    }\r\n    get minutes() {\r\n        return this.seconds\r\n            / 60;\r\n    }\r\n    get hours() {\r\n        return this.minutes\r\n            / 60;\r\n    }\r\n    get days() {\r\n        return this.hours\r\n            / 24;\r\n    }\r\n    get total() {\r\n        return this;\r\n    }\r\n    get time() {\r\n        return new ClockTime(this._milliseconds);\r\n    }\r\n    add(other) {\r\n        if (Type.isNumber(other))\r\n            throw new Error(\"Use .addUnit to add a numerical value amount.  \" +\r\n                \".add only supports ClockTime, TimeSpan, and TimeUnitValue.\");\r\n        if (other instanceof TimeUnitValue || other instanceof ClockTime)\r\n            other = other.toTimeSpan();\r\n        return new TimeSpan(this._milliseconds + other.milliseconds);\r\n    }\r\n    addUnit(value, units = TimeUnit.Milliseconds) {\r\n        return new TimeSpan(this._milliseconds + TimeSpan.convertToMilliseconds(value, units));\r\n    }\r\n    static from(value, units) {\r\n        return new TimeSpan(value, units);\r\n    }\r\n    static fromDays(value) {\r\n        return new TimeSpan(value, TimeUnit.Days);\r\n    }\r\n    static fromHours(value) {\r\n        return new TimeSpan(value, TimeUnit.Hours);\r\n    }\r\n    static fromMinutes(value) {\r\n        return new TimeSpan(value, TimeUnit.Minutes);\r\n    }\r\n    static fromSeconds(value) {\r\n        return new TimeSpan(value, TimeUnit.Seconds);\r\n    }\r\n    static fromMilliseconds(value) {\r\n        return new TimeSpan(value, TimeUnit.Milliseconds);\r\n    }\r\n    static fromTicks(value) {\r\n        return new TimeSpan(value, TimeUnit.Ticks);\r\n    }\r\n    static fromTime(hours, minutes, seconds = 0, milliseconds = 0) {\r\n        return new TimeSpan(TimeSpan.millisecondsFromTime(hours, minutes, seconds, milliseconds));\r\n    }\r\n    static millisecondsFromTime(hours, minutes, seconds = 0, milliseconds = 0) {\r\n        var value = hours;\r\n        value *= 60;\r\n        value += minutes;\r\n        value *= 60;\r\n        value += seconds;\r\n        value *= 1000;\r\n        value += milliseconds;\r\n        return value;\r\n    }\r\n    static between(first, last) {\r\n        return new TimeSpan(last.getTime() - first.getTime());\r\n    }\r\n    static get zero() {\r\n        return timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n    }\r\n}\r\nfunction assertComparisonType(other) {\r\n    if (!(other instanceof TimeUnitValue || other instanceof TimeSpan))\r\n        throw new Error(\"Invalid comparison type.  Must be of type TimeUnitValue or TimeSpan.\");\r\n}\r\nfunction getMilliseconds(other) {\r\n    if (other instanceof TimeUnitValue) {\r\n        var o = other;\r\n        return o.type === TimeUnit.Milliseconds\r\n            ? o.value\r\n            : o.toTimeSpan().milliseconds;\r\n    }\r\n    else if (other instanceof TimeSpan) {\r\n        return other._milliseconds;\r\n    }\r\n    return undefined;\r\n}\r\nvar timeSpanZero;\r\n//# sourceMappingURL=TimeSpan.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\nimport {areEqual,compare} from '../Compare';\r\nimport Type from '../Types';\r\nimport * as HowMany from './HowMany';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeUnitValue from './TimeUnitValue';\r\nimport ClockTime from './ClockTime';\r\n\r\n\r\nexport default\r\nclass TimeSpan implements ITimeMeasurement, IEquatable<TimeSpan>, IComparable<TimeSpan>, ITimeTotal\r\n{\r\n\r\n\tprivate _milliseconds:number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tthis._milliseconds = TimeSpan.convertToMilliseconds(value, units);\r\n\t}\r\n\r\n\tequals(other:TimeUnitValue):boolean;\r\n\tequals(other:TimeSpan):boolean;\r\n\tequals(other:any):boolean\r\n\t{\r\n\t\tvar otherMS:number = getMilliseconds(other);\r\n\r\n\t\tif(other===undefined) // undefined is used instead of NaN since NaN could be a valid value.\r\n\t\t\treturn false;\r\n\r\n\t\treturn areEqual(this._milliseconds, otherMS);\r\n\t}\r\n\r\n\r\n\tcompareTo(other:TimeUnitValue):number;\r\n\tcompareTo(other:TimeSpan):number;\r\n\tcompareTo(other:any):number\r\n\t{\r\n\t\tif(other==null) return 1 | 0;\r\n\r\n\t\tassertComparisonType(other);\r\n\r\n\t\treturn compare(this._milliseconds, getMilliseconds(other));\r\n\r\n\t}\r\n\r\n\ttoTimeUnitValue(units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(this.getTotal(units), units);\r\n\t}\r\n\r\n\tstatic convertToMilliseconds(value:number, units:TimeUnit = TimeUnit.Milliseconds):number\r\n\t{\r\n\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\tvalue *= HowMany.Hours.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn value;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn value/HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\tgetTotal(units:TimeUnit):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\treturn _.days;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\treturn _.hours;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\treturn _.minutes;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\treturn _.seconds;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn _._milliseconds;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn _._milliseconds*HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\tget ticks():number\r\n\t{\r\n\t\treturn this._milliseconds\r\n\t\t\t*HowMany.Ticks.Per.Millisecond;\r\n\t}\r\n\r\n\tget milliseconds():number\r\n\t{\r\n\t\treturn this._milliseconds;\r\n\t}\r\n\r\n\tget seconds():number\r\n\t{\r\n\t\treturn this._milliseconds\r\n\t\t\t/HowMany.Milliseconds.Per.Second;\r\n\t}\r\n\r\n\tget minutes():number\r\n\t{\r\n\t\treturn this.seconds\r\n\t\t\t/HowMany.Seconds.Per.Minute;\r\n\t}\r\n\r\n\tget hours():number\r\n\t{\r\n\t\treturn this.minutes\r\n\t\t\t/HowMany.Minutes.Per.Hour;\r\n\t}\r\n\r\n\tget days():number\r\n\t{\r\n\t\treturn this.hours\r\n\t\t\t/HowMany.Hours.Per.Day;\r\n\t}\r\n\r\n\t// Provides an interface only way of acquiring the getTotal time.\r\n\tget total():ITimeMeasurement\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\treturn new ClockTime(this._milliseconds);\r\n\t}\r\n\r\n\tadd(other:ClockTime):TimeSpan;\r\n\tadd(other:TimeUnitValue):TimeSpan;\r\n\tadd(other:TimeSpan):TimeSpan;\r\n\tadd(other:any):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit to add a numerical value amount.  \" +\r\n\t\t\t\t\".add only supports ClockTime, TimeSpan, and TimeUnitValue.\"\r\n\t\t\t);\r\n\r\n\t\tif(other instanceof TimeUnitValue || other instanceof ClockTime)\r\n\t\t\tother = other.toTimeSpan();\r\n\r\n\t\treturn new TimeSpan(this._milliseconds + other.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this._milliseconds + TimeSpan.convertToMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\tstatic fromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(\r\n\t\t\tTimeSpan.millisecondsFromTime(\r\n\t\t\t\thours, minutes, seconds, milliseconds\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic millisecondsFromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):number\r\n\t{\r\n\t\tvar value = hours;\r\n\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\tvalue += minutes;\r\n\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\tvalue += seconds;\r\n\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\tvalue += milliseconds;\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic between(first:Date, last:Date):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(last.getTime() - first.getTime());\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nfunction assertComparisonType(other:any):void\r\n{\r\n\tif(!(other instanceof TimeUnitValue || other instanceof TimeSpan))\r\n\t\tthrow new Error(\"Invalid comparison type.  Must be of type TimeUnitValue or TimeSpan.\");\r\n}\r\n\r\n\r\nfunction getMilliseconds(other:any):number\r\n{\r\n\tif(other instanceof TimeUnitValue)\r\n\t{\r\n\t\tvar o:TimeUnitValue = other;\r\n\t\treturn o.type===TimeUnit.Milliseconds\r\n\t\t\t? o.value\r\n\t\t\t: o.toTimeSpan().milliseconds;\r\n\t}\r\n\telse if(other instanceof TimeSpan)\r\n\t{\r\n\t\treturn other._milliseconds;\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n\r\nvar timeSpanZero:TimeSpan;\r\n"]}