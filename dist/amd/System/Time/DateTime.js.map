{"version":3,"sources":["System/Time/DateTime.js","System/Time/DateTime.ts"],"names":["define","require","exports","ClockTime_1","TimeSpan_1","TimeStamp_1","DateTime","value","kind","Date","_","this","_kind","_value","toJsDate","_setJsDate","prototype","getTime","_time","Object","defineProperty","get","enumerable","configurable","getFullYear","getMonth","getDate","getDay","addMilliseconds","ms","addSeconds","seconds","addMinutes","minutes","addHours","hours","addDays","days","addMonths","months","d","setMonth","addYears","years","setFullYear","add","time","getTotalMilliseconds","subtract","timePassedSince","previous","between","year","month","day","t","getHours","getMinutes","getSeconds","getMilliseconds","toTimeStamp","from","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","now","date","today","first","last","f","l","isLeapYear","daysInMonth","freeze"],"mappings":"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","file":"System/Time/DateTime.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", './ClockTime', './TimeSpan', './TimeStamp'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var ClockTime_1 = require('./ClockTime');\r\n    var TimeSpan_1 = require('./TimeSpan');\r\n    var TimeStamp_1 = require('./TimeStamp');\r\n    var DateTime = (function () {\r\n        function DateTime(value, kind) {\r\n            if (value === void 0) { value = new Date(); }\r\n            if (kind === void 0) { kind = 1; }\r\n            var _ = this;\r\n            _._kind = kind;\r\n            if (value instanceof DateTime)\r\n                _._value = value.toJsDate();\r\n            else if (value instanceof Date)\r\n                _._setJsDate(value);\r\n            else\r\n                _._value = value === void (0)\r\n                    ? new Date()\r\n                    : new Date(value);\r\n        }\r\n        DateTime.prototype.toJsDate = function () {\r\n            return new Date(this._value.getTime());\r\n        };\r\n        DateTime.prototype._setJsDate = function (value) {\r\n            this._time = null;\r\n            this._value = new Date(value.getTime());\r\n        };\r\n        Object.defineProperty(DateTime.prototype, \"kind\", {\r\n            get: function () {\r\n                return this._kind;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime.prototype, \"year\", {\r\n            get: function () {\r\n                return this._value.getFullYear();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime.prototype, \"month\", {\r\n            get: function () {\r\n                return this._value.getMonth();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime.prototype, \"day\", {\r\n            get: function () {\r\n                return this._value.getDate();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime.prototype, \"dayOfWeek\", {\r\n            get: function () {\r\n                return this._value.getDay();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DateTime.prototype.addMilliseconds = function (ms) {\r\n            ms = ms || 0;\r\n            return new DateTime(this._value.getTime() + ms, this._kind);\r\n        };\r\n        DateTime.prototype.addSeconds = function (seconds) {\r\n            seconds = seconds || 0;\r\n            return this.addMilliseconds(seconds * 1000);\r\n        };\r\n        DateTime.prototype.addMinutes = function (minutes) {\r\n            minutes = minutes || 0;\r\n            return this.addMilliseconds(minutes * 60000);\r\n        };\r\n        DateTime.prototype.addHours = function (hours) {\r\n            hours = hours || 0;\r\n            return this.addMilliseconds(hours * 3600000);\r\n        };\r\n        DateTime.prototype.addDays = function (days) {\r\n            days = days || 0;\r\n            return this.addMilliseconds(days * 86400000);\r\n        };\r\n        DateTime.prototype.addMonths = function (months) {\r\n            months = months || 0;\r\n            var d = this.toJsDate();\r\n            d.setMonth(d.getMonth() + months);\r\n            return new DateTime(d, this._kind);\r\n        };\r\n        DateTime.prototype.addYears = function (years) {\r\n            years = years || 0;\r\n            var d = this.toJsDate();\r\n            d.setFullYear(d.getFullYear() + years);\r\n            return new DateTime(d, this._kind);\r\n        };\r\n        DateTime.prototype.add = function (time) {\r\n            return this.addMilliseconds(time.getTotalMilliseconds());\r\n        };\r\n        DateTime.prototype.subtract = function (time) {\r\n            return this.addMilliseconds(-time.getTotalMilliseconds());\r\n        };\r\n        DateTime.prototype.timePassedSince = function (previous) {\r\n            return DateTime.between(previous, this);\r\n        };\r\n        Object.defineProperty(DateTime.prototype, \"date\", {\r\n            get: function () {\r\n                var _ = this;\r\n                return new DateTime(new Date(_.year, _.month, _.day), _._kind);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime.prototype, \"timeOfDay\", {\r\n            get: function () {\r\n                var _ = this, t = _._time;\r\n                if (!t) {\r\n                    var d = this._value;\r\n                    _._time = t = new ClockTime_1.default(d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\r\n                }\r\n                return t;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DateTime.prototype.toTimeStamp = function () {\r\n            return TimeStamp_1.default.from(this);\r\n        };\r\n        Object.defineProperty(DateTime, \"now\", {\r\n            get: function () {\r\n                return new DateTime();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime.prototype, \"toUniversalTime\", {\r\n            get: function () {\r\n                var _ = this;\r\n                if (_._kind != 1)\r\n                    return new DateTime(_, _._kind);\r\n                var d = _._value;\r\n                return new DateTime(new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()), 2);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime, \"today\", {\r\n            get: function () {\r\n                return DateTime.now.date;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DateTime, \"tomorrow\", {\r\n            get: function () {\r\n                var today = DateTime.today;\r\n                return today.addDays(1);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DateTime.between = function (first, last) {\r\n            var f = first instanceof DateTime ? first._value : first, l = last instanceof DateTime ? last._value : last;\r\n            return new TimeSpan_1.default(f.getTime() - l.getTime());\r\n        };\r\n        DateTime.isLeapYear = function (year) {\r\n            return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n        };\r\n        DateTime.daysInMonth = function (year, month) {\r\n            return (new Date(year, month + 1, 0)).getDate();\r\n        };\r\n        return DateTime;\r\n    }());\r\n    Object.freeze(DateTime);\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = DateTime;\r\n});\r\n//# sourceMappingURL=DateTime.js.map","///<reference path='ITimeQuantity.d.ts'/>\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport ClockTime from './ClockTime';\r\nimport TimeSpan from './TimeSpan';\r\nimport TimeStamp from './TimeStamp';\r\n\r\n\r\nclass DateTime implements ICalendarDate, IDateTime\r\n{\r\n\tprivate _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate _setJsDate(value:Date)\r\n\t{\r\n\t\tthis._time = null;\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t\t_._value = value.toJsDate();\r\n\t\telse if(value instanceof Date)\r\n\t\t\t_._setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value===void(0)\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*HowMany.Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*HowMany.Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*HowMany.Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*HowMany.Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth()+months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear()+years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp {\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tget toUniversalTime():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tvar d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tvar f:Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t    l:Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(f.getTime() - l.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean {\r\n\t\treturn ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number {\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year,month+1,0)).getDate();\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nmodule DateTime\r\n{\r\n\texport const enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}