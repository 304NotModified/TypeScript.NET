{"version":3,"sources":["System/Time/TimeUnitValue.js","System/Time/TimeUnitValue.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","TimeUnit_1","TimeQuantity_1","getUnitQuantityFrom","q","units","fromMilliseconds","getTotalMilliseconds","TimeUnitValue","_super","value","_units","call","assertValid","defineProperty","get","_quantity","set","v","_total","enumerable","configurable","toMilliseconds","to","from","Milliseconds"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,aAAc,kBAAmB,SAAUC,EAASC,EAASC,EAAYC,GCAvG,YAuDA,SAAAC,GAA6BC,EAAiBC,GAE7C,MAAOJ,GAAAA,WAASK,iBAAiBF,EAAEG,uBAAwBF,GAhD5D,GAAAG,GAAA,SAAAC,GAIC,QAAAD,GAAYE,EAAoCC,GAE/CF,EAAAG,KAAAxB,KAAqB,gBAAT,GACDsB,EACRP,EAAmCO,EAAOC,IAJEvB,KAAAuB,OAAAA,EAK/CV,EAAAA,WAASY,YAAYF,GAmCvB,MA3C4BxB,WAAAqB,EAAAC,GAW3Bb,OAAAkB,eAAIN,EAAAb,UAAA,SDTOoB,ICSX,WAEC,MAAO3B,MAAK4B,WDRFC,ICWX,SAAUC,GAET9B,KAAK+B,OAAS,KACd/B,KAAK4B,UAAYE,GDVPE,YAAY,EACZC,cAAc,ICYzBb,EAAAb,UAAAY,qBAAA,WAEC,MAAON,GAAAA,WAASqB,eAAelC,KAAK4B,UAAW5B,KAAKuB,SAIrDf,OAAAkB,eAAIN,EAAAb,UAAA,SDZOoB,ICYX,WAEC,MAAO3B,MAAKuB,QDXFS,YAAY,EACZC,cAAc,ICazBb,EAAAb,UAAA4B,GAAA,SAAGlB,GAEF,MAFE,UAAAA,IAAAA,EAAiBjB,KAAKiB,OAEjBG,EAAcgB,KAAKpC,KAAKiB,IAGzBG,EAAAgB,KAAP,SAAYd,EAA4BL,GAEvC,MAFuC,UAAAA,IAAAA,EAAiBJ,EAAAA,WAASwB,cAE1D,GAAIjB,GAAcE,EAAOL,IAGlCG,GA3C4BN,EAAAA,WAD5BN,QAAAkB,eAAAd,EAAA,cAAAU,OAAA,IDkCIV,EAAAA,WAAkBQ","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", './TimeUnit', './TimeQuantity'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var TimeUnit_1 = require('./TimeUnit');\r\n    var TimeQuantity_1 = require('./TimeQuantity');\r\n    var TimeUnitValue = (function (_super) {\r\n        __extends(TimeUnitValue, _super);\r\n        function TimeUnitValue(value, _units) {\r\n            _super.call(this, typeof (value) == 'number'\r\n                ? value\r\n                : getUnitQuantityFrom(value, _units));\r\n            this._units = _units;\r\n            TimeUnit_1.default.assertValid(_units);\r\n        }\r\n        Object.defineProperty(TimeUnitValue.prototype, \"value\", {\r\n            get: function () {\r\n                return this._quantity;\r\n            },\r\n            set: function (v) {\r\n                this._total = null;\r\n                this._quantity = v;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        TimeUnitValue.prototype.getTotalMilliseconds = function () {\r\n            return TimeUnit_1.default.toMilliseconds(this._quantity, this._units);\r\n        };\r\n        Object.defineProperty(TimeUnitValue.prototype, \"units\", {\r\n            get: function () {\r\n                return this._units;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        TimeUnitValue.prototype.to = function (units) {\r\n            if (units === void 0) { units = this.units; }\r\n            return TimeUnitValue.from(this, units);\r\n        };\r\n        TimeUnitValue.from = function (value, units) {\r\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\r\n            return new TimeUnitValue(value, units);\r\n        };\r\n        return TimeUnitValue;\r\n    }(TimeQuantity_1.default));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = TimeUnitValue;\r\n    function getUnitQuantityFrom(q, units) {\r\n        return TimeUnit_1.default.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n    }\r\n});\r\n//# sourceMappingURL=TimeUnitValue.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual, compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}