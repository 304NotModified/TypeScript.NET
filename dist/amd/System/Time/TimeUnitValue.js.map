{"version":3,"sources":["System/Time/TimeUnitValue.js","System/Time/TimeUnitValue.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","TimeUnit_1","TimeQuantity_1","getUnitQuantityFrom","q","units","TimeUnitValue","_super","TimeUnitValue.constructor","get","TimeUnitValue.value","set","enumerable","configurable","TimeUnitValue.getTotalMilliseconds","TimeUnitValue.units","TimeUnitValue.to","TimeUnitValue.from","defineProperty","value"],"mappings":"AAAA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,aAAc,kBAAmB,SAAUC,EAASC,EAASC,EAAYC,GCDvG,YA2DA,SAAAC,GAA6BC,EAAiBC,GAE7CF,MAAOA,GAAAA,WAASA,iBAAiBA,EAAEA,uBAAwBA,GAhD5D,GAAAG,GAAA,SAAAC,GAICD,QAAAA,GAAYA,EAAoCA,GAE/CE,EAAAA,KAAAA,KAAqBA,gBAATA,GACDA,EACRA,EAAmCA,EAAOA,IAJEA,KAAAA,OAAAA,EAK/CA,EAAAA,WAASA,YAAYA,GAmCvBF,MA3C4BA,WAAAA,EAAAA,GAW3BA,OAAAA,eAAIA,EAAAA,UAAAA,SDZOG,ICYXH,WAECI,MAAOA,MAAKA,WDXFC,ICcXL,SAAUA,GAETI,KAAKA,OAASA,KACdA,KAAKA,UAAYA,GDbPE,YAAY,EACZC,cAAc,ICezBP,EAAAA,UAAAA,qBAAAA,WAECQ,MAAOA,GAAAA,WAASA,eAAeA,KAAKA,UAAWA,KAAKA,SAIrDR,OAAAA,eAAIA,EAAAA,UAAAA,SDfOG,ICeXH,WAECS,MAAOA,MAAKA,QDdFH,YAAY,EACZC,cAAc,ICgBzBP,EAAAA,UAAAA,GAAAA,SAAGA,GAEFU,MAFEA,UAAAA,IAAAA,EAAiBA,KAAKA,OAEjBA,EAAcA,KAAKA,KAAKA,IAGzBV,EAAAA,KAAPA,SAAYA,EAA4BA,GAEvCW,MAFuCA,UAAAA,IAAAA,EAAiBA,EAAAA,WAASA,cAE1DA,GAAIA,GAAcA,EAAOA,IAGlCX,GA3C4BJ,EAAAA,WAD5BN,QAAAsB,eAAAlB,EAAA,cAAAmB,OAAA,ID+BInB,EAAAA,WAAkBM","file":"System/Time/TimeUnitValue.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", './TimeUnit', './TimeQuantity'], function (require, exports, TimeUnit_1, TimeQuantity_1) {\n    'use strict';\n    var TimeUnitValue = (function (_super) {\n        __extends(TimeUnitValue, _super);\n        function TimeUnitValue(value, _units) {\n            _super.call(this, typeof (value) == 'number'\n                ? value\n                : getUnitQuantityFrom(value, _units));\n            this._units = _units;\n            TimeUnit_1.default.assertValid(_units);\n        }\n        Object.defineProperty(TimeUnitValue.prototype, \"value\", {\n            get: function () {\n                return this._quantity;\n            },\n            set: function (v) {\n                this._total = null;\n                this._quantity = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeUnitValue.prototype.getTotalMilliseconds = function () {\n            return TimeUnit_1.default.toMilliseconds(this._quantity, this._units);\n        };\n        Object.defineProperty(TimeUnitValue.prototype, \"units\", {\n            get: function () {\n                return this._units;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeUnitValue.prototype.to = function (units) {\n            if (units === void 0) { units = this.units; }\n            return TimeUnitValue.from(this, units);\n        };\n        TimeUnitValue.from = function (value, units) {\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\n            return new TimeUnitValue(value, units);\n        };\n        return TimeUnitValue;\n    })(TimeQuantity_1.default);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeUnitValue;\n    function getUnitQuantityFrom(q, units) {\n        return TimeUnit_1.default.fromMilliseconds(q.getTotalMilliseconds(), units);\n    }\n});\n","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\nimport {areEqual, compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}