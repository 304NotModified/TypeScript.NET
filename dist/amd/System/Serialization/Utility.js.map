{"version":3,"sources":["System/Serialization/Utility.js","System/Serialization/Utility.ts"],"names":["define","require","exports","Types_1","InvalidOperationException_1","toString","value","defaultForUnknown","v","UNDEFINED","STRING","BOOLEAN","TRUE","FALSE","NUMBER","EMPTY","isSerializable","serialize","arguments","length","ex","data","instance","hasMemberOfType","FUNCTION","toPrimitive","caseInsensitive","unknownHandler","toLowerCase","undefined","cleaned","replace","test","int","parseInt","isNaN","number","parseFloat"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,WAAY,2CAA4C,SAAUC,EAASC,EAASC,EAASC,GACvH,YCSJ,SAAAC,GACCC,EACAC,GAGA,GAAIC,GAASF,CACb,cAAcE,IAEb,IAAKL,GAAAA,WAAKM,UACV,IAAKN,GAAAA,WAAKO,OACT,MAAOF,EACR,KAAKL,GAAAA,WAAKQ,QACT,MAAOH,GAAII,EAAOC,CACnB,KAAKV,GAAAA,WAAKW,OACT,MAAOC,GAAQP,CAChB,SAEC,GAAO,OAAJA,EACF,MAAOA,EAER,IAAGQ,EAAeR,GACjB,MAAOA,GAAES,WACL,IAAGC,UAAUC,OAAO,EACxB,MAAOZ,EAER,IAAIa,GAAK,GAAIhB,GAAAA,WAA0B,+CAEvC,MADAgB,GAAGC,KAAY,MAAIb,EACbY,GAMT,QAAAJ,GAA+BM,GAC9B,MAAOnB,GAAAA,WAAKoB,gBAA+BD,EAAS,YAAYnB,EAAAA,WAAKqB,UAGtE,QAAAC,GACCnB,EACAoB,EACAC,GAIA,GAAGrB,EAIF,OAFGoB,IAAiBpB,EAAQA,EAAMsB,eAE3BtB,GAEN,IAAK,OACJ,MAAO,KACR,KAAKH,GAAAA,WAAKM,UACT,MAAOoB,OACR,KAAKjB,GACJ,OAAO,CACR,KAAKC,GACJ,OAAO,CACR,SAEC,GAAIiB,GAAUxB,EAAMyB,QAAQ,eAAehB,EAC3C,IAAGe,EAEF,GAAG,SAASE,KAAKF,GAAU,CAC1B,GAAIG,GAAMC,SAASJ,EACnB,KAAIK,MAAMF,GAAM,MAAOA,OACjB,CACN,GAAIG,GAASC,WAAW/B,EACxB,KAAI6B,MAAMC,GAAS,MAAOA,GAQzBT,IAAgBrB,EAAQqB,EAAerB,IAO7C,MAAOA,GArFR,GAAMS,GAAQ,GAAIH,EAAO,OAAQC,EAAQ,OAEzBX,GAAAG,SAAQA,EAiCRH,EAAAc,eAAcA,EAIdd,EAAAuB,YAAWA","file":"System/Serialization/Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../Types', '../Exceptions/InvalidOperationException'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    \"use strict\";\r\n    var Types_1 = require('../Types');\r\n    var InvalidOperationException_1 = require('../Exceptions/InvalidOperationException');\r\n    var EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n    function toString(value, defaultForUnknown) {\r\n        var v = value;\r\n        switch (typeof v) {\r\n            case Types_1.default.UNDEFINED:\r\n            case Types_1.default.STRING:\r\n                return v;\r\n            case Types_1.default.BOOLEAN:\r\n                return v ? TRUE : FALSE;\r\n            case Types_1.default.NUMBER:\r\n                return EMPTY + v;\r\n            default:\r\n                if (v === null)\r\n                    return v;\r\n                if (isSerializable(v))\r\n                    return v.serialize();\r\n                else if (arguments.length > 1)\r\n                    return defaultForUnknown;\r\n                var ex = new InvalidOperationException_1.default('Attempting to serialize unidentifiable type.');\r\n                ex.data['value'] = v;\r\n                throw ex;\r\n        }\r\n    }\r\n    exports.toString = toString;\r\n    function isSerializable(instance) {\r\n        return Types_1.default.hasMemberOfType(instance, 'serialize', Types_1.default.FUNCTION);\r\n    }\r\n    exports.isSerializable = isSerializable;\r\n    function toPrimitive(value, caseInsensitive, unknownHandler) {\r\n        if (value) {\r\n            if (caseInsensitive)\r\n                value = value.toLowerCase();\r\n            switch (value) {\r\n                case 'null':\r\n                    return null;\r\n                case Types_1.default.UNDEFINED:\r\n                    return undefined;\r\n                case TRUE:\r\n                    return true;\r\n                case FALSE:\r\n                    return false;\r\n                default:\r\n                    var cleaned = value.replace(/^\\s+|,|\\s+$/g, EMPTY);\r\n                    if (cleaned) {\r\n                        if (/^\\d+$/g.test(cleaned)) {\r\n                            var int = parseInt(cleaned);\r\n                            if (!isNaN(int))\r\n                                return int;\r\n                        }\r\n                        else {\r\n                            var number = parseFloat(value);\r\n                            if (!isNaN(number))\r\n                                return number;\r\n                        }\r\n                    }\r\n                    if (unknownHandler)\r\n                        value = unknownHandler(value);\r\n                    break;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    exports.toPrimitive = toPrimitive;\r\n});\r\n//# sourceMappingURL=Utility.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ISerializable.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n\r\nimport Type from '../Types';\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tvar v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.UNDEFINED:\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v===null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(arguments.length>1)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tvar ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable {\r\n\treturn Type.hasMemberOfType<ISerializable>(instance,'serialize',Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn undefined;\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tvar cleaned = value.replace(/^\\s+|,|\\s+$/g,EMPTY);\r\n\t\t\t\tif(cleaned) {\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned)) {\r\n\t\t\t\t\t\tvar int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}