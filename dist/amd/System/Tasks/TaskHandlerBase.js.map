{"version":3,"sources":["System/Tasks/TaskHandlerBase.js","System/Tasks/TaskHandlerBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","DisposableBase_1","TaskHandlerBase","_super","call","_id","defineProperty","get","enumerable","configurable","execute","defer","cancel","isNaN","_onExecute","isFinite","setTimeout","_handler","_onDispose","id","clearTimeout","value"],"mappings":"AAAA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,gCAAiC,SAAUC,EAASC,EAASC,GACvF,YCDJ,IAAAC,GAAA,SAAAC,GAGC,QAAAD,KAECC,EAAAC,KAAAhB,MACAA,KAAKiB,IAAM,KAsDb,MA3DQlB,WAAAe,EAAAC,GAUPP,OAAAU,eAAIJ,EAAAP,UAAA,eDFOY,ICEX,WACC,QAASnB,KAAKiB,KDAJG,YAAY,EACZC,cAAc,ICOzBP,EAAAP,UAAAe,QAAA,SAAQC,GAEPvB,KAAKwB,SACFC,MAAMF,IAAgB,EAANA,EAElBvB,KAAK0B,aAEEC,SAASJ,KAEhBvB,KAAKiB,IAAMW,WAAWd,EAAgBe,SAAUN,EAAOvB,QAK1Cc,EAAAe,SAAf,SAAwB5B,GAEvBA,EAAEuB,SACFvB,EAAEyB,cAKOZ,EAAAP,UAAAuB,WAAV,WAEC9B,KAAKwB,UAGNV,EAAAP,UAAAiB,OAAA,WAEC,GAAIO,GAAK/B,KAAKiB,GACd,OAAGc,IAEFC,aAAaD,GACb/B,KAAKiB,IAAM,MACJ,IAED,GAITH,GA3DQD,EAAAA,WA6DRL,QAAAU,eAAAN,EAAA,cAAAqB,OAAA,IDnBIrB,EAAAA,WCmBWE","file":"System/Tasks/TaskHandlerBase.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Disposable/DisposableBase\"], function (require, exports, DisposableBase_1) {\n    \"use strict\";\n    var TaskHandlerBase = (function (_super) {\n        __extends(TaskHandlerBase, _super);\n        function TaskHandlerBase() {\n            _super.call(this);\n            this._id = null;\n        }\n        Object.defineProperty(TaskHandlerBase.prototype, \"isScheduled\", {\n            get: function () {\n                return !!this._id;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TaskHandlerBase.prototype.execute = function (defer) {\n            this.cancel();\n            if (isNaN(defer) || defer < 0) {\n                this._onExecute();\n            }\n            else if (isFinite(defer)) {\n                this._id = setTimeout(TaskHandlerBase._handler, defer, this);\n            }\n        };\n        TaskHandlerBase._handler = function (d) {\n            d.cancel();\n            d._onExecute();\n        };\n        TaskHandlerBase.prototype._onDispose = function () {\n            this.cancel();\n        };\n        TaskHandlerBase.prototype.cancel = function () {\n            var id = this._id;\n            if (id) {\n                clearTimeout(id);\n                this._id = null;\n                return true;\n            }\n            return false;\n        };\n        return TaskHandlerBase;\n    }(DisposableBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TaskHandlerBase;\n});\n","import DisposableBase from \"../Disposable/DisposableBase\";\r\n\r\n/**\r\n * A simple class for handling potentially repeated executions either deferred or immediate.\r\n */\r\nabstract class TaskHandlerBase\r\nextends DisposableBase implements ICancellable\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._id = null;\r\n\t}\r\n\r\n\tprotected _id:number;\r\n\r\n\tget isScheduled():boolean {\r\n\t\treturn !!this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules/Reschedules triggering the task.\r\n\t * If defer is omitted it is called synchronously.\r\n\t * @param defer Optional time to wait until triggering.\r\n\t */\r\n\texecute(defer?:number):void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tif(isNaN(defer) || defer<0)\r\n\t\t{\r\n\t\t\tthis._onExecute();\r\n\t\t}\r\n\t\telse if(isFinite(defer))\r\n\t\t{\r\n\t\t\tthis._id = setTimeout(TaskHandlerBase._handler, defer, this);\r\n\t\t}\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static _handler(d:TaskHandlerBase):void\r\n\t{\r\n\t\td.cancel();\r\n\t\td._onExecute();\r\n\t}\r\n\r\n\tprotected abstract _onExecute():void;\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default TaskHandlerBase;"]}