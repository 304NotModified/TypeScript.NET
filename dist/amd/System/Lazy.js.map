{"version":3,"sources":["System/Lazy.js","System/Lazy.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","DisposableBase_1","Lazy","_super","Lazy.constructor","get","Lazy.isValueCreated","enumerable","configurable","Lazy.canReset","Lazy.reset","Lazy.value","Lazy.getValue","Lazy._onDispose","Lazy.equals","Lazy.valueEquals","defineProperty","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,+BAAgC,SAAUC,EAASC,EAASC,GCA1F,GAAAC,GAAA,SAAAC,GAOCD,QAAAA,GAAoBA,GAEnBE,EAAAA,KAAAA,MAFmBA,KAAAA,SAAAA,EAGnBA,KAAKA,sBAAwBA,OA4E/BF,MArFsBA,WAAAA,EAAAA,GAYrBA,OAAAA,eAAIA,EAAAA,UAAAA,kBDJOG,ICIXH,WAECI,MAAOA,MAAKA,iBDHFC,YAAY,EACZC,cAAc,ICMzBN,OAAAA,eAAIA,EAAAA,UAAAA,YDHOG,ICGXH,WAECO,OAAQA,KAAKA,eAAkBA,KAAaA,UDFlCF,YAAY,EACZC,cAAc,ICKzBN,EAAAA,UAAAA,MAAAA,SAAMA,GACLQ,GAAIA,GAAIA,IAKRA,IAHGA,GACFA,EAAEA,kBAECA,EAAEA,SAQLA,MAFAA,GAAEA,iBAAkBA,EACpBA,EAAEA,OAASA,MACJA,CAPPA,IAAGA,EACFA,KAAMA,IAAIA,OAAMA,kEACjBA,QAAOA,GASTR,OAAAA,eAAIA,EAAAA,UAAAA,SDLOG,ICKXH,WAECS,MAAOA,MAAKA,YDJFJ,YAAY,EACZC,cAAc,ICMzBN,EAAAA,UAAAA,SAAAA,SAASA,GAERU,GAAIA,GAAIA,IAERA,GAAEA,iBAEFA,KACCA,IAAIA,EAAEA,iBAAmBA,EAAEA,SAAUA,CACpCA,GAAIA,GAAIA,EAAEA,UAGVA,OAFAA,GAAEA,OAASA,EACXA,EAAEA,iBAAkBA,EACbA,GDJC,QCQNA,IACFA,EAAEA,SAAWA,MAGfA,MAAOA,GAAEA,QAKAV,EAAAA,UAAAA,WAAVA,WACCW,KAAKA,SAAWA,KAChBA,KAAKA,OAASA,MAGfX,EAAAA,UAAAA,OAAAA,SAAOA,GAENY,MAAOA,OAAMA,GAGdZ,EAAAA,UAAAA,YAAAA,SAAYA,GAEXa,MAAOA,MAAKA,OAAOA,IAAUA,KAAKA,QAAQA,EAAMA,OAElDb,GArFsBD,EAAAA,WADtBL,QAAAoB,eAAAhB,EAAA,cAAAiB,OAAA,ID0EIjB,EAAAA,WAAkBE","file":"System/Lazy.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine([\"require\", \"exports\", './Disposable/DisposableBase'], function (require, exports, DisposableBase_1) {\r\n    var Lazy = (function (_super) {\r\n        __extends(Lazy, _super);\r\n        function Lazy(_closure) {\r\n            _super.call(this);\r\n            this._closure = _closure;\r\n            this._disposableObjectName = 'Lazy';\r\n        }\r\n        Object.defineProperty(Lazy.prototype, \"isValueCreated\", {\r\n            get: function () {\r\n                return this._isValueCreated;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Lazy.prototype, \"canReset\", {\r\n            get: function () {\r\n                return !this.wasDisposed && !!(this._closure);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Lazy.prototype.reset = function (throwIfCannotReset) {\r\n            var _ = this;\r\n            if (throwIfCannotReset)\r\n                _.throwIfDisposed();\r\n            if (!_._closure) {\r\n                if (throwIfCannotReset)\r\n                    throw new Error(\"Cannot reset.  This Lazy has already de-referenced its closure.\");\r\n                return false;\r\n            }\r\n            else {\r\n                _._isValueCreated = false;\r\n                _._value = null;\r\n                return true;\r\n            }\r\n        };\r\n        Object.defineProperty(Lazy.prototype, \"value\", {\r\n            get: function () {\r\n                return this.getValue();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Lazy.prototype.getValue = function (clearClosureReference) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            try {\r\n                if (!_._isValueCreated && _._closure) {\r\n                    var v = _._closure();\r\n                    _._value = v;\r\n                    _._isValueCreated = true;\r\n                    return v;\r\n                }\r\n            }\r\n            finally {\r\n                if (clearClosureReference)\r\n                    _._closure = null;\r\n            }\r\n            return _._value;\r\n        };\r\n        Lazy.prototype._onDispose = function () {\r\n            this._closure = null;\r\n            this._value = null;\r\n        };\r\n        Lazy.prototype.equals = function (other) {\r\n            return this == other;\r\n        };\r\n        Lazy.prototype.valueEquals = function (other) {\r\n            return this.equals(other) || this.value === other.value;\r\n        };\r\n        return Lazy;\r\n    })(DisposableBase_1.default);\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Lazy;\r\n});\r\n//# sourceMappingURL=Lazy.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ILazy.d.ts\"/>\r\n///<reference path=\"FunctionTypes.d.ts\"/>\r\nimport DisposableBase from './Disposable/DisposableBase';\r\n\r\nexport default\r\nclass Lazy<T> extends DisposableBase implements ILazy<T>\r\n{\r\n\r\n\tprivate _isValueCreated:boolean;\r\n\tprivate _value:T;\r\n\r\n\tconstructor(private _closure:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn this._isValueCreated;\r\n\t}\r\n\r\n\t// Adding a 'resettable' mechanism allows for simply resetting a lazy instead of re-instantiating a new one.\r\n\tget canReset():boolean\r\n\t{\r\n\t\treturn !this.wasDisposed && !!(this._closure);\r\n\t}\r\n\r\n\t// Returns true if successfully reset.\r\n\treset(throwIfCannotReset?:boolean):boolean {\r\n\t\tvar _ = this;\r\n\r\n\t\tif(throwIfCannotReset)\r\n\t\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!_._closure) {\r\n\t\t\tif(throwIfCannotReset)\r\n\t\t\t\tthrow new Error(\"Cannot reset.  This Lazy has already de-referenced its closure.\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_._isValueCreated = false;\r\n\t\t\t_._value = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tgetValue(clearClosureReference?:boolean):T {\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\ttry {\r\n\t\t\tif(!_._isValueCreated && _._closure) {\r\n\t\t\t\tvar v = _._closure();\r\n\t\t\t\t_._value = v;\r\n\t\t\t\t_._isValueCreated = true;\r\n\t\t\t\treturn v;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tif(clearClosureReference)\r\n\t\t\t\t_._closure = null;\r\n\t\t}\r\n\r\n\t\treturn _._value;\r\n\r\n\t}\r\n\r\n\r\n\tprotected _onDispose():void {\r\n\t\tthis._closure = null;\r\n\t\tthis._value = null;\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n}\r\n\r\n"]}