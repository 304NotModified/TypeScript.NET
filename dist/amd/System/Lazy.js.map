{"version":3,"sources":["System/Lazy.js","System/Lazy.ts"],"names":["define","require","exports","ResolverBase_1","extends_1","__extends","Lazy","_super","valueFactory","trapExceptions","allowReset","_this","call","this","_disposableObjectName","_isValueCreated","Object","defineProperty","prototype","get","enumerable","configurable","getValue","equals","other","valueEquals","value","ResolverBase","ResettableLazy"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,iBAAkB,cAAe,SAAUC,EAASC,EAASC,EAAgBC,GACvG,YCKJ,IAAMC,GAAYD,EAAAA,WAIlBE,EAAA,SAAAC,GAGC,QAAAD,GAAYE,EAAsBC,EAAgCC,GAAhC,SAAAD,IAAAA,GAAA,GAAgC,SAAAC,IAAAA,GAAA,EAAlE,IAAAC,GAECJ,EAAAK,KAAAC,KAAML,EAAcC,EAAgBC,IAAWG,IDFrC,OCGVF,GAAKG,sBAAwB,OAC7BH,EAAKI,iBAAkB,EDJNJ,EC2BnB,MA9B6BN,GAAAC,EAAAC,GAU5BS,OAAAC,eAAIX,EAAAY,UAAA,kBDJOC,ICIX,WAEC,QAASN,KAAKE,iBDHJK,YAAY,EACZC,cAAc,ICKzBL,OAAAC,eAAIX,EAAAY,UAAA,SDFOC,ICEX,WAEC,MAAON,MAAKS,YDDFF,YAAY,EACZC,cAAc,ICGzBf,EAAAY,UAAAK,OAAA,SAAOC,GAEN,MAAOX,OAAMW,GAGdlB,EAAAY,UAAAO,YAAA,SAAYD,GAEX,MAAOX,MAAKU,OAAOC,IAAUX,KAAKa,QAAQF,EAAME,OAGlDpB,GA9B6BH,EAAAwB,aAA7BzB,GAAAI,KAAAA,CAgCA,IAAAsB,GAAA,SAAArB,GAEC,QAAAqB,GAAYpB,EAAsBC,GAAA,SAAAA,IAAAA,GAAA,EAAlC,IAAAE,GAECJ,EAAAK,KAAAC,KAAML,EAAcC,GAAgB,IAAKI,IDF/B,OCGVF,GAAKG,sBAAwB,iBDHZH,ECKnB,MAPuCN,GAAAuB,EAAArB,GAOvCqB,GAPuCtB,EAAvCJ,GAAA0B,eAAAA,EDOIZ,OAAOC,eAAef,EAAS,cAAgBwB,OAAO,ICE1DxB,EAAAA,WAAeI","file":"Lazy.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"./ResolverBase\", \"../extends\"], function (require, exports, ResolverBase_1, extends_1) {\n    \"use strict\";\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    // We need a non-resettable lazy to ensure it can be passed safely around.\n    var Lazy = (function (_super) {\n        __extends(Lazy, _super);\n        function Lazy(valueFactory, trapExceptions, allowReset) {\n            if (trapExceptions === void 0) { trapExceptions = false; }\n            if (allowReset === void 0) { allowReset = false; }\n            var _this = _super.call(this, valueFactory, trapExceptions, allowReset) || this;\n            _this._disposableObjectName = 'Lazy';\n            _this._isValueCreated = false;\n            return _this;\n        }\n        Object.defineProperty(Lazy.prototype, \"isValueCreated\", {\n            get: function () {\n                return !!this._isValueCreated;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Lazy.prototype, \"value\", {\n            get: function () {\n                return this.getValue();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lazy.prototype.equals = function (other) {\n            return this == other;\n        };\n        Lazy.prototype.valueEquals = function (other) {\n            return this.equals(other) || this.value === other.value;\n        };\n        return Lazy;\n    }(ResolverBase_1.ResolverBase));\n    exports.Lazy = Lazy;\n    var ResettableLazy = (function (_super) {\n        __extends(ResettableLazy, _super);\n        function ResettableLazy(valueFactory, trapExceptions) {\n            if (trapExceptions === void 0) { trapExceptions = false; }\n            var _this = _super.call(this, valueFactory, trapExceptions, true) || this;\n            _this._disposableObjectName = 'ResettableLazy';\n            return _this;\n        }\n        return ResettableLazy;\n    }(Lazy));\n    exports.ResettableLazy = ResettableLazy;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Lazy;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ILazy} from \"./ILazy\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ResolverBase} from \"./ResolverBase\";\r\nimport __extendsImport from \"../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// We need a non-resettable lazy to ensure it can be passed safely around.\r\nexport class Lazy<T> extends ResolverBase<T> implements ILazy<T>\r\n{\r\n\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, allowReset);\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t\tthis._isValueCreated = false;\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn !!this._isValueCreated;\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n\r\n}\r\n\r\nexport class ResettableLazy<T> extends Lazy<T>\r\n{\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, true);\r\n\t\tthis._disposableObjectName = 'ResettableLazy';\r\n\t}\r\n}\r\n\r\nexport default Lazy;"]}