{"version":3,"sources":["System/Diagnostics/Stopwatch.js","System/Diagnostics/Stopwatch.ts"],"names":["define","require","exports","TimeSpan_1","getTimestampMilliseconds","Date","getTime","Stopwatch","this","reset","Object","defineProperty","prototype","get","_isRunning","enumerable","configurable","startNew","s","start","measure","closure","record","e","_elapsed","milliseconds","_","_startTimeStamp","stop","currentLapMilliseconds","NaN","lap","t","zero","timeElapsed","elapsedMilliseconds","value"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,oBAAqB,SAAUC,EAASC,EAASC,GCI/E,YAIA,SAAAC,KAEC,OAAO,GAAKC,OAAQC,UAGrB,GAAAC,GAAA,WAkBC,QAAAA,KAECC,KAAKC,QAkGP,MAlHQF,GAAAH,yBAAP,WAEC,MAAOA,MAORM,OAAAC,eAAIJ,EAAAK,UAAA,aDbOC,ICaX,WAEC,MAAOL,MAAKM,YDZFC,YAAY,EACZC,cAAc,ICmBlBT,EAAAU,SAAP,WAEC,GAAIC,GAAI,GAAIX,EAEZ,OADAW,GAAEC,QACKD,GAGDX,EAAAa,QAAP,SAAeC,GAEd,GAAIF,GAAQf,GAEZ,OADAiB,KACO,GAAIlB,GAAAA,WAASC,IAA6Be,IAGlDZ,EAAAK,UAAAU,OAAA,SAAOD,GAGN,GAAIE,GAAIhB,EAAUa,QAAQC,EAE1B,OADAb,MAAKgB,UAAYD,EAAEE,aACZF,GAGRhB,EAAAK,UAAAO,MAAA,WAEC,GAAIO,GAAIlB,IACJkB,GAAEZ,aACLY,EAAEC,gBAAkBvB,IACpBsB,EAAEZ,YAAa,IAIjBP,EAAAK,UAAAgB,KAAA,WAEC,GAAIF,GAAIlB,IACLkB,GAAEZ,aACJY,EAAEF,UAAYE,EAAEG,uBAChBH,EAAEZ,YAAa,IAIjBP,EAAAK,UAAAH,MAAA,WAEC,GAAIiB,GAAIlB,IACRkB,GAAEF,SAAW,EACbE,EAAEZ,YAAa,EACfY,EAAEC,gBAAkBG,KAKrBvB,EAAAK,UAAAmB,IAAA,WAEC,GAAIL,GAAIlB,IACR,IAAGkB,EAAEZ,WAAY,CAChB,GAAIkB,GAAI5B,IACJc,EAAIQ,EAAEC,gBACNJ,EAAIS,EAAId,CAGZ,OAFAQ,GAAEC,gBAAkBK,EACpBN,EAAEF,UAAYD,EACP,GAAIpB,GAAAA,WAASoB,GAGpB,MAAOpB,GAAAA,WAAS8B,MAGlBvB,OAAAC,eAAIJ,EAAAK,UAAA,0BDjCOC,ICiCX,WAEC,MAAOL,MAAKM,WACRV,IAA6BI,KAAKmB,gBACnC,GDhCOZ,YAAY,EACZC,cAAc,ICkCzBN,OAAAC,eAAIJ,EAAAK,UAAA,cD/BOC,IC+BX,WAEC,MAAOL,MAAKM,WACT,GAAIX,GAAAA,WAASK,KAAKqB,wBAClB1B,EAAAA,WAAS8B,MD9BFlB,YAAY,EACZC,cAAc,ICgCzBN,OAAAC,eAAIJ,EAAAK,UAAA,uBD7BOC,IC6BX,WAEC,GAAIa,GAAIlB,KACJ0B,EAAcR,EAAEF,QAKpB,OAHGE,GAAEZ,aACJoB,GAAeR,EAAEG,wBAEXK,GD9BGnB,YAAY,EACZC,cAAc,ICgCzBN,OAAAC,eAAIJ,EAAAK,UAAA,WD7BOC,IC6BX,WAEC,MAAO,IAAIV,GAAAA,WAASK,KAAK2B,sBD5BfpB,YAAY,EACZC,cAAc,IC8B1BT,IAtHAG,QAAAC,eAAAT,EAAA,cAAAkC,OAAA,ID6FIlC,EAAAA,WAAkBK","file":"System/Diagnostics/Stopwatch.js","sourcesContent":["define([\"require\", \"exports\", \"../Time/TimeSpan\"], function (require, exports, TimeSpan_1) {\n    'use strict';\n    function getTimestampMilliseconds() {\n        return (new Date()).getTime();\n    }\n    var Stopwatch = (function () {\n        function Stopwatch() {\n            this.reset();\n        }\n        Stopwatch.getTimestampMilliseconds = function () {\n            return getTimestampMilliseconds();\n        };\n        Object.defineProperty(Stopwatch.prototype, \"isRunning\", {\n            get: function () {\n                return this._isRunning;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Stopwatch.startNew = function () {\n            var s = new Stopwatch();\n            s.start();\n            return s;\n        };\n        Stopwatch.measure = function (closure) {\n            var start = getTimestampMilliseconds();\n            closure();\n            return new TimeSpan_1.default(getTimestampMilliseconds() - start);\n        };\n        Stopwatch.prototype.record = function (closure) {\n            var e = Stopwatch.measure(closure);\n            this._elapsed += e.milliseconds;\n            return e;\n        };\n        Stopwatch.prototype.start = function () {\n            var _ = this;\n            if (!_._isRunning) {\n                _._startTimeStamp = getTimestampMilliseconds();\n                _._isRunning = true;\n            }\n        };\n        Stopwatch.prototype.stop = function () {\n            var _ = this;\n            if (_._isRunning) {\n                _._elapsed += _.currentLapMilliseconds;\n                _._isRunning = false;\n            }\n        };\n        Stopwatch.prototype.reset = function () {\n            var _ = this;\n            _._elapsed = 0;\n            _._isRunning = false;\n            _._startTimeStamp = NaN;\n        };\n        Stopwatch.prototype.lap = function () {\n            var _ = this;\n            if (_._isRunning) {\n                var t = getTimestampMilliseconds();\n                var s = _._startTimeStamp;\n                var e = t - s;\n                _._startTimeStamp = t;\n                _._elapsed += e;\n                return new TimeSpan_1.default(e);\n            }\n            else\n                return TimeSpan_1.default.zero;\n        };\n        Object.defineProperty(Stopwatch.prototype, \"currentLapMilliseconds\", {\n            get: function () {\n                return this._isRunning\n                    ? (getTimestampMilliseconds() - this._startTimeStamp)\n                    : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"currentLap\", {\n            get: function () {\n                return this._isRunning\n                    ? new TimeSpan_1.default(this.currentLapMilliseconds)\n                    : TimeSpan_1.default.zero;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsedMilliseconds\", {\n            get: function () {\n                var _ = this;\n                var timeElapsed = _._elapsed;\n                if (_._isRunning)\n                    timeElapsed += _.currentLapMilliseconds;\n                return timeElapsed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsed\", {\n            get: function () {\n                return new TimeSpan_1.default(this.elapsedMilliseconds);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Stopwatch;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Stopwatch;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport TimeSpan from \"../Time/TimeSpan\";\r\n\r\nfunction getTimestampMilliseconds():number\r\n{\r\n\treturn (new Date()).getTime();\r\n}\r\n\r\nexport default\r\nclass Stopwatch\r\n{\r\n\r\n\tstatic getTimestampMilliseconds():number\r\n\t{\r\n\t\treturn getTimestampMilliseconds();\r\n\t}\r\n\r\n\tprivate _elapsed:number;\r\n\tprivate _startTimeStamp:number;\r\n\r\n\tprivate _isRunning:boolean;\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn this._isRunning;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tstatic startNew():Stopwatch\r\n\t{\r\n\t\tvar s = new Stopwatch();\r\n\t\ts.start();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tstatic measure(closure:()=>void):TimeSpan\r\n\t{\r\n\t\tvar start = getTimestampMilliseconds();\r\n\t\tclosure();\r\n\t\treturn new TimeSpan(getTimestampMilliseconds() - start);\r\n\t}\r\n\r\n\trecord(closure:() => void):TimeSpan\r\n\t{\r\n\t\t// Although a reasonably thread safe way to record, it may not correctly represent time in an async scenario.\r\n\t\tvar e = Stopwatch.measure(closure);\r\n\t\tthis._elapsed += e.milliseconds;\r\n\t\treturn e;\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._isRunning) {\r\n\t\t\t_._startTimeStamp = getTimestampMilliseconds();\r\n\t\t\t_._isRunning = true;\r\n\t\t}\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning) {\r\n\t\t\t_._elapsed += _.currentLapMilliseconds;\r\n\t\t\t_._isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._elapsed = 0;\r\n\t\t_._isRunning = false;\r\n\t\t_._startTimeStamp = NaN;\r\n\t}\r\n\r\n\t// Effectively calls a stop start and continues timing...\r\n\t// Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\r\n\tlap():TimeSpan\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning) {\r\n\t\t\tvar t = getTimestampMilliseconds();\r\n\t\t\tvar s = _._startTimeStamp;\r\n\t\t\tvar e = t - s;\r\n\t\t\t_._startTimeStamp = t;\r\n\t\t\t_._elapsed += e;\r\n\t\t\treturn new TimeSpan(e);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn TimeSpan.zero;\r\n\t}\r\n\r\n\tget currentLapMilliseconds():number\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? (getTimestampMilliseconds() - this._startTimeStamp)\r\n\t\t\t: 0;\r\n\t}\r\n\r\n\tget currentLap():TimeSpan\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? new TimeSpan(this.currentLapMilliseconds)\r\n\t\t\t: TimeSpan.zero;\r\n\t}\r\n\r\n\tget elapsedMilliseconds():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar timeElapsed = _._elapsed;\r\n\r\n\t\tif(_._isRunning)\r\n\t\t\ttimeElapsed += _.currentLapMilliseconds;\r\n\r\n\t\treturn timeElapsed;\r\n\t}\r\n\r\n\tget elapsed():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.elapsedMilliseconds);\r\n\t}\r\n\r\n}\r\n"]}