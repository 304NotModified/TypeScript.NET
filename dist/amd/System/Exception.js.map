{"version":3,"sources":["System/Exception.js","System/Exception.ts"],"names":["define","require","exports","NAME","Exception","message","innerException","beforeSealing","this","_","name","getName","data","stack","eval","replace","toStringWithoutBrackets","ex","Object","freeze","prototype","toString","m","dispose","k","hasOwnProperty","defineProperty","value"],"mappings":"AAAAA,QAAQ,UAAW,WAAY,SAAUC,QAASC,SAC9C,YCMJ,IAAMC,MAAc,YAWpBC,UAAA,WAgBC,QAAAA,WACUC,QACTC,eACAC,eAFSC,KAAAH,QAAAA,OAIT,IAAMI,GAAID,IAEVA,MAAKE,KAAOD,EAAEE,UACdH,KAAKI,QAEFN,iBACFG,EAAEG,KAAqB,eAAIN,gBAOzBC,eAAeA,cAAcE,EAGhC,KAEC,GAAII,OAAeC,KAAK,eAAeD,KACvCA,OAAQA,OACJA,MACDE,QAAQ,WAAY,IACpBA,QAAQ,qBAAsB,KAC7B,GAEJP,KAAKK,MAAQJ,EAAEO,0BAA4BH,MAE5C,MAAMI,KAGNC,OAAOC,OAAOV,GAsChB,MA9BWL,WAAAgB,UAAAT,QAAV,WACE,MAAOR,OAKTC,UAAAgB,UAAAC,SAAA,WAEC,MAAO,IAAIb,KAAKQ,0BAAyB,KAGhCZ,UAAAgB,UAAAJ,wBAAV,WAEC,GAAMP,GAAID,KACJc,EAAIb,EAAEJ,OACZ,OAAOI,GAAEC,MAAQY,EAAK,KAAOA,EAAK,KAMnClB,UAAAgB,UAAAG,QAAA,WAEC,GAAMX,GAAOJ,KAAKI,IAClB,KAAI,GAAIY,KAAKZ,GAETA,EAAKa,eAAeD,UACfZ,GAAKY,IAGhBpB,YAzFAF,SAAAE,UAAAA,UD0BIc,OAAOQ,eAAexB,QAAS,cAAgByB,OAAO,ICiE1DzB,QAAAA,WAAeE","file":"Exception.js","sourcesContent":["define([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    var NAME = 'Exception';\n    var Exception = (function () {\n        function Exception(message, innerException, beforeSealing) {\n            this.message = message;\n            var _ = this;\n            this.name = _.getName();\n            this.data = {};\n            if (innerException)\n                _.data['innerException'] = innerException;\n            if (beforeSealing)\n                beforeSealing(_);\n            try {\n                var stack = eval(\"new Error()\").stack;\n                stack = stack\n                    && stack\n                        .replace(/^Error\\n/, '')\n                        .replace(/(.|\\n)+\\s+at new.+/, '')\n                    || '';\n                this.stack = _.toStringWithoutBrackets() + stack;\n            }\n            catch (ex) { }\n            Object.freeze(_);\n        }\n        Exception.prototype.getName = function () { return NAME; };\n        Exception.prototype.toString = function () {\n            return \"[\" + this.toStringWithoutBrackets() + \"]\";\n        };\n        Exception.prototype.toStringWithoutBrackets = function () {\n            var _ = this;\n            var m = _.message;\n            return _.name + (m ? (': ' + m) : '');\n        };\n        Exception.prototype.dispose = function () {\n            var data = this.data;\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    delete data[k];\n            }\n        };\n        return Exception;\n    }());\n    exports.Exception = Exception;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Exception;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\nimport {IDisposable} from \"./Disposable/IDisposable\";\r\nimport {IMap} from \"./Collections/Dictionaries/IDictionary\";\r\nconst NAME:string = 'Exception';\r\n\r\n// Avoid importing node reference..\r\nexport interface Error {\r\n\tname: string;\r\n\tmessage: string;\r\n}\r\n\r\n/**\r\n * Represents errors that occur during application execution.\r\n */\r\nexport class Exception implements Error, IDisposable\r\n{\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\treadonly name:string;\r\n\treadonly stack:string;\r\n\treadonly data:IMap<any>;\r\n\r\n\t/**\r\n\t * Initializes a new instance of the Exception class with a specified error message and optionally a reference to the inner exception that is the cause of this exception.\r\n\t * @param message\r\n\t * @param innerException\r\n\t * @param beforeSealing This delegate is used to allow actions to occur just before this constructor finishes.  Since some compilers do not allow the use of 'this' before super.\r\n\t */\r\n\tconstructor(\r\n\t\treadonly message:string,\r\n\t\tinnerException?:Error,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tthis.name = _.getName();\r\n\t\tthis.data = {};\r\n\r\n\t\tif(innerException)\r\n\t\t\t_.data['innerException'] = innerException;\r\n\r\n\t\t/* Originally intended to use 'get' accessors for properties,\r\n\t\t * But debuggers don't display these readily yet.\r\n\t\t * Object.freeze has to be used carefully, but will prevent overriding values.\r\n\t\t */\r\n\r\n\t\tif(beforeSealing) beforeSealing(_);\r\n\r\n\t\t// Node has a .stack, let's use it...\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlet stack:string = eval(\"new Error()\").stack;\r\n\t\t\tstack = stack\r\n\t\t\t\t&& stack\r\n\t\t\t\t\t.replace(/^Error\\n/, '')\r\n\t\t\t\t\t.replace(/(.|\\n)+\\s+at new.+/, '')\r\n\t\t\t\t|| '';\r\n\r\n\t\t\tthis.stack = _.toStringWithoutBrackets() + stack;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{}\r\n\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\tprotected getName():string\r\n\t{ return NAME; }\r\n\r\n\t/**\r\n\t * The string representation of the Exception instance.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\treturn `[${this.toStringWithoutBrackets()}]`;\r\n\t}\r\n\r\n\tprotected toStringWithoutBrackets():string\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst m = _.message;\r\n\t\treturn _.name + (m ? (': ' + m) : '');\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the data object.\r\n\t */\r\n\tdispose():void\r\n\t{\r\n\t\tconst data = this.data;\r\n\t\tfor(let k in data)\r\n\t\t{\r\n\t\t\tif(data.hasOwnProperty(k))\r\n\t\t\t\tdelete data[k];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Exception;\r\n"]}