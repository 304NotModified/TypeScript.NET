{"version":3,"sources":["System/Exception.js","System/Exception.ts"],"names":["define","require","exports","NAME","Exception","Exception.constructor","Exception.getName","Exception.toString","Exception.dispose","Object","defineProperty","value"],"mappings":";;;;;AAKAA,QAAQ,UAAW,WAAY,SAAUC,EAASC,GCKlD,GAAMC,GAAc,YAKpBC,EAAA,WAeCA,QAAAA,GACQA,EACPA,EACAA,GAFAC,SAAAA,IAAAA,EAAAA,MACAA,SAAAA,IAAAA,EAAAA,MADOA,KAAAA,QAAAA,CAIPA,IAAIA,GAAIA,IACRA,GAAEA,KAAOA,EAAEA,UACXA,EAAEA,QACCA,IACFA,EAAEA,KAAqBA,eAAIA,GAOzBA,GAAeA,EAAcA,GAChCA,OAAOA,OAAOA,GAmChBD,MAxBWA,GAAAA,UAAAA,QAAVA,WACEE,MAAOA,IAKTF,EAAAA,UAAAA,SAAAA,WAECG,GAAIA,GAAIA,KAAMA,EAAIA,EAAEA,OAGpBA,OAFAA,GAAIA,EAAKA,KAAOA,EAAKA,GAEdA,IAAIA,EAAEA,KAAMA,EAAGA,KAMvBH,EAAAA,UAAAA,QAAAA,WAECI,GAAIA,GAAOA,KAAKA,IAChBA,KAAIA,GAAIA,KAAKA,GACTA,EAAKA,eAAeA,UACfA,GAAKA,IAEhBJ,IAnEAK,QAAAC,eAAAR,EAAA,cAAAS,OAAA,IDuBIT,EAAAA,WAAkBE","file":"System/Exception.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n///<reference path=\"Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"Disposable/IDisposable.d.ts\"/>\r\nconst NAME = 'Exception';\r\nexport default class Exception {\r\n    constructor(message = null, innerException = null, beforeSealing) {\r\n        this.message = message;\r\n        var _ = this;\r\n        _.name = _.getName();\r\n        _.data = {};\r\n        if (innerException)\r\n            _.data['innerException'] = innerException;\r\n        if (beforeSealing)\r\n            beforeSealing(_);\r\n        Object.freeze(_);\r\n    }\r\n    getName() { return NAME; }\r\n    toString() {\r\n        var _ = this, m = _.message;\r\n        m = m ? (': ' + m) : '';\r\n        return '[' + _.name + m + ']';\r\n    }\r\n    dispose() {\r\n        var data = this.data;\r\n        for (let k in data)\r\n            if (data.hasOwnProperty(k))\r\n                delete data[k];\r\n    }\r\n}\r\n//# sourceMappingURL=Exception.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\n///<reference path=\"Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"Disposable/IDisposable.d.ts\"/>\r\n\r\n\r\nconst NAME:string = 'Exception';\r\n\r\n/**\r\n * Represents errors that occur during application execution.\r\n */\r\nexport default\r\nclass Exception implements Error, IDisposable\r\n{\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\tname:string;\r\n\r\n\t/**\r\n\t * Initializes a new instance of the Exception class with a specified error message and optionally a reference to the inner exception that is the cause of this exception.\r\n\t * @param message\r\n\t * @param innerException\r\n\t * @param beforeSealing This delegate is used to allow actions to occur just before this constructor finishes.  Since some compilers do not allow the use of 'this' before super.\r\n\t */\r\n\tconstructor(\r\n\t\tpublic message:string = null,\r\n\t\tinnerException:Error = null,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.name = _.getName();\r\n\t\t_.data = {};\r\n\t\tif(innerException)\r\n\t\t\t_.data['innerException'] = innerException;\r\n\r\n\t\t/* Originally intended to use 'get' accessors for properties,\r\n\t\t * But debuggers don't display these readily yet.\r\n\t\t * Object.freeze has to be used carefully, but will prevent overriding values.\r\n\t\t */\r\n\r\n\t\tif(beforeSealing) beforeSealing(_);\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\r\n\r\n\tdata:IMap<any>;\r\n\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\tprotected getName():string\r\n\t{ return NAME; }\r\n\r\n\t/**\r\n\t * The string representation of the Exception instance.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\tvar _ = this, m = _.message;\r\n\t\tm = m ? (': ' + m) : '';\r\n\r\n\t\treturn '['+_.name+ m +']';\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the data object.\r\n\t */\r\n\tdispose():void\r\n\t{\r\n\t\tvar data = this.data;\r\n\t\tfor(let k in data)\r\n\t\t\tif(data.hasOwnProperty(k))\r\n\t\t\t\tdelete data[k];\r\n\t}\r\n}\r\n"]}