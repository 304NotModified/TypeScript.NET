{"version":3,"sources":["System/Observable/Subscription.ts","System/Observable/Subscription.js"],"names":["define","require","exports","Subscription","Subscription.constructor","get","Subscription.subscriber","enumerable","configurable","Subscription.wasDisposed","Subscription.dispose","Object","defineProperty","value"],"mappings":"AAMA,YCLAA,SAAQ,UAAW,WAAY,SAAUC,EAASC,GDelD,GAAAC,GAAA,WAGCA,QAAAA,GACSA,EACAA,GAERC,GAHQA,KAAAA,cAAAA,EACAA,KAAAA,YAAAA,GAEHA,IAAkBA,EACtBA,KAAMA,8CA0CTD,MAvCCA,QAAAA,eAAIA,EAAAA,UAAAA,cCdOE,IDcXF,WACCG,MAAOA,MAAKA,aCZFC,YAAY,EACZC,cAAc,ID6BzBL,OAAAA,eAAIA,EAAAA,UAAAA,eC1BOE,ID0BXF,WAECM,OAAQA,KAAKA,gBAAkBA,KAAKA,aCzB1BF,YAAY,EACZC,cAAc,ID2BzBL,EAAAA,UAAAA,QAAAA,WAECO,GAAIA,GAAaA,KAAKA,WAClBA,EAAeA,KAAKA,aAGxBA,MAAKA,YAAcA,KACnBA,KAAKA,cAAgBA,KAGjBA,GAAcA,GAEjBA,EAAaA,YAAYA,IAG5BP,IAlDAQ,QAAAC,eAAAV,EAAA,cAAAW,OAAA,ICsBIX,EAAAA,WAAkBC","file":"System/Observable/Subscription.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n\r\n///<reference path=\"ISubscribable.d.ts\"/>\r\n///<reference path=\"IObservable.d.ts\"/>\r\n///<reference path=\"../Disposable/IDisposableAware.d.ts\"/>\r\n\r\n/**\r\n * A registration that an IObservable returns that can be disposed in order to cancel sending data to the observer.\r\n */\r\nexport default\r\nclass Subscription<T> implements IDisposableAware\r\n{\r\n\tconstructor(\r\n\t\tprivate _subscribable: ISubscribable<T>,\r\n\t\tprivate _subscriber: T)\r\n\t{\r\n\t\tif (!_subscribable || !_subscriber)\r\n\t\t\tthrow 'Subscribable and subscriber cannot be null.';\r\n\t}\r\n\r\n\tget subscriber():T {\r\n\t\treturn this._subscriber;\r\n\t}\r\n\r\n\t/*\r\n\t In the case where we could possibly have the following happen:\r\n\r\n\t var u = observable.subscribe(observer);\r\n\r\n\t ...\r\n\r\n\t u.dispose(); // Should only be allowed to unsubscribe once and then it's useless.\r\n\r\n\t // Resubscribing creates a new instance.\r\n\t var x = observable.subscribe(observer);\r\n\r\n\t u.dispose(); // Calling this again should do nothing and 'x' should still work.\r\n\t */\r\n\r\n\tget wasDisposed(): boolean\r\n\t{\r\n\t\treturn !this._subscribable || !this._subscriber;\r\n\t}\r\n\r\n\tdispose(): void\r\n\t{\r\n\t\tvar subscriber = this.subscriber;\r\n\t\tvar subscribable = this._subscribable;\r\n\r\n\t\t// Release the references.  Will prevent potential unwanted recursion.\r\n\t\tthis._subscriber = null;\r\n\t\tthis._subscribable = null;\r\n\r\n\r\n\t\tif (subscriber && subscribable)\r\n\t\t{\r\n\t\t\tsubscribable.unsubscribe(subscriber);\r\n\t\t}\r\n\t}\r\n}\r\n","'use strict';\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\"], function (require, exports) {\r\n    ///<reference path=\"ISubscribable.d.ts\"/>\r\n    ///<reference path=\"IObservable.d.ts\"/>\r\n    ///<reference path=\"../Disposable/IDisposableAware.d.ts\"/>\r\n    var Subscription = (function () {\r\n        function Subscription(_subscribable, _subscriber) {\r\n            this._subscribable = _subscribable;\r\n            this._subscriber = _subscriber;\r\n            if (!_subscribable || !_subscriber)\r\n                throw 'Subscribable and subscriber cannot be null.';\r\n        }\r\n        Object.defineProperty(Subscription.prototype, \"subscriber\", {\r\n            get: function () {\r\n                return this._subscriber;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Subscription.prototype, \"wasDisposed\", {\r\n            get: function () {\r\n                return !this._subscribable || !this._subscriber;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Subscription.prototype.dispose = function () {\r\n            var subscriber = this.subscriber;\r\n            var subscribable = this._subscribable;\r\n            this._subscriber = null;\r\n            this._subscribable = null;\r\n            if (subscriber && subscribable) {\r\n                subscribable.unsubscribe(subscriber);\r\n            }\r\n        };\r\n        return Subscription;\r\n    })();\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Subscription;\r\n});\r\n//# sourceMappingURL=Subscription.js.map"]}