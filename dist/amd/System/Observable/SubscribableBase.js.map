{"version":3,"sources":["System/Observable/SubscribableBase.js","System/Observable/SubscribableBase.ts"],"names":["define","require","exports","LinkedNodeList_1","dispose_1","Subscription_1","SubscribableBase","this","__subscriptions","prototype","_getSubscribers","map","node","value","subscriber","_findEntryNode","find","n","subscribe","_","s","addNode","unsubscribe","removeNode","dispose","_unsubscribeAll","returnSubscribers","_s","u","o","clear","these","unsubscribeAll","Object","defineProperty"],"mappings":";;;;;;AAMAA,QAAQ,UAAW,UAAW,gCAAiC,wBAAyB,kBAAmB,SAAUC,EAASC,EAASC,EAAkBC,EAAWC,GCGpK,YAQA,IAAAC,GAAA,WAeC,QAAAA,KAECC,KAAKC,gBACF,GAAIL,GAAAA,WA2DT,MArEWG,GAAAG,UAAAC,gBAAV,WAEC,MAAOH,MACLC,gBACAG,IAAI,SAAAC,GAAM,MAAAA,GAAKC,OAASD,EAAKC,MAAMC,cAS9BR,EAAAG,UAAAM,eAAR,SACCD,GAEA,MAAOP,MACLC,gBACAQ,KAAK,SAAAC,GAAG,MAAAA,GAAEJ,MAAMC,aAAaA,KAIhCR,EAAAG,UAAAS,UAAA,SAAUJ,GAET,GAAIK,GAAIZ,KACJU,EAAIE,EAAEJ,eAAeD,EACzB,IAAGG,EACF,MAAOA,GAAEJ,KAEV,IAAIO,GAAI,GAAIf,GAAAA,WAAac,EAAGL,EAG5B,OAFAK,GAAEX,gBAAgBa,SAASR,MAAOO,IAE3BA,GAGRd,EAAAG,UAAAa,YAAA,SAAYR,GAEX,GAAIK,GAAIZ,KACJU,EAAIE,EAAEJ,eAAeD,EACzB,IAAGG,EACH,CACC,GAAIG,GAAIH,EAAEJ,KACVM,GAAEX,gBAAgBe,WAAWN,GAC7BG,EAAEI,YAIMlB,EAAAG,UAAAgB,gBAAV,SAA0BC,GAAA,SAAAA,IAAAA,GAAA,EAEzB,IAAIP,GAAIZ,KAAMoB,EAAKR,EAAEX,gBACjBY,EAAIO,EAAGhB,IAAI,SAAAM,GAAG,MAAAA,GAAEJ,QAChBe,EAAIF,EAAoBN,EAAET,IAAI,SAAAkB,GAAG,MAAAA,GAAEf,aAAc,IAKrD,OAJAa,GAAGG,QAEH1B,EAAAA,WAAQ2B,MAAMX,GAEPQ,GAGRtB,EAAAG,UAAAuB,eAAA,WAECzB,KAAKkB,mBAGNnB,EAAAG,UAAAe,QAAA,WAECjB,KAAKkB,mBAGPnB,IA7EA2B,QAAAC,eAAAhC,EAAA,cAAAW,OAAA,ID0CIX,EAAAA,WAAkBI","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\ndefine([\"require\", \"exports\", \"../Collections/LinkedNodeList\", \"../Disposable/dispose\", \"./Subscription\"], function (require, exports, LinkedNodeList_1, dispose_1, Subscription_1) {\n    'use strict';\n    var SubscribableBase = (function () {\n        function SubscribableBase() {\n            this.__subscriptions\n                = new LinkedNodeList_1.default();\n        }\n        SubscribableBase.prototype._getSubscribers = function () {\n            return this\n                .__subscriptions\n                .map(function (node) { return node.value && node.value.subscriber; });\n        };\n        SubscribableBase.prototype._findEntryNode = function (subscriber) {\n            return this\n                .__subscriptions\n                .find(function (n) { return n.value.subscriber === subscriber; });\n        };\n        SubscribableBase.prototype.subscribe = function (subscriber) {\n            var _ = this;\n            var n = _._findEntryNode(subscriber);\n            if (n)\n                return n.value;\n            var s = new Subscription_1.default(_, subscriber);\n            _.__subscriptions.addNode({ value: s });\n            return s;\n        };\n        SubscribableBase.prototype.unsubscribe = function (subscriber) {\n            var _ = this;\n            var n = _._findEntryNode(subscriber);\n            if (n) {\n                var s = n.value;\n                _.__subscriptions.removeNode(n);\n                s.dispose();\n            }\n        };\n        SubscribableBase.prototype._unsubscribeAll = function (returnSubscribers) {\n            if (returnSubscribers === void 0) { returnSubscribers = false; }\n            var _ = this, _s = _.__subscriptions;\n            var s = _s.map(function (n) { return n.value; });\n            var u = returnSubscribers ? s.map(function (o) { return o.subscriber; }) : null;\n            _s.clear();\n            dispose_1.default.these(s);\n            return u;\n        };\n        SubscribableBase.prototype.unsubscribeAll = function () {\n            this._unsubscribeAll();\n        };\n        SubscribableBase.prototype.dispose = function () {\n            this._unsubscribeAll();\n        };\n        return SubscribableBase;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SubscribableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport LinkedNodeList from \"../Collections/LinkedNodeList\";\r\nimport dispose from \"../Disposable/dispose\";\r\nimport Subscription from \"./Subscription\";\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\n\r\nexport default\r\nclass SubscribableBase<TSubscriber>\r\nimplements IDisposable\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]\r\n\t{\r\n\t\treturn this\r\n\t\t\t.__subscriptions\r\n\t\t\t.map(node=>node.value && node.value.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.__subscriptions\r\n\t\t\t= new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>\r\n\t{\r\n\t\treturn this\r\n\t\t\t.__subscriptions\r\n\t\t\t.find(n=>n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_.__subscriptions.addNode({value: s});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\t_.__subscriptions.removeNode(n);\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]\r\n\t{\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tvar s = _s.map(n=>n.value);\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tdispose.these(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tdispose()\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n}\r\n"]}