{"version":3,"sources":["System/Text/StringBuilder.js","System/Text/StringBuilder.ts"],"names":["define","require","exports","Types_1","VOID0","StringBuilder","initial","_i","arguments","length","_","this","_latest","_partArray","appendThese","prototype","appendSingle","item","OBJECT","FUNCTION","toString","push","items","forEach","s","append","appendLine","appendLines","i","Object","defineProperty","get","enumerable","configurable","latest","join","delimiter","clear","dispose","value"],"mappings":";;;;;AAKAA,QAAQ,UAAW,UAAW,YAAa,SAAUC,EAASC,EAASC,GCEvE,YAKA,IAAMC,GAAY,OAalBC,EAAA,WASC,QAAAA,KDvBW,ICuBC,GAAAC,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EAEX,IAAIG,GAAIC,IACRD,GAAEE,QAAU,KACZF,EAAEG,cACFH,EAAEI,YAAYR,GA+FhB,MA5FSD,GAAAU,UAAAC,aAAR,SAAqBC,GAEpB,GAAU,OAAPA,GAAeA,IAAOb,EAAO,CAC/B,GAAIM,GAAIC,IAER,QADAD,EAAEE,QAAU,WACEK,IACb,IAAKd,GAAAA,WAAKe,OACV,IAAKf,GAAAA,WAAKgB,SACTF,EAAOA,EAAKG,WAGdV,EAAEG,WAAWQ,KAAKJ,KAKpBZ,EAAAU,UAAAD,YAAA,SAAYQ,GAEX,GAAIZ,GAAIC,IAER,OADAW,GAAMC,QAAQ,SAAAC,GAAI,MAAAd,GAAEM,aAAaQ,KAC1Bd,GAGRL,EAAAU,UAAAU,OAAA,WD1BW,IC0BJ,GAAAH,MAAAf,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAe,EAAAf,EAAA,GAAAC,UAAAD,EAGN,OADAI,MAAKG,YAAYQ,GACVX,MAGRN,EAAAU,UAAAW,WAAA,WDxBW,ICwBA,GAAAJ,MAAAf,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAe,EAAAf,EAAA,GAAAC,UAAAD,EAGV,OADAI,MAAKgB,YAAYL,GACVX,MAGRN,EAAAU,UAAAY,YAAA,SAAYL,GAEX,GAAIZ,GAAIC,IAUR,OATAW,GAAMC,QACJ,SAAAK,GAEO,OAAJA,GAAYA,IAAIxB,IAClBM,EAAEM,aAAaY,GACflB,EAAEG,WAAWQ,KAAK,WAIdX,GAeRmB,OAAAC,eAAIzB,EAAAU,UAAA,WDxCOgB,ICwCX,WAEC,MAAgC,KAAzBpB,KAAKE,WAAWJ,QDvCbuB,YAAY,EACZC,cAAc,ICyCzB5B,EAAAU,UAAAK,SAAA,WAEC,GAAIc,GAASvB,KAAKC,OAIlB,OAHa,SAATsB,IACHvB,KAAKC,QAAUsB,EAASvB,KAAKE,WAAWsB,QAElCD,GAGR7B,EAAAU,UAAAoB,KAAA,SAAKC,GAEJ,MAAOzB,MAAKE,WAAWsB,KAAKC,IAG7B/B,EAAAU,UAAAsB,MAAA,WAEC1B,KAAKE,WAAWJ,OAAS,EACzBE,KAAKC,QAAU,MAGhBP,EAAAU,UAAAuB,QAAA,WAEC3B,KAAK0B,SAGPhC,IA7GAwB,QAAAC,eAAA5B,EAAA,cAAAqC,OAAA,IDgEIrC,EAAAA,WAAkBG","file":"System/Text/StringBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../Types'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Types_1 = require('../Types');\r\n    var VOID0 = void 0;\r\n    var StringBuilder = (function () {\r\n        function StringBuilder() {\r\n            var initial = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                initial[_i - 0] = arguments[_i];\r\n            }\r\n            var _ = this;\r\n            _._latest = null;\r\n            _._partArray = [];\r\n            _.appendThese(initial);\r\n        }\r\n        StringBuilder.prototype.appendSingle = function (item) {\r\n            if (item !== null && item !== VOID0) {\r\n                var _ = this;\r\n                _._latest = null;\r\n                switch (typeof item) {\r\n                    case Types_1.default.OBJECT:\r\n                    case Types_1.default.FUNCTION:\r\n                        item = item.toString();\r\n                        break;\r\n                }\r\n                _._partArray.push(item);\r\n            }\r\n        };\r\n        StringBuilder.prototype.appendThese = function (items) {\r\n            var _ = this;\r\n            items.forEach(function (s) { return _.appendSingle(s); });\r\n            return _;\r\n        };\r\n        StringBuilder.prototype.append = function () {\r\n            var items = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                items[_i - 0] = arguments[_i];\r\n            }\r\n            this.appendThese(items);\r\n            return this;\r\n        };\r\n        StringBuilder.prototype.appendLine = function () {\r\n            var items = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                items[_i - 0] = arguments[_i];\r\n            }\r\n            this.appendLines(items);\r\n            return this;\r\n        };\r\n        StringBuilder.prototype.appendLines = function (items) {\r\n            var _ = this;\r\n            items.forEach(function (i) {\r\n                if (i !== null && i !== VOID0) {\r\n                    _.appendSingle(i);\r\n                    _._partArray.push(\"\\r\\n\");\r\n                }\r\n            });\r\n            return _;\r\n        };\r\n        Object.defineProperty(StringBuilder.prototype, \"isEmpty\", {\r\n            get: function () {\r\n                return this._partArray.length === 0;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        StringBuilder.prototype.toString = function () {\r\n            var latest = this._latest;\r\n            if (!latest === null)\r\n                this._latest = latest = this._partArray.join();\r\n            return latest;\r\n        };\r\n        StringBuilder.prototype.join = function (delimiter) {\r\n            return this._partArray.join(delimiter);\r\n        };\r\n        StringBuilder.prototype.clear = function () {\r\n            this._partArray.length = 0;\r\n            this._latest = null;\r\n        };\r\n        StringBuilder.prototype.dispose = function () {\r\n            this.clear();\r\n        };\r\n        return StringBuilder;\r\n    }());\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = StringBuilder;\r\n});\r\n//# sourceMappingURL=StringBuilder.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport LinkedList from '../Collections/LinkedList';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/string-concatenation-looped\r\n * http://jsperf.com/adding-strings-to-an-array\r\n * http://jsperf.com/string-concatenation-versus-array-operations-with-join\r\n *\r\n * It is clearly inefficient to use a StringBuilder or LinkedList to build a string when you have a small set of string portions.\r\n * StringBuilder will really show it's benefit likely somewhere above 1000 items.\r\n *****************************/\r\n\r\n\r\nexport default\r\nclass StringBuilder implements IDisposable\r\n\t// Adding IDisposable allows for use with System.using();\r\n\t// ... and since this may end up being a large array container, might be a good idea to allow for flexible cleanup.\r\n{\r\n\t//noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _partArray:any[];\r\n\tprivate _latest:string; // AKA persistentString\r\n\r\n\tconstructor(...initial:any[])\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._latest = null;\r\n\t\t_._partArray = [];\r\n\t\t_.appendThese(initial);\r\n\t}\r\n\r\n\tprivate appendSingle(item:any):void\r\n\t{\r\n\t\tif(item!==null && item!==VOID0) {\r\n\t\t\tvar _ = this;\r\n\t\t\t_._latest = null;\r\n\t\t\tswitch(typeof item) {\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\titem = item.toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t_._partArray.push(item); // Other primitive types can keep their format since a number or boolean is a smaller footprint than a string.\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tappendThese(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(s=> _.appendSingle(s));\r\n\t\treturn _;\r\n\t}\r\n\r\n\tappend(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendThese(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLine(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendLines(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLines(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(\r\n\t\t\t\ti=>\r\n\t\t\t{\r\n\t\t\t\tif(i!==null && i!==VOID0) {\r\n\t\t\t\t\t_.appendSingle(i);\r\n\t\t\t\t\t_._partArray.push(\"\\r\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn _;\r\n\t}\r\n\r\n\t/** /// These methods can only efficiently be added if not using a single array.\r\n\t insert(index: number, value: string, count: number = 1): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\r\n\t remove(startIndex:number, length:number): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\t /**/\r\n\r\n\tget isEmpty()\r\n\t{\r\n\t\treturn this._partArray.length===0;\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\tvar latest = this._latest;\r\n\t\tif(!latest===null)\r\n\t\t\tthis._latest = latest = this._partArray.join();\r\n\r\n\t\treturn latest;\r\n\t}\r\n\r\n\tjoin(delimiter:string):string\r\n\t{\r\n\t\treturn this._partArray.join(delimiter);\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tthis._partArray.length = 0;\r\n\t\tthis._latest = null;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n}\r\n"]}