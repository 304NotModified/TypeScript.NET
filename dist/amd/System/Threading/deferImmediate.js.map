{"version":3,"sources":["System/Threading/deferImmediate.js","System/Threading/deferImmediate.ts"],"names":["define","require","exports","Types_1","LinkedNodeList_1","Queue_1","ObjectPool_1","Environment_1","flush","entry","immediateQueue","first","task_1","task","domain","context_1","context","args","canceller","enter","runSingle","laterQueue","dequeue","flushing","params","apply","e","isNodeJS","exit","setTimeout","requestFlush","requestTick","deferImmediate","entryPool","take","process","slice","r","Boolean","removeNode","add","addNode","cancel","dispose","runAfterDeferred","enqueue","LinkedNodeList","Queue","ObjectPool","o","length","nextTick","setImmediate","Type","FUNCTION","window","UNDEFINED","bind","MessageChannel","channel_1","port1","onmessage","requestPortTick_1","port2","postMessage","Object","defineProperty","value"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,WAAY,gCAAiC,uBAAwB,2BAA4B,kBAAmB,SAAUC,EAASC,EAASC,EAASC,EAAkBC,EAASC,EAAcC,GAC5N,YC2CJ,SAAAC,KAIC,IADA,GAAIC,GACEA,EAAQC,EAAeC,OAC7B,CACM,GAAAC,GAAAH,EAAAI,KAAMC,EAAAL,EAAAK,OAAQC,EAAAN,EAAAO,QAASC,EAAAR,EAAAQ,IAC5BR,GAAMS,YACHJ,GAAQA,EAAOK,QAClBC,EAAUR,EAAME,EAAQC,EAASE,GAIlC,IADA,GAAIJ,GACEA,EAAOQ,EAAWC,WAEvBF,EAAUP,EAGXU,IAAW,EAsBZ,QAAAH,GAAmBP,EAAeC,EAAiBE,EAAcQ,GAEhE,IAECX,EAAKY,MAAMT,EAASQ,GAErB,MAAME,GAEL,GAAGnB,EAAAoB,SAkBF,KAVGb,IAEFA,EAAOc,OAERC,WAAWrB,EAAO,GACfM,GAEFA,EAAOK,QAGFO,CAONG,YAAW,WAEV,KAAMH,IACJ,GAIFZ,GAEFA,EAAOc,OAIT,QAAAE,KAEKP,IAEHA,GAAW,EACXQ,KAgBF,QAAAC,GAA+BnB,EAAuBG,EAAcC,GAEnE,GAAIR,GAAwBwB,EAAUC,MAiBtC,OAhBAzB,GAAMI,KAAOA,EACbJ,EAAMK,OAASP,EAAAoB,UAAkBQ,QAAiB,OAClD1B,EAAMO,QAAUA,EAChBP,EAAMQ,KAAOA,GAAQA,EAAKmB,QAC1B3B,EAAMS,UAAY,WAEjB,IAAIT,EAAO,OAAO,CAClB,IAAI4B,GAAIC,QAAQ5B,EAAe6B,WAAW9B,GAE1C,OADAwB,GAAUO,IAAI/B,GACP4B,GAGR3B,EAAe+B,QAAQhC,GAEvBqB,KAGCY,OAAQjC,EAAMS,UACdyB,QAAS,WAAOlC,GAASA,EAAMS,cAQjC,QAAA0B,GAAiC/B,GAEhCQ,EAAWwB,QAAQhC,GACnBiB,IAlJD,GAAIC,GACAR,GAAmB,EA6BjBb,EAAiB,GAAIN,GAAA0C,eAGrBzB,EAAa,GAAIhB,GAAA0C,MAEjBd,EAAY,GAAI3B,GAAA0C,WAA4B,GACjD,WAAM,UACN,SAACC,GAEAA,EAAEpC,KAAO,KACToC,EAAEnC,OAAS,KACXmC,EAAEjC,QAAU,KACTiC,EAAEhC,OAAMgC,EAAEhC,KAAKiC,OAAS,GAC3BD,EAAEhC,KAAO,KACTgC,EAAE/B,UAAY,MAyGhB,IAnCAhB,EAAA8B,eAAAA,EA6BA9B,EAAA0C,iBAAAA,EAMGrC,EAAAoB,SAEFI,EAAc,WAEbI,QAAQgB,SAAS3C,QAId,UAAU4C,gBAAejD,EAAAkD,KAAKC,SAKjCvB,QAFSwB,UAASpD,EAAAkD,KAAKG,UAETJ,aAAaK,KAAKF,OAAQ/C,GAI1B,WAEb4C,aAAa5C,QAKX,UAAUkD,kBAAiBvD,EAAAkD,KAAKG,UACrC,CAGC,GAAMG,GAAU,GAAID,eAGpBC,GAAQC,MAAMC,UAAY,WAEzB9B,EAAc+B,EACdH,EAAQC,MAAMC,UAAYrD,EAC1BA,IAED,IAAIsD,GAAkB,WAIrBH,EAAQI,MAAMC,YAAY,GAE3BjC,GAAc,WAEbF,WAAWrB,EAAO,GAClBsD,SAOD/B,GAAc,WAEbF,WAAWrB,EAAO,GDvHhByD,QAAOC,eAAehE,EAAS,cAAgBiE,OAAO,IC2H1DjE,EAAAA,WAAe8B","file":"deferImmediate.js","sourcesContent":["define([\"require\", \"exports\", \"../Types\", \"../Collections/LinkedNodeList\", \"../Collections/Queue\", \"../Disposable/ObjectPool\", \"../Environment\"], function (require, exports, Types_1, LinkedNodeList_1, Queue_1, ObjectPool_1, Environment_1) {\n    \"use strict\";\n    var requestTick;\n    var flushing = false;\n    function flush() {\n        var entry;\n        while (entry = immediateQueue.first) {\n            var task_1 = entry.task, domain = entry.domain, context_1 = entry.context, args = entry.args;\n            entry.canceller();\n            if (domain)\n                domain.enter();\n            runSingle(task_1, domain, context_1, args);\n        }\n        var task;\n        while (task = laterQueue.dequeue()) {\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    var immediateQueue = new LinkedNodeList_1.LinkedNodeList();\n    var laterQueue = new Queue_1.Queue();\n    var entryPool = new ObjectPool_1.ObjectPool(40, function () { return ({}); }, function (o) {\n        o.task = null;\n        o.domain = null;\n        o.context = null;\n        if (o.args)\n            o.args.length = 0;\n        o.args = null;\n        o.canceller = null;\n    });\n    function runSingle(task, domain, context, params) {\n        try {\n            task.apply(context, params);\n        }\n        catch (e) {\n            if (Environment_1.isNodeJS) {\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n                throw e;\n            }\n            else {\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n        if (domain) {\n            domain.exit();\n        }\n    }\n    function requestFlush() {\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    }\n    function deferImmediate(task, context, args) {\n        var entry = entryPool.take();\n        entry.task = task;\n        entry.domain = Environment_1.isNodeJS && process['domain'];\n        entry.context = context;\n        entry.args = args && args.slice();\n        entry.canceller = function () {\n            if (!entry)\n                return false;\n            var r = Boolean(immediateQueue.removeNode(entry));\n            entryPool.add(entry);\n            return r;\n        };\n        immediateQueue.addNode(entry);\n        requestFlush();\n        return {\n            cancel: entry.canceller,\n            dispose: function () { entry && entry.canceller(); }\n        };\n    }\n    exports.deferImmediate = deferImmediate;\n    function runAfterDeferred(task) {\n        laterQueue.enqueue(task);\n        requestFlush();\n    }\n    exports.runAfterDeferred = runAfterDeferred;\n    if (Environment_1.isNodeJS) {\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n    }\n    else if (typeof setImmediate === Types_1.Type.FUNCTION) {\n        if (typeof window !== Types_1.Type.UNDEFINED) {\n            requestTick = setImmediate.bind(window, flush);\n        }\n        else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n    }\n    else if (typeof MessageChannel !== Types_1.Type.UNDEFINED) {\n        var channel_1 = new MessageChannel();\n        channel_1.port1.onmessage = function () {\n            requestTick = requestPortTick_1;\n            channel_1.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick_1 = function () {\n            channel_1.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick_1();\n        };\n    }\n    else {\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = deferImmediate;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on code from: https://github.com/kriskowal/q\r\n */\r\nimport {Type} from \"../Types\";\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {Queue} from \"../Collections/Queue\";\r\nimport {Closure} from \"../FunctionTypes\";\r\nimport {ILinkedNode} from \"../Collections/ILinkedListNode\";\r\nimport {ICancellable} from \"./ICancellable\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {isNodeJS} from \"../Environment\";\r\n\r\ndeclare module process\r\n{\r\n\texport function nextTick(callback:Closure):void;\r\n\r\n\texport function toString():string;\r\n}\r\n\r\ninterface IDomain\r\n{\r\n\tenter():void;\r\n\texit():void;\r\n}\r\n\r\ninterface ITaskQueueEntry extends ILinkedNode<ITaskQueueEntry>\r\n{\r\n\ttask:Function;\r\n\tdomain?:IDomain;\r\n\tcontext?:any;\r\n\targs?:any[];\r\n\tcanceller:()=>boolean;\r\n}\r\n\r\n\r\nlet requestTick:()=>void;\r\nlet flushing:boolean = false;\r\n\r\n// Use the fastest possible means to execute a task in a future turn\r\n// of the event loop.\r\n\r\n\r\nfunction flush():void\r\n{\r\n\t/* jshint loopfunc: true */\r\n\tlet entry:ITaskQueueEntry|null;\r\n\twhile(entry = immediateQueue.first)\r\n\t{\r\n\t\tlet {task, domain, context, args} = entry;\r\n\t\tentry.canceller();\r\n\t\tif(domain) domain.enter();\r\n\t\trunSingle(task, domain, context, args);\r\n\t}\r\n\r\n\tlet task:Closure;\r\n\twhile(task = laterQueue.dequeue())\r\n\t{\r\n\t\trunSingle(task);\r\n\t}\r\n\r\n\tflushing = false;\r\n}\r\n\r\n\r\n// linked list of tasks.  Using a real linked list to allow for removal.\r\nconst immediateQueue = new LinkedNodeList<ITaskQueueEntry>();\r\n\r\n// queue for late tasks, used by unhandled rejection tracking\r\nconst laterQueue = new Queue<Closure>();\r\n\r\nconst entryPool = new ObjectPool<ITaskQueueEntry>(40,\r\n\t() => <any>{},\r\n\t(o:any) =>\r\n\t{\r\n\t\to.task = null;\r\n\t\to.domain = null;\r\n\t\to.context = null;\r\n\t\tif(o.args) o.args.length = 0;\r\n\t\to.args = null;\r\n\t\to.canceller = null;\r\n\t});\r\n\r\nfunction runSingle(task:Function, domain?:IDomain, context?:any, params?:any[]):void\r\n{\r\n\ttry\r\n\t{\r\n\t\ttask.apply(context, params);\r\n\t}\r\n\tcatch(e)\r\n\t{\r\n\t\tif(isNodeJS)\r\n\t\t{\r\n\t\t\t// In node, uncaught exceptions are considered fatal errors.\r\n\t\t\t// Re-throw them synchronously to interrupt flushing!\r\n\r\n\t\t\t// Ensure continuation if the uncaught exception is suppressed\r\n\t\t\t// listening \"uncaughtException\" events (as domains does).\r\n\t\t\t// Continue in next event to avoid tick recursion.\r\n\t\t\tif(domain)\r\n\t\t\t{\r\n\t\t\t\tdomain.exit();\r\n\t\t\t}\r\n\t\t\tsetTimeout(flush, 0);\r\n\t\t\tif(domain)\r\n\t\t\t{\r\n\t\t\t\tdomain.enter();\r\n\t\t\t}\r\n\r\n\t\t\tthrow e;\r\n\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// In browsers, uncaught exceptions are not fatal.\r\n\t\t\t// Re-throw them asynchronously to avoid slow-downs.\r\n\t\t\tsetTimeout(()=>\r\n\t\t\t{\r\n\t\t\t\tthrow e;\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tif(domain)\r\n\t{\r\n\t\tdomain.exit();\r\n\t}\r\n}\r\n\r\nfunction requestFlush():void\r\n{\r\n\tif(!flushing)\r\n\t{\r\n\t\tflushing = true;\r\n\t\trequestTick();\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport function deferImmediate(task:Closure, context?:any):ICancellable\r\nexport function deferImmediate(task:Function, context?:any, args?:any[]):ICancellable\r\n//noinspection JSValidateJSDoc\r\n/**\r\n *\r\n * @param task\r\n * @param context\r\n * @param args\r\n * @returns {{cancel: (()=>boolean), dispose: (()=>undefined)}}\r\n */\r\nexport function deferImmediate(task:Closure|Function, context?:any, args?:any[]):ICancellable\r\n{\r\n\tlet entry:ITaskQueueEntry = entryPool.take();\r\n\tentry.task = task;\r\n\tentry.domain = isNodeJS && (<any>process)['domain'];\r\n\tentry.context = context;\r\n\tentry.args = args && args.slice();\r\n\tentry.canceller = ()=>\r\n\t{\r\n\t\tif(!entry) return false;\r\n\t\tlet r = Boolean(immediateQueue.removeNode(entry));\r\n\t\tentryPool.add(entry);\r\n\t\treturn r;\r\n\t};\r\n\r\n\timmediateQueue.addNode(entry);\r\n\r\n\trequestFlush();\r\n\r\n\treturn {\r\n\t\tcancel: entry.canceller,\r\n\t\tdispose: ()=> { entry && entry.canceller(); }\r\n\t}\r\n}\r\n\r\n\r\n// runs a task after all other tasks have been run\r\n// this is useful for unhandled rejection tracking that needs to happen\r\n// after all `then`d tasks have been run.\r\nexport function runAfterDeferred(task:Closure):void\r\n{\r\n\tlaterQueue.enqueue(task);\r\n\trequestFlush();\r\n}\r\n\r\nif(isNodeJS)\r\n{\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tprocess.nextTick(flush);\r\n\t};\r\n\r\n}\r\nelse if(typeof setImmediate===Type.FUNCTION)\r\n{\r\n\t// In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\r\n\tif(typeof window!==Type.UNDEFINED)\r\n\t{\r\n\t\trequestTick = setImmediate.bind(window, flush);\r\n\t}\r\n\telse\r\n\t{\r\n\t\trequestTick = ()=>\r\n\t\t{\r\n\t\t\tsetImmediate(flush);\r\n\t\t};\r\n\t}\r\n\r\n}\r\nelse if(typeof MessageChannel!==Type.UNDEFINED)\r\n{\r\n\t// modern browsers\r\n\t// http://www.nonblocking.io/2011/06/windownexttick.html\r\n\tconst channel = new MessageChannel();\r\n\t// At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\r\n\t// working message ports the first time a page loads.\r\n\tchannel.port1.onmessage = function()\r\n\t{\r\n\t\trequestTick = requestPortTick;\r\n\t\tchannel.port1.onmessage = flush;\r\n\t\tflush();\r\n\t};\r\n\tlet requestPortTick = ()=>\r\n\t{\r\n\t\t// Opera requires us to provide a message payload, regardless of\r\n\t\t// whether we use it.\r\n\t\tchannel.port2.postMessage(0);\r\n\t};\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tsetTimeout(flush, 0);\r\n\t\trequestPortTick();\r\n\t};\r\n\r\n}\r\nelse\r\n{\r\n\t// old browsers\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tsetTimeout(flush, 0);\r\n\t};\r\n}\r\n\r\nexport default deferImmediate;"]}