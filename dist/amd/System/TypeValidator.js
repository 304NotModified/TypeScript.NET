/*!
 * @author electricessence / https://github.com/electricessence/
 * Licensing: MIT
 */
var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)};define(["require","exports","./Types","./Compare"],function(t,r,e,n){"use strict";function i(t,r){if(!n.areEqual(t,r)){var e=new s(t);if(!e.contains(r))return!0}return!1}var s=function(t){function r(r){var e=this;t.call(this,r,function(){return e._value=r})}return __extends(r,t),r.prototype.contains=function(t){var r=this._value;if(r===t)return!0;switch(t){case Function:return this.isFunction;case Object:return this.isObject;case Array:return this.isArray;case String:return this.isString;case Number:return this.isNumber;case Boolean:return this.isBoolean}if(this.type!=typeof t||this.isPrimitive&&!n.areEqual(r,t))return!1;if(this.isArray&&Array.isArray(t)){for(var e=Math.min(t.length,r.length),s=0;e>s;s++)if(i(r[s],t[s]))return!1;return!0}if(this.isObject){var a=Object.keys(r),u=Object.keys(t);if(u.length>a.length)return!1;for(var o=0,c=u;o<c.length;o++){var f=c[o];if(-1==a.indexOf(f))return!1}for(var h=0,l=u;h<l.length;h++){var f=l[h];if(i(r[f],t[f]))return!1}}return!0},r}(e.TypeInfo);r.TypeValidator=s,Object.defineProperty(r,"__esModule",{value:!0}),r["default"]=s});
//# sourceMappingURL=TypeValidator.js.map
