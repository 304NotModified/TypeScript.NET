{"version":3,"sources":["System/Promises/Promise.js","System/Promises/Promise.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Types_1","deferImmediate_1","defer_1","DisposableBase_1","InvalidOperationException_1","ArgumentException_1","ArgumentNullException_1","ObjectPool_1","Set_1","isPromise","value","hasMemberOfType","THEN","FUNCTION","resolve","resolver","promiseFactory","nextValue","Promise","wrap","pass","source","dest","then","v","e","reject","handleResolution","ex","handleDispatch","onFulfilled","onRejected","thenThis","VOID0","PROMISE","PROMISE_STATE","TARGET","PromiseState","_super","_state","_result","_error","call","_disposableObjectName","_onDispose","getState","defineProperty","get","enumerable","configurable","State","Pending","Fulfilled","Rejected","getResult","throwIfDisposed","getError","DisposableBase","PromiseBase","deferAll","SubsequentDeferred","defer","pending","deferImmediate","delay","milliseconds","fin","finallyThis","Resolvable","apply","arguments","state","Error","Resolved","result","error","PromiseWrapper","_target","_this","ArgumentNullException","ArgumentException","t","resolveImmediate","resolveUsing","_waiting","push","pools","PromiseCallbacks","init","_resolvedCalled","deferResolution","throwIfSettled","InvalidOperationException","rejectHandler","reason","fulfillHandler","r","o","_i","o_1","length","c","promise","recycle","o_2","_parent","_onDisposed","LazyResolved","_factory","LazyPromise","_resolver","_onThen","dispose","getPool","pool","ObjectPool","factory","take","__wasDisposed","add","all","first","rest","promises","Array","isArray","concat","every","len","i","parent","remaining","Set","map","cleanup","checkIfShouldResolve","count","onFulfill","remove","onReject","_loop_1","p_1","race","filter","isResolved","isSettled","onResolve","promises_1","p_2","target","createFrom","freeze","lazy"],"mappings":";;;;;;AAMA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,WAAY,0BAA2B,iBAAkB,+BAAgC,0CAA2C,kCAAmC,sCAAuC,2BAA4B,sBAAuB,SAAUC,EAASC,EAASC,EAASC,EAAkBC,EAASC,EAAkBC,EAA6BC,EAAqBC,EAAyBC,EAAcC,GACtc,YCeJ,SAAAC,GAAsBC,GAErB,MAAOV,GAAAA,WAAKW,gBAAgBD,EAAOE,EAAMZ,EAAAA,WAAKa,UAG/C,QAAAC,GACCJ,EAA6BK,EAC7BC,GAEA,GAAIC,GAAYF,EACbA,EAASL,GACTA,CAEH,OAAOO,IAAaR,EAAUQ,GAC3BC,EAAQC,KAAKF,GACbD,EAAeC,GAGnB,QAAAG,GAAiBC,EAAuBC,GAEvC,MAAO,YAEND,EAAOE,KACN,SAAAC,GAGC,MADAF,GAAKR,QAAQU,GACNF,GAER,SAAAG,GAGC,MADAH,GAAKI,OAAOD,GACLH,KAKX,QAAAK,GACCnC,EACAkB,EACAK,GAEA,IAEC,GAAIS,GAAIT,EAAWA,EAASL,GAASA,CAClClB,IAAGA,EAAEsB,QAAQU,GAEjB,MAAMI,GACJpC,EAAEkC,OAAOE,IAGZ,QAAAC,GACCrC,EACAsC,EACAC,GAEGvC,YAAa0B,GACf1B,EAAEwC,SAASF,EAAaC,GAExBvC,EAAE+B,KAAUO,EAAaC,GA5D3B,GAAME,GAAY,OAAQC,EAAU,UAAWC,EAAgBD,EAAU,QAAStB,EAAO,OAAQwB,EAAS,SA+D1GC,EAAA,SAAAC,GAIC,QAAAD,GACWE,EACAC,EACAC,GAEVH,EAAAI,KAAAvD,MAJUA,KAAAoD,OAAAA,EACApD,KAAAqD,QAAAA,EACArD,KAAAsD,OAAAA,EAGVtD,KAAKwD,sBAAwBR,EAiE/B,MA1EQjD,WAAAmD,EAAAC,GAYGD,EAAA3C,UAAAkD,WAAV,WAECzD,KAAKoD,OAASN,EACd9C,KAAKqD,QAAUP,EACf9C,KAAKsD,OAASR,GAGLI,EAAA3C,UAAAmD,SAAV,WAEC,MAAO1D,MAAKoD,QAGb5C,OAAAmD,eAAIT,EAAA3C,UAAA,SD3COqD,IC2CX,WAEC,MAAO5D,MAAKoD,QD1CFS,YAAY,EACZC,cAAc,IC4CzBtD,OAAAmD,eAAIT,EAAA3C,UAAA,aDzCOqD,ICyCX,WAEC,MAAO5D,MAAK0D,aAAa3B,EAAQgC,MAAMC,SDxC7BH,YAAY,EACZC,cAAc,IC0CzBtD,OAAAmD,eAAIT,EAAA3C,UAAA,aDvCOqD,ICuCX,WAEC,MAAO5D,MAAK0D,YAAY3B,EAAQgC,MAAMC,SDtC5BH,YAAY,EACZC,cAAc,ICwCzBtD,OAAAmD,eAAIT,EAAA3C,UAAA,eDrCOqD,ICqCX,WAEC,MAAO5D,MAAK0D,aAAa3B,EAAQgC,MAAME,WDpC7BJ,YAAY,EACZC,cAAc,ICsCzBtD,OAAAmD,eAAIT,EAAA3C,UAAA,cDnCOqD,ICmCX,WAEC,MAAO5D,MAAK0D,aAAa3B,EAAQgC,MAAMG,UDlC7BL,YAAY,EACZC,cAAc,ICuCfZ,EAAA3C,UAAA4D,UAAV,WAEC,MAAOnE,MAAKqD,SAGb7C,OAAAmD,eAAIT,EAAA3C,UAAA,UDtCOqD,ICsCX,WAGC,MADA5D,MAAKoE,kBACEpE,KAAKmE,aDrCFN,YAAY,EACZC,cAAc,ICuCfZ,EAAA3C,UAAA8D,SAAV,WAEC,MAAOrE,MAAKsD,QAGb9C,OAAAmD,eAAIT,EAAA3C,UAAA,SDtCOqD,ICsCX,WAGC,MADA5D,MAAKoE,kBACEpE,KAAKqE,YDrCFR,YAAY,EACZC,cAAc,ICuC1BZ,GA1EQlC,EAAAsD,eADK1D,GAAAsC,aAAYA,CA6EzB,IAAAqB,GAAA,SAAApB,GAGC,QAAAoB,KAECpB,EAAAI,KAAAvD,KAAM+B,EAAQgC,MAAMC,SACpBhE,KAAKwD,sBAAwBT,EA8E/B,MAnFQhD,WAAAwE,EAAApB,GAkCPoB,EAAAhE,UAAAiE,SAAA,WAIC,MAFAxE,MAAKoE,kBAEE,GAAIK,GAAmBzE,OAO/BuE,EAAAhE,UAAAmE,MAAA,WAEC1E,KAAKoE,iBAEL,IAAI/D,GAAI0B,EAAQ4C,SAEhB,OADA7D,GAAA8D,eAAe3C,EAAKjC,KAAMK,IACnBA,GAGRkE,EAAAhE,UAAAsE,MAAA,SAAMC,GAEL9E,KAAKoE,iBAEL,IAAI/D,GAAI0B,EAAQ4C,SAEhB,OADA5D,GAAA2D,MAAMzC,EAAKjC,KAAMK,GAAIyE,GACdzE,GAGRkE,EAAAhE,UAAA,SAAA,SAAiBqC,GAIhB,MAFA5C,MAAKoE,kBAEEpE,KAAKoC,KAAKU,EAAOF,IAGzB2B,EAAAhE,UAAA,WAAA,SAAmBwE,GAIlB,MAFA/E,MAAKoE,kBAEEpE,KAAKoC,KAAK2C,EAAKA,IAGvBR,EAAAhE,UAAAyE,YAAA,SAAYD,GAGX,MADA/E,MAAK6C,SAASkC,EAAKA,GACZ/E,MAGTuE,GAnFQrB,EADctC,GAAA2D,YAAWA,CAsFjC,IAAAU,GAAA,SAAA9B,GAAA,QAAA8B,KAA4C9B,EAAA+B,MAAAlF,KAAAmF,WAkD5C,MAlD4CpF,WAAAkF,EAAA9B,GAG3C8B,EAAA1E,UAAA6B,KAAA,SACCO,EACAC,GAEA5C,KAAKoE,iBAEL,KAEC,OAAOpE,KAAKoF,OAEX,IAAKrD,GAAQgC,MAAME,UAClB,MAAOtB,GACJhB,EAAQ3B,KAAKqD,QAASV,EAAaZ,EAAQJ,SACtC3B,IACT,KAAK+B,GAAQgC,MAAMG,SAClB,MAAOtB,GACJjB,EAAQ3B,KAAKsD,OAAQV,EAAYb,EAAQJ,SACpC3B,MAGX,MAAMyC,GAEL,MAAO,IAAIyB,GAAczB,GAG1B,KAAM,IAAI4C,OAAM,0CAGjBJ,EAAA1E,UAAAsC,SAAA,SACCF,EACAC,GAIA,OAFA5C,KAAKoE,kBAEEpE,KAAKoF,OAEX,IAAKrD,GAAQgC,MAAME,UACftB,GAAaA,EAAY3C,KAAKqD,QACjC,MACD,KAAKtB,GAAQgC,MAAMG,SACftB,GAAYA,EAAW5C,KAAKsD,QAIjC,MAAOtD,OAGTiF,GAlD4CV,EAAtB3D,GAAAqE,WAAUA,CAuDhC,IAAAK,GAAA,SAAAnC,GAEC,QAAAmC,GAAYF,EAAqBG,EAAUC,GAE1CrC,EAAAI,KAAAvD,MACAA,KAAKqD,QAAUkC,EACfvF,KAAKsD,OAASkC,EACdxF,KAAKoD,OAASgC,EAIhB,MAX0CrF,WAAAuF,EAAAnC,GAW1CmC,GAX0CL,EAApBrE,GAAA0E,SAAQA,CAgB9B,IAAArB,GAAA,SAAAd,GAEC,QAAAc,GAAY1C,GAEX4B,EAAAI,KAAAvD,KAAM+B,EAAQgC,MAAME,UAAW1C,GAEjC,MAN2BxB,WAAAkE,EAAAd,GAM3Bc,GAN2BqB,GAW3BpB,EAAA,SAAAf,GAEC,QAAAe,GAAYsB,GAEXrC,EAAAI,KAAAvD,KAAM+B,EAAQgC,MAAMG,SAAUpB,EAAO0C,GAEvC,MAN0BzF,WAAAmE,EAAAf,GAM1Be,GAN0BoB,GAY1BG,EAAA,SAAAtC,GAEC,QAAAsC,GAAoBC,GAFrB,GAAAC,GAAA3F,IAME,IAFAmD,EAAAI,KAAAvD,MAFmBA,KAAA0F,QAAAA,GAIfA,EACH,KAAM,IAAIvE,GAAAyE,sBAAsB3C,EAEjC,KAAI3B,EAAUoE,GACb,KAAM,IAAIxE,GAAA2E,kBAAkB5C,EAAQ,iCAErCyC,GAAQtD,KACP,SAAAC,GAECsD,EAAKvC,OAASrB,EAAQgC,MAAME,UAC5B0B,EAAKtC,QAAUhB,EACfsD,EAAKrC,OAASR,EACd6C,EAAKD,QAAU5C,GAEhB,SAAAR,GAECqD,EAAKvC,OAASrB,EAAQgC,MAAMG,SAC5ByB,EAAKrC,OAAShB,EACdqD,EAAKD,QAAU5C,IAuCnB,MA/DgC/C,WAAA0F,EAAAtC,GA4B/BsC,EAAAlF,UAAA6B,KAAA,SACCO,EACAC,GAEA5C,KAAKoE,iBAEL,IAAI0B,GAAI9F,KAAK0F,OACb,KAAII,EAAG,MAAO3C,GAAA5C,UAAM6B,KAAImB,KAAAvD,KAAC2C,EAAaC,EAEtC,IAAIvC,GAAI0B,EAAQ4C,SAIhB,OAHAjC,GAAeoD,EACd,SAAAP,GAAQ,MAAA/C,GAAiBnC,EAAGkF,EAAQ5C,IACpC,SAAA6C,GAAO,MAAA5C,GAAaJ,EAAiBnC,EAAGmF,EAAO5C,GAAcvC,EAAEkC,OAAOiD,KAChEnF,GAIRoF,EAAAlF,UAAAsC,SAAA,SACCF,EACAC,GAEA5C,KAAKoE,iBAEL,IAAI0B,GAAI9F,KAAK0F,OACb,OAAII,IACJpD,EAAeoD,EAAGnD,EAAaC,GACxB5C,MAFOmD,EAAA5C,UAAMsC,SAAQU,KAAAvD,KAAC2C,EAAaC,IAKjC6C,EAAAlF,UAAAkD,WAAV,WAECN,EAAA5C,UAAMkD,WAAUF,KAAAvD,MAChBA,KAAK0F,QAAU5C,GAGjB2C,GA/DgCR,GAqEhClD,EAAA,SAAAoB,GAeC,QAAApB,GACCH,EACAmE,GAAA,SAAAA,IAAAA,GAAA,GAEA5C,EAAAI,KAAAvD,MAEG4B,GAAU5B,KAAKgG,aAAapE,GAAWmE,GA4J5C,MAjLgChG,WAAAgC,EAAAoB,GAyB/BpB,EAAAxB,UAAA6B,KAAA,SACCO,EACAC,GAKA,GAHA5C,KAAKoE,kBAGFpE,KAAKoD,OAAQ,MAAOD,GAAA5C,UAAM6B,KAAImB,KAAAvD,KAAC2C,EAAaC,EAE/C,IAAIvC,GAAI,GAAI0B,EAGZ,QAFC/B,KAAKiG,WAAajG,KAAKiG,cACtBC,KAAKC,EAAMC,iBAAiBC,KAAK1D,EAAaC,EAAYvC,IACrDA,GAGR0B,EAAAxB,UAAAsC,SAAA,SACCF,EACAC,GAKA,MAHA5C,MAAKoE,kBAGFpE,KAAKoD,OAAeD,EAAA5C,UAAMsC,SAAQU,KAAAvD,KAAC2C,EAAaC,KAElD5C,KAAKiG,WAAajG,KAAKiG,cACtBC,KAAKC,EAAMC,iBAAiBC,KAAK1D,EAAaC,IAEzC5C,OAIE+B,EAAAxB,UAAAkD,WAAV,WAECN,EAAA5C,UAAMkD,WAAUF,KAAAvD,MAChBA,KAAKsG,gBAAkBxD,GAMxBf,EAAAxB,UAAAyF,aAAA,SACCpE,EACA2E,EACAC,GAHD,GAAAb,GAAA3F,IAKC,IAHA,SAAAuG,IAAAA,GAAA,GACA,SAAAC,IAAAA,GAAA,IAEI5E,EACH,KAAM,IAAIT,GAAAyE,sBAAsB,WACjC,IAAG5F,KAAKsG,gBACP,KAAM,IAAIrF,GAAAwF,0BAA0B,6BACrC,IAAGzG,KAAKoF,MACP,KAAM,IAAInE,GAAAwF,0BAA0B,qBAAuB1E,EAAQgC,MAAM/D,KAAKoF,OAE/EpF,MAAKsG,iBAAkB,CAEvB,IAAII,GAAgB,SAACC,GAEpBhB,EAAKW,iBAAkB,EACvBX,EAAKpD,OAAOoE,IAGTC,EAAiB,SAACvE,GAErBsD,EAAKW,iBAAkB,EACvBX,EAAKhE,QAAQU,IAGVwE,EAAI,WAAI,MAAAjF,GACX,SAAAS,GAEC,GAAGA,GAAGsD,EAAM,KAAM,IAAI1E,GAAAwF,0BAA0B,sCAC7CnF,GAAUe,GACZK,EAAeL,EAAGuE,EAAgBF,GAElCE,EAAevE,IAEjBqE,GAEEH,GAAiBzF,EAAA8D,eAAeiC,GAC9BA,KAGN9E,EAAAxB,UAAAoB,QAAA,SAAQ4D,EAAWiB,GAGlB,GAHkB,SAAAA,IAAAA,GAAA,GAElBxG,KAAKoE,kBACGmB,GAAQvF,KACf,KAAM,IAAIiB,GAAAwF,0BAA0B,sCAErC,IAAGzG,KAAKoD,OACR,CAEC,IAAIoD,GAAkBxG,KAAKoD,QAAQrB,EAAQgC,MAAME,WAAajE,KAAKqD,UAAUkC,EAAQ,MACrF,MAAM,IAAItE,GAAAwF,0BAA0B,qEAGrC,GAAGzG,KAAKsG,iBAEP,GAAGE,EACF,KAAM,IAAIvF,GAAAwF,0BAA0B,kCAHtC,CAOAzG,KAAKoD,OAASrB,EAAQgC,MAAME,UAE5BjE,KAAKqD,QAAUkC,EACfvF,KAAKsD,OAASR,CACd,IAAIgE,GAAI9G,KAAKiG,QACb,IAAGa,EACH,CACC9G,KAAKiG,SAAWnD,CAChB,KAAa,GAAAiE,GAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAAC,OAAAF,IAAE,CAAX,GAAIG,GAACF,EAAAD,GAEHpE,EAAAuE,EAAAvE,YAAawE,EAAAD,EAAAC,QAAc9G,EAAiB8G,CACjDhB,GAAMC,iBAAiBgB,QAAQF,GAC/B1E,EAAiBnC,EAAGkF,EAAQ5C,GAE7BmE,EAAEG,OAAS,KAIblF,EAAAxB,UAAAgC,OAAA,SAAOiD,EAAWgB,GAGjB,GAHiB,SAAAA,IAAAA,GAAA,GAEjBxG,KAAKoE,kBACFpE,KAAKoD,OACR,CAEC,IAAIoD,GAAkBxG,KAAKoD,QAAQrB,EAAQgC,MAAMG,UAAYlE,KAAKsD,SAASkC,EAAO,MAClF,MAAM,IAAIvE,GAAAwF,0BAA0B,oEAGrC,GAAGzG,KAAKsG,iBAEP,GAAGE,EACF,KAAM,IAAIvF,GAAAwF,0BAA0B,kCAHtC,CAMAzG,KAAKoD,OAASrB,EAAQgC,MAAMG,SAE5BlE,KAAKsD,OAASkC,CACd,IAAIsB,GAAI9G,KAAKiG,QACb,IAAGa,EACH,CACC9G,KAAKiG,SAAW,IAChB,KAAa,GAAAc,GAAA,EAAAM,EAAAP,EAAAC,EAAAM,EAAAJ,OAAAF,IAAE,CAAX,GAAIG,GAACG,EAAAN,GAEHnE,EAAAsE,EAAAtE,WAAYuE,EAAAD,EAAAC,QAAc9G,EAAiB8G,CAChDhB,GAAMC,iBAAiBgB,QAAQF,GAC5BtE,EAAYJ,EAAiBnC,EAAGmF,EAAO5C,GACrCvC,EAAEkC,OAAOiD,GAEfsB,EAAEG,OAAS,KAGdlF,GAjLgCkD,EAAnBrE,GAAAmB,QAAOA,CAwLpB,IAAA0C,GAAA,SAAAtB,GAEC,QAAAsB,GAAoB6C,GAGnB,GADAnE,EAAAI,KAAAvD,MAFmBA,KAAAsH,QAAAA,IAGfA,GAAaA,YAAmB/C,IACnC,KAAM,IAAIrD,GAAA2E,kBAAkB5C,EAAQ,4BAqEvC,MA3EoClD,WAAA0E,EAAAtB,GASzBsB,EAAAlE,UAAAgH,YAAV,WAECpE,EAAA5C,UAAMkD,WAAUF,KAAAvD,MAChBA,KAAKsH,QAAUxE,GAGN2B,EAAAlE,UAAAmD,SAAV,WAEC,MAAO1D,MAAKsH,QAAQlC,OAGXX,EAAAlE,UAAA4D,UAAV,WAEC,MAAOnE,MAAKsH,QAAQ/B,QAGXd,EAAAlE,UAAA8D,SAAV,WAEC,MAAOrE,MAAKsH,QAAQ9B,OAGrBf,EAAAlE,UAAA6B,KAAA,SACCO,EACAC,GAEA5C,KAAKoE,iBAEL,IAAInE,GAAID,KAAKsH,QAAQ5C,QACjBrE,EAAIJ,EAAEmC,KAAKO,EAAaC,EAG5B,OADA3C,GAAAA,WAAU,WAAI,MAAAkG,GAAMiB,QAAQnH,KACrBI,GAIRoE,EAAAlE,UAAAsC,SAAA,SACCF,EACAC,GAEA5C,KAAKoE,iBAEL,IAAInE,GAAID,KAAKsH,QAAQ5C,OAIrB,OAHAzE,GAAE4C,SAASF,EAAaC,GAExB3C,EAAAA,WAAU,WAAI,MAAAkG,GAAMiB,QAAQnH,KACrBD,MAGRyE,EAAAlE,UAAAmE,MAAA,WAIC,MAFA1E,MAAKoE,kBAEEpE,MAGRyE,EAAAlE,UAAAiE,SAAA,WAIC,MAFAxE,MAAKoE,kBAEEpE,MAGRQ,OAAAmD,eAAIc,EAAAlE,UAAA,UDjOOqD,ICiOX,WAEC,MAAO5D,MAAKsH,SDhOFzD,YAAY,EACZC,cAAc,ICiO1BW,GA3EoCF,GAiFpCiD,EAAA,SAAArE,GAEC,QAAAqE,GAAoBC,GAGnB,GADAtE,EAAAI,KAAAvD,KAAM+B,EAAQgC,MAAMC,QAASlB,GAFV9C,KAAAyH,SAAAA,GAGfA,EAAU,KAAM,IAAItG,GAAAyE,sBAAsB,WA0EhD,MA/EqC7F,WAAAyH,EAAArE,GAQ1BqE,EAAAjH,UAAAkD,WAAV,WAECN,EAAA5C,UAAMkD,WAAUF,KAAAvD,MAChBA,KAAKyH,SAAW3E,GAGP0E,EAAAjH,UAAAmD,SAAV,WAGC,MADA1D,MAAKmE,YACEnE,KAAKoD,QAGHoE,EAAAjH,UAAA4D,UAAV,WAEC,IAAInE,KAAKoD,OACT,CACC,IAECpD,KAAKqD,QAAUrD,KAAKyH,WACpBzH,KAAKoD,OAASrB,EAAQgC,MAAME,UAE7B,MAAMxB,GAELzC,KAAKsD,OAASb,EACdzC,KAAKoD,OAASrB,EAAQgC,MAAMG,SAE7BlE,KAAKyH,SAAW3E,EAEjB,MAAO9C,MAAKqD,SAGHmE,EAAAjH,UAAA8D,SAAV,WAGC,MADArE,MAAKmE,YACEnE,KAAKsD,QAGbkE,EAAAjH,UAAA6B,KAAA,SACCO,EACAC,GAKA,MAHA5C,MAAKoE,kBAELpE,KAAKmE,YACEhB,EAAA5C,UAAM6B,KAAImB,KAAAvD,KAAC2C,EAAaC,IAGhC4E,EAAAjH,UAAAsC,SAAA,SACCF,EACAC,GAKA,MAHA5C,MAAKoE,kBAELpE,KAAKmE,YACEhB,EAAA5C,UAAMsC,SAAQU,KAAAvD,KAAC2C,EAAaC,IAOpC4E,EAAAjH,UAAAoB,QAAA,WAGC,MADA3B,MAAKmE,YACEnE,MAGRQ,OAAAmD,eAAI6D,EAAAjH,UAAA,cD7POqD,IC6PX,WAEC,OAAQ5D,KAAKyH,UD5PH5D,YAAY,EACZC,cAAc,IC6P1B0D,GA/EqClC,EAAxB1E,GAAA4G,aAAYA,CAoFzB,IAAAE,GAAA,SAAAvE,GAGC,QAAAuE,GAAoBC,GAGnB,GADAxE,EAAAI,KAAAvD,MAFmBA,KAAA2H,UAAAA,GAGfA,EAAW,KAAM,IAAIxG,GAAAyE,sBAAsB,WAC/C5F,MAAKsG,iBAAkB,EAoCzB,MA3CoCvG,WAAA2H,EAAAvE,GAUzBuE,EAAAnH,UAAAkD,WAAV,WAECN,EAAA5C,UAAMkD,WAAUF,KAAAvD,MAChBA,KAAK2H,UAAY7E,GAGV4E,EAAAnH,UAAAqH,QAAR,WAEC,GAAIf,GAAI7G,KAAK2H,SACVd,KAEF7G,KAAK2H,UAAY7E,EACjB9C,KAAKsG,iBAAkB,EACvBtG,KAAKgG,aAAaa,GAAG,KAIvBa,EAAAnH,UAAA6B,KAAA,SACCO,EACAC,GAGA,MADA5C,MAAK4H,UACEzE,EAAA5C,UAAM6B,KAAImB,KAAAvD,KAAC2C,EAAaC,IAIhC8E,EAAAnH,UAAAsC,SAAA,SACCF,EACAC,GAGA,MADA5C,MAAK4H,UACEzE,EAAA5C,UAAMsC,SAAQU,KAAAvD,KAAC2C,EAAaC,IAErC8E,GA3CoC3F,EAAvBnB,GAAA8G,YAAWA,CA6CxB,IAAOvB,IAAP,SAAOA,GAoCN,QAAAiB,GAA2BF,GAEtBA,IACDA,YAAanF,GAAS4C,EAAQyC,QAAQF,GACpCA,EAAEW,WArCR,GAAclD,IAAd,SAAcA,GAMb,QAAAmD,KAEC,MAAOC,KAASA,EAAO,GAAI3G,GAAA4G,WAAyB,GAAIC,IAGzD,QAAAA,KAEC,MAAO,IAAIlG,GAGZ,QAAA6B,KAEC,GAAIvD,GAAQyH,IAAUI,MAGtB,OAFA7H,GAAE8H,eAAgB,EAClB9H,EAAE+C,OAASrB,EAAQgC,MAAMC,QAClB3D,EAGR,QAAA+G,GAA2BF,GAEtBA,IACJA,EAAEW,UACFC,IAAUM,IAAIlB,IAxBf,GAAIa,EAYYpD,GAAAf,IAAGA,EAQHe,EAAAyC,QAAOA,GAxBVzC,EAAAwB,EAAAxB,UAAAwB,EAAAxB,aAiCEwB,EAAAiB,QAAOA,CAQvB,IAAchB,IAAd,SAAcA,GAKb,QAAA0B,KAEC,MAAOC,KAASA,EAAO,GAAI3G,GAAA4G,WAAmC,GAAIC,IAGnE,QAAAA,KAEC,OACCtF,YAAa,KACbC,WAAY,KACZuE,QAAS,MAIX,QAAAd,GACC1D,EACAC,EACAuE,GAGA,GAAID,GAAIY,IAAUI,MAIlB,OAHAhB,GAAEvE,YAAcA,EAChBuE,EAAEtE,WAAaA,EACfsE,EAAEC,QAAUA,EACLD,EAGR,QAAAE,GAA2BF,GAE1BA,EAAEvE,YAAc,KAChBuE,EAAEtE,WAAa,KACfsE,EAAEC,QAAU,KACZW,IAAUM,IAAIlB,GAlCf,GAAIa,EAgBY3B,GAAAC,KAAIA,EAaJD,EAAAgB,QAAOA,GAhCVhB,EAAAD,EAAAC,mBAAAD,EAAAC,uBA5CRD,IAAAA,MAyFP,IAAcpE,IAAd,SAAcA,GAuDb,QAAAsG,GACCC,GD/UU,ICgVV,GAAAC,MAAAxB,EAAA,EAAAA,EAAA5B,UAAA8B,OAAAF,IAAAwB,EAAAxB,EAAA,GAAA5B,UAAA4B,EAEA,KAAIuB,IAAUC,EAAKtB,OAAQ,KAAM,IAAI9F,GAAAyE,sBAAsB,WAC3D,IAAI4C,IAAYC,MAAMC,QAAQJ,GAASA,GAASA,IAAQK,OAAOJ,EAC/D,KAAIC,EAASvB,QAAUuB,EAASI,MAAM,SAAAvG,GAAG,OAACA,IAAI,MAAO,IAAI4B,GAAiBuE,EAI1E,KAAI,GADAK,GAAML,EAASvB,OACX6B,EAAI,EAAKD,EAAFC,EAAOA,IACtB,CACC,GAAIzI,GAAImI,EAASM,EACdzI,aAAaoE,KAAoB+D,EAASM,GAAKzI,EAAE0I,QAGrD,MAAOpE,GAAe,SAAChD,EAASY,GAE/B,GACIgD,KACJA,GAAO0B,OAAS4B,CA4ChB,KAAI,GA1CAG,GAAY,GAAI3H,GAAA4H,IAAIT,EAASU,IAAI,SAAC7G,EAAGyG,GAAI,MAAAA,MAEzCK,EAAU,WAEb5G,EAAS,KACTZ,EAAU,KACV6G,EAASvB,OAAS,EAClBuB,EAAW,KACXQ,EAAUnB,UACVmB,EAAY,MAGTI,EAAuB,WAE1B,GAAIvC,GAAIlF,CACLkF,KAAMmC,EAAUK,QAElBF,IACAtC,EAAEtB,KAIA+D,EAAY,SAACjH,EAAOyG,GAEpBnH,IAEF4D,EAAOuD,GAAKzG,EACZ2G,EAAUO,OAAOT,GACjBM,MAIEI,EAAW,SAAClH,GAEf,GAAIuE,GAAItE,CACLsE,KAEFsC,IACAtC,EAAEvE,KAIJmH,EAAA,SAAAX,GAEC,GAAIY,GAAIlB,EAASM,EACdY,GAAGA,EAAEtH,KAAK,SAAAC,GAAG,MAAAiH,GAAUjH,EAAGyG,IAAIU,GAC5BR,EAAUO,OAAOT,GACtBM,KALON,EAAI,EAAGE,GAAeH,EAAFC,EAAOA,IDrVlBW,EAAQX,KCoW3B,QAAAa,GACCrB,GD9VU,IC+VV,GAAAC,MAAAxB,EAAA,EAAAA,EAAA5B,UAAA8B,OAAAF,IAAAwB,EAAAxB,EAAA,GAAA5B,UAAA4B,EAEA,IAAIyB,GAAWF,IAAUG,MAAMC,QAAQJ,GAASA,GAASA,IAAQK,OAAOJ,EACxE,KAAIC,IAAaA,EAASvB,UAAYuB,EAAWA,EAASoB,OAAO,SAAAvH,GAAG,MAAG,OAAHA,KAAU4E,OAC7E,KAAM,IAAI/F,GAAA2E,kBAAkB,uBAE7B,IAAIgD,GAAML,EAASvB,MAGnB,IAAQ,GAAL4B,EAAQ,MAAO7G,GAAKwG,EAAS,IAAI9D,OAGpC,KAAI,GAAIoE,GAAI,EAAKD,EAAFC,EAAOA,IACtB,CACC,GAAIzI,GAAQmI,EAASM,EAErB,IADGzI,YAAaoE,KAAoBpE,EAAIA,EAAE0I,QACvC1I,YAAamH,IAGf,GAAGnH,EAAEwJ,WAAY,MAAOxJ,GAAEqE,YAEtB,IAAGrE,YAAaiF,IAAYjF,YAAakE,IAAelE,EAAEyJ,UAE9D,MAAOzJ,GAAEqE,QAIX,MAAOC,GAAQ,SAAChD,EAASY,GAsBxB,IAAa,GApBT4G,GAAU,WAEb5G,EAAS,KACTZ,EAAU,KACV6G,EAASvB,OAAS,EAClBuB,EAAW,MAGRuB,EAAY,SAAClD,EAAiBxE,GAE9BwE,IAEFsC,IACAtC,EAAExE,KAIAiH,EAAY,SAACjH,GAAS,MAAA0H,GAAUpI,EAASU,IACzCmH,EAAW,SAAClH,GAAU,MAAAyH,GAAUxH,EAAQD,IAE/ByE,EAAA,EAAAiD,EAAAxB,EAAAzB,EAAAiD,EAAA/C,OAAAF,IAAS,CAAlB,GAAIkD,GAACD,EAAAjD,EAER,KAAIpF,EAAS,KACbsI,GAAE7H,KAAKkH,EAAWE,MAiBrB,QAAA7H,GAAwBJ,GAGvB,MAAOD,GAAUC,GAASS,EAAKT,GAAS,GAAI0C,GAAU1C,GAQvD,QAAAgB,GAA0BoE,GAEzB,MAAO,IAAIzC,GAAYyC,GAgCxB,QAAA3E,GAAwBkI,GAEvB,IAAIA,EAAQ,KAAM,IAAI/I,GAAAyE,sBAAsB3C,EAC5C,OAAOiH,aAAkBnI,GAAU/B,KAAO,GAAIyF,GAAeyE,GAQ9D,QAAAC,GAAsC/H,GAErC,IAAIA,EAAM,KAAM,IAAIjB,GAAAyE,sBAAsBnE,EAC1C,OAAO,IAAIgE,IAAgBrD,KAAMA,IAOlC,QAAAuC,GAA2B/C,GAE1B,GAAIvB,GAAI8F,EAAMxB,QAAQf,KAEtB,OADGhC,IAAUvB,EAAE2F,aAAapE,GACrBvB,GA3QR,SAAY0D,GACXA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,SAAA,IAAA,YAHWhC,EAAAgC,QAAAhC,EAAAgC,UAAZ,IAAYA,GAAAhC,EAAAgC,KAKZvD,QAAO4J,OAAOrG,GA0CEhC,EAAAsG,IAAGA,EA+EHtG,EAAA4H,KAAIA,EAuEJ5H,EAAAJ,QAAOA,EAWPI,EAAAQ,OAAMA,CAMtB,IAAc8H,IAAd,SAAcA,GAMb,QAAA1I,GAA2BsG,GAE1B,MAAO,IAAIT,GAAgBS,GAS5B,QAAAtD,GAA2B/C,GAE1B,MAAO,IAAI8F,GAAY9F,GAbRyI,EAAA1I,QAAOA,EAWP0I,EAAA1F,QAAOA,GAjBV0F,EAAAtI,EAAAsI,OAAAtI,EAAAsI,UA4BEtI,EAAAC,KAAIA,EAWJD,EAAAoI,WAAUA,EAUVpI,EAAA4C,QAAOA,GA/QV5C,EAAAnB,EAAAmB,UAAAnB,EAAAmB","file":"System/Promises/Promise.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT\n * Although most of the following code is written from scratch, it is\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Types\", \"../Tasks/deferImmediate\", \"../Tasks/defer\", \"../Disposable/DisposableBase\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentException\", \"../Exceptions/ArgumentNullException\", \"../Disposable/ObjectPool\", \"../Collections/Set\"], function (require, exports, Types_1, deferImmediate_1, defer_1, DisposableBase_1, InvalidOperationException_1, ArgumentException_1, ArgumentNullException_1, ObjectPool_1, Set_1) {\n    \"use strict\";\n    var VOID0 = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\n    function isPromise(value) {\n        return Types_1.default.hasMemberOfType(value, THEN, Types_1.default.FUNCTION);\n    }\n    function resolve(value, resolver, promiseFactory) {\n        var nextValue = resolver\n            ? resolver(value)\n            : value;\n        return nextValue && isPromise(nextValue)\n            ? Promise.wrap(nextValue)\n            : promiseFactory(nextValue);\n    }\n    function pass(source, dest) {\n        return function () {\n            source.then(function (v) {\n                dest.resolve(v);\n                return dest;\n            }, function (e) {\n                dest.reject(e);\n                return dest;\n            });\n        };\n    }\n    function handleResolution(p, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (p)\n                p.resolve(v);\n        }\n        catch (ex) {\n            p.reject(ex);\n        }\n    }\n    function handleDispatch(p, onFulfilled, onRejected) {\n        if (p instanceof Promise)\n            p.thenThis(onFulfilled, onRejected);\n        else\n            p.then(onFulfilled, onRejected);\n    }\n    var PromiseState = (function (_super) {\n        __extends(PromiseState, _super);\n        function PromiseState(_state, _result, _error) {\n            _super.call(this);\n            this._state = _state;\n            this._result = _result;\n            this._error = _error;\n            this._disposableObjectName = PROMISE_STATE;\n        }\n        PromiseState.prototype._onDispose = function () {\n            this._state = VOID0;\n            this._result = VOID0;\n            this._error = VOID0;\n        };\n        PromiseState.prototype.getState = function () {\n            return this._state;\n        };\n        Object.defineProperty(PromiseState.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isPending\", {\n            get: function () {\n                return this.getState() === Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isSettled\", {\n            get: function () {\n                return this.getState() != Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isFulfilled\", {\n            get: function () {\n                return this.getState() === Promise.State.Fulfilled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isRejected\", {\n            get: function () {\n                return this.getState() === Promise.State.Rejected;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getResult = function () {\n            return this._result;\n        };\n        Object.defineProperty(PromiseState.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getError = function () {\n            return this._error;\n        };\n        Object.defineProperty(PromiseState.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getError();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return PromiseState;\n    }(DisposableBase_1.DisposableBase));\n    exports.PromiseState = PromiseState;\n    var PromiseBase = (function (_super) {\n        __extends(PromiseBase, _super);\n        function PromiseBase() {\n            _super.call(this, Promise.State.Pending);\n            this._disposableObjectName = PROMISE;\n        }\n        PromiseBase.prototype.deferAll = function () {\n            this.throwIfDisposed();\n            return new SubsequentDeferred(this);\n        };\n        PromiseBase.prototype.defer = function () {\n            this.throwIfDisposed();\n            var p = Promise.pending();\n            deferImmediate_1.deferImmediate(pass(this, p));\n            return p;\n        };\n        PromiseBase.prototype.delay = function (milliseconds) {\n            this.throwIfDisposed();\n            var p = Promise.pending();\n            defer_1.defer(pass(this, p), milliseconds);\n            return p;\n        };\n        PromiseBase.prototype['catch'] = function (onRejected) {\n            this.throwIfDisposed();\n            return this.then(VOID0, onRejected);\n        };\n        PromiseBase.prototype['finally'] = function (fin) {\n            this.throwIfDisposed();\n            return this.then(fin, fin);\n        };\n        PromiseBase.prototype.finallyThis = function (fin) {\n            this.thenThis(fin, fin);\n            return this;\n        };\n        return PromiseBase;\n    }(PromiseState));\n    exports.PromiseBase = PromiseBase;\n    var Resolvable = (function (_super) {\n        __extends(Resolvable, _super);\n        function Resolvable() {\n            _super.apply(this, arguments);\n        }\n        Resolvable.prototype.then = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            try {\n                switch (this.state) {\n                    case Promise.State.Fulfilled:\n                        return onFulfilled\n                            ? resolve(this._result, onFulfilled, Promise.resolve)\n                            : this;\n                    case Promise.State.Rejected:\n                        return onRejected\n                            ? resolve(this._error, onRejected, Promise.resolve)\n                            : this;\n                }\n            }\n            catch (ex) {\n                return new Rejected(ex);\n            }\n            throw new Error(\"Invalid state for a resolved promise.\");\n        };\n        Resolvable.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            switch (this.state) {\n                case Promise.State.Fulfilled:\n                    if (onFulfilled)\n                        onFulfilled(this._result);\n                    break;\n                case Promise.State.Rejected:\n                    if (onRejected)\n                        onRejected(this._error);\n                    break;\n            }\n            return this;\n        };\n        return Resolvable;\n    }(PromiseBase));\n    exports.Resolvable = Resolvable;\n    var Resolved = (function (_super) {\n        __extends(Resolved, _super);\n        function Resolved(state, result, error) {\n            _super.call(this);\n            this._result = result;\n            this._error = error;\n            this._state = state;\n        }\n        return Resolved;\n    }(Resolvable));\n    exports.Resolved = Resolved;\n    var Fulfilled = (function (_super) {\n        __extends(Fulfilled, _super);\n        function Fulfilled(value) {\n            _super.call(this, Promise.State.Fulfilled, value);\n        }\n        return Fulfilled;\n    }(Resolved));\n    var Rejected = (function (_super) {\n        __extends(Rejected, _super);\n        function Rejected(error) {\n            _super.call(this, Promise.State.Rejected, VOID0, error);\n        }\n        return Rejected;\n    }(Resolved));\n    var PromiseWrapper = (function (_super) {\n        __extends(PromiseWrapper, _super);\n        function PromiseWrapper(_target) {\n            var _this = this;\n            _super.call(this);\n            this._target = _target;\n            if (!_target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            if (!isPromise(_target))\n                throw new ArgumentException_1.ArgumentException(TARGET, \"Must be a promise-like object.\");\n            _target.then(function (v) {\n                _this._state = Promise.State.Fulfilled;\n                _this._result = v;\n                _this._error = VOID0;\n                _this._target = VOID0;\n            }, function (e) {\n                _this._state = Promise.State.Rejected;\n                _this._error = e;\n                _this._target = VOID0;\n            });\n        }\n        PromiseWrapper.prototype.then = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.then.call(this, onFulfilled, onRejected);\n            var p = Promise.pending();\n            handleDispatch(t, function (result) { return handleResolution(p, result, onFulfilled); }, function (error) { return onRejected ? handleResolution(p, error, onRejected) : p.reject(error); });\n            return p;\n        };\n        PromiseWrapper.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            handleDispatch(t, onFulfilled, onRejected);\n            return this;\n        };\n        PromiseWrapper.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._target = VOID0;\n        };\n        return PromiseWrapper;\n    }(Resolvable));\n    var Promise = (function (_super) {\n        __extends(Promise, _super);\n        function Promise(resolver, resolveImmediate) {\n            if (resolveImmediate === void 0) { resolveImmediate = false; }\n            _super.call(this);\n            if (resolver)\n                this.resolveUsing(resolver, !resolveImmediate);\n        }\n        Promise.prototype.then = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.then.call(this, onFulfilled, onRejected);\n            var p = new Promise();\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\n            return p;\n        };\n        Promise.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\n            return this;\n        };\n        Promise.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._resolvedCalled = VOID0;\n        };\n        Promise.prototype.resolveUsing = function (resolver, deferResolution, throwIfSettled) {\n            var _this = this;\n            if (deferResolution === void 0) { deferResolution = false; }\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            if (!resolver)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n            if (this._resolvedCalled)\n                throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n            if (this.state)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\n            this._resolvedCalled = true;\n            var rejectHandler = function (reason) {\n                _this._resolvedCalled = false;\n                _this.reject(reason);\n            };\n            var fulfillHandler = function (v) {\n                _this._resolvedCalled = false;\n                _this.resolve(v);\n            };\n            var r = function () { return resolver(function (v) {\n                if (v == _this)\n                    throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n                if (isPromise(v))\n                    handleDispatch(v, fulfillHandler, rejectHandler);\n                else\n                    fulfillHandler(v);\n            }, rejectHandler); };\n            if (deferResolution)\n                deferImmediate_1.deferImmediate(r);\n            else\n                r();\n        };\n        Promise.prototype.resolve = function (result, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (result == this)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Fulfilled && this._result === result)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._state = Promise.State.Fulfilled;\n            this._result = result;\n            this._error = VOID0;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = VOID0;\n                for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {\n                    var c = o_1[_i];\n                    var onFulfilled = c.onFulfilled, promise = c.promise, p = promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    handleResolution(p, result, onFulfilled);\n                }\n                o.length = 0;\n            }\n        };\n        Promise.prototype.reject = function (error, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Rejected && this._error === error)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._state = Promise.State.Rejected;\n            this._error = error;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = null;\n                for (var _i = 0, o_2 = o; _i < o_2.length; _i++) {\n                    var c = o_2[_i];\n                    var onRejected = c.onRejected, promise = c.promise, p = promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    if (onRejected)\n                        handleResolution(p, error, onRejected);\n                    else\n                        p.reject(error);\n                }\n                o.length = 0;\n            }\n        };\n        return Promise;\n    }(Resolvable));\n    exports.Promise = Promise;\n    var SubsequentDeferred = (function (_super) {\n        __extends(SubsequentDeferred, _super);\n        function SubsequentDeferred(_parent) {\n            _super.call(this);\n            this._parent = _parent;\n            if (!_parent || !(_parent instanceof PromiseBase))\n                throw new ArgumentException_1.ArgumentException(TARGET, \"Must be of type Promise.\");\n        }\n        SubsequentDeferred.prototype._onDisposed = function () {\n            _super.prototype._onDispose.call(this);\n            this._parent = VOID0;\n        };\n        SubsequentDeferred.prototype.getState = function () {\n            return this._parent.state;\n        };\n        SubsequentDeferred.prototype.getResult = function () {\n            return this._parent.result;\n        };\n        SubsequentDeferred.prototype.getError = function () {\n            return this._parent.error;\n        };\n        SubsequentDeferred.prototype.then = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var d = this._parent.defer();\n            var p = d.then(onFulfilled, onRejected);\n            d.finally(function () { return pools.recycle(d); });\n            return p;\n        };\n        SubsequentDeferred.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var d = this._parent.defer();\n            d.thenThis(onFulfilled, onRejected);\n            d.finally(function () { return pools.recycle(d); });\n            return this;\n        };\n        SubsequentDeferred.prototype.defer = function () {\n            this.throwIfDisposed();\n            return this;\n        };\n        SubsequentDeferred.prototype.deferAll = function () {\n            this.throwIfDisposed();\n            return this;\n        };\n        Object.defineProperty(SubsequentDeferred.prototype, \"parent\", {\n            get: function () {\n                return this._parent;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return SubsequentDeferred;\n    }(PromiseBase));\n    var LazyResolved = (function (_super) {\n        __extends(LazyResolved, _super);\n        function LazyResolved(_factory) {\n            _super.call(this, Promise.State.Pending, VOID0);\n            this._factory = _factory;\n            if (!_factory)\n                throw new ArgumentNullException_1.ArgumentNullException(\"factory\");\n        }\n        LazyResolved.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._factory = VOID0;\n        };\n        LazyResolved.prototype.getState = function () {\n            this.getResult();\n            return this._state;\n        };\n        LazyResolved.prototype.getResult = function () {\n            if (!this._state) {\n                try {\n                    this._result = this._factory();\n                    this._state = Promise.State.Fulfilled;\n                }\n                catch (ex) {\n                    this._error = ex;\n                    this._state = Promise.State.Rejected;\n                }\n                this._factory = VOID0;\n            }\n            return this._result;\n        };\n        LazyResolved.prototype.getError = function () {\n            this.getResult();\n            return this._error;\n        };\n        LazyResolved.prototype.then = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            this.getResult();\n            return _super.prototype.then.call(this, onFulfilled, onRejected);\n        };\n        LazyResolved.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            this.getResult();\n            return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n        };\n        LazyResolved.prototype.resolve = function () {\n            this.getResult();\n            return this;\n        };\n        Object.defineProperty(LazyResolved.prototype, \"isResolved\", {\n            get: function () {\n                return !this._factory;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LazyResolved;\n    }(Resolved));\n    exports.LazyResolved = LazyResolved;\n    var LazyPromise = (function (_super) {\n        __extends(LazyPromise, _super);\n        function LazyPromise(_resolver) {\n            _super.call(this);\n            this._resolver = _resolver;\n            if (!_resolver)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n            this._resolvedCalled = true;\n        }\n        LazyPromise.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._resolver = VOID0;\n        };\n        LazyPromise.prototype._onThen = function () {\n            var r = this._resolver;\n            if (r) {\n                this._resolver = VOID0;\n                this._resolvedCalled = false;\n                this.resolveUsing(r, true);\n            }\n        };\n        LazyPromise.prototype.then = function (onFulfilled, onRejected) {\n            this._onThen();\n            return _super.prototype.then.call(this, onFulfilled, onRejected);\n        };\n        LazyPromise.prototype.thenThis = function (onFulfilled, onRejected) {\n            this._onThen();\n            return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n        };\n        return LazyPromise;\n    }(Promise));\n    exports.LazyPromise = LazyPromise;\n    var pools;\n    (function (pools) {\n        var pending;\n        (function (pending) {\n            var pool;\n            function getPool() {\n                return pool || (pool = new ObjectPool_1.ObjectPool(40, factory));\n            }\n            function factory() {\n                return new Promise();\n            }\n            function get() {\n                var p = getPool().take();\n                p.__wasDisposed = false;\n                p._state = Promise.State.Pending;\n                return p;\n            }\n            pending.get = get;\n            function recycle(c) {\n                if (!c)\n                    return;\n                c.dispose();\n                getPool().add(c);\n            }\n            pending.recycle = recycle;\n        })(pending = pools.pending || (pools.pending = {}));\n        function recycle(c) {\n            if (!c)\n                return;\n            if (c instanceof Promise)\n                pending.recycle(c);\n            else\n                c.dispose();\n        }\n        pools.recycle = recycle;\n        var PromiseCallbacks;\n        (function (PromiseCallbacks) {\n            var pool;\n            function getPool() {\n                return pool || (pool = new ObjectPool_1.ObjectPool(40, factory));\n            }\n            function factory() {\n                return {\n                    onFulfilled: null,\n                    onRejected: null,\n                    promise: null\n                };\n            }\n            function init(onFulfilled, onRejected, promise) {\n                var c = getPool().take();\n                c.onFulfilled = onFulfilled;\n                c.onRejected = onRejected;\n                c.promise = promise;\n                return c;\n            }\n            PromiseCallbacks.init = init;\n            function recycle(c) {\n                c.onFulfilled = null;\n                c.onRejected = null;\n                c.promise = null;\n                getPool().add(c);\n            }\n            PromiseCallbacks.recycle = recycle;\n        })(PromiseCallbacks = pools.PromiseCallbacks || (pools.PromiseCallbacks = {}));\n    })(pools || (pools = {}));\n    var Promise;\n    (function (Promise) {\n        (function (State) {\n            State[State[\"Pending\"] = 0] = \"Pending\";\n            State[State[\"Fulfilled\"] = 1] = \"Fulfilled\";\n            State[State[\"Rejected\"] = -1] = \"Rejected\";\n        })(Promise.State || (Promise.State = {}));\n        var State = Promise.State;\n        Object.freeze(State);\n        function all(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new Fulfilled(promises);\n            var len = promises.length;\n            for (var i = 0; i < len; i++) {\n                var p = promises[i];\n                if (p instanceof SubsequentDeferred)\n                    promises[i] = p.parent;\n            }\n            return pending(function (resolve, reject) {\n                var checkedAll = false;\n                var result = [];\n                result.length = len;\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; }));\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                    remaining.dispose();\n                    remaining = null;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(result);\n                    }\n                };\n                var onFulfill = function (v, i) {\n                    if (resolve) {\n                        result[i] = v;\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var onReject = function (e) {\n                    var r = reject;\n                    if (r) {\n                        cleanup();\n                        r(e);\n                    }\n                };\n                var _loop_1 = function(i) {\n                    var p_1 = promises[i];\n                    if (p_1)\n                        p_1.then(function (v) { return onFulfill(v, i); }, onReject);\n                    else\n                        remaining.remove(i);\n                    checkIfShouldResolve();\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_1(i);\n                }\n            });\n        }\n        Promise.all = all;\n        function race(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            var promises = first && (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises || !promises.length || !(promises = promises.filter(function (v) { return v != null; })).length)\n                throw new ArgumentException_1.ArgumentException(\"Nothing to wait for.\");\n            var len = promises.length;\n            if (len == 1)\n                return wrap(promises[0]).defer();\n            for (var i = 0; i < len; i++) {\n                var p = promises[i];\n                if (p instanceof SubsequentDeferred)\n                    p = p.parent;\n                if (p instanceof LazyResolved) {\n                    if (p.isResolved)\n                        return p.defer();\n                }\n                else if (p instanceof Resolved || p instanceof PromiseBase && p.isSettled) {\n                    return p.defer();\n                }\n            }\n            return pending(function (resolve, reject) {\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                };\n                var onResolve = function (r, v) {\n                    if (r) {\n                        cleanup();\n                        r(v);\n                    }\n                };\n                var onFulfill = function (v) { return onResolve(resolve, v); };\n                var onReject = function (e) { return onResolve(reject, e); };\n                for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n                    var p_2 = promises_1[_i];\n                    if (!resolve)\n                        break;\n                    p_2.then(onFulfill, onReject);\n                }\n            });\n        }\n        Promise.race = race;\n        function resolve(value) {\n            return isPromise(value) ? wrap(value) : new Fulfilled(value);\n        }\n        Promise.resolve = resolve;\n        function reject(reason) {\n            return new Rejected(reason);\n        }\n        Promise.reject = reject;\n        var lazy;\n        (function (lazy) {\n            function resolve(factory) {\n                return new LazyResolved(factory);\n            }\n            lazy.resolve = resolve;\n            function pending(resolver) {\n                return new LazyPromise(resolver);\n            }\n            lazy.pending = pending;\n        })(lazy = Promise.lazy || (Promise.lazy = {}));\n        function wrap(target) {\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            return target instanceof Promise ? this : new PromiseWrapper(target);\n        }\n        Promise.wrap = wrap;\n        function createFrom(then) {\n            if (!then)\n                throw new ArgumentNullException_1.ArgumentNullException(THEN);\n            return new PromiseWrapper({ then: then });\n        }\n        Promise.createFrom = createFrom;\n        function pending(resolver) {\n            var p = pools.pending.get();\n            if (resolver)\n                p.resolveUsing(resolver);\n            return p;\n        }\n        Promise.pending = pending;\n    })(Promise = exports.Promise || (exports.Promise = {}));\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n\r\n/*\r\n * Note: The Promise herein does NOT defer by default.\r\n * If you require a promise to defer its result then use the .defer() or .delay(ms) methods.\r\n * The API attempts to follow ES6 style promises.\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {Closure, Func} from \"../FunctionTypes\";\r\nimport {deferImmediate} from \"../Tasks/deferImmediate\";\r\nimport {defer} from \"../Tasks/defer\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\n\r\n\r\nconst VOID0:any = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:Promise.Resolution<T>, resolver:(v:Promise.Resolution<T>)=>any,\r\n\tpromiseFactory:(v:any)=>PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? Promise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction pass<T>(source:PromiseBase<T>, dest:Promise<T>):Closure\r\n{\r\n\treturn ()=>\r\n\t{\r\n\t\tsource.then(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tdest.resolve(v);\r\n\t\t\t\treturn dest;\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tdest.reject(e);\r\n\t\t\t\treturn dest;\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:Promise<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p) p.resolve(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ p.reject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):void\r\n{\r\n\tif(p instanceof Promise)\r\n\t\tp.thenThis(onFulfilled, onRejected);\r\n\telse\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nexport class PromiseState<T>\r\nextends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:Promise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\nextends PromiseState<T> implements PromiseLike<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(Promise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * For simplicity and performance this can happen synchronously unless you call .defer() before calling .then().\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract then<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>;\r\n\r\n\r\n\t/**\r\n\t * Same as then but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * Errors are not trapped.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenThis<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<T>;\r\n\r\n\t/**\r\n\t * Ensures all subsequent then requests are resolved asynchronously.\r\n\t * @returns A promise that defers all subsequent then requests..\r\n\t */\r\n\tdeferAll():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new SubsequentDeferred(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Ensures any immediately following then requests will occur on next cycle or later.\r\n\t * @returns A promise that yields to the current execution and executes after.\r\n\t */\r\n\tdefer():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar p = Promise.pending<T>();\r\n\t\tdeferImmediate(pass(this, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tdelay(milliseconds?:number):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar p = Promise.pending<T>();\r\n\t\tdefer(pass(this, p), milliseconds);\r\n\t\treturn p;\r\n\t}\r\n\r\n\t'catch'<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t'finally'<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\tfinallyThis(fin:()=>void):PromiseBase<T>\r\n\t{\r\n\t\tthis.thenThis(fin, fin);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T> extends PromiseBase<T>\r\n{\r\n\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\tthenThis<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T> extends Resolvable<T>\r\n{\r\n\tconstructor(state:Promise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nclass Fulfilled<T> extends Resolved<T>\r\n{\r\n\tconstructor(value?:T)\r\n\t{\r\n\t\tsuper(Promise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nclass Rejected<T> extends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(Promise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T> extends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.then(onFulfilled, onRejected);\r\n\r\n\t\tvar p = Promise.pending<TResult>();\r\n\t\thandleDispatch(t,\r\n\t\t\tresult=>handleResolution(p, result, onFulfilled),\r\n\t\t\terror=>onRejected ? handleResolution(p, error, onRejected) : p.reject(error));\r\n\t\treturn p;\r\n\t}\r\n\r\n\r\n\tthenThis<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenThis(onFulfilled, onRejected);\r\n\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class Promise<T> extends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[];\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:Promise.Executor<T>,\r\n\t\tresolveImmediate:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, !resolveImmediate);\r\n\t}\r\n\r\n\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.then(onFulfilled, onRejected);\r\n\r\n\t\tvar p = new Promise<TResult>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthenThis<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenThis(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tdeferResolution:boolean = false,\r\n\t\tthrowIfSettled:boolean = false)\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tvar rejectHandler = (reason:any)=>\r\n\t\t{\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.reject(reason);\r\n\t\t};\r\n\r\n\t\tvar fulfillHandler = (v:any)=>\r\n\t\t{\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.resolve(v);\r\n\t\t};\r\n\r\n\t\tvar r = ()=>resolver(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tif(v==this) throw new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\t\t\t\tif(isPromise(v))\r\n\t\t\t\t\thandleDispatch(v, fulfillHandler, rejectHandler);\r\n\t\t\t\telse\r\n\t\t\t\t\tfulfillHandler(v);\r\n\t\t\t},\r\n\t\t\trejectHandler);\r\n\r\n\t\tif(deferResolution) deferImmediate(r);\r\n\t\telse r();\r\n\t}\r\n\r\n\tresolve(result?:T, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._state = Promise.State.Fulfilled;\r\n\r\n\t\tthis._result = result;\r\n\t\tthis._error = VOID0;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = VOID0;\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onFulfilled, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\thandleResolution(p, result, onFulfilled);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._state = Promise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected) handleResolution(p, error, onRejected);\r\n\t\t\t\telse p.reject(error);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * This promise class ensures that all subsequent then calls resolve in a deferred/async manner.\r\n * This is not intended as a promise generator.  Use Pending for deferring results.\r\n */\r\nclass SubsequentDeferred<T> extends PromiseBase<T>\r\n{\r\n\tconstructor(private _parent:PromiseBase<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_parent || !(_parent instanceof PromiseBase))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be of type Promise.\");\r\n\t}\r\n\r\n\tprotected _onDisposed():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._parent = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._parent.state;\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._parent.result;\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._parent.error;\r\n\t}\r\n\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar d = this._parent.defer();\r\n\t\tvar p = d.then(onFulfilled, onRejected);\r\n\t\t// Since there is only 1 'then' for the deferred promise, cleanup immediately after.\r\n\t\td.finally(()=>pools.recycle(d));\r\n\t\treturn p;\r\n\t}\r\n\r\n\r\n\tthenThis<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar d = this._parent.defer();\r\n\t\td.thenThis(onFulfilled, onRejected);\r\n\t\t// Since there is only 1 'then' for the deferred promise, cleanup immediately after.\r\n\t\td.finally(()=>pools.recycle(d));\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdefer():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdeferAll():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget parent():PromiseBase<T>\r\n\t{\r\n\t\treturn this._parent;\r\n\t}\r\n}\r\n\r\n/**\r\n * This promise class only resolves the provided factory if values are requested or state is queried.\r\n * It is considered resolved since the resolution will be generated synchronously.\r\n */\r\nexport class LazyResolved<T> extends Resolved<T>\r\n{\r\n\tconstructor(private _factory:Func<T>)\r\n\t{\r\n\t\tsuper(Promise.State.Pending, VOID0);\r\n\t\tif(!_factory) throw new ArgumentNullException(\"factory\");\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._factory = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\tthis.getResult();\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\tif(!this._state)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tthis._result = this._factory();\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tthis._error = ex;\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t}\r\n\t\t\tthis._factory = VOID0;\r\n\t\t}\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\tthis.getResult();\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.getResult();\r\n\t\treturn super.then(onFulfilled, onRejected);\r\n\t}\r\n\r\n\tthenThis<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.getResult();\r\n\t\treturn super.thenThis(onFulfilled, onRejected);\r\n\t}\r\n\r\n\t/**\r\n\t * This allows for synchronously triggering the factory ahead of time since calling .defer() shouldn't trigger it.\r\n\t * @returns {LazyResolved}\r\n\t */\r\n\tresolve():PromiseBase<T>\r\n\t{\r\n\t\tthis.getResult();\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget isResolved():boolean\r\n\t{\r\n\t\treturn !this._factory;\r\n\t}\r\n}\r\n\r\n/**\r\n * A promise that waits for the first then to trigger the resolver.\r\n */\r\nexport class LazyPromise<T> extends Promise<T>\r\n{\r\n\r\n\tconstructor(private _resolver:Promise.Executor<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_resolver) throw new ArgumentNullException(\"resolver\");\r\n\t\tthis._resolvedCalled = true;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolver = VOID0;\r\n\t}\r\n\r\n\tprivate _onThen():void\r\n\t{\r\n\t\tvar r = this._resolver;\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\tthis._resolver = VOID0;\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.resolveUsing(r, true);\r\n\t\t}\r\n\t}\r\n\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis._onThen();\r\n\t\treturn super.then(onFulfilled, onRejected);\r\n\t}\r\n\r\n\r\n\tthenThis<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<T>\r\n\t{\r\n\t\tthis._onThen();\r\n\t\treturn super.thenThis(onFulfilled, onRejected);\r\n\t}\r\n}\r\n\r\nmodule pools\r\n{\r\n\r\n\texport module pending\r\n\t{\r\n\r\n\r\n\t\tvar pool:ObjectPool<Promise<any>>;\r\n\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory));\r\n\t\t}\r\n\r\n\t\tfunction factory():Promise<any>\r\n\t\t{\r\n\t\t\treturn new Promise();\r\n\t\t}\r\n\r\n\t\texport function get():Promise<any>\r\n\t\t{\r\n\t\t\tvar p:any = getPool().take();\r\n\t\t\tp.__wasDisposed = false;\r\n\t\t\tp._state = Promise.State.Pending;\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:Promise<T>):void\r\n\t\t{\r\n\t\t\tif(!c) return;\r\n\t\t\tc.dispose();\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport function recycle<T>(c:PromiseBase<T>):void\r\n\t{\r\n\t\tif(!c) return;\r\n\t\tif(c instanceof Promise) pending.recycle(c);\r\n\t\telse c.dispose();\r\n\t}\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tvar pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool || (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: null,\r\n\t\t\t\tonRejected: null,\r\n\t\t\t\tpromise: null\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\t\tonRejected?:Promise.Reject<any>,\r\n\t\t\tpromise?:PromiseLike<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tvar c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled;\r\n\t\t\tc.onRejected = onRejected;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tc.onFulfilled = null;\r\n\t\t\tc.onRejected = null;\r\n\t\t\tc.promise = null;\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module Promise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending   = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected  = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = PromiseLike<TResult>|TResult|void;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(err?:any):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Then<T,TResult>\r\n\t{\r\n\t\t(\r\n\t\t\tonFulfilled:Fulfill<T,TResult>,\r\n\t\t\tonRejected?:Reject<TResult>):PromiseBase<TResult>\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\t// /**\r\n\t//  * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t//  * or rejected.\r\n\t//  * @param values An array of Promises.\r\n\t//  * @returns A new Promise.\r\n\t//  */\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\tvar len = promises.length;\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar p = promises[i];\r\n\t\t\tif(p instanceof SubsequentDeferred) promises[i] = p.parent;\r\n\t\t}\r\n\r\n\t\treturn pending<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any)=>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise for the first of an array of promises to become settled.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tvar promises = first && (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v=>v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tvar len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]).defer();\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar p:any = promises[i];\r\n\t\t\tif(p instanceof SubsequentDeferred) p = p.parent;\r\n\t\t\tif(p instanceof LazyResolved)\r\n\t\t\t{\r\n\t\t\t\t// If a a LazyResolved has resolved, then it wins otherwise let it defer and not (potentially) block.\r\n\t\t\t\tif(p.isResolved) return p.defer();\r\n\t\t\t}\r\n\t\t\telse if(p instanceof Resolved || p instanceof PromiseBase && p.isSettled)\r\n\t\t\t{\r\n\t\t\t\treturn p.defer();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pending((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any)=>void, v:any)=>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any)=> onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any)=> onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\r\n\texport module lazy\r\n\t{\r\n\t\t/**\r\n\t\t * Provides a promise that will be resolved immediately at the first 'then' request.\r\n\t\t * @param factory\r\n\t\t */\r\n\t\texport function resolve<T>(factory:Func<T>):LazyResolved<T>\r\n\t\t{\r\n\t\t\treturn new LazyResolved<T>(factory);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Provides a promise that will trigger the resolver at the first 'then' request.\r\n\t\t * @param resolver\r\n\t\t * @returns {Promise<T>}\r\n\t\t */\r\n\t\texport function pending<T>(resolver:Promise.Executor<T>):LazyPromise<T>\r\n\t\t{\r\n\t\t\treturn new LazyPromise(resolver);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn target instanceof Promise ? this : new PromiseWrapper(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T,TResult>(then:Then<T,TResult>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper({then: then});\r\n\t}\r\n\r\n\t/**\r\n\t * Provides a promise that can be resolved later.\r\n\t * @returns {Promise<T>}\r\n\t */\r\n\texport function pending<T>(resolver?:Promise.Executor<T>):Promise<T>\r\n\t{\r\n\t\tvar p = pools.pending.get();\r\n\t\tif(resolver) p.resolveUsing(resolver);\r\n\t\treturn p;\r\n\t}\r\n\r\n\t//export function all()\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled:Promise.Fulfill<T,any>;\r\n\tonRejected:Promise.Reject<any>;\r\n\tpromise?:PromiseLike<any>;\r\n}\r\n"]}