{"version":3,"sources":["System/Promises/Promise.js","System/Promises/Promise.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Types_1","deferImmediate_1","DisposableBase_1","InvalidOperationException_1","ArgumentException_1","ArgumentNullException_1","ObjectPool_1","Set_1","defer_1","isPromise","value","hasMemberOfType","THEN","FUNCTION","resolve","resolver","promiseFactory","nextValue","Promise","wrap","pass","source","dest","thenThis","v","e","reject","passDelayed","ms","defer","handleResolution","ex","handleResolutionMethods","targetFulfill","targetReject","handleDispatch","onFulfilled","onRejected","PromiseBase","then","VOID0","PROMISE","PROMISE_STATE","TARGET","PromiseState","_super","_state","_result","_error","call","_disposableObjectName","_onDispose","getState","defineProperty","get","enumerable","configurable","State","Pending","Fulfilled","Rejected","getResult","throwIfDisposed","getError","DisposableBase","_this","pending","result","error","delayFromNow","milliseconds","delayAfterResolve","fin","finallyThis","f","deferImmediate","Resolvable","apply","arguments","thenSynchronous","state","Error","Resolved","PromiseWrapper","_target","ArgumentNullException","ArgumentException","t","resolveUsing","_waiting","push","pools","PromiseCallbacks","init","_resolvedCalled","throwIfSettled","InvalidOperationException","rejectHandler","reason","fulfillHandler","o","_i","o_1","length","c","promise","recycle","o_2","LazyPromise","_resolver","_onThen","r","getPool","pool","ObjectPool","factory","take","add","all","first","rest","promises","Array","isArray","concat","every","len","remaining","Set","map","i","cleanup","dispose","checkIfShouldResolve","count","onFulfill","remove","onReject","_loop_1","race","filter","isSettled","onResolve","promises_1","p_1","lazy","target","createFrom","freeze"],"mappings":"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","file":"System/Promises/Promise.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT\n * Although most of the following code is written from scratch, it is\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Types\", \"../Threading/deferImmediate\", \"../Disposable/DisposableBase\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentException\", \"../Exceptions/ArgumentNullException\", \"../Disposable/ObjectPool\", \"../Collections/Set\", \"../Threading/defer\"], function (require, exports, Types_1, deferImmediate_1, DisposableBase_1, InvalidOperationException_1, ArgumentException_1, ArgumentNullException_1, ObjectPool_1, Set_1, defer_1) {\n    \"use strict\";\n    var VOID0 = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\n    function isPromise(value) {\n        return Types_1.default.hasMemberOfType(value, THEN, Types_1.default.FUNCTION);\n    }\n    function resolve(value, resolver, promiseFactory) {\n        var nextValue = resolver\n            ? resolver(value)\n            : value;\n        return nextValue && isPromise(nextValue)\n            ? Promise.wrap(nextValue)\n            : promiseFactory(nextValue);\n    }\n    function pass(source, dest) {\n        return function () {\n            source.thenThis(function (v) {\n                dest.resolve(v);\n            }, function (e) {\n                dest.reject(e);\n            });\n        };\n    }\n    function passDelayed(source, dest, ms) {\n        return function () {\n            source.thenThis(function (v) { return defer_1.defer(function () { return dest.resolve(v); }, ms); }, function (e) { return defer_1.defer(function () { return dest.reject(e); }, ms); });\n        };\n    }\n    function handleResolution(p, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (p)\n                p.resolve(v);\n        }\n        catch (ex) {\n            p.reject(ex);\n        }\n    }\n    function handleResolutionMethods(targetFulfill, targetReject, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (targetFulfill)\n                targetFulfill(v);\n        }\n        catch (ex) {\n            if (targetReject)\n                targetReject(ex);\n        }\n    }\n    function handleDispatch(p, onFulfilled, onRejected) {\n        if (p instanceof PromiseBase)\n            p.thenThis(onFulfilled, onRejected);\n        else\n            p.then(onFulfilled, onRejected);\n    }\n    var PromiseState = (function (_super) {\n        __extends(PromiseState, _super);\n        function PromiseState(_state, _result, _error) {\n            _super.call(this);\n            this._state = _state;\n            this._result = _result;\n            this._error = _error;\n            this._disposableObjectName = PROMISE_STATE;\n        }\n        PromiseState.prototype._onDispose = function () {\n            this._state = VOID0;\n            this._result = VOID0;\n            this._error = VOID0;\n        };\n        PromiseState.prototype.getState = function () {\n            return this._state;\n        };\n        Object.defineProperty(PromiseState.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isPending\", {\n            get: function () {\n                return this.getState() === Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isSettled\", {\n            get: function () {\n                return this.getState() != Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isFulfilled\", {\n            get: function () {\n                return this.getState() === Promise.State.Fulfilled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isRejected\", {\n            get: function () {\n                return this.getState() === Promise.State.Rejected;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getResult = function () {\n            return this._result;\n        };\n        Object.defineProperty(PromiseState.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getError = function () {\n            return this._error;\n        };\n        Object.defineProperty(PromiseState.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getError();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return PromiseState;\n    }(DisposableBase_1.DisposableBase));\n    exports.PromiseState = PromiseState;\n    var PromiseBase = (function (_super) {\n        __extends(PromiseBase, _super);\n        function PromiseBase() {\n            _super.call(this, Promise.State.Pending);\n            this._disposableObjectName = PROMISE;\n        }\n        PromiseBase.prototype.then = function (onFulfilled, onRejected) {\n            var _this = this;\n            return Promise.pending(function (resolve, reject) {\n                _this.thenThis(function (result) { return handleResolutionMethods(resolve, reject, result, onFulfilled); }, function (error) { return onRejected\n                    ? handleResolutionMethods(resolve, null, error, onRejected)\n                    : reject(error); });\n            });\n        };\n        PromiseBase.prototype.delayFromNow = function (milliseconds) {\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            var p = Promise.pending();\n            defer_1.defer(pass(this, p), milliseconds);\n            return p;\n        };\n        PromiseBase.prototype.delayAfterResolve = function (milliseconds) {\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            var p = Promise.pending();\n            passDelayed(this, p, milliseconds);\n            return p;\n        };\n        PromiseBase.prototype['catch'] = function (onRejected) {\n            this.throwIfDisposed();\n            return this.then(VOID0, onRejected);\n        };\n        PromiseBase.prototype['finally'] = function (fin) {\n            this.throwIfDisposed();\n            return this.then(fin, fin);\n        };\n        PromiseBase.prototype.finallyThis = function (fin) {\n            this.throwIfDisposed();\n            var f = function () { return deferImmediate_1.deferImmediate(fin); };\n            this.thenThis(f, f);\n            return this;\n        };\n        return PromiseBase;\n    }(PromiseState));\n    exports.PromiseBase = PromiseBase;\n    var Resolvable = (function (_super) {\n        __extends(Resolvable, _super);\n        function Resolvable() {\n            _super.apply(this, arguments);\n        }\n        Resolvable.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            try {\n                switch (this.state) {\n                    case Promise.State.Fulfilled:\n                        return onFulfilled\n                            ? resolve(this._result, onFulfilled, Promise.resolve)\n                            : this;\n                    case Promise.State.Rejected:\n                        return onRejected\n                            ? resolve(this._error, onRejected, Promise.resolve)\n                            : this;\n                }\n            }\n            catch (ex) {\n                return new Rejected(ex);\n            }\n            throw new Error(\"Invalid state for a resolved promise.\");\n        };\n        Resolvable.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            switch (this.state) {\n                case Promise.State.Fulfilled:\n                    if (onFulfilled)\n                        onFulfilled(this._result);\n                    break;\n                case Promise.State.Rejected:\n                    if (onRejected)\n                        onRejected(this._error);\n                    break;\n            }\n            return this;\n        };\n        return Resolvable;\n    }(PromiseBase));\n    exports.Resolvable = Resolvable;\n    var Resolved = (function (_super) {\n        __extends(Resolved, _super);\n        function Resolved(state, result, error) {\n            _super.call(this);\n            this._result = result;\n            this._error = error;\n            this._state = state;\n        }\n        return Resolved;\n    }(Resolvable));\n    exports.Resolved = Resolved;\n    var Fulfilled = (function (_super) {\n        __extends(Fulfilled, _super);\n        function Fulfilled(value) {\n            _super.call(this, Promise.State.Fulfilled, value);\n        }\n        return Fulfilled;\n    }(Resolved));\n    var Rejected = (function (_super) {\n        __extends(Rejected, _super);\n        function Rejected(error) {\n            _super.call(this, Promise.State.Rejected, VOID0, error);\n        }\n        return Rejected;\n    }(Resolved));\n    var PromiseWrapper = (function (_super) {\n        __extends(PromiseWrapper, _super);\n        function PromiseWrapper(_target) {\n            var _this = this;\n            _super.call(this);\n            this._target = _target;\n            if (!_target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            if (!isPromise(_target))\n                throw new ArgumentException_1.ArgumentException(TARGET, \"Must be a promise-like object.\");\n            _target.then(function (v) {\n                _this._state = Promise.State.Fulfilled;\n                _this._result = v;\n                _this._error = VOID0;\n                _this._target = VOID0;\n            }, function (e) {\n                _this._state = Promise.State.Rejected;\n                _this._error = e;\n                _this._target = VOID0;\n            });\n        }\n        PromiseWrapper.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            var p = Promise.pending();\n            handleDispatch(t, function (result) { return handleResolution(p, result, onFulfilled); }, function (error) { return onRejected ? handleResolution(p, error, onRejected) : p.reject(error); });\n            return p;\n        };\n        PromiseWrapper.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            handleDispatch(t, onFulfilled, onRejected);\n            return this;\n        };\n        PromiseWrapper.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._target = VOID0;\n        };\n        return PromiseWrapper;\n    }(Resolvable));\n    var Promise = (function (_super) {\n        __extends(Promise, _super);\n        function Promise(resolver) {\n            _super.call(this);\n            if (resolver)\n                this.resolveUsing(resolver);\n        }\n        Promise.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            var p = new Promise();\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\n            return p;\n        };\n        Promise.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\n            return this;\n        };\n        Promise.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._resolvedCalled = VOID0;\n        };\n        Promise.prototype.resolveUsing = function (resolver, throwIfSettled) {\n            var _this = this;\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            if (!resolver)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n            if (this._resolvedCalled)\n                throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n            if (this.state)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\n            this._resolvedCalled = true;\n            var rejectHandler = function (reason) {\n                _this._resolvedCalled = false;\n                _this.reject(reason);\n            };\n            var fulfillHandler = function (v) {\n                _this._resolvedCalled = false;\n                _this.resolve(v);\n            };\n            deferImmediate_1.deferImmediate(function () {\n                resolver(function (v) {\n                    if (v == _this)\n                        throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n                    if (isPromise(v))\n                        handleDispatch(v, fulfillHandler, rejectHandler);\n                    else {\n                        fulfillHandler(v);\n                    }\n                }, rejectHandler);\n            });\n        };\n        Promise.prototype.resolve = function (result, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (result == this)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Fulfilled && this._result === result)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._state = Promise.State.Fulfilled;\n            this._result = result;\n            this._error = VOID0;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = VOID0;\n                for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {\n                    var c = o_1[_i];\n                    var onFulfilled = c.onFulfilled, promise = c.promise, p = promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    handleResolution(p, result, onFulfilled);\n                }\n                o.length = 0;\n            }\n        };\n        Promise.prototype.reject = function (error, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Rejected && this._error === error)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._state = Promise.State.Rejected;\n            this._error = error;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = null;\n                for (var _i = 0, o_2 = o; _i < o_2.length; _i++) {\n                    var c = o_2[_i];\n                    var onRejected = c.onRejected, promise = c.promise, p = promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    if (onRejected)\n                        handleResolution(p, error, onRejected);\n                    else\n                        p.reject(error);\n                }\n                o.length = 0;\n            }\n        };\n        return Promise;\n    }(Resolvable));\n    exports.Promise = Promise;\n    var LazyPromise = (function (_super) {\n        __extends(LazyPromise, _super);\n        function LazyPromise(_resolver) {\n            _super.call(this);\n            this._resolver = _resolver;\n            if (!_resolver)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n            this._resolvedCalled = true;\n        }\n        LazyPromise.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._resolver = VOID0;\n        };\n        LazyPromise.prototype._onThen = function () {\n            var r = this._resolver;\n            if (r) {\n                this._resolver = VOID0;\n                this._resolvedCalled = false;\n                this.resolveUsing(r);\n            }\n        };\n        LazyPromise.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this._onThen();\n            return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n        };\n        LazyPromise.prototype.thenThis = function (onFulfilled, onRejected) {\n            this._onThen();\n            return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n        };\n        return LazyPromise;\n    }(Promise));\n    exports.LazyPromise = LazyPromise;\n    var pools;\n    (function (pools) {\n        var PromiseCallbacks;\n        (function (PromiseCallbacks) {\n            var pool;\n            function getPool() {\n                return pool\n                    || (pool = new ObjectPool_1.ObjectPool(40, factory, function (c) {\n                        c.onFulfilled = null;\n                        c.onRejected = null;\n                        c.promise = null;\n                    }));\n            }\n            function factory() {\n                return {\n                    onFulfilled: null,\n                    onRejected: null,\n                    promise: null\n                };\n            }\n            function init(onFulfilled, onRejected, promise) {\n                var c = getPool().take();\n                c.onFulfilled = onFulfilled;\n                c.onRejected = onRejected;\n                c.promise = promise;\n                return c;\n            }\n            PromiseCallbacks.init = init;\n            function recycle(c) {\n                getPool().add(c);\n            }\n            PromiseCallbacks.recycle = recycle;\n        })(PromiseCallbacks = pools.PromiseCallbacks || (pools.PromiseCallbacks = {}));\n    })(pools || (pools = {}));\n    var Promise;\n    (function (Promise) {\n        (function (State) {\n            State[State[\"Pending\"] = 0] = \"Pending\";\n            State[State[\"Fulfilled\"] = 1] = \"Fulfilled\";\n            State[State[\"Rejected\"] = -1] = \"Rejected\";\n        })(Promise.State || (Promise.State = {}));\n        var State = Promise.State;\n        Object.freeze(State);\n        function all(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new Fulfilled(promises);\n            return pending(function (resolve, reject) {\n                var checkedAll = false;\n                var result = [];\n                var len = promises.length;\n                result.length = len;\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; }));\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                    remaining.dispose();\n                    remaining = null;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(result);\n                    }\n                };\n                var onFulfill = function (v, i) {\n                    if (resolve) {\n                        result[i] = v;\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var onReject = function (e) {\n                    var r = reject;\n                    if (r) {\n                        cleanup();\n                        r(e);\n                    }\n                };\n                var _loop_1 = function(i) {\n                    var p = promises[i];\n                    if (p)\n                        p.then(function (v) { return onFulfill(v, i); }, onReject);\n                    else\n                        remaining.remove(i);\n                    checkIfShouldResolve();\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_1(i);\n                }\n            });\n        }\n        Promise.all = all;\n        function race(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            var promises = first && (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises || !promises.length || !(promises = promises.filter(function (v) { return v != null; })).length)\n                throw new ArgumentException_1.ArgumentException(\"Nothing to wait for.\");\n            var len = promises.length;\n            if (len == 1)\n                return wrap(promises[0]);\n            for (var i = 0; i < len; i++) {\n                var p = promises[i];\n                if (p instanceof PromiseBase && p.isSettled)\n                    return p;\n            }\n            return pending(function (resolve, reject) {\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                };\n                var onResolve = function (r, v) {\n                    if (r) {\n                        cleanup();\n                        r(v);\n                    }\n                };\n                var onFulfill = function (v) { return onResolve(resolve, v); };\n                var onReject = function (e) { return onResolve(reject, e); };\n                for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n                    var p_1 = promises_1[_i];\n                    if (!resolve)\n                        break;\n                    p_1.then(onFulfill, onReject);\n                }\n            });\n        }\n        Promise.race = race;\n        function resolve(value) {\n            return isPromise(value) ? wrap(value) : new Fulfilled(value);\n        }\n        Promise.resolve = resolve;\n        function reject(reason) {\n            return new Rejected(reason);\n        }\n        Promise.reject = reject;\n        function lazy(resolver) {\n            return new LazyPromise(resolver);\n        }\n        Promise.lazy = lazy;\n        function wrap(target) {\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            return target instanceof Promise ? this : new PromiseWrapper(target);\n        }\n        Promise.wrap = wrap;\n        function createFrom(then) {\n            if (!then)\n                throw new ArgumentNullException_1.ArgumentNullException(THEN);\n            return new PromiseWrapper({ then: then });\n        }\n        Promise.createFrom = createFrom;\n        function pending(resolver) {\n            return new Promise(resolver);\n        }\n        Promise.pending = pending;\n    })(Promise = exports.Promise || (exports.Promise = {}));\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n\r\n/*\r\n * Note: The Promise herein does NOT defer by default.\r\n * If you require a promise to defer its result then use the .defer() or .delay(ms) methods.\r\n * The API attempts to follow ES6 style promises.\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {Closure} from \"../FunctionTypes\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\n\r\n\r\nconst VOID0:any = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:Promise.Resolution<T>, resolver:(v:Promise.Resolution<T>)=>any,\r\n\tpromiseFactory:(v:any)=>PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? Promise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction pass<T>(source:PromiseBase<T>, dest:Promise<T>):Closure\r\n{\r\n\treturn ()=>\r\n\t{\r\n\t\tsource.thenThis(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tdest.resolve(v);\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tdest.reject(e);\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nfunction passDelayed<T>(source:PromiseBase<T>, dest:Promise<T>, ms:number):Closure\r\n{\r\n\treturn ()=>\r\n\t{\r\n\t\tsource.thenThis(\r\n\t\t\tv=>defer(()=>dest.resolve(v), ms),\r\n\t\t\te=>defer(()=>dest.reject(e), ms));\r\n\t}\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:Promise<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p) p.resolve(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ p.reject(ex); }\r\n}\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:Promise.Fulfill<any,any>,\r\n\ttargetReject:Promise.Reject<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\tp.thenThis(onFulfilled, onRejected);\r\n\telse\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nexport class PromiseState<T>\r\nextends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:Promise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\nextends PromiseState<T> implements PromiseLike<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(Promise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * Errors are not trapped.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>;\r\n\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn Promise.pending<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// TODO: need to figure out a way to not force a then call.\r\n\t\tvar p = Promise.pending<T>();\r\n\t\tdefer(pass(this, p), milliseconds);\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar p = Promise.pending<T>();\r\n\t\tpassDelayed(this, p, milliseconds);\r\n\t\treturn p;\r\n\t}\r\n\r\n\t'catch'<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t'finally'<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\tfinallyThis(fin:()=>void):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tvar f = ()=>deferImmediate(fin);\r\n\t\tthis.thenThis(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T> extends PromiseBase<T>\r\n{\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T> extends Resolvable<T>\r\n{\r\n\tconstructor(state:Promise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nclass Fulfilled<T> extends Resolved<T>\r\n{\r\n\tconstructor(value?:T)\r\n\t{\r\n\t\tsuper(Promise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nclass Rejected<T> extends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(Promise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T> extends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tvar p = Promise.pending<TResult>();\r\n\t\thandleDispatch(t,\r\n\t\t\tresult=>handleResolution(p, result, onFulfilled),\r\n\t\t\terror=>onRejected ? handleResolution(p, error, onRejected) : p.reject(error));\r\n\t\treturn p;\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenThis(onFulfilled, onRejected);\r\n\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class Promise<T> extends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[];\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:Promise.Executor<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver);\r\n\t}\r\n\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tvar p = new Promise<TResult>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenThis(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tthrowIfSettled:boolean = false)\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tvar rejectHandler = (reason:any)=>\r\n\t\t{\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.reject(reason);\r\n\t\t};\r\n\r\n\t\tvar fulfillHandler = (v:any)=>\r\n\t\t{\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.resolve(v);\r\n\t\t};\r\n\r\n\t\t// In order to prevent blocking.\r\n\t\t// As much as we'd like to go synchronous here, it's just not how it's done.\r\n\t\tdeferImmediate(()=>\r\n\t\t{\r\n\t\t\tresolver(\r\n\t\t\t\tv=>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(v==this) throw new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\t\t\t\t\tif(isPromise(v)) // If the result is a promise, then it will defer downstream.\r\n\t\t\t\t\t\thandleDispatch(v, fulfillHandler, rejectHandler);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfulfillHandler(v);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\t\t\t\trejectHandler);\r\n\t\t});\r\n\r\n\r\n\t}\r\n\r\n\tresolve(result?:T, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._state = Promise.State.Fulfilled;\r\n\r\n\t\tthis._result = result;\r\n\t\tthis._error = VOID0;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = VOID0;\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onFulfilled, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\thandleResolution(p, result, onFulfilled);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._state = Promise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected) handleResolution(p, error, onRejected);\r\n\t\t\t\telse p.reject(error);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * A promise that waits for the first then to trigger the resolver.\r\n */\r\nexport class LazyPromise<T> extends Promise<T>\r\n{\r\n\r\n\tconstructor(private _resolver:Promise.Executor<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_resolver) throw new ArgumentNullException(\"resolver\");\r\n\t\tthis._resolvedCalled = true;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolver = VOID0;\r\n\t}\r\n\r\n\tprivate _onThen():void\r\n\t{\r\n\t\tvar r = this._resolver;\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\tthis._resolver = VOID0;\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.resolveUsing(r);\r\n\t\t}\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis._onThen();\r\n\t\treturn super.thenSynchronous(onFulfilled, onRejected);\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis._onThen();\r\n\t\treturn super.thenThis(onFulfilled, onRejected);\r\n\t}\r\n}\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tvar pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c=>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = null;\r\n\t\t\t\t\tc.onRejected = null;\r\n\t\t\t\t\tc.promise = null;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: null,\r\n\t\t\t\tonRejected: null,\r\n\t\t\t\tpromise: null\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\t\tonRejected?:Promise.Reject<any>,\r\n\t\t\tpromise?:PromiseLike<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tvar c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled;\r\n\t\t\tc.onRejected = onRejected;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module Promise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending   = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected  = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = PromiseLike<TResult>|TResult|void;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(err?:any):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Then<T,TResult>\r\n\t{\r\n\t\t(\r\n\t\t\tonFulfilled:Fulfill<T,TResult>,\r\n\t\t\tonRejected?:Reject<TResult>):PromiseBase<TResult>\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\t// /**\r\n\t//  * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t//  * or rejected.\r\n\t//  * @param values An array of Promises.\r\n\t//  * @returns A new Promise.\r\n\t//  */\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn pending<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any)=>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise for the first of an array of promises to become settled.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tvar promises = first && (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v=>v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tvar len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn pending((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any)=>void, v:any)=>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any)=> onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any)=> onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Provides a promise that will trigger the resolver at the first 'then' request.\r\n\t * @param resolver\r\n\t * @returns {Promise<T>}\r\n\t */\r\n\texport function lazy<T>(resolver:Promise.Executor<T>):LazyPromise<T>\r\n\t{\r\n\t\treturn new LazyPromise(resolver);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn target instanceof Promise ? this : new PromiseWrapper(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T,TResult>(then:Then<T,TResult>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper({then: then});\r\n\t}\r\n\r\n\t/**\r\n\t * Provides a promise that can be resolved later.\r\n\t * @returns {Promise<T>}\r\n\t */\r\n\texport function pending<T>(resolver?:Promise.Executor<T>):Promise<T>\r\n\t{\r\n\t\treturn new Promise(resolver);\r\n\t\t// var p = pools.pending.get();\r\n\t\t// if(resolver) p.resolveUsing(resolver);\r\n\t\t// return p;\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled:Promise.Fulfill<T,any>;\r\n\tonRejected:Promise.Reject<any>;\r\n\tpromise?:PromiseLike<any>;\r\n}\r\n"]}