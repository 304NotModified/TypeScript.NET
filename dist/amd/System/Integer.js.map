{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":["define","require","exports","Types_1","ArgumentException_1","Integer","n","Integer.random","Integer.is","Integer.assert","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,UAAW,kCAAmC,SAAUC,EAASC,EAASC,EAASC,GCIjH,QAAAC,GAAiBC,GAEhBD,MAAWA,GAAJA,EAGR,GAAOA,IAAP,SAAOA,GAINA,QAAAA,GAAuBA,GAEtBE,MAAQA,MAAKA,SAASA,EAAOA,EAG9BF,QAAAA,GAAmBA,GAElBG,MAAOA,GAAAA,WAAKA,SAASA,GAAGA,IAAUA,IAAQA,EAAJA,GAGvCH,QAAAA,GAAuBA,EAAUA,GAEhCI,GAAIA,GAAIA,EAAGA,EACXA,KAAIA,EAEHA,KAAMA,IAAIA,GAAAA,WAAkBA,GAAgBA,IAAKA,sBAElDA,OAAOA,GAjBQJ,EAAAA,OAAMA,EAKNA,EAAAA,GAAEA,EAKFA,EAAAA,OAAMA,GAdhBA,IAAAA,OA0BPK,OAAAC,eAAAT,EAAA,cAAAU,OAAA,IDXIV,EAAAA,WCWWG","file":"System/Integer.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport Type from './Types';\r\nimport ArgumentException from './Exceptions/ArgumentException';\r\nfunction Integer(n) {\r\n    return n | 0;\r\n}\r\nvar Integer;\r\n(function (Integer) {\r\n    function random(max) {\r\n        return (Math.random() * max) | 0;\r\n    }\r\n    Integer.random = random;\r\n    function is(n) {\r\n        return Type.isNumber(n, false) && n == (n | 0);\r\n    }\r\n    Integer.is = is;\r\n    function assert(n, argumentName) {\r\n        var i = is(n);\r\n        if (!i) {\r\n            throw new ArgumentException(argumentName || 'n', \"Must be an integer.\");\r\n        }\r\n        return i;\r\n    }\r\n    Integer.assert = assert;\r\n})(Integer || (Integer = {}));\r\nexport default Integer;\r\n//# sourceMappingURL=Integer.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from './Types';\r\nimport ArgumentException from './Exceptions/ArgumentException';\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\r\n\texport function random(max:number):number\r\n\t{\r\n\t\treturn (Math.random()*max) | 0;\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be an integer.\");\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}