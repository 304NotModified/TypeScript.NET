{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":["define","require","exports","Types_1","ArgumentException_1","Integer","n","Integer.r","Integer.random","Integer.is","Integer.assert","Integer.random.under","Object","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,UAAW,kCAAmC,SAAUC,EAASC,EAASC,EAASC,GCIjH,QAAAC,GAAiBC,GAEhBD,MAAWA,GAAJA,EAGR,GAAOA,IAAP,SAAOA,GAGNA,QAAAA,GAAWA,GACVE,MAAQA,MAAKA,SAASA,EAAOA,EAc9BF,QAAAA,GAAuBA,GAGtBG,MADAA,GAAOA,EAAIA,OACHA,GAALA,EAAeA,GAClBA,GAAOA,EAAMA,EAAIA,EAAIA,GACdA,EAAEA,IAwBVH,QAAAA,GAAmBA,GAElBI,MAAOA,GAAAA,WAAKA,SAASA,GAAGA,IAAUA,IAAQA,EAAJA,GAGvCJ,QAAAA,GAAuBA,EAAUA,GAEhCK,GAAIA,GAAIA,EAAGA,EACXA,KAAIA,EAEHA,KAAMA,IAAIA,GAAAA,WAAkBA,GAAgBA,IAAKA,sBAElDA,OAAOA,GAzCQL,EAAAA,OAAMA,CAQtBA,IAAcA,IAAdA,SAAcA,GAabG,QAAAA,GAAsBA,GAErBG,MAAOA,GAAEA,GAFMH,EAAAA,MAAKA,GAbRH,EAAAA,EAAAA,SAAAA,EAAAA,YAqBEA,EAAAA,GAAEA,EAKFA,EAAAA,OAAMA,GApDhBA,IAAAA,OAgEPO,OAAAC,eAAAX,EAAA,cAAAY,OAAA,IDnCIZ,EAAAA,WCmCWG","file":"System/Integer.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", './Types', './Exceptions/ArgumentException'], function (require, exports) {\r\n    var Types_1 = require('./Types');\r\n    var ArgumentException_1 = require('./Exceptions/ArgumentException');\r\n    function Integer(n) {\r\n        return n | 0;\r\n    }\r\n    var Integer;\r\n    (function (Integer) {\r\n        function r(max) {\r\n            return (Math.random() * max) | 0;\r\n        }\r\n        function random(max) {\r\n            assert(max, 'max');\r\n            if (max == 0)\r\n                return 0;\r\n            max += max > 0 ? 1 : -1;\r\n            return r(max);\r\n        }\r\n        Integer.random = random;\r\n        var random;\r\n        (function (random) {\r\n            function under(boundary) {\r\n                return r(boundary);\r\n            }\r\n            random.under = under;\r\n        })(random = Integer.random || (Integer.random = {}));\r\n        function is(n) {\r\n            return Types_1.default.isNumber(n, false) && n == (n | 0);\r\n        }\r\n        Integer.is = is;\r\n        function assert(n, argumentName) {\r\n            var i = is(n);\r\n            if (!i) {\r\n                throw new ArgumentException_1.default(argumentName || 'n', \"Must be an integer.\");\r\n            }\r\n            return i;\r\n        }\r\n        Integer.assert = assert;\r\n    })(Integer || (Integer = {}));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Integer;\r\n});\r\n//# sourceMappingURL=Integer.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from './Types';\r\nimport ArgumentException from './Exceptions/ArgumentException';\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\tfunction r(max:number):number {\r\n\t\treturn (Math.random()*max) | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a random integer from zero to the max.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * Examples:<br/>\r\n\t * ```Integer.random(1)``` will return 0 or 1.<br/>\r\n\t * ```Integer.random(-2)``` will return 0, -1, or -2.<br/>\r\n\t *\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(max:number):number\r\n\t{\r\n\t\tassert(max,'max');\r\n\t\tif(max==0) return 0;\r\n\t\tmax += max > 0 ? 1 : -1;\r\n\t\treturn r(max);\r\n\t}\r\n\r\n\texport module random {\r\n\r\n\t\t/**\r\n\t\t * Returns a random integer from zero up to the boundary value.\r\n\t\t * Negative and fractional numbers are allowed.\r\n\t\t *\r\n\t\t * Example:<br/>\r\n\t\t * ```Integer.random(-2)``` will return 0, or -1.<br/>\r\n\t\t * ```Integer.random(5)``` will return 0, 1, 2, 3 or 4.<br/>\r\n\t\t *\r\n\t\t * @param boundary\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\texport function under(boundary:number):number\r\n\t\t{\r\n\t\t\treturn r(boundary)\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be an integer.\");\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}