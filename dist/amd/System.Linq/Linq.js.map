{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Values","Arrays","ArrayUtility","Enumerator","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","Utility_1","DisposableBase_1","ObjectDisposedException_1","throwIfDisposed","disposed","className","enumeratorFrom","from","enumeratorForEach","forEach","LinqFunctions","_super","LinqFunctions.constructor","LinqFunctions.Greater","LinqFunctions.Lesser","Functions","freeze","LENGTH","GET_ENUMERATOR","UNSUPPORTED_ENUMERABLE","Enumerable","Enumerable.constructor","Enumerable.fromArray","Enumerable.from","Enumerable.toArray","Enumerable.getEnumerator","Enumerable._onDispose","Enumerable.choice","Enumerable.cycle","Enumerable.empty","Enumerable.repeat","Enumerable.repeatWithFinalize","Enumerable.make","Enumerable.range","Enumerable.rangeDown","Enumerable.toInfinity","Enumerable.toNegativeInfinity","Enumerable.rangeTo","Enumerable.matches","Enumerable.generate","Enumerable.unfold","Enumerable.defer","Enumerable.forEach","Enumerable.max","Enumerable.min","Enumerable.asEnumerable","Enumerable.toLookup","Enumerable.toMap","Enumerable.toDictionary","Enumerable.toJoinedString","Enumerable.doAction","Enumerable.force","Enumerable.skip","Enumerable.skipWhile","Enumerable.take","Enumerable.takeWhile","Enumerable.takeUntil","Enumerable.takeExceptLast","Enumerable.takeFromLast","Enumerable.traverseBreadthFirst","Enumerable.traverseDepthFirst","Enumerable.flatten","Enumerable.pairwise","Enumerable.scan","Enumerable.select","Enumerable.selectMany","Enumerable.choose","Enumerable.where","Enumerable.ofType","Enumerable.except","Enumerable.distinct","Enumerable.distinctUntilChanged","Enumerable.reverse","Enumerable.shuffle","Enumerable.count","Enumerable.all","Enumerable.every","Enumerable.any","Enumerable.some","Enumerable.isEmpty","Enumerable.contains","Enumerable.indexOf","Enumerable.lastIndexOf","Enumerable.defaultIfEmpty","Enumerable.zip","Enumerable.zipMultiple","Enumerable.join","Enumerable.groupJoin","Enumerable.concatWith","Enumerable.merge","Enumerable.concat","Enumerable.insertAt","Enumerable.alternateMultiple","Enumerable.alternateSingle","Enumerable.alternate","Enumerable.intersect","Enumerable.sequenceEqual","Enumerable.union","Enumerable.orderBy","Enumerable.orderByDescending","Enumerable.groupBy","Enumerable.partitionBy","Enumerable.buffer","Enumerable.aggregate","Enumerable.average","value","selector","x","isNaN","sum","NaN","isFinite","sumInfinite","count","Enumerable.maxBy","Enumerable.minBy","Enumerable.sum","Enumerable.product","Enumerable.elementAt","Enumerable.elementAtOrDefault","Enumerable.first","Enumerable.firstOrDefault","Enumerable.last","Enumerable.lastOrDefault","Enumerable.single","Enumerable.singleOrDefault","Enumerable.share","Enumerable.memoize","Enumerable.catchError","Enumerable.finallyAction","ArrayEnumerable","ArrayEnumerable.constructor","ArrayEnumerable._onDispose","get","ArrayEnumerable.source","enumerable","configurable","ArrayEnumerable.toArray","ArrayEnumerable.asEnumerable","ArrayEnumerable.forEach","ArrayEnumerable.any","ArrayEnumerable.count","ArrayEnumerable.elementAt","ArrayEnumerable.elementAtOrDefault","ArrayEnumerable.first","ArrayEnumerable.firstOrDefault","ArrayEnumerable.last","ArrayEnumerable.lastOrDefault","ArrayEnumerable.skip","ArrayEnumerable.takeExceptLast","ArrayEnumerable.takeFromLast","ArrayEnumerable.reverse","ArrayEnumerable.memoize","ArrayEnumerable.sequenceEqual","ArrayEnumerable.toJoinedString","Grouping","Grouping.constructor","Grouping.key","Lookup","Lookup.constructor","Lookup.count","Lookup.get","Lookup.contains","Lookup.getEnumerator","WhereEnumerable","WhereEnumerable.constructor","WhereEnumerable.where","WhereEnumerable.select","WhereEnumerable.getEnumerator","WhereEnumerable._onDispose","WhereSelectEnumerable","WhereSelectEnumerable.constructor","WhereSelectEnumerable.where","WhereSelectEnumerable.select","WhereSelectEnumerable.getEnumerator","WhereSelectEnumerable._onDispose","OrderedEnumerable","OrderedEnumerable.constructor","OrderedEnumerable.createOrderedEnumerable","OrderedEnumerable.thenBy","OrderedEnumerable.thenByDescending","OrderedEnumerable.getEnumerator","OrderedEnumerable._onDispose","SortContext","SortContext.constructor","SortContext.create","SortContext.generateKeys","SortContext.compare","defineProperty"],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../System/Compare', '../System/Collections/Array/Compare', '../System/Collections/Array/Utility', '../System/Collections/Enumeration/Enumerator', '../System/Types', '../System/Integer', '../System/Functions', '../System/Collections/Enumeration/ArrayEnumerator', '../System/Collections/Enumeration/EnumeratorBase', '../System/Collections/Dictionaries/Dictionary', '../System/Collections/Queue', '../System/Disposable/Utility', '../System/Disposable/DisposableBase', '../System/Disposable/ObjectDisposedException'], function (require, exports) {\r\n    ///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n    ///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n    ///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n    ///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n    ///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n    var Values = require('../System/Compare');\r\n    var Arrays = require('../System/Collections/Array/Compare');\r\n    var ArrayUtility = require('../System/Collections/Array/Utility');\r\n    var Enumerator = require('../System/Collections/Enumeration/Enumerator');\r\n    var Types_1 = require('../System/Types');\r\n    var Integer_1 = require('../System/Integer');\r\n    var Functions_1 = require('../System/Functions');\r\n    var ArrayEnumerator_1 = require('../System/Collections/Enumeration/ArrayEnumerator');\r\n    var EnumeratorBase_1 = require('../System/Collections/Enumeration/EnumeratorBase');\r\n    var Dictionary_1 = require('../System/Collections/Dictionaries/Dictionary');\r\n    var Queue_1 = require('../System/Collections/Queue');\r\n    var Utility_1 = require('../System/Disposable/Utility');\r\n    var DisposableBase_1 = require('../System/Disposable/DisposableBase');\r\n    var ObjectDisposedException_1 = require('../System/Disposable/ObjectDisposedException');\r\n    var enumeratorFrom = Enumerator.from;\r\n    var enumeratorForEach = Enumerator.forEach;\r\n    'use strict';\r\n    var LinqFunctions = (function (_super) {\r\n        __extends(LinqFunctions, _super);\r\n        function LinqFunctions() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        LinqFunctions.prototype.Greater = function (a, b) {\r\n            return a > b ? a : b;\r\n        };\r\n        LinqFunctions.prototype.Lesser = function (a, b) {\r\n            return a < b ? a : b;\r\n        };\r\n        return LinqFunctions;\r\n    })(Functions_1.default);\r\n    var Functions = new LinqFunctions();\r\n    Object.freeze(Functions);\r\n    var LENGTH = 'length', GET_ENUMERATOR = 'getEnumerator', UNSUPPORTED_ENUMERABLE = \"Unsupported enumerable.\";\r\n    var Enumerable = (function (_super) {\r\n        __extends(Enumerable, _super);\r\n        function Enumerable(_enumeratorFactory, finalizer) {\r\n            _super.call(this, finalizer);\r\n            this._enumeratorFactory = _enumeratorFactory;\r\n        }\r\n        Enumerable.fromArray = function (array) {\r\n            return new ArrayEnumerable(array);\r\n        };\r\n        Enumerable.from = function (source) {\r\n            var type = Types_1.default.of(source);\r\n            if (type.isObject) {\r\n                if (source instanceof Enumerable)\r\n                    return source;\r\n                if (source instanceof Array)\r\n                    return new ArrayEnumerable(source);\r\n                if (type.member(GET_ENUMERATOR).isFunction)\r\n                    return new Enumerable(function () { return source.getEnumerator(); });\r\n                if (type.member(LENGTH).isValidNumber)\r\n                    return new ArrayEnumerable(source);\r\n            }\r\n            throw new Error(UNSUPPORTED_ENUMERABLE);\r\n        };\r\n        Enumerable.toArray = function (source) {\r\n            var type = Types_1.default.of(source);\r\n            if (type.isObject) {\r\n                if (source instanceof Array)\r\n                    return source.slice();\r\n                if (type.member(LENGTH).isValidNumber)\r\n                    source = new ArrayEnumerable(source);\r\n                if (source instanceof Enumerable)\r\n                    return source.toArray();\r\n                if (type.member(GET_ENUMERATOR).isFunction) {\r\n                    var result = [];\r\n                    enumeratorForEach(source.getEnumerator(), function (e, i) {\r\n                        result[i] = e;\r\n                    });\r\n                    return result;\r\n                }\r\n            }\r\n            throw new Error(UNSUPPORTED_ENUMERABLE);\r\n        };\r\n        Enumerable.prototype.getEnumerator = function () {\r\n            this.throwIfDisposed();\r\n            return this._enumeratorFactory();\r\n        };\r\n        Enumerable.prototype._onDispose = function () {\r\n            _super.prototype._onDispose.call(this);\r\n            this._enumeratorFactory = null;\r\n        };\r\n        Enumerable.choice = function (values) {\r\n            return new Enumerable(function () { return new EnumeratorBase_1.default(null, function (yielder) {\r\n                return yielder.yieldReturn(values[Integer_1.default.random(values.length)]);\r\n            }); });\r\n        };\r\n        Enumerable.cycle = function (values) {\r\n            return new Enumerable(function () {\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    index = 0;\r\n                }, function (yielder) {\r\n                    if (index >= values.length)\r\n                        index = 0;\r\n                    return yielder.yieldReturn(values[index++]);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.empty = function () {\r\n            return new Enumerable(function () { return new EnumeratorBase_1.default(null, Functions.False); });\r\n        };\r\n        Enumerable.repeat = function (element, count) {\r\n            if (count === void 0) { count = Infinity; }\r\n            if (isNaN(count) || count <= 0)\r\n                return Enumerable.empty();\r\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\r\n                ? new Enumerable(function () {\r\n                    var c = count;\r\n                    var index = 0;\r\n                    return new EnumeratorBase_1.default(function () {\r\n                        index = 0;\r\n                    }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); });\r\n                })\r\n                : new Enumerable(function () {\r\n                    return new EnumeratorBase_1.default(null, function (yielder) { return yielder.yieldReturn(element); });\r\n                });\r\n        };\r\n        Enumerable.repeatWithFinalize = function (initializer, finalizer) {\r\n            return new Enumerable(function () {\r\n                var element;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    element = initializer();\r\n                }, function (yielder) { return yielder.yieldReturn(element); }, function () {\r\n                    finalizer(element);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.make = function (element) {\r\n            return Enumerable.repeat(element, 1);\r\n        };\r\n        Enumerable.range = function (start, count, step) {\r\n            if (start === void 0) { start = 0; }\r\n            if (count === void 0) { count = Infinity; }\r\n            if (step === void 0) { step = 1; }\r\n            if (!isFinite(start))\r\n                throw new Error(\"Must have a valid 'start' value.\");\r\n            if (isNaN(count) || count <= 0)\r\n                return Enumerable.empty();\r\n            if (!isFinite(step))\r\n                throw new Error(\"Must have a valid 'step' value.\");\r\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\r\n                ? new Enumerable(function () {\r\n                    var value;\r\n                    var c = count;\r\n                    var index = 0;\r\n                    return new EnumeratorBase_1.default(function () {\r\n                        index = 0;\r\n                        value = start;\r\n                    }, function (yielder) {\r\n                        var result = index++ < c\r\n                            && yielder.yieldReturn(value);\r\n                        if (result && index < count)\r\n                            value += step;\r\n                        return result;\r\n                    });\r\n                })\r\n                : new Enumerable(function () {\r\n                    var value;\r\n                    return new EnumeratorBase_1.default(function () {\r\n                        value = start;\r\n                    }, function (yielder) {\r\n                        var current = value;\r\n                        value += step;\r\n                        return yielder.yieldReturn(current);\r\n                    });\r\n                });\r\n        };\r\n        Enumerable.rangeDown = function (start, count, step) {\r\n            if (start === void 0) { start = 0; }\r\n            if (count === void 0) { count = Infinity; }\r\n            if (step === void 0) { step = 1; }\r\n            step = Math.abs(step) * -1;\r\n            return Enumerable.range(start, count, step);\r\n        };\r\n        Enumerable.toInfinity = function (start, step) {\r\n            if (start === void 0) { start = 0; }\r\n            if (step === void 0) { step = 1; }\r\n            return Enumerable.range(start, Infinity, step);\r\n        };\r\n        Enumerable.toNegativeInfinity = function (start, step) {\r\n            if (start === void 0) { start = 0; }\r\n            if (step === void 0) { step = 1; }\r\n            return Enumerable.rangeDown(start, Infinity, step);\r\n        };\r\n        Enumerable.rangeTo = function (start, to, step) {\r\n            if (start === void 0) { start = 0; }\r\n            if (to === void 0) { to = Infinity; }\r\n            if (step === void 0) { step = 1; }\r\n            if (!isFinite(start))\r\n                throw new Error(\"Must have a valid 'start' value.\");\r\n            if (isNaN(to))\r\n                throw new Error(\"Must have a valid 'to' value.\");\r\n            if (!isFinite(step))\r\n                throw new Error(\"Must have a valid 'step' value.\");\r\n            step = Math.abs(step);\r\n            if (!isFinite(to))\r\n                return Enumerable.range(start, Infinity, (start < to) ? (+step) : (-step));\r\n            return new Enumerable(function () {\r\n                var value;\r\n                return start < to\r\n                    ? new EnumeratorBase_1.default(function () {\r\n                        value = start;\r\n                    }, function (yielder) {\r\n                        var result = value <= to && yielder.yieldReturn(value);\r\n                        if (result)\r\n                            value += step;\r\n                        return result;\r\n                    })\r\n                    : new EnumeratorBase_1.default(function () {\r\n                        value = start;\r\n                    }, function (yielder) {\r\n                        var result = value >= to && yielder.yieldReturn(value);\r\n                        if (result)\r\n                            value -= step;\r\n                        return result;\r\n                    });\r\n            });\r\n        };\r\n        Enumerable.matches = function (input, pattern, flags) {\r\n            if (flags === void 0) { flags = \"\"; }\r\n            var type = typeof input;\r\n            if (type != Types_1.default.STRING)\r\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n            if (pattern instanceof RegExp) {\r\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n                flags += (pattern.multiline) ? \"m\" : \"\";\r\n                pattern = pattern.source;\r\n            }\r\n            if (flags.indexOf(\"g\") === -1)\r\n                flags += \"g\";\r\n            return new Enumerable(function () {\r\n                var regex;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    regex = new RegExp(pattern, flags);\r\n                }, function (yielder) {\r\n                    var match = regex.exec(input);\r\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\r\n                });\r\n            });\r\n        };\r\n        Enumerable.generate = function (factory, count) {\r\n            if (count === void 0) { count = Infinity; }\r\n            if (isNaN(count) || count <= 0)\r\n                return Enumerable.empty();\r\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\r\n                ? new Enumerable(function () {\r\n                    var c = count;\r\n                    var index = 0;\r\n                    return new EnumeratorBase_1.default(function () {\r\n                        index = 0;\r\n                    }, function (yielder) {\r\n                        var current = index++;\r\n                        return current < c && yielder.yieldReturn(factory(current));\r\n                    });\r\n                })\r\n                : new Enumerable(function () {\r\n                    var index = 0;\r\n                    return new EnumeratorBase_1.default(function () {\r\n                        index = 0;\r\n                    }, function (yielder) { return yielder.yieldReturn(factory(index++)); });\r\n                });\r\n        };\r\n        Enumerable.unfold = function (seed, valueFactory, skipSeed) {\r\n            if (skipSeed === void 0) { skipSeed = false; }\r\n            return new Enumerable(function () {\r\n                var index = 0;\r\n                var value;\r\n                var isFirst;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    index = 0;\r\n                    value = seed;\r\n                    isFirst = !skipSeed;\r\n                }, function (yielder) {\r\n                    var i = index++;\r\n                    if (isFirst)\r\n                        isFirst = false;\r\n                    else\r\n                        value = valueFactory(value, i);\r\n                    return yielder.yieldReturn(value);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.defer = function (enumerableFactory) {\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = enumerableFactory().getEnumerator();\r\n                }, function (yielder) { return enumerator.moveNext() && yielder.yieldReturn(enumerator.current); }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.forEach = function (enumerable, action) {\r\n            if (enumerable) {\r\n                Utility_1.using(Enumerator.from(enumerable), function (e) {\r\n                    Enumerator.forEach(e, action);\r\n                });\r\n            }\r\n        };\r\n        Enumerable.max = function (values) {\r\n            return values\r\n                .takeUntil(function (v) { return v == +Infinity; }, true)\r\n                .aggregate(Functions.Greater);\r\n        };\r\n        Enumerable.min = function (values) {\r\n            return values\r\n                .takeUntil(function (v) { return v == -Infinity; }, true)\r\n                .aggregate(Functions.Lesser);\r\n        };\r\n        Enumerable.prototype.forEach = function (action) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var index = 0;\r\n            Utility_1.using(_.getEnumerator(), function (e) {\r\n                while (_.throwIfDisposed() && e.moveNext()) {\r\n                    if (action(e.current, index++) === false)\r\n                        break;\r\n                }\r\n            });\r\n        };\r\n        Enumerable.prototype.toArray = function (predicate) {\r\n            var result = [];\r\n            if (predicate)\r\n                return this.where(predicate).toArray();\r\n            this.forEach(function (x, i) {\r\n                result[i] = x;\r\n            });\r\n            return result;\r\n        };\r\n        Enumerable.prototype.asEnumerable = function () {\r\n            var _ = this;\r\n            return new Enumerable(function () { return _.getEnumerator(); });\r\n        };\r\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\r\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\r\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\r\n            var dict = new Dictionary_1.default(compareSelector);\r\n            this.forEach(function (x) {\r\n                var key = keySelector(x);\r\n                var element = elementSelector(x);\r\n                var array = dict.getValue(key);\r\n                if (array !== undefined)\r\n                    array.push(element);\r\n                else\r\n                    dict.addByKeyValue(key, [element]);\r\n            });\r\n            return new Lookup(dict);\r\n        };\r\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\r\n            var obj = {};\r\n            this.forEach(function (x) {\r\n                obj[keySelector(x)] = elementSelector(x);\r\n            });\r\n            return obj;\r\n        };\r\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\r\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\r\n            var dict = new Dictionary_1.default(compareSelector);\r\n            this.forEach(function (x) { return dict.addByKeyValue(keySelector(x), elementSelector(x)); });\r\n            return dict;\r\n        };\r\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\r\n            if (separator === void 0) { separator = \"\"; }\r\n            if (selector === void 0) { selector = Functions.Identity; }\r\n            return this.select(selector).toArray().join(separator);\r\n        };\r\n        Enumerable.prototype.doAction = function (action) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    index = 0;\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    while (enumerator.moveNext()) {\r\n                        var actionResult = action(enumerator.current, index++);\r\n                        if (actionResult === false || actionResult === 0)\r\n                            return yielder.yieldBreak();\r\n                        if (actionResult !== 2)\r\n                            return yielder.yieldReturn(enumerator.current);\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.force = function (defaultAction) {\r\n            if (defaultAction === void 0) { defaultAction = 0; }\r\n            this.throwIfDisposed();\r\n            this.doAction(function (element) { return defaultAction; });\r\n        };\r\n        Enumerable.prototype.skip = function (count) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            if (!count || isNaN(count) || count < 0)\r\n                return _;\r\n            if (!isFinite(count))\r\n                return Enumerable.empty();\r\n            Integer_1.default.assert(count, \"count\");\r\n            var c = count;\r\n            return this.doAction(function (element, index) {\r\n                return index < c\r\n                    ? 2\r\n                    : 1;\r\n            });\r\n        };\r\n        Enumerable.prototype.skipWhile = function (predicate) {\r\n            this.throwIfDisposed();\r\n            var skipping = true;\r\n            return this.doAction(function (element, index) {\r\n                if (skipping)\r\n                    skipping = predicate(element, index);\r\n                return skipping\r\n                    ? 2\r\n                    : 1;\r\n            });\r\n        };\r\n        Enumerable.prototype.take = function (count) {\r\n            if (!count || isNaN(count) || count < 0)\r\n                return Enumerable.empty();\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            if (!isFinite(count))\r\n                return _;\r\n            Integer_1.default.assert(count, \"count\");\r\n            var c = count;\r\n            return _.doAction(function (element, index) { return index < c; });\r\n        };\r\n        Enumerable.prototype.takeWhile = function (predicate) {\r\n            this.throwIfDisposed();\r\n            return this.doAction(function (element, index) {\r\n                return predicate(element, index)\r\n                    ? 1\r\n                    : 0;\r\n            });\r\n        };\r\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\r\n            this.throwIfDisposed();\r\n            if (!includeUntilValue)\r\n                return this.doAction(function (element, index) {\r\n                    return predicate(element, index)\r\n                        ? 0\r\n                        : 1;\r\n                });\r\n            var found = false;\r\n            return this.doAction(function (element, index) {\r\n                if (found)\r\n                    return 0;\r\n                found = predicate(element, index);\r\n                return 1;\r\n            });\r\n        };\r\n        Enumerable.prototype.takeExceptLast = function (count) {\r\n            if (count === void 0) { count = 1; }\r\n            var _ = this;\r\n            if (!count || isNaN(count) || count <= 0)\r\n                return _;\r\n            if (!isFinite(count))\r\n                return Enumerable.empty();\r\n            Integer_1.default.assert(count, \"count\");\r\n            var c = count;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var q;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    q = new Queue_1.default();\r\n                }, function (yielder) {\r\n                    while (enumerator.moveNext()) {\r\n                        q.enqueue(enumerator.current);\r\n                        if (q.count > c)\r\n                            return yielder.yieldReturn(q.dequeue());\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator, q);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.takeFromLast = function (count) {\r\n            if (!count || isNaN(count) || count <= 0)\r\n                return Enumerable.empty();\r\n            var _ = this;\r\n            if (!isFinite(count))\r\n                return _.reverse();\r\n            Integer_1.default.assert(count, \"count\");\r\n            return _.reverse().take(count);\r\n        };\r\n        Enumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var nestLevel = 0;\r\n                var buffer, len;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    nestLevel = 0;\r\n                    buffer = [];\r\n                    len = 0;\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    while (true) {\r\n                        if (enumerator.moveNext()) {\r\n                            buffer[len++] = enumerator.current;\r\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n                        }\r\n                        if (!len)\r\n                            return yielder.yieldBreak();\r\n                        var next = Enumerable\r\n                            .fromArray(buffer)\r\n                            .selectMany(func);\r\n                        if (!next.any()) {\r\n                            return yielder.yieldBreak();\r\n                        }\r\n                        else {\r\n                            nestLevel++;\r\n                            buffer = [];\r\n                            len = 0;\r\n                            enumerator.dispose();\r\n                            enumerator = next.getEnumerator();\r\n                        }\r\n                    }\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                    buffer.length = 0;\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.traverseDepthFirst = function (func, resultSelector) {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumeratorStack = [];\r\n                var enumerator;\r\n                var len;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    len = 0;\r\n                }, function (yielder) {\r\n                    while (true) {\r\n                        if (enumerator.moveNext()) {\r\n                            var value = resultSelector(enumerator.current, len);\r\n                            enumeratorStack[len++] = enumerator;\r\n                            enumerator = func(enumerator.current).getEnumerator();\r\n                            return yielder.yieldReturn(value);\r\n                        }\r\n                        if (len == 0)\r\n                            return false;\r\n                        enumerator.dispose();\r\n                        enumerator = enumeratorStack[--len];\r\n                        enumeratorStack.length = len;\r\n                    }\r\n                }, function () {\r\n                    try {\r\n                        Utility_1.dispose(enumerator);\r\n                    }\r\n                    finally {\r\n                        Utility_1.disposeThese(enumeratorStack);\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.flatten = function () {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var middleEnumerator = null;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    while (true) {\r\n                        if (middleEnumerator != null) {\r\n                            if (middleEnumerator.moveNext()) {\r\n                                return yielder.yieldReturn(middleEnumerator.current);\r\n                            }\r\n                            else {\r\n                                middleEnumerator = null;\r\n                            }\r\n                        }\r\n                        if (enumerator.moveNext()) {\r\n                            var c = enumerator.current;\r\n                            if (c instanceof Array) {\r\n                                middleEnumerator.dispose();\r\n                                middleEnumerator = Enumerable.fromArray(c)\r\n                                    .selectMany(Functions.Identity)\r\n                                    .flatten()\r\n                                    .getEnumerator();\r\n                                continue;\r\n                            }\r\n                            else {\r\n                                return yielder.yieldReturn(enumerator.current);\r\n                            }\r\n                        }\r\n                        return false;\r\n                    }\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator, middleEnumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.pairwise = function (selector) {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    enumerator.moveNext();\r\n                }, function (yielder) {\r\n                    var prev = enumerator.current;\r\n                    return enumerator.moveNext()\r\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.scan = function (func, seed) {\r\n            var isUseSeed = seed !== undefined;\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var value;\r\n                var isFirst;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    isFirst = true;\r\n                }, function (yielder) {\r\n                    if (isFirst) {\r\n                        isFirst = false;\r\n                        return isUseSeed\r\n                            ? yielder.yieldReturn(value = seed)\r\n                            : enumerator.moveNext() && yielder.yieldReturn(value\r\n                                = enumerator.current);\r\n                    }\r\n                    return (enumerator.moveNext())\r\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\r\n                        : false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.select = function (selector) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            if (selector.length < 2)\r\n                return new WhereSelectEnumerable(_, null, selector);\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    index = 0;\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    return enumerator.moveNext()\r\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\r\n                        : false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\r\n            var _ = this;\r\n            if (!resultSelector)\r\n                resultSelector = function (a, b) { return b; };\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var middleEnumerator;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    middleEnumerator = undefined;\r\n                    index = 0;\r\n                }, function (yielder) {\r\n                    if (middleEnumerator === undefined && !enumerator.moveNext())\r\n                        return false;\r\n                    do {\r\n                        if (!middleEnumerator) {\r\n                            var middleSeq = collectionSelector(enumerator.current, index++);\r\n                            if (!middleSeq)\r\n                                continue;\r\n                            middleEnumerator = Enumerator.from(middleSeq);\r\n                        }\r\n                        if (middleEnumerator.moveNext())\r\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\r\n                        middleEnumerator.dispose();\r\n                        middleEnumerator = null;\r\n                    } while (enumerator.moveNext());\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator, middleEnumerator);\r\n                    enumerator = null;\r\n                    middleEnumerator = null;\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.choose = function (selector) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    index = 0;\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    while (enumerator.moveNext()) {\r\n                        var result = selector(enumerator.current, index++);\r\n                        if (result !== null && result !== undefined)\r\n                            return yielder.yieldReturn(result);\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.where = function (predicate) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            if (predicate.length < 2)\r\n                return new WhereEnumerable(_, predicate);\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    index = 0;\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    while (enumerator.moveNext()) {\r\n                        if (predicate(enumerator.current, index++))\r\n                            return yielder.yieldReturn(enumerator.current);\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.ofType = function (type) {\r\n            var typeName;\r\n            switch (type) {\r\n                case Number:\r\n                    typeName = Types_1.default.NUMBER;\r\n                    break;\r\n                case String:\r\n                    typeName = Types_1.default.STRING;\r\n                    break;\r\n                case Boolean:\r\n                    typeName = Types_1.default.BOOLEAN;\r\n                    break;\r\n                case Function:\r\n                    typeName = Types_1.default.FUNCTION;\r\n                    break;\r\n                default:\r\n                    typeName = null;\r\n                    break;\r\n            }\r\n            return ((typeName === null)\r\n                ? this.where(function (x) {\r\n                    return x instanceof type;\r\n                })\r\n                : this.where(function (x) {\r\n                    return typeof x === typeName;\r\n                }));\r\n        };\r\n        Enumerable.prototype.except = function (second, compareSelector) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var keys;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    enumerator = _.getEnumerator();\r\n                    keys = new Dictionary_1.default(compareSelector);\r\n                    if (second)\r\n                        Enumerable.forEach(second, function (key) { return keys.addByKeyValue(key, true); });\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    while (enumerator.moveNext()) {\r\n                        var current = enumerator.current;\r\n                        if (!keys.containsKey(current)) {\r\n                            keys.addByKeyValue(current, true);\r\n                            return yielder.yieldReturn(current);\r\n                        }\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                    keys.clear();\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.distinct = function (compareSelector) {\r\n            return this.except(null, compareSelector);\r\n        };\r\n        Enumerable.prototype.distinctUntilChanged = function (compareSelector) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var compareKey;\r\n                var initial = true;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    while (enumerator.moveNext()) {\r\n                        var key = compareSelector(enumerator.current);\r\n                        if (initial) {\r\n                            initial = false;\r\n                        }\r\n                        else if (compareKey === key) {\r\n                            continue;\r\n                        }\r\n                        compareKey = key;\r\n                        return yielder.yieldReturn(enumerator.current);\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.reverse = function () {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var buffer;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    buffer = _.toArray();\r\n                    index = buffer.length;\r\n                }, function (yielder) {\r\n                    return index > 0\r\n                        && yielder.yieldReturn(buffer[--index]);\r\n                }, function () {\r\n                    buffer.length = 0;\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.shuffle = function () {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var buffer;\r\n                var capacity;\r\n                var len;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    buffer = _.toArray();\r\n                    capacity = len = buffer.length;\r\n                }, function (yielder) {\r\n                    if (!len)\r\n                        return yielder.yieldBreak();\r\n                    var selectedIndex = Integer_1.default.random(len);\r\n                    var selectedValue = buffer[selectedIndex];\r\n                    buffer[selectedIndex] = buffer[--len];\r\n                    buffer[len] = null;\r\n                    if (len % 32 == 0)\r\n                        buffer.length = len;\r\n                    return yielder.yieldReturn(selectedValue);\r\n                }, function () {\r\n                    buffer.length = 0;\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n            });\r\n        };\r\n        Enumerable.prototype.count = function (predicate) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var count = 0;\r\n            if (predicate) {\r\n                _.forEach(function (x, i) {\r\n                    if (predicate(x, i))\r\n                        ++count;\r\n                });\r\n            }\r\n            else {\r\n                _.forEach(function () {\r\n                    ++count;\r\n                });\r\n            }\r\n            return count;\r\n        };\r\n        Enumerable.prototype.all = function (predicate) {\r\n            var result = true;\r\n            this.forEach(function (x) {\r\n                if (!predicate(x)) {\r\n                    result = false;\r\n                    return false;\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n        Enumerable.prototype.every = function (predicate) {\r\n            return this.all(predicate);\r\n        };\r\n        Enumerable.prototype.any = function (predicate) {\r\n            var result = false;\r\n            if (predicate) {\r\n                this.forEach(function (x) {\r\n                    result = predicate(x);\r\n                    return !result;\r\n                });\r\n            }\r\n            else {\r\n                this.forEach(function () {\r\n                    result = true;\r\n                    return false;\r\n                });\r\n            }\r\n            return result;\r\n        };\r\n        Enumerable.prototype.some = function (predicate) {\r\n            return this.any(predicate);\r\n        };\r\n        Enumerable.prototype.isEmpty = function () {\r\n            return !this.any();\r\n        };\r\n        Enumerable.prototype.contains = function (value, compareSelector) {\r\n            return compareSelector\r\n                ? this.any(function (v) { return compareSelector(v) === compareSelector(value); })\r\n                : this.any(function (v) { return v === value; });\r\n        };\r\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\r\n            var found = -1;\r\n            if (compareSelector)\r\n                this.forEach(function (element, i) {\r\n                    if (Values.areEqual(compareSelector(element), compareSelector(value), true)) {\r\n                        found = i;\r\n                        return false;\r\n                    }\r\n                });\r\n            else\r\n                this.forEach(function (element, i) {\r\n                    if (Values.areEqual(element, value, true)) {\r\n                        found = i;\r\n                        return false;\r\n                    }\r\n                });\r\n            return found;\r\n        };\r\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\r\n            var result = -1;\r\n            if (compareSelector)\r\n                this.forEach(function (element, i) {\r\n                    if (Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n                        result\r\n                            = i;\r\n                });\r\n            else\r\n                this.forEach(function (element, i) {\r\n                    if (Values.areEqual(element, value, true))\r\n                        result = i;\r\n                });\r\n            return result;\r\n        };\r\n        Enumerable.prototype.defaultIfEmpty = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var isFirst;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    isFirst = true;\r\n                    throwIfDisposed(disposed);\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    if (enumerator.moveNext()) {\r\n                        isFirst = false;\r\n                        return yielder.yieldReturn(enumerator.current);\r\n                    }\r\n                    else if (isFirst) {\r\n                        isFirst = false;\r\n                        return yielder.yieldReturn(defaultValue);\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.zip = function (second, resultSelector) {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var firstEnumerator;\r\n                var secondEnumerator;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    index = 0;\r\n                    firstEnumerator = _.getEnumerator();\r\n                    secondEnumerator = enumeratorFrom(second);\r\n                }, function (yielder) {\r\n                    return firstEnumerator.moveNext() && secondEnumerator.moveNext()\r\n                        && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\r\n                }, function () {\r\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.zipMultiple = function (second, resultSelector) {\r\n            var _ = this;\r\n            if (!second.length)\r\n                return Enumerable.empty();\r\n            return new Enumerable(function () {\r\n                var secondTemp;\r\n                var firstEnumerator;\r\n                var secondEnumerator;\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    secondTemp = new Queue_1.default(second);\r\n                    index = 0;\r\n                    firstEnumerator = _.getEnumerator();\r\n                    secondEnumerator = null;\r\n                }, function (yielder) {\r\n                    if (firstEnumerator.moveNext()) {\r\n                        while (true) {\r\n                            while (!secondEnumerator) {\r\n                                if (secondTemp.count) {\r\n                                    var next = secondTemp.dequeue();\r\n                                    if (next)\r\n                                        secondEnumerator = enumeratorFrom(next);\r\n                                }\r\n                                else\r\n                                    return yielder.yieldBreak();\r\n                            }\r\n                            if (secondEnumerator.moveNext())\r\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\r\n                            secondEnumerator.dispose();\r\n                            secondEnumerator = null;\r\n                        }\r\n                    }\r\n                    return yielder.yieldBreak();\r\n                }, function () {\r\n                    Utility_1.dispose(firstEnumerator, secondTemp);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\r\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var outerEnumerator;\r\n                var lookup;\r\n                var innerElements = null;\r\n                var innerCount = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    outerEnumerator = _.getEnumerator();\r\n                    lookup = Enumerable.from(inner)\r\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n                }, function (yielder) {\r\n                    while (true) {\r\n                        if (innerElements != null) {\r\n                            var innerElement = innerElements[innerCount++];\r\n                            if (innerElement !== undefined)\r\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n                            innerElement = null;\r\n                            innerCount = 0;\r\n                        }\r\n                        if (outerEnumerator.moveNext()) {\r\n                            var key = outerKeySelector(outerEnumerator.current);\r\n                            innerElements = lookup.get(key);\r\n                        }\r\n                        else {\r\n                            return yielder.yieldBreak();\r\n                        }\r\n                    }\r\n                }, function () {\r\n                    Utility_1.dispose(outerEnumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\r\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var lookup = null;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    lookup = Enumerable.from(inner)\r\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n                }, function (yielder) {\r\n                    return enumerator.moveNext()\r\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.concatWith = function (other) {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var firstEnumerator;\r\n                var secondEnumerator;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    firstEnumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    if (firstEnumerator != null) {\r\n                        if (firstEnumerator.moveNext())\r\n                            return yielder.yieldReturn(firstEnumerator.current);\r\n                        secondEnumerator = enumeratorFrom(other);\r\n                        firstEnumerator.dispose();\r\n                        firstEnumerator = null;\r\n                    }\r\n                    if (secondEnumerator.moveNext())\r\n                        return yielder.yieldReturn(secondEnumerator.current);\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.merge = function (enumerables) {\r\n            var _ = this;\r\n            if (!enumerables.length)\r\n                return _;\r\n            if (enumerables.length == 1)\r\n                return _.concatWith(enumerables[0]);\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var queue;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    queue = new Queue_1.default(enumerables);\r\n                }, function (yielder) {\r\n                    while (true) {\r\n                        while (!enumerator && queue.count) {\r\n                            enumerator = enumeratorFrom(queue.dequeue());\r\n                        }\r\n                        if (enumerator && enumerator.moveNext())\r\n                            return yielder.yieldReturn(enumerator.current);\r\n                        if (enumerator) {\r\n                            enumerator.dispose();\r\n                            enumerator = null;\r\n                            continue;\r\n                        }\r\n                        return yielder.yieldBreak();\r\n                    }\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator, queue);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.concat = function () {\r\n            var enumerables = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                enumerables[_i - 0] = arguments[_i];\r\n            }\r\n            var _ = this;\r\n            if (enumerables.length == 0)\r\n                return _;\r\n            if (enumerables.length == 1)\r\n                return _.concatWith(enumerables[0]);\r\n            return _.merge(enumerables);\r\n        };\r\n        Enumerable.prototype.insertAt = function (index, other) {\r\n            if (isNaN(index) || index < 0 || !isFinite(index))\r\n                throw new Error(\"'index' is invalid or out of bounds.\");\r\n            Integer_1.default.assert(index, \"index\");\r\n            var n = index;\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var firstEnumerator;\r\n                var secondEnumerator;\r\n                var count = 0;\r\n                var isEnumerated = false;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    count = 0;\r\n                    firstEnumerator = _.getEnumerator();\r\n                    secondEnumerator = enumeratorFrom(other);\r\n                    isEnumerated = false;\r\n                }, function (yielder) {\r\n                    if (count == n) {\r\n                        isEnumerated = true;\r\n                        if (secondEnumerator.moveNext())\r\n                            return yielder.yieldReturn(secondEnumerator.current);\r\n                    }\r\n                    if (firstEnumerator.moveNext()) {\r\n                        count++;\r\n                        return yielder.yieldReturn(firstEnumerator.current);\r\n                    }\r\n                    return !isEnumerated\r\n                        && secondEnumerator.moveNext()\r\n                        && yielder.yieldReturn(secondEnumerator.current);\r\n                }, function () {\r\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.alternateMultiple = function (sequence) {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var buffer, mode, enumerator, alternateEnumerator;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    alternateEnumerator = new ArrayEnumerator_1.default(Enumerable.toArray(sequence));\r\n                    enumerator = _.getEnumerator();\r\n                    var hasAtLeastOne = enumerator.moveNext();\r\n                    mode = hasAtLeastOne\r\n                        ? 1\r\n                        : 0;\r\n                    if (hasAtLeastOne)\r\n                        buffer = enumerator.current;\r\n                }, function (yielder) {\r\n                    switch (mode) {\r\n                        case 0:\r\n                            return yielder.yieldBreak();\r\n                        case 2:\r\n                            if (alternateEnumerator.moveNext())\r\n                                return yielder.yieldReturn(alternateEnumerator.current);\r\n                            alternateEnumerator.reset();\r\n                            mode = 1;\r\n                            break;\r\n                    }\r\n                    var latest = buffer;\r\n                    var another = enumerator.moveNext();\r\n                    mode = another\r\n                        ? 2\r\n                        : 0;\r\n                    if (another)\r\n                        buffer = enumerator.current;\r\n                    return yielder.yieldReturn(latest);\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator, alternateEnumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.alternateSingle = function (value) {\r\n            return this.alternateMultiple(Enumerable.make(value));\r\n        };\r\n        Enumerable.prototype.alternate = function () {\r\n            var sequence = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                sequence[_i - 0] = arguments[_i];\r\n            }\r\n            return this.alternateMultiple(sequence);\r\n        };\r\n        Enumerable.prototype.intersect = function (second, compareSelector) {\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var keys;\r\n                var outs;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    keys = new Dictionary_1.default(compareSelector);\r\n                    outs = new Dictionary_1.default(compareSelector);\r\n                    Enumerable.from(second)\r\n                        .forEach(function (key) {\r\n                        keys.addByKeyValue(key, true);\r\n                    });\r\n                }, function (yielder) {\r\n                    while (enumerator.moveNext()) {\r\n                        var current = enumerator.current;\r\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\r\n                            outs.addByKeyValue(current, true);\r\n                            return yielder.yieldReturn(current);\r\n                        }\r\n                    }\r\n                    return yielder.yieldBreak();\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\r\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\r\n            return Utility_1.using(this.getEnumerator(), function (e1) { return Utility_1.using(Enumerable.from(second).getEnumerator(), function (e2) {\r\n                while (e1.moveNext()) {\r\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n                        return false;\r\n                }\r\n                return !e2.moveNext();\r\n            }); });\r\n        };\r\n        Enumerable.prototype.union = function (second, compareSelector) {\r\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\r\n            var source = this;\r\n            return new Enumerable(function () {\r\n                var firstEnumerator;\r\n                var secondEnumerator;\r\n                var keys;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    firstEnumerator = source.getEnumerator();\r\n                    keys = new Dictionary_1.default(compareSelector);\r\n                }, function (yielder) {\r\n                    var current;\r\n                    if (secondEnumerator === undefined) {\r\n                        while (firstEnumerator.moveNext()) {\r\n                            current = firstEnumerator.current;\r\n                            if (!keys.containsKey(current)) {\r\n                                keys.addByKeyValue(current, null);\r\n                                return yielder.yieldReturn(current);\r\n                            }\r\n                        }\r\n                        secondEnumerator = Enumerable.from(second).getEnumerator();\r\n                    }\r\n                    while (secondEnumerator.moveNext()) {\r\n                        current = secondEnumerator.current;\r\n                        if (!keys.containsKey(current)) {\r\n                            keys.addByKeyValue(current, null);\r\n                            return yielder.yieldReturn(current);\r\n                        }\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(firstEnumerator, secondEnumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.orderBy = function (keySelector) {\r\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\r\n            return new OrderedEnumerable(this, keySelector, false);\r\n        };\r\n        Enumerable.prototype.orderByDescending = function (keySelector) {\r\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\r\n            return new OrderedEnumerable(this, keySelector, true);\r\n        };\r\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\r\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\r\n            var _ = this;\r\n            return new Enumerable(function () { return _.toLookup(keySelector, elementSelector, compareSelector)\r\n                .getEnumerator(); });\r\n        };\r\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\r\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\r\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\r\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\r\n            var _ = this;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                var key;\r\n                var compareKey;\r\n                var group;\r\n                var len;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                    if (enumerator.moveNext()) {\r\n                        key = keySelector(enumerator.current);\r\n                        compareKey = compareSelector(key);\r\n                        group = [elementSelector(enumerator.current)];\r\n                        len = 1;\r\n                    }\r\n                    else\r\n                        group = null;\r\n                }, function (yielder) {\r\n                    if (!group)\r\n                        return yielder.yieldBreak();\r\n                    var hasNext, c;\r\n                    while ((hasNext = enumerator.moveNext())) {\r\n                        c = enumerator.current;\r\n                        if (compareKey === compareSelector(keySelector(c)))\r\n                            group[len++] = elementSelector(c);\r\n                        else\r\n                            break;\r\n                    }\r\n                    var result = resultSelector(key, group);\r\n                    if (hasNext) {\r\n                        c = enumerator.current;\r\n                        key = keySelector(c);\r\n                        compareKey = compareSelector(key);\r\n                        group = [elementSelector(c)];\r\n                        len = 1;\r\n                    }\r\n                    else {\r\n                        group = null;\r\n                    }\r\n                    return yielder.yieldReturn(result);\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                    group = null;\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.buffer = function (size) {\r\n            if (size < 1 || !isFinite(size))\r\n                throw new Error(\"Invalid buffer size.\");\r\n            Integer_1.default.assert(size, \"size\");\r\n            var _ = this, len;\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    var array = ArrayUtility.initialize(size);\r\n                    len = 0;\r\n                    while (len < size && enumerator.moveNext) {\r\n                        array[len++] = enumerator.current;\r\n                    }\r\n                    array.length = len;\r\n                    return len && yielder.yieldReturn(array);\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.aggregate = function (func, seed) {\r\n            return this.scan(func, seed).lastOrDefault();\r\n        };\r\n        Enumerable.prototype.average = function (selector) {\r\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\r\n            var sum = 0;\r\n            var sumInfinite = 0;\r\n            var count = 0;\r\n            this.forEach(function (x) {\r\n                var value = selector(x);\r\n                if (isNaN(value)) {\r\n                    sum = NaN;\r\n                    return false;\r\n                }\r\n                if (isFinite(value))\r\n                    sum += value;\r\n                else\r\n                    sumInfinite += value > 0 ? (+1) : (-1);\r\n                ++count;\r\n            });\r\n            if (sumInfinite)\r\n                return sumInfinite * Infinity;\r\n            return (isNaN(sum) || !count)\r\n                ? NaN\r\n                : (sum / count);\r\n        };\r\n        Enumerable.prototype.max = function () {\r\n            return this.aggregate(Functions.Greater);\r\n        };\r\n        Enumerable.prototype.min = function () {\r\n            return this.aggregate(Functions.Lesser);\r\n        };\r\n        Enumerable.prototype.maxBy = function (keySelector) {\r\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\r\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\r\n        };\r\n        Enumerable.prototype.minBy = function (keySelector) {\r\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\r\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\r\n        };\r\n        Enumerable.prototype.sum = function (selector) {\r\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\r\n            var sum = 0;\r\n            var sumInfinite = 0;\r\n            this.forEach(function (x) {\r\n                var value = selector(x);\r\n                if (isNaN(value)) {\r\n                    sum = NaN;\r\n                    return false;\r\n                }\r\n                if (isFinite(value))\r\n                    sum += value;\r\n                else\r\n                    sumInfinite += value > 0 ? (+1) : (-1);\r\n            });\r\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\r\n        };\r\n        Enumerable.prototype.product = function (selector) {\r\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\r\n            var result = 1, exists = false;\r\n            this.forEach(function (x) {\r\n                exists = true;\r\n                var value = selector(x);\r\n                if (isNaN(value)) {\r\n                    result = NaN;\r\n                    return false;\r\n                }\r\n                if (value == 0) {\r\n                    result = 0;\r\n                    return false;\r\n                }\r\n                result *= value;\r\n            });\r\n            return (exists && isNaN(result)) ? NaN : result;\r\n        };\r\n        Enumerable.prototype.elementAt = function (index) {\r\n            if (isNaN(index) || index < 0 || !isFinite(index))\r\n                throw new Error(\"'index' is invalid or out of bounds.\");\r\n            Integer_1.default.assert(index, \"index\");\r\n            var n = index;\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x, i) {\r\n                if (i == n) {\r\n                    value = x;\r\n                    found = true;\r\n                    return false;\r\n                }\r\n            });\r\n            if (!found)\r\n                throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\r\n            return value;\r\n        };\r\n        Enumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            if (isNaN(index) || index < 0 || !isFinite(index))\r\n                throw new Error(\"'index' is invalid or out of bounds.\");\r\n            Integer_1.default.assert(index, \"index\");\r\n            var n = index;\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x, i) {\r\n                if (i == n) {\r\n                    value = x;\r\n                    found = true;\r\n                    return false;\r\n                }\r\n            });\r\n            return (!found) ? defaultValue : value;\r\n        };\r\n        Enumerable.prototype.first = function () {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x) {\r\n                value = x;\r\n                found = true;\r\n                return false;\r\n            });\r\n            if (!found)\r\n                throw new Error(\"first:No element satisfies the condition.\");\r\n            return value;\r\n        };\r\n        Enumerable.prototype.firstOrDefault = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x) {\r\n                value = x;\r\n                found = true;\r\n                return false;\r\n            });\r\n            return (!found) ? defaultValue : value;\r\n        };\r\n        Enumerable.prototype.last = function () {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x) {\r\n                found = true;\r\n                value = x;\r\n            });\r\n            if (!found)\r\n                throw new Error(\"last:No element satisfies the condition.\");\r\n            return value;\r\n        };\r\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x) {\r\n                found = true;\r\n                value = x;\r\n            });\r\n            return (!found) ? defaultValue : value;\r\n        };\r\n        Enumerable.prototype.single = function () {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x) {\r\n                if (!found) {\r\n                    found = true;\r\n                    value = x;\r\n                }\r\n                else\r\n                    throw new Error(\"single:sequence contains more than one element.\");\r\n            });\r\n            if (!found)\r\n                throw new Error(\"single:No element satisfies the condition.\");\r\n            return value;\r\n        };\r\n        Enumerable.prototype.singleOrDefault = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var value = undefined;\r\n            var found = false;\r\n            _.forEach(function (x) {\r\n                if (!found) {\r\n                    found = true;\r\n                    value = x;\r\n                }\r\n                else\r\n                    throw new Error(\"single:sequence contains more than one element.\");\r\n            });\r\n            return (!found) ? defaultValue : value;\r\n        };\r\n        Enumerable.prototype.share = function () {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var sharedEnumerator;\r\n            return new Enumerable(function () {\r\n                return new EnumeratorBase_1.default(function () {\r\n                    // assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n                    if (!sharedEnumerator)\r\n                        sharedEnumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    return sharedEnumerator.moveNext()\r\n                        && yielder.yieldReturn(sharedEnumerator.current);\r\n                });\r\n            }, function () {\r\n                Utility_1.dispose(sharedEnumerator);\r\n            });\r\n        };\r\n        Enumerable.prototype.memoize = function () {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            var cache;\r\n            var enumerator;\r\n            return new Enumerable(function () {\r\n                var index = 0;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    if (!enumerator)\r\n                        enumerator = _.getEnumerator();\r\n                    if (!cache)\r\n                        cache = [];\r\n                    index = 0;\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    var i = index++;\r\n                    if (i >= cache.length) {\r\n                        return (enumerator.moveNext())\r\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\r\n                            : false;\r\n                    }\r\n                    return yielder.yieldReturn(cache[i]);\r\n                });\r\n            }, function () {\r\n                disposed = true;\r\n                if (cache)\r\n                    cache.length = 0;\r\n                cache = null;\r\n                Utility_1.dispose(enumerator);\r\n                enumerator = null;\r\n            });\r\n        };\r\n        Enumerable.prototype.catchError = function (handler) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    try {\r\n                        throwIfDisposed(disposed);\r\n                        enumerator = _.getEnumerator();\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                }, function (yielder) {\r\n                    try {\r\n                        throwIfDisposed(disposed);\r\n                        if (enumerator.moveNext())\r\n                            return yielder.yieldReturn(enumerator.current);\r\n                    }\r\n                    catch (e) {\r\n                        handler(e);\r\n                    }\r\n                    return false;\r\n                }, function () {\r\n                    Utility_1.dispose(enumerator);\r\n                });\r\n            });\r\n        };\r\n        Enumerable.prototype.finallyAction = function (action) {\r\n            var _ = this, disposed = !_.throwIfDisposed();\r\n            return new Enumerable(function () {\r\n                var enumerator;\r\n                return new EnumeratorBase_1.default(function () {\r\n                    throwIfDisposed(disposed);\r\n                    enumerator = _.getEnumerator();\r\n                }, function (yielder) {\r\n                    throwIfDisposed(disposed);\r\n                    return (enumerator.moveNext())\r\n                        ? yielder.yieldReturn(enumerator.current)\r\n                        : false;\r\n                }, function () {\r\n                    try {\r\n                        Utility_1.dispose(enumerator);\r\n                    }\r\n                    finally {\r\n                        action();\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return Enumerable;\r\n    })(DisposableBase_1.default);\r\n    exports.Enumerable = Enumerable;\r\n    var ArrayEnumerable = (function (_super) {\r\n        __extends(ArrayEnumerable, _super);\r\n        function ArrayEnumerable(source) {\r\n            _super.call(this, function () {\r\n                _.throwIfDisposed();\r\n                return new ArrayEnumerator_1.default(function () {\r\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n                    return _._source;\r\n                });\r\n            });\r\n            var _ = this;\r\n            _._disposableObjectName = \"ArrayEnumerable\";\r\n            _._source = source;\r\n        }\r\n        ArrayEnumerable.prototype._onDispose = function () {\r\n            _super.prototype._onDispose.call(this);\r\n            this._source = null;\r\n        };\r\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\r\n            get: function () {\r\n                return this._source;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        ArrayEnumerable.prototype.toArray = function () {\r\n            var s = this.source;\r\n            if (!s)\r\n                return [];\r\n            if (s instanceof Array)\r\n                return s.slice();\r\n            var len = s.length, result = ArrayUtility.initialize(len);\r\n            for (var i = 0; i < len; ++i) {\r\n                result[i] = s[i];\r\n            }\r\n            return result;\r\n        };\r\n        ArrayEnumerable.prototype.asEnumerable = function () {\r\n            return new ArrayEnumerable(this._source);\r\n        };\r\n        ArrayEnumerable.prototype.forEach = function (action) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source;\r\n            if (source) {\r\n                for (var i = 0; i < source.length; ++i) {\r\n                    if (action(source[i], i) === false)\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        ArrayEnumerable.prototype.any = function (predicate) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source, len = source ? source.length : 0;\r\n            return len && (!predicate || _super.prototype.any.call(this, predicate));\r\n        };\r\n        ArrayEnumerable.prototype.count = function (predicate) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source, len = source ? source.length : 0;\r\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\r\n        };\r\n        ArrayEnumerable.prototype.elementAt = function (index) {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source;\r\n            return (index < source.length && index >= 0)\r\n                ? source[index]\r\n                : _super.prototype.elementAt.call(this, index);\r\n        };\r\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source;\r\n            return (index < source.length && index >= 0)\r\n                ? source[index]\r\n                : defaultValue;\r\n        };\r\n        ArrayEnumerable.prototype.first = function () {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source;\r\n            return (source && source.length)\r\n                ? source[0]\r\n                : _super.prototype.first.call(this);\r\n        };\r\n        ArrayEnumerable.prototype.firstOrDefault = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source;\r\n            return (source && source.length)\r\n                ? source[0]\r\n                : defaultValue;\r\n        };\r\n        ArrayEnumerable.prototype.last = function () {\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source, len = source.length;\r\n            return (len)\r\n                ? source[len - 1]\r\n                : _super.prototype.last.call(this);\r\n        };\r\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            var _ = this;\r\n            _.throwIfDisposed();\r\n            var source = _._source, len = source.length;\r\n            return len\r\n                ? source[len - 1]\r\n                : defaultValue;\r\n        };\r\n        ArrayEnumerable.prototype.skip = function (count) {\r\n            var _ = this;\r\n            if (!count || count < 0)\r\n                return _.asEnumerable();\r\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, count); });\r\n        };\r\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\r\n            if (count === void 0) { count = 1; }\r\n            var _ = this, len = _._source ? _._source.length : 0;\r\n            return _.take(len - count);\r\n        };\r\n        ArrayEnumerable.prototype.takeFromLast = function (count) {\r\n            if (!count || count < 0)\r\n                return Enumerable.empty();\r\n            var _ = this, len = _._source\r\n                ? _._source.length\r\n                : 0;\r\n            return _.skip(len - count);\r\n        };\r\n        ArrayEnumerable.prototype.reverse = function () {\r\n            var _ = this;\r\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, _._source\r\n                ? (_._source.length - 1)\r\n                : 0, -1); });\r\n        };\r\n        ArrayEnumerable.prototype.memoize = function () {\r\n            return new ArrayEnumerable(this._source);\r\n        };\r\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\r\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\r\n            if (second instanceof Array)\r\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\r\n            if (second instanceof ArrayEnumerable)\r\n                return second.sequenceEqual(this.source, equalityComparer);\r\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\r\n        };\r\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\r\n            if (separator === void 0) { separator = \"\"; }\r\n            if (selector === void 0) { selector = Functions.Identity; }\r\n            var s = this._source;\r\n            return !selector && s instanceof Array\r\n                ? s.join(separator)\r\n                : _super.prototype.toJoinedString.call(this, separator, selector);\r\n        };\r\n        return ArrayEnumerable;\r\n    })(Enumerable);\r\n    var Grouping = (function (_super) {\r\n        __extends(Grouping, _super);\r\n        function Grouping(_groupKey, elements) {\r\n            _super.call(this, elements);\r\n            this._groupKey = _groupKey;\r\n        }\r\n        Object.defineProperty(Grouping.prototype, \"key\", {\r\n            get: function () {\r\n                return this._groupKey;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        return Grouping;\r\n    })(ArrayEnumerable);\r\n    var Lookup = (function () {\r\n        function Lookup(_dictionary) {\r\n            this._dictionary = _dictionary;\r\n        }\r\n        Object.defineProperty(Lookup.prototype, \"count\", {\r\n            get: function () {\r\n                return this._dictionary.count;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Lookup.prototype.get = function (key) {\r\n            return this._dictionary.getValue(key);\r\n        };\r\n        Lookup.prototype.contains = function (key) {\r\n            return this._dictionary.containsKey(key);\r\n        };\r\n        Lookup.prototype.getEnumerator = function () {\r\n            var _ = this;\r\n            var enumerator;\r\n            return new EnumeratorBase_1.default(function () {\r\n                enumerator = _._dictionary.getEnumerator();\r\n            }, function (yielder) {\r\n                if (!enumerator.moveNext())\r\n                    return false;\r\n                var current = enumerator.current;\r\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\r\n            }, function () {\r\n                Utility_1.dispose(enumerator);\r\n            });\r\n        };\r\n        return Lookup;\r\n    })();\r\n    var WhereEnumerable = (function (_super) {\r\n        __extends(WhereEnumerable, _super);\r\n        function WhereEnumerable(prevSource, prevPredicate) {\r\n            _super.call(this, null);\r\n            this.prevSource = prevSource;\r\n            this.prevPredicate = prevPredicate;\r\n        }\r\n        WhereEnumerable.prototype.where = function (predicate) {\r\n            if (predicate.length > 1)\r\n                return _super.prototype.where.call(this, predicate);\r\n            var prevPredicate = this.prevPredicate;\r\n            var composedPredicate = function (x) { return prevPredicate(x) && predicate(x); };\r\n            return new WhereEnumerable(this.prevSource, composedPredicate);\r\n        };\r\n        WhereEnumerable.prototype.select = function (selector) {\r\n            if (selector.length > 1)\r\n                return _super.prototype.select.call(this, selector);\r\n            return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector);\r\n        };\r\n        WhereEnumerable.prototype.getEnumerator = function () {\r\n            var predicate = this.prevPredicate;\r\n            var source = this.prevSource;\r\n            var enumerator;\r\n            return new EnumeratorBase_1.default(function () {\r\n                enumerator = source.getEnumerator();\r\n            }, function (yielder) {\r\n                while (enumerator.moveNext()) {\r\n                    if (predicate(enumerator.current))\r\n                        return yielder.yieldReturn(enumerator.current);\r\n                }\r\n                return false;\r\n            }, function () {\r\n                Utility_1.dispose(enumerator);\r\n            });\r\n        };\r\n        WhereEnumerable.prototype._onDispose = function () {\r\n            _super.prototype._onDispose.call(this);\r\n            this.prevPredicate = null;\r\n            this.prevSource = null;\r\n        };\r\n        return WhereEnumerable;\r\n    })(Enumerable);\r\n    var WhereSelectEnumerable = (function (_super) {\r\n        __extends(WhereSelectEnumerable, _super);\r\n        function WhereSelectEnumerable(prevSource, prevPredicate, prevSelector) {\r\n            _super.call(this, null);\r\n            this.prevSource = prevSource;\r\n            this.prevPredicate = prevPredicate;\r\n            this.prevSelector = prevSelector;\r\n        }\r\n        WhereSelectEnumerable.prototype.where = function (predicate) {\r\n            if (predicate.length > 1)\r\n                return _super.prototype.where.call(this, predicate);\r\n            return new WhereEnumerable(this, predicate);\r\n        };\r\n        WhereSelectEnumerable.prototype.select = function (selector) {\r\n            if (selector.length > 1)\r\n                return _super.prototype.select.call(this, selector);\r\n            var _ = this;\r\n            var prevSelector = _.prevSelector;\r\n            var composedSelector = function (x) { return selector(prevSelector(x)); };\r\n            return new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n        };\r\n        WhereSelectEnumerable.prototype.getEnumerator = function () {\r\n            var _ = this, predicate = _.prevPredicate, source = _.prevSource, selector = _.prevSelector, enumerator;\r\n            return new EnumeratorBase_1.default(function () {\r\n                enumerator = source.getEnumerator();\r\n            }, function (yielder) {\r\n                while (enumerator.moveNext()) {\r\n                    var c = enumerator.current;\r\n                    if (predicate == null || predicate(c)) {\r\n                        return yielder.yieldReturn(selector(c));\r\n                    }\r\n                }\r\n                return false;\r\n            }, function () {\r\n                Utility_1.dispose(enumerator);\r\n            });\r\n        };\r\n        WhereSelectEnumerable.prototype._onDispose = function () {\r\n            var _ = this;\r\n            _super.prototype._onDispose.call(this);\r\n            _.prevPredicate = null;\r\n            _.prevSource = null;\r\n            _.prevSelector = null;\r\n        };\r\n        return WhereSelectEnumerable;\r\n    })(Enumerable);\r\n    var OrderedEnumerable = (function (_super) {\r\n        __extends(OrderedEnumerable, _super);\r\n        function OrderedEnumerable(source, keySelector, descending, parent) {\r\n            _super.call(this, null);\r\n            this.source = source;\r\n            this.keySelector = keySelector;\r\n            this.descending = descending;\r\n            this.parent = parent;\r\n        }\r\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, descending) {\r\n            return new OrderedEnumerable(this.source, keySelector, descending, this);\r\n        };\r\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\r\n            return this.createOrderedEnumerable(keySelector, false);\r\n        };\r\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\r\n            return this.createOrderedEnumerable(keySelector, true);\r\n        };\r\n        OrderedEnumerable.prototype.getEnumerator = function () {\r\n            var _ = this;\r\n            var buffer;\r\n            var indexes;\r\n            var index = 0;\r\n            return new EnumeratorBase_1.default(function () {\r\n                index = 0;\r\n                buffer = [];\r\n                indexes = [];\r\n                Enumerable.forEach(_.source, function (item, i) {\r\n                    buffer[i] = item;\r\n                    indexes[i] = i;\r\n                });\r\n                var sortContext = SortContext.create(_);\r\n                sortContext.generateKeys(buffer);\r\n                indexes.sort(function (a, b) { return sortContext.compare(a, b); });\r\n            }, function (yielder) {\r\n                return (index < indexes.length)\r\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\r\n                    : false;\r\n            }, function () {\r\n                if (buffer)\r\n                    buffer.length = 0;\r\n                buffer = null;\r\n                if (indexes)\r\n                    indexes.length = 0;\r\n                indexes = null;\r\n            });\r\n        };\r\n        OrderedEnumerable.prototype._onDispose = function () {\r\n            _super.prototype._onDispose.call(this);\r\n            this.source = null;\r\n            this.keySelector = null;\r\n            this.descending = null;\r\n            this.parent = null;\r\n        };\r\n        return OrderedEnumerable;\r\n    })(Enumerable);\r\n    var SortContext = (function () {\r\n        function SortContext(keySelector, descending, child) {\r\n            this.keySelector = keySelector;\r\n            this.descending = descending;\r\n            this.child = child;\r\n            this.keys = null;\r\n        }\r\n        SortContext.create = function (orderedEnumerable, currentContext) {\r\n            if (currentContext === void 0) { currentContext = null; }\r\n            var context = new SortContext(orderedEnumerable.keySelector, orderedEnumerable.descending, currentContext);\r\n            if (orderedEnumerable.parent)\r\n                return SortContext.create(orderedEnumerable.parent, context);\r\n            return context;\r\n        };\r\n        SortContext.prototype.generateKeys = function (source) {\r\n            var _ = this;\r\n            var len = source.length;\r\n            var keySelector = _.keySelector;\r\n            var keys = new Array(len);\r\n            for (var i = 0; i < len; ++i) {\r\n                keys[i] = keySelector(source[i]);\r\n            }\r\n            _.keys = keys;\r\n            if (_.child)\r\n                _.child.generateKeys(source);\r\n        };\r\n        SortContext.prototype.compare = function (index1, index2) {\r\n            var _ = this, keys = _.keys;\r\n            var comparison = Values.compare(keys[index1], keys[index2]);\r\n            if (comparison == 0) {\r\n                var child = _.child;\r\n                return child\r\n                    ? child.compare(index1, index2)\r\n                    : Values.compare(index1, index2);\r\n            }\r\n            return _.descending ? -comparison : comparison;\r\n        };\r\n        return SortContext;\r\n    })();\r\n    function throwIfDisposed(disposed, className) {\r\n        if (className === void 0) { className = \"Enumerable\"; }\r\n        if (disposed)\r\n            throw new ObjectDisposedException_1.default(className);\r\n    }\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Enumerable;\r\n});\r\n//# sourceMappingURL=Linq.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\nimport * as Values from '../System/Compare';\r\nimport * as Arrays from '../System/Collections/Array/Compare';\r\nimport * as ArrayUtility from '../System/Collections/Array/Utility';\r\nimport * as Enumerator from '../System/Collections/Enumeration/Enumerator';\r\nimport Type from '../System/Types';\r\nimport Integer from '../System/Integer';\r\nimport BaseFunctions from '../System/Functions';\r\nimport ArrayEnumerator from '../System/Collections/Enumeration/ArrayEnumerator';\r\nimport EnumeratorBase from '../System/Collections/Enumeration/EnumeratorBase';\r\nimport Dictionary from '../System/Collections/Dictionaries/Dictionary';\r\nimport Queue from '../System/Collections/Queue';\r\nimport {dispose, disposeThese, using} from '../System/Disposable/Utility';\r\nimport DisposableBase from '../System/Disposable/DisposableBase';\r\nimport ArgumentException from '../System/Exceptions/ArgumentException';\r\nimport ObjectDisposedException from '../System/Disposable/ObjectDisposedException';\r\n\r\nimport enumeratorFrom = Enumerator.from;\r\nimport enumeratorForEach = Enumerator.forEach;\r\n\r\n'use strict';\r\n\r\n// #region Local Constants.\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\nconst\r\nLENGTH                 = 'length',\r\nGET_ENUMERATOR         = 'getEnumerator',\r\nUNSUPPORTED_ENUMERABLE = \"Unsupported enumerable.\";\r\n// #endregion\r\n\r\n// TODO: Create UnsupportedEnumerableException.\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t}\r\n\r\n\t/**\r\n\t * Static shortcut for creating an ArrayEnumerable.\r\n\t */\r\n\tstatic fromArray<T>(array:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(array);\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar type = Type.of(source);\r\n\t\tif(type.isObject)\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(source instanceof Array)\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(type.member(GET_ENUMERATOR).isFunction)\r\n\t\t\t\treturn new Enumerable(()=>(<IEnumerable<T>>source).getEnumerator());\r\n\r\n\t\t\tif(type.member(LENGTH).isValidNumber)\r\n\t\t\t\treturn new ArrayEnumerable<T>(<IArray<T>>source);\r\n\t\t}\r\n\r\n\t\tthrow new Error(UNSUPPORTED_ENUMERABLE);\r\n\t}\r\n\r\n\tstatic toArray<T>(source:IEnumerable<T> | IArray<T>):T[]\r\n\t{\r\n\t\tvar type = Type.of(source);\r\n\t\tif(type.isObject)\r\n\t\t{\r\n\t\t\tif(source instanceof Array)\r\n\t\t\t\treturn source.slice();\r\n\r\n\t\t\tif(type.member(LENGTH).isValidNumber)\r\n\t\t\t\tsource = new ArrayEnumerable<T>(<IArray<T>>source);\r\n\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source.toArray();\r\n\r\n\t\t\tif(type.member(GET_ENUMERATOR).isFunction)\r\n\t\t\t{\r\n\t\t\t\tvar result:T[] = [];\r\n\t\t\t\tenumeratorForEach<T>(\r\n\t\t\t\t\t(<IEnumerable<T>>source).getEnumerator(), (e, i) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[i] = e;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new Error(UNSUPPORTED_ENUMERABLE);\r\n\t}\r\n\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(values[Integer.random(values.length)])\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0; // Let the compiler know this is an int.\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic empty<T>():Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\tFunctions.False\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element)\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration does not break.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic make<T>(element:T):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\tstatic range(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.range(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.rangeDown(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number = 0,\r\n\t\tto:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(to))\r\n\t\t\tthrow new Error(\"Must have a valid 'to' value.\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\t// Range to infinity has a more efficient mechanism.\r\n\t\tif(!isFinite(to))\r\n\t\t\treturn Enumerable.range(start, Infinity, (start<to) ? (+step) : (-step));\r\n\r\n\t\treturn new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn start<to\r\n\r\n\t\t\t\t\t? new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t: new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):Enumerable<RegExpExecArray>\r\n\t{\r\n\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new Enumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++))\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(seed:T, valueFactory:Selector<T, T>, skipSeed:Boolean = false):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic defer<T>(enumerableFactory:() => IEnumerable<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = enumerableFactory().getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> enumerator.moveNext() && yielder.yieldReturn(enumerator.current),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerable<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\tif(enumerable)\r\n\t\t{\r\n\t\t\tusing(Enumerator.from(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tEnumerator.forEach(e, action);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Instance methods...\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(<any>action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\tvar result:T[] = [];\r\n\r\n\t\tif(predicate) return this.where(predicate).toArray();\r\n\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tresult[i] = x\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==undefined) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach(x=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x)] = elementSelector(x);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach(x=> dict.addByKeyValue(keySelector(x), elementSelector(x)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tforce(defaultAction:EnumerableAction = EnumerableAction.Break):void\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.doAction(element => defaultAction);\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Simply return this.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\tvar c:number = count;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<c\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar skipping:boolean = true;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(skipping)\r\n\t\t\t\t\tskipping = predicate(element, index);\r\n\r\n\t\t\t\treturn skipping\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttake(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals no limit.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn _.doAction((element:T, index?:number) => index<c);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all in reverse.\r\n\t\t\treturn _.reverse();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn _.reverse().take(count);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.fromArray<T>(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(func);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tenumerator = func(enumerator.current).getEnumerator();\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdisposeThese(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\tif(c instanceof Array)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = Enumerable.fromArray<any>(c)\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==undefined; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(selector.length<2)\r\n\t\t\treturn new WhereSelectEnumerable(_, null, selector);\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(collectionSelector:Selector<T, IEnumerable<TResult | IArray<TResult>>>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerable<TElement> | IArray<TResult>> | Selector<T, IArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, any>,\r\n\t\tresultSelector?:(collection:any, middle:any) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a, b) => b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===undefined && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = Enumerator.from(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tchoose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==undefined)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(predicate.length<2)\r\n\t\t\treturn new WhereEnumerable(_, predicate);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (): TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\ttypeName = null;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn <Enumerable<any>>((typeName===null)\r\n\t\t\t? this.where(x=>\r\n\t\t{\r\n\t\t\treturn x instanceof type;\r\n\t\t})\r\n\t\t\t: this.where(x=>\r\n\t\t{\r\n\t\t\treturn typeof x===typeName;\r\n\t\t}));\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerable<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tEnumerable.forEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):Enumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0] results in [0,1,2,0];\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(compareKey===key)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tindex>0\r\n\t\t\t\t\t&& yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar count:number = 0;\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\t_.forEach((x, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\t++count;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = true;\r\n\t\tthis.forEach(x =>\r\n\t\t{\r\n\t\t\tif(!predicate(x))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = false;\r\n\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\tthis.forEach(x =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true)) result\r\n\t\t\t\t\t= i;\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerable<TSecond> | IArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tfirstEnumerator.moveNext() && secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerable<TSecond> | IArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==undefined)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerable<TInner> | IArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcatWith(other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator!=null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(firstEnumerator.moveNext()) return yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\t\tfirstEnumerator.dispose();\r\n\t\t\t\t\t\t\tfirstEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(secondEnumerator.moveNext()) return yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!enumerables.length)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerable<T> | IArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerable<T> | IArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerable<T> | IArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn _.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tinsertAt(index:number, other:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerable<T> | IArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tEnumerable.from<T>(second)\r\n\t\t\t\t\t\t\t.forEach(key=>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);  // Should Dictionary be IDisposable?\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\t\te1=> using(\r\n\t\t\t\tEnumerable.from<T>(second).getEnumerator(),\r\n\t\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar source = this;\r\n\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = source.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===undefined)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = Enumerable.from<T>(second).getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Ordering Methods\r\n\r\n\torderBy<TKey>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T>(this, keySelector, false);\r\n\t}\r\n\r\n\torderByDescending<TKey>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T>(this, keySelector, true);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement> = Functions.Identity,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => _.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>\r\n\t\t\t= Functions.Identity,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):IEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T)\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tvar count = 0; // No need to make integer if the result could be a float.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tfunction(x)\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(sumInfinite) // Not zero?\r\n\t\t\treturn sumInfinite*Infinity;\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t\t * The end all difference is that the user must declare .where(predicate) before .first().\r\n\t\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"first:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"single:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n\r\n\t\t\t\t\t\tif(!sharedEnumerator)\r\n\t\t\t\t\t\t\tsharedEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tsharedEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(sharedEnumerator.current)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:Error) => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass ArrayEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Could possibly be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar s = this.source;\r\n\t\tif(!s)\r\n\t\t\treturn [];\r\n\r\n\t\tif(s instanceof Array)\r\n\t\t\treturn (<any>s).slice();\r\n\r\n\t\tvar len = s.length, result:T[] = ArrayUtility.initialize<T>(len);\r\n\t\tfor(let i = 0; i<len; ++i)\r\n\t\t{\r\n\t\t\tresult[i] = s[i];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\tif(source)\r\n\t\t{\r\n\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\tfor(let i = 0; i<source.length; ++i)\r\n\t\t\t{\r\n\t\t\t\t// _.assertIsNotDisposed(); // Assertion here is unnecessary since we already have a reference to the source array.\r\n\t\t\t\tif(<any>action(source[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: super.elementAt(index);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: super.first();\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || count<0) // Out of bounds? Simply return a unfiltered enumerable.\r\n\t\t\treturn _.asEnumerable();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, len = _._source ? _._source.length : 0;\r\n\t\treturn _.take(len - count);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || count<0) return Enumerable.empty<T>();\r\n\r\n\t\tvar _   = this,\r\n\t\t    len = _._source\r\n\t\t\t    ? _._source.length\r\n\t\t\t    : 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerable<T> | IArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(second instanceof Array)\r\n\t\t\treturn Arrays.areEqual(this.source, <IArray<T>>second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn (<ArrayEnumerable<T>>second).sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && s instanceof Array\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends IEnumerable<TElement>\r\n{\r\n\tkey: TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount: number;\r\n\tget(key:TKey): TElement[];\r\n\tcontains(key:TKey): boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WhereEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<T>,\r\n\t\tprivate prevPredicate:Predicate<T>  // predicate.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\tvar prevPredicate = this.prevPredicate;\r\n\t\tvar composedPredicate = (x:T) => prevPredicate(x) && predicate(x);\r\n\t\treturn new WhereEnumerable<T>(this.prevSource, composedPredicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\treturn new WhereSelectEnumerable<T, TSelect>(\r\n\t\t\tthis.prevSource,\r\n\t\t\tthis.prevPredicate,\r\n\t\t\tselector\r\n\t\t);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar predicate = this.prevPredicate;\r\n\t\tvar source = this.prevSource;\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(enumerator.current))\r\n\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.prevPredicate = null;\r\n\t\tthis.prevSource = null;\r\n\t}\r\n}\r\n\r\nclass WhereSelectEnumerable<TSource, T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<TSource>,\r\n\t\tprivate prevPredicate:Predicate<TSource>,  // predicate.length always <= 1\r\n\t\tprivate prevSelector:Selector<TSource, T> // selector.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:(value:T, index?:number) => boolean):Enumerable<T>\r\n\t{\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\treturn new WhereEnumerable<T>(this, predicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t// if selector use index, can't compose\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prevSelector = _.prevSelector;\r\n\t\tvar composedSelector = (x:TSource) => selector(prevSelector(x));\r\n\t\treturn new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _                             = this,\r\n\t\t    predicate                     = _.prevPredicate,\r\n\t\t    source                        = _.prevSource,\r\n\t\t    selector:Selector<TSource, T> = _.prevSelector, // Type definition needed for correct inference.\r\n\t\t    enumerator:IEnumerator<TSource>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\tif(predicate==null || predicate(c))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selector(c));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.prevPredicate = null;\r\n\t\t_.prevSource = null;\r\n\t\t_.prevSelector = null;\r\n\t}\r\n}\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n}\r\n\r\nclass OrderedEnumerable<T>\r\nextends Enumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => any,\r\n\t\tpublic descending:boolean,\r\n\t\tpublic parent?:OrderedEnumerable<T>)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => any,\r\n\t\tdescending:boolean):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T>(this.source, keySelector, descending, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, false);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, true);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = [];\r\n\t\t\t\tindexes = [];\r\n\t\t\t\tEnumerable.forEach(\r\n\t\t\t\t\t_.source, (item, i) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer[i] = item;\r\n\t\t\t\t\t\tindexes[i] = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tvar sortContext = SortContext.create(_);\r\n\t\t\t\tsortContext.generateKeys(buffer);\r\n\r\n\t\t\t\tindexes.sort((a, b) => sortContext.compare(a, b));\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.descending = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n}\r\n\r\nclass SortContext<T, TOrderBy>\r\n{\r\n\r\n\tkeys:TOrderBy[];\r\n\r\n\tconstructor(\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic descending:boolean,\r\n\t\tpublic child:SortContext<T, TOrderBy>)\r\n\t{\r\n\t\tthis.keys = null;\r\n\t}\r\n\r\n\tstatic create<T, TOrderBy>(\r\n\t\torderedEnumerable:OrderedEnumerable<T>,\r\n\t\tcurrentContext:SortContext<T, TOrderBy> = null):SortContext<T, TOrderBy>\r\n\t{\r\n\t\tvar context:SortContext<T, TOrderBy>\r\n\t\t\t    = new SortContext<T, TOrderBy>(\r\n\t\t\torderedEnumerable.keySelector,\r\n\t\t\torderedEnumerable.descending,\r\n\t\t\tcurrentContext\r\n\t\t);\r\n\r\n\t\tif(orderedEnumerable.parent)\r\n\t\t\treturn SortContext.create(orderedEnumerable.parent, context);\r\n\r\n\t\treturn context;\r\n\t}\r\n\r\n\tgenerateKeys(source:IArray<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar len = source.length;\r\n\t\tvar keySelector:(value:T) => TOrderBy = _.keySelector;\r\n\t\tvar keys = new Array<TOrderBy>(len);\r\n\t\tfor(let i = 0; i<len; ++i)\r\n\t\t{\r\n\t\t\tkeys[i] = keySelector(source[i]);\r\n\t\t}\r\n\t\t_.keys = keys;\r\n\r\n\t\tif(_.child)\r\n\t\t\t_.child.generateKeys(source);\r\n\t}\r\n\r\n\tcompare(index1:number, index2:number):number\r\n\t{\r\n\t\tvar _ = this, keys = _.keys;\r\n\t\tvar comparison = Values.compare(keys[index1], keys[index2]);\r\n\r\n\t\tif(comparison==0)\r\n\t\t{\r\n\t\t\tvar child = _.child;\r\n\t\t\treturn child\r\n\t\t\t\t? child.compare(index1, index2)\r\n\t\t\t\t: Values.compare(index1, index2);\r\n\t\t}\r\n\r\n\t\treturn _.descending ? -comparison : comparison;\r\n\t}\r\n}\r\n\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean, className:string = \"Enumerable\"):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(className);\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}