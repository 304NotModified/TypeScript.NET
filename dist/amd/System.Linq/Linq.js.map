{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Values","Arrays","ArrayUtility","Enumerator_1","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","dispose_1","DisposableBase_1","Exception_1","ObjectDisposedException_1","KeySortedContext_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","createSortContext","orderedEnumerable","currentContext","context","keySelector","order","comparer","parent","throwIfDisposed","disposed","className","VOID0","LinqFunctions","_super","apply","arguments","Greater","a","Lesser","Functions","freeze","UnsupportedEnumerableException","call","Enumerable","_enumeratorFactory","finalizer","fromArray","array","ArrayEnumerable","from","source","isObject","Array","isArray","isEnumerable","getEnumerator","isArrayLike","toArray","slice","result","forEach","e","i","_onDispose","choice","values","yielder","yieldReturn","random","select","cycle","index","length","empty","False","repeat","element","count","Infinity","isNaN","isFinite","assert","c","repeatWithFinalize","initializer","make","range","start","step","Error","value","current","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","matches","input","pattern","flags","type","STRING","RegExp","indexOf","regex","match","exec","generate","factory","unfold","seed","valueFactory","skipSeed","isFirst","defer","enumerableFactory","enumerator","moveNext","dispose","enumerable","action","using","map","selector","max","takeUntil","v","aggregate","min","_","predicate","where","copyTo","target","x","asEnumerable","toLookup","elementSelector","compareSelector","Identity","dict","key","getValue","push","addByKeyValue","Lookup","toMap","obj","toDictionary","toJoinedString","separator","join","doAction","actionResult","yieldBreak","force","defaultAction","skip","skipWhile","skipping","take","takeWhile","includeUntilValue","found","takeExceptLast","q","enqueue","dequeue","takeFromLast","reverse","traverseBreadthFirst","func","resultSelector","buffer","len","nestLevel","next","selectMany","any","traverseDepthFirst","enumeratorStack","these","flatten","middleEnumerator","pairwise","prev","scan","isUseSeed","WhereSelectEnumerable","collectionSelector","undefined","middleSeq","choose","WhereEnumerable","ofType","typeName","Number","NUMBER","String","Boolean","BOOLEAN","Function","FUNCTION","except","second","keys","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","shuffle","capacity","selectedIndex","selectedValue","all","every","some","isEmpty","contains","areEqual","lastIndexOf","defaultIfEmpty","defaultValue","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","innerElement","get","groupJoin","concatWith","other","merge","enumerables","queue","concat","_i","insertAt","n","isEnumerated","alternateMultiple","sequence","mode","alternateEnumerator","hasAtLeastOne","reset","latest","another","alternateSingle","alternate","intersect","outs","sequenceEqual","equalityComparer","e1","e2","union","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","_this","partitionBy","elements","Grouping","group","hasNext","size","initialize","lastOrDefault","average","numberOrNaN","sum","sumInfinite","NaN","maxBy","minBy","product","exists","quotient","elementAt","elementAtOrDefault","first","firstOrDefault","last","single","singleOrDefault","share","sharedEnumerator","memoize","cache","catchError","handler","finallyAction","_source","_disposableObjectName","defineProperty","configurable","s","_groupKey","_dictionary","prevSource","prevPredicate","composedPredicate","prevSelector","composedSelector","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes"],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../System/Compare\", \"../System/Collections/Array/Compare\", \"../System/Collections/Array/Utility\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Types\", \"../System/Integer\", \"../System/Functions\", \"../System/Collections/Enumeration/ArrayEnumerator\", \"../System/Collections/Enumeration/EnumeratorBase\", \"../System/Collections/Dictionaries/Dictionary\", \"../System/Collections/Queue\", \"../System/Disposable/dispose\", \"../System/Disposable/DisposableBase\", \"../System/Exception\", \"../System/Disposable/ObjectDisposedException\", \"../System/Collections/Sorting/KeySortedContext\", \"../System/Exceptions/ArgumentNullException\", \"../System/Exceptions/ArgumentOutOfRangeException\"], function (require, exports, Values, Arrays, ArrayUtility, Enumerator_1, Types_1, Integer_1, Functions_1, ArrayEnumerator_1, EnumeratorBase_1, Dictionary_1, Queue_1, dispose_1, DisposableBase_1, Exception_1, ObjectDisposedException_1, KeySortedContext_1, ArgumentNullException_1, ArgumentOutOfRangeException_1) {\n    'use strict';\n    var VOID0 = void 0;\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            _super.apply(this, arguments);\n        }\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.default));\n    var Functions = new LinqFunctions();\n    Object.freeze(Functions);\n    var UnsupportedEnumerableException = (function (_super) {\n        __extends(UnsupportedEnumerableException, _super);\n        function UnsupportedEnumerableException() {\n            _super.call(this, \"Unsupported enumerable.\");\n        }\n        return UnsupportedEnumerableException;\n    }(Exception_1.default));\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(_enumeratorFactory, finalizer) {\n            _super.call(this, finalizer);\n            this._enumeratorFactory = _enumeratorFactory;\n        }\n        Enumerable.fromArray = function (array) {\n            return new ArrayEnumerable(array);\n        };\n        Enumerable.from = function (source) {\n            if (Types_1.default.isObject(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Array.isArray(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); });\n                if (Types_1.default.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n            }\n            throw new UnsupportedEnumerableException();\n        };\n        Enumerable.toArray = function (source) {\n            if (Types_1.default.isObject(source)) {\n                if (Array.isArray(source))\n                    return source.slice();\n                if (Types_1.default.isArrayLike(source))\n                    source = new ArrayEnumerable(source);\n                if (source instanceof Enumerable)\n                    return source.toArray();\n                if (Enumerator_1.isEnumerable(source)) {\n                    var result = [];\n                    Enumerator_1.forEach(source.getEnumerator(), function (e, i) {\n                        result[i] = e;\n                    });\n                    return result;\n                }\n            }\n            throw new UnsupportedEnumerableException();\n        };\n        Enumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        Enumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._enumeratorFactory = null;\n        };\n        Enumerable.choice = function (values) {\n            return new Enumerable(function () { return new EnumeratorBase_1.default(null, function (yielder) {\n                return yielder.yieldReturn(Integer_1.default.random.select(values));\n            }); });\n        };\n        Enumerable.cycle = function (values) {\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                }, function (yielder) {\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                });\n            });\n        };\n        Enumerable.empty = function () {\n            return new Enumerable(function () { return new EnumeratorBase_1.default(null, Functions.False); });\n        };\n        Enumerable.repeat = function (element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new Enumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                    }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); });\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.default(null, function (yielder) { return yielder.yieldReturn(element); });\n                });\n        };\n        Enumerable.repeatWithFinalize = function (initializer, finalizer) {\n            return new Enumerable(function () {\n                var element;\n                return new EnumeratorBase_1.default(function () {\n                    element = initializer();\n                }, function (yielder) { return yielder.yieldReturn(element); }, function () {\n                    finalizer(element);\n                });\n            });\n        };\n        Enumerable.make = function (element) {\n            return Enumerable.repeat(element, 1);\n        };\n        Enumerable.range = function (start, count, step) {\n            if (start === void 0) { start = 0; }\n            if (count === void 0) { count = Infinity; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new Error(\"Must have a valid 'start' value.\");\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            if (!isFinite(step))\n                throw new Error(\"Must have a valid 'step' value.\");\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new Enumerable(function () {\n                    var value;\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                        value = start;\n                    }, function (yielder) {\n                        var result = index++ < c\n                            && yielder.yieldReturn(value);\n                        if (result && index < count)\n                            value += step;\n                        return result;\n                    });\n                })\n                : new Enumerable(function () {\n                    var value;\n                    return new EnumeratorBase_1.default(function () {\n                        value = start;\n                    }, function (yielder) {\n                        var current = value;\n                        value += step;\n                        return yielder.yieldReturn(current);\n                    });\n                });\n        };\n        Enumerable.rangeDown = function (start, count, step) {\n            if (start === void 0) { start = 0; }\n            if (count === void 0) { count = Infinity; }\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return Enumerable.range(start, count, step);\n        };\n        Enumerable.toInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.range(start, Infinity, step);\n        };\n        Enumerable.toNegativeInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.rangeDown(start, Infinity, step);\n        };\n        Enumerable.rangeTo = function (start, to, step) {\n            if (start === void 0) { start = 0; }\n            if (to === void 0) { to = Infinity; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new Error(\"Must have a valid 'start' value.\");\n            if (isNaN(to))\n                throw new Error(\"Must have a valid 'to' value.\");\n            if (!isFinite(step))\n                throw new Error(\"Must have a valid 'step' value.\");\n            step = Math.abs(step);\n            if (!isFinite(to))\n                return Enumerable.range(start, Infinity, (start < to) ? (+step) : (-step));\n            return new Enumerable(function () {\n                var value;\n                return start < to\n                    ? new EnumeratorBase_1.default(function () {\n                        value = start;\n                    }, function (yielder) {\n                        var result = value <= to && yielder.yieldReturn(value);\n                        if (result)\n                            value += step;\n                        return result;\n                    })\n                    : new EnumeratorBase_1.default(function () {\n                        value = start;\n                    }, function (yielder) {\n                        var result = value >= to && yielder.yieldReturn(value);\n                        if (result)\n                            value -= step;\n                        return result;\n                    });\n            });\n        };\n        Enumerable.matches = function (input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            var type = typeof input;\n            if (type != Types_1.default.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new Enumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.default(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        };\n        Enumerable.generate = function (factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new Enumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                    }, function (yielder) {\n                        var current = index++;\n                        return current < c && yielder.yieldReturn(factory(current));\n                    });\n                })\n                : new Enumerable(function () {\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () {\n                        index = 0;\n                    }, function (yielder) { return yielder.yieldReturn(factory(index++)); });\n                });\n        };\n        Enumerable.unfold = function (seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            return new Enumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                });\n            });\n        };\n        Enumerable.defer = function (enumerableFactory) {\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = enumerableFactory().getEnumerator();\n                }, function (yielder) { return enumerator.moveNext() && yielder.yieldReturn(enumerator.current); }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.forEach = function (enumerable, action) {\n            if (enumerable) {\n                dispose_1.using(Enumerator_1.from(enumerable), function (e) {\n                    Enumerator_1.forEach(e, action);\n                });\n            }\n        };\n        Enumerable.map = function (enumerable, selector) {\n            return enumerable && dispose_1.using(Enumerator_1.from(enumerable), function (e) {\n                var result = [];\n                Enumerator_1.forEach(e, function (e, i) {\n                    result[i] = selector(e);\n                });\n                return result;\n            });\n        };\n        Enumerable.max = function (values) {\n            return values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n        };\n        Enumerable.min = function (values) {\n            return values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            var index = 0;\n            dispose_1.using(_.getEnumerator(), function (e) {\n                while (_.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            });\n        };\n        Enumerable.prototype.toArray = function (predicate) {\n            return predicate\n                ? this.where(predicate).toArray()\n                : this.copyTo([]);\n        };\n        Enumerable.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            if (!target)\n                throw new ArgumentNullException_1.default(\"target\");\n            Integer_1.default.assert(index);\n            if (index < 0)\n                throw new ArgumentOutOfRangeException_1.default(\"index\", index, \"Must be zero or greater\");\n            this.forEach(function (x, i) {\n                target[i + index] = x;\n            });\n            return target;\n        };\n        Enumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            return new Enumerable(function () { return _.getEnumerator(); });\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) {\n                var key = keySelector(x);\n                var element = elementSelector(x);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x) {\n                obj[keySelector(x)] = elementSelector(x);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) { return dict.addByKeyValue(keySelector(x), elementSelector(x)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this.select(selector).toArray().join(separator);\n        };\n        Enumerable.prototype.doAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var actionResult = action(enumerator.current, index++);\n                        if (actionResult === false || actionResult === 0)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2)\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.force = function (defaultAction) {\n            if (defaultAction === void 0) { defaultAction = 0; }\n            this.throwIfDisposed();\n            this.doAction(function (element) { return defaultAction; });\n        };\n        Enumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!count || isNaN(count) || count < 0)\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return this.doAction(function (element, index) {\n                return index < c\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            var skipping = true;\n            return this.doAction(function (element, index) {\n                if (skipping)\n                    skipping = predicate(element, index);\n                return skipping\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.take = function (count) {\n            if (!count || isNaN(count) || count < 0)\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return _;\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return _.doAction(function (element, index) { return index < c; });\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1\n                    : 0;\n            });\n        };\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!includeUntilValue)\n                return this.doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0\n                        : 1;\n                });\n            var found = false;\n            return this.doAction(function (element, index) {\n                if (found)\n                    return 0;\n                found = predicate(element, index);\n                return 1;\n            });\n        };\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!count || isNaN(count) || count <= 0)\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.default();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        q.enqueue(enumerator.current);\n                        if (q.count > c)\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.takeFromLast = function (count) {\n            if (!count || isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _.reverse();\n            Integer_1.default.assert(count, \"count\");\n            return _.reverse().take(count);\n        };\n        Enumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.default(function () {\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .fromArray(buffer)\n                            .selectMany(func);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    buffer.length = 0;\n                });\n            });\n        };\n        Enumerable.prototype.traverseDepthFirst = function (func, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumeratorStack = [];\n                var enumerator;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            enumerator = func(enumerator.current).getEnumerator();\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        dispose_1.dispose.these(enumeratorStack);\n                    }\n                });\n            });\n        };\n        Enumerable.prototype.flatten = function () {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (middleEnumerator != null) {\n                            if (middleEnumerator.moveNext()) {\n                                return yielder.yieldReturn(middleEnumerator.current);\n                            }\n                            else {\n                                middleEnumerator = null;\n                            }\n                        }\n                        if (enumerator.moveNext()) {\n                            var c = enumerator.current;\n                            if (Array.isArray(c)) {\n                                middleEnumerator.dispose();\n                                middleEnumerator = Enumerable.fromArray(c)\n                                    .selectMany(Functions.Identity)\n                                    .flatten()\n                                    .getEnumerator();\n                                continue;\n                            }\n                            else {\n                                return yielder.yieldReturn(enumerator.current);\n                            }\n                        }\n                        return false;\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    enumerator.moveNext();\n                }, function (yielder) {\n                    var prev = enumerator.current;\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.scan = function (func, seed) {\n            var isUseSeed = seed !== VOID0;\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    isFirst = true;\n                }, function (yielder) {\n                    if (isFirst) {\n                        isFirst = false;\n                        return isUseSeed\n                            ? yielder.yieldReturn(value = seed)\n                            : enumerator.moveNext() && yielder.yieldReturn(value\n                                = enumerator.current);\n                    }\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.select = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (selector.length < 2)\n                return new WhereSelectEnumerable(_, null, selector);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return enumerator.moveNext()\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            var _ = this;\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = undefined;\n                    index = 0;\n                }, function (yielder) {\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    do {\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = Enumerator_1.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                    enumerator = null;\n                    middleEnumerator = null;\n                });\n            });\n        };\n        Enumerable.prototype.choose = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var result = selector(enumerator.current, index++);\n                        if (result !== null && result !== VOID0)\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.where = function (predicate) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (predicate.length < 2)\n                return new WhereEnumerable(_, predicate);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        if (predicate(enumerator.current, index++))\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.default.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.default.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.default.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.default.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .where(function (x) { return typeof x === typeName; });\n        };\n        Enumerable.prototype.except = function (second, compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    if (second)\n                        Enumerable.forEach(second, function (key) { return keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    keys.clear();\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.distinct = function (compareSelector) {\n            return this.except(null, compareSelector);\n        };\n        Enumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (compareKey === key) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) {\n                    return index > 0\n                        && yielder.yieldReturn(buffer[--index]);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.default.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len];\n                    buffer[len] = null;\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var count = 0;\n            if (predicate) {\n                _.forEach(function (x, i) {\n                    if (predicate(x, i))\n                        ++count;\n                });\n            }\n            else {\n                _.forEach(function () {\n                    ++count;\n                });\n            }\n            return count;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            var result = true;\n            this.forEach(function (x) {\n                if (!predicate(x)) {\n                    result = false;\n                    return false;\n                }\n            });\n            return result;\n        };\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        Enumerable.prototype.any = function (predicate) {\n            var result = false;\n            if (predicate) {\n                this.forEach(function (x) {\n                    result = predicate(x);\n                    return !result;\n                });\n            }\n            else {\n                this.forEach(function () {\n                    result = true;\n                    return false;\n                });\n            }\n            return result;\n        };\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            return compareSelector\n                ? this.any(function (v) { return compareSelector(v) === compareSelector(value); })\n                : this.any(function (v) { return v === value; });\n        };\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            if (compareSelector)\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(compareSelector(element), compareSelector(value), true)) {\n                        found = i;\n                        return false;\n                    }\n                });\n            else\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(element, value, true)) {\n                        found = i;\n                        return false;\n                    }\n                });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            if (compareSelector)\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(compareSelector(element), compareSelector(value), true))\n                        result\n                            = i;\n                });\n            else\n                this.forEach(function (element, i) {\n                    if (Values.areEqual(element, value, true))\n                        result = i;\n                });\n            return result;\n        };\n        Enumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(second);\n                }, function (yielder) {\n                    return firstEnumerator.moveNext() && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    secondTemp = new Queue_1.default(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = null;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = Enumerator_1.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = null;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements = null;\n                var innerCount = 0;\n                return new EnumeratorBase_1.default(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements != null) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElement = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(outerEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.concatWith = function (other) {\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    if (firstEnumerator != null) {\n                        if (firstEnumerator.moveNext())\n                            return yielder.yieldReturn(firstEnumerator.current);\n                        secondEnumerator = Enumerator_1.from(other);\n                        firstEnumerator.dispose();\n                        firstEnumerator = null;\n                    }\n                    if (secondEnumerator.moveNext())\n                        return yielder.yieldReturn(secondEnumerator.current);\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.merge = function (enumerables) {\n            var _ = this;\n            if (!enumerables.length)\n                return _;\n            if (enumerables.length == 1)\n                return _.concatWith(enumerables[0]);\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.default(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.count) {\n                            enumerator = Enumerator_1.from(queue.dequeue());\n                        }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = null;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, queue);\n                });\n            });\n        };\n        Enumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            var _ = this;\n            if (enumerables.length == 0)\n                return _;\n            if (enumerables.length == 1)\n                return _.concatWith(enumerables[0]);\n            return _.merge(enumerables);\n        };\n        Enumerable.prototype.insertAt = function (index, other) {\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.default(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    alternateEnumerator = new ArrayEnumerator_1.default(Enumerable.toArray(sequence));\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1\n                        : 0;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0:\n                            return yielder.yieldBreak();\n                        case 2:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1;\n                            break;\n                    }\n                    var latest = buffer;\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2\n                        : 0;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    dispose_1.dispose(enumerator, alternateEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        Enumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i - 0] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    outs = new Dictionary_1.default(compareSelector);\n                    Enumerable.from(second)\n                        .forEach(function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            return dispose_1.using(this.getEnumerator(), function (e1) { return dispose_1.using(Enumerable.from(second).getEnumerator(), function (e2) {\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = Enumerable.from(second).getEnumerator();\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, 1);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            return new OrderedEnumerable(this, null, 1, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this, null, -1, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, -1);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _this = this;\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () { return _this.toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        key = keySelector(enumerator.current);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(enumerator.current)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (compareKey === compareSelector(keySelector(c)))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    group = null;\n                });\n            });\n        };\n        Enumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.default.assert(size, \"size\");\n            var _ = this, len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return len && yielder.yieldReturn(array);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            return this.scan(func, seed).lastOrDefault();\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            var count = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n                ++count;\n            });\n            if (sumInfinite)\n                return sumInfinite * Infinity;\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x) {\n                exists = true;\n                var value = selector(x);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0;\n                    return false;\n                }\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        Enumerable.prototype.quotient = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var count = 0;\n            var result = NaN;\n            this.forEach(function (x) {\n                var value = selector(x);\n                count++;\n                if (count === 1) {\n                    result = value;\n                }\n                else {\n                    if (isNaN(value) || value === 0 || !isFinite(value)) {\n                        result = NaN;\n                        return false;\n                    }\n                    result /= value;\n                }\n            });\n            if (count === 1)\n                result = NaN;\n            return result;\n        };\n        Enumerable.prototype.elementAt = function (index) {\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x, i) {\n                if (i == n) {\n                    value = x;\n                    found = true;\n                    return false;\n                }\n            });\n            if (!found)\n                throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\n            return value;\n        };\n        Enumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x, i) {\n                if (i == n) {\n                    value = x;\n                    found = true;\n                    return false;\n                }\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.first = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                value = x;\n                found = true;\n                return false;\n            });\n            if (!found)\n                throw new Error(\"first:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                value = x;\n                found = true;\n                return false;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                if (!found) {\n                    found = true;\n                    value = x;\n                }\n                else\n                    throw new Error(\"single:sequence contains more than one element.\");\n            });\n            if (!found)\n                throw new Error(\"single:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.singleOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                if (!found) {\n                    found = true;\n                    value = x;\n                }\n                else\n                    throw new Error(\"single:sequence contains more than one element.\");\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return new EnumeratorBase_1.default(function () {\n                    if (!sharedEnumerator)\n                        sharedEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    return sharedEnumerator.moveNext()\n                        && yielder.yieldReturn(sharedEnumerator.current);\n                });\n            }, function () {\n                dispose_1.dispose(sharedEnumerator);\n            });\n        };\n        Enumerable.prototype.memoize = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = null;\n                dispose_1.dispose(enumerator);\n                enumerator = null;\n            });\n        };\n        Enumerable.prototype.catchError = function (handler) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.finallyAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        return Enumerable;\n    }(DisposableBase_1.default));\n    exports.Enumerable = Enumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.default(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source;\n                });\n            });\n            var _ = this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = null;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var s = this.source;\n            if (!s)\n                return [];\n            if (Array.isArray(s))\n                return s.slice();\n            var len = s.length, result = ArrayUtility.initialize(len);\n            for (var i = 0; i < len; i++) {\n                result[i] = s[i];\n            }\n            return result;\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            if (source) {\n                for (var i = 0; i < source.length; i++) {\n                    if (action(source[i], i) === false)\n                        break;\n                }\n            }\n        };\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAt = function (index) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : _super.prototype.elementAt.call(this, index);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.first = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (source && source.length)\n                ? source[0]\n                : _super.prototype.first.call(this);\n        };\n        ArrayEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (source && source.length)\n                ? source[0]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            if (!count || count < 0)\n                return _.asEnumerable();\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this, len = _._source ? _._source.length : 0;\n            return _.take(len - count);\n        };\n        ArrayEnumerable.prototype.takeFromLast = function (count) {\n            if (!count || count < 0)\n                return Enumerable.empty();\n            var _ = this, len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, _._source\n                ? (_._source.length - 1)\n                : 0, -1); });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            if (Types_1.default.isArrayLike(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(Enumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            _super.call(this, elements);\n            this._groupKey = _groupKey;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key);\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                dispose_1.dispose(enumerator);\n            });\n        };\n        return Lookup;\n    }());\n    var WhereEnumerable = (function (_super) {\n        __extends(WhereEnumerable, _super);\n        function WhereEnumerable(prevSource, prevPredicate) {\n            _super.call(this, null);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n        }\n        WhereEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            var prevPredicate = this.prevPredicate;\n            var composedPredicate = function (x) { return prevPredicate(x) && predicate(x); };\n            return new WhereEnumerable(this.prevSource, composedPredicate);\n        };\n        WhereEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector);\n        };\n        WhereEnumerable.prototype.getEnumerator = function () {\n            var predicate = this.prevPredicate;\n            var source = this.prevSource;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    if (predicate(enumerator.current))\n                        return yielder.yieldReturn(enumerator.current);\n                }\n                return false;\n            }, function () {\n                dispose_1.dispose(enumerator);\n            });\n        };\n        WhereEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.prevPredicate = null;\n            this.prevSource = null;\n        };\n        return WhereEnumerable;\n    }(Enumerable));\n    var WhereSelectEnumerable = (function (_super) {\n        __extends(WhereSelectEnumerable, _super);\n        function WhereSelectEnumerable(prevSource, prevPredicate, prevSelector) {\n            _super.call(this, null);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n            this.prevSelector = prevSelector;\n        }\n        WhereSelectEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            return new WhereEnumerable(this, predicate);\n        };\n        WhereSelectEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            var _ = this;\n            var prevSelector = _.prevSelector;\n            var composedSelector = function (x) { return selector(prevSelector(x)); };\n            return new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\n        };\n        WhereSelectEnumerable.prototype.getEnumerator = function () {\n            var _ = this, predicate = _.prevPredicate, source = _.prevSource, selector = _.prevSelector, enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    var c = enumerator.current;\n                    if (predicate == null || predicate(c)) {\n                        return yielder.yieldReturn(selector(c));\n                    }\n                }\n                return false;\n            }, function () {\n                dispose_1.dispose(enumerator);\n            });\n        };\n        WhereSelectEnumerable.prototype._onDispose = function () {\n            var _ = this;\n            _super.prototype._onDispose.call(this);\n            _.prevPredicate = null;\n            _.prevSource = null;\n            _.prevSelector = null;\n        };\n        return WhereSelectEnumerable;\n    }(Enumerable));\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Values.compare; }\n            _super.call(this, null);\n            this.source = source;\n            this.keySelector = keySelector;\n            this.order = order;\n            this.parent = parent;\n            this.comparer = comparer;\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.default(function () {\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_).generateSortedIndexes(buffer);\n            }, function (yielder) {\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = null;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = null;\n            });\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.source = null;\n            this.keySelector = null;\n            this.order = null;\n            this.parent = null;\n        };\n        return OrderedEnumerable;\n    }(Enumerable));\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.default(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed, className) {\n        if (className === void 0) { className = \"Enumerable\"; }\n        if (disposed)\n            throw new ObjectDisposedException_1.default(className);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/Primitive.d.ts\"/>\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../System/IComparer.d.ts\"/>\r\n///<reference path=\"../System/Collections/Sorting/Order.d.ts\"/>\r\n///<reference path=\"../System/Collections/IEnumerableOrArray.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {\r\n\tfrom as enumeratorFrom,\r\n\tforEach as enumeratorForEach,\r\n\tisEnumerable\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport Type from \"../System/Types\";\r\nimport Integer from \"../System/Integer\";\r\nimport BaseFunctions from \"../System/Functions\";\r\nimport ArrayEnumerator from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport EnumeratorBase from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport Dictionary from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport Queue from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport DisposableBase from \"../System/Disposable/DisposableBase\";\r\nimport Exception from \"../System/Exception\";\r\nimport ObjectDisposedException from \"../System/Disposable/ObjectDisposedException\";\r\nimport KeySortedContext from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport ArgumentNullException from \"../System/Exceptions/ArgumentNullException\";\r\nimport ArgumentOutOfRangeException from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\ntype Comparable = Primitive|IComparable<any>;\r\n\r\n// #region Local Constants.\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// #endregion\r\n\r\nclass UnsupportedEnumerableException extends Exception\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\"Unsupported enumerable.\");\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t}\r\n\r\n\t/**\r\n\t * Static shortcut for creating an ArrayEnumerable.\r\n\t */\r\n\tstatic fromArray<T>(array:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(array);\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable(()=>source.getEnumerator());\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\tstatic toArray<T>(source:IEnumerableOrArray<T>):T[]\r\n\t{\r\n\t\tif(Type.isObject(source))\r\n\t\t{\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn source.slice();\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\tsource = new ArrayEnumerable<T>(<IArray<T>>source);\r\n\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source.toArray();\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t{\r\n\t\t\t\tvar result:T[] = [];\r\n\t\t\t\tenumeratorForEach<T>(\r\n\t\t\t\t\tsource.getEnumerator(), (e, i) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[i] = e;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(Integer.random.select(values))\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0; // Let the compiler know this is an int.\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic empty<T>():Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\tFunctions.False\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element)\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration does not break.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic make<T>(element:T):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\tstatic range(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number = 0,\r\n\t\tcount:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.range(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\treturn Enumerable.rangeDown(start, Infinity, step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number = 0,\r\n\t\tto:number = Infinity,\r\n\t\tstep:number = 1):Enumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new Error(\"Must have a valid 'start' value.\");\r\n\r\n\t\tif(isNaN(to))\r\n\t\t\tthrow new Error(\"Must have a valid 'to' value.\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new Error(\"Must have a valid 'step' value.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\t// Range to infinity has a more efficient mechanism.\r\n\t\tif(!isFinite(to))\r\n\t\t\treturn Enumerable.range(start, Infinity, (start<to) ? (+step) : (-step));\r\n\r\n\t\treturn new Enumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn start<to\r\n\r\n\t\t\t\t\t? new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t: new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):Enumerable<RegExpExecArray>\r\n\t{\r\n\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new Enumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\r\n\t\t\t? new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++))\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(seed:T, valueFactory:Selector<T, T>, skipSeed:Boolean = false):Enumerable<T>\r\n\t{\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic defer<T>(enumerableFactory:() => IEnumerable<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = enumerableFactory().getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> enumerator.moveNext() && yielder.yieldReturn(enumerator.current),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\tif(enumerable)\r\n\t\t{\r\n\t\t\tusing(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tenumeratorForEach(e, action);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\r\n\t\treturn enumerable && using(enumeratorFrom(enumerable), e=>\r\n\t\t\t{\r\n\t\t\t\tvar result:TResult[] = [];\r\n\t\t\t\tenumeratorForEach(e, (e, i)=>\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = selector(e);\r\n\t\t\t\t});\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:Enumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Instance methods...\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(<any>action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[],index:number = 0):T[] {\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assert(index);\r\n\t\tif(index<0) throw new ArgumentOutOfRangeException(\"index\",index,\"Must be zero or greater\");\r\n\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i+index] = x\r\n\t\t});\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach(x=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x)] = elementSelector(x);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach(x=> dict.addByKeyValue(keySelector(x), elementSelector(x)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tforce(defaultAction:EnumerableAction = EnumerableAction.Break):void\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.doAction(element => defaultAction);\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Simply return this.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\tvar c:number = count;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<c\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar skipping:boolean = true;\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(skipping)\r\n\t\t\t\t\tskipping = predicate(element, index);\r\n\r\n\t\t\t\treturn skipping\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttake(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals no limit.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn _.doAction((element:T, index?:number) => index<c);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || isNaN(count) || count<=0) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all in reverse.\r\n\t\t\treturn _.reverse();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn _.reverse().take(count);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.fromArray<T>(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(func);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tenumerator = func(enumerator.current).getEnumerator();\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\tif(Array.isArray(c))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = Enumerable.fromArray<any>(c)\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(selector.length<2)\r\n\t\t\treturn new WhereSelectEnumerable(_, null, selector);\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tchoose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(predicate.length<2)\r\n\t\t\treturn new WhereEnumerable(_, predicate);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.where(x=>typeof x===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tEnumerable.forEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):Enumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(compareKey===key)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tindex>0\r\n\t\t\t\t\t&& yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar count:number = 0;\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\t_.forEach((x, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\t++count;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = true;\r\n\t\tthis.forEach(x =>\r\n\t\t{\r\n\t\t\tif(!predicate(x))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar result = false;\r\n\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tif(predicate)\r\n\t\t{\r\n\t\t\tthis.forEach(x =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.forEach(() =>\r\n\t\t\t{\r\n\t\t\t\tresult = true;\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\r\n\t\tif(compareSelector)\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true)) result\r\n\t\t\t\t\t= i;\r\n\t\t\t});\r\n\t\telse\r\n\t\t\tthis.forEach((element:T, i?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerableOrArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tfirstEnumerator.moveNext() && secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerableOrArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcatWith(other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator!=null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(firstEnumerator.moveNext()) return yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\t\tfirstEnumerator.dispose();\r\n\t\t\t\t\t\t\tfirstEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(secondEnumerator.moveNext()) return yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!enumerables.length)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerableOrArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerableOrArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn _.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tinsertAt(index:number, other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tEnumerable.from<T>(second)\r\n\t\t\t\t\t\t\t.forEach(key=>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);  // Should Dictionary be IDisposable?\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tEnumerable.from<T>(second).getEnumerator(),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerableOrArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = Enumerable.from<T>(second).getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement> = Functions.Identity,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):IEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tvar count = 0; // No need to make integer if the result could be a float.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tfunction(x)\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(sumInfinite) // Not zero?\r\n\t\t\treturn sumInfinite*Infinity;\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\t(x:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(i==n)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"first:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tvalue = x;\r\n\t\t\t\tfound = true;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"single:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tvalue = x;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n\r\n\t\t\t\t\t\tif(!sharedEnumerator)\r\n\t\t\t\t\t\t\tsharedEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tsharedEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(sharedEnumerator.current)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:Error) => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass ArrayEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Could possibly be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar s = this.source;\r\n\t\tif(!s)\r\n\t\t\treturn [];\r\n\r\n\t\tif(Array.isArray(s))\r\n\t\t\treturn (<any>s).slice();\r\n\r\n\t\tvar len = s.length, result:T[] = ArrayUtility.initialize<T>(len);\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tresult[i] = s[i];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\tif(source)\r\n\t\t{\r\n\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\tfor(let i = 0; i<source.length; i++)\r\n\t\t\t{\r\n\t\t\t\t// _.assertIsNotDisposed(); // Assertion here is unnecessary since we already have a reference to the source array.\r\n\t\t\t\tif(<any>action(source[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: super.elementAt(index);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: super.first();\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (source && source.length)\r\n\t\t\t? source[0]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!count || count<0) // Out of bounds? Simply return a unfiltered enumerable.\r\n\t\t\treturn _.asEnumerable();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, len = _._source ? _._source.length : 0;\r\n\t\treturn _.take(len - count);\r\n\t}\r\n\r\n\ttakeFromLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!count || count<0) return Enumerable.empty<T>();\r\n\r\n\t\tvar _   = this,\r\n\t\t    len = _._source\r\n\t\t\t    ? _._source.length\r\n\t\t\t    : 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends Enumerable<TElement>\r\n{\r\n\tkey:TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount:number;\r\n\tget(key:TKey):TElement[];\r\n\tcontains(key:TKey):boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WhereEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<T>,\r\n\t\tprivate prevPredicate:Predicate<T>  // predicate.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\tvar prevPredicate = this.prevPredicate;\r\n\t\tvar composedPredicate = (x:T) => prevPredicate(x) && predicate(x);\r\n\t\treturn new WhereEnumerable<T>(this.prevSource, composedPredicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\treturn new WhereSelectEnumerable<T, TSelect>(\r\n\t\t\tthis.prevSource,\r\n\t\t\tthis.prevPredicate,\r\n\t\t\tselector\r\n\t\t);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar predicate = this.prevPredicate;\r\n\t\tvar source = this.prevSource;\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(enumerator.current))\r\n\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.prevPredicate = null;\r\n\t\tthis.prevSource = null;\r\n\t}\r\n}\r\n\r\nclass WhereSelectEnumerable<TSource, T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<TSource>,\r\n\t\tprivate prevPredicate:Predicate<TSource>,  // predicate.length always <= 1\r\n\t\tprivate prevSelector:Selector<TSource, T> // selector.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\twhere(predicate:(value:T, index?:number) => boolean):Enumerable<T>\r\n\t{\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\treturn new WhereEnumerable<T>(this, predicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t// if selector use index, can't compose\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prevSelector = _.prevSelector;\r\n\t\tvar composedSelector = (x:TSource) => selector(prevSelector(x));\r\n\t\treturn new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _                             = this,\r\n\t\t    predicate                     = _.prevPredicate,\r\n\t\t    source                        = _.prevSource,\r\n\t\t    selector:Selector<TSource, T> = _.prevSelector, // Type definition needed for correct inference.\r\n\t\t    enumerator:IEnumerator<TSource>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\tif(predicate==null || predicate(c))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selector(c));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.prevPredicate = null;\r\n\t\t_.prevSource = null;\r\n\t\t_.prevSelector = null;\r\n\t}\r\n}\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n}\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends Enumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean, className:string = \"Enumerable\"):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(className);\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}