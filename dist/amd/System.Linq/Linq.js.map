{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Values","Arrays","ArrayUtility","Enumerator_1","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","dispose_1","DisposableBase_1","UnsupportedEnumerableException_1","ObjectDisposedException_1","KeySortedContext_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","getEmptyEnumerator","empty","createSortContext","orderedEnumerable","currentContext","context","keySelector","order","comparer","parent","throwIfDisposed","disposed","className","INVALID_DEFAULT","VOID0","LinqFunctions","_super","apply","arguments","Greater","a","Lesser","Functions","freeze","InfiniteEnumerable","_enumeratorFactory","finalizer","call","_isEndless","defineProperty","get","enumerable","configurable","getEnumerator","_onDispose","asEnumerable","_","doAction","action","initializer","isEndless","Enumerable","enumerator","index","yielder","moveNext","actionResult","current","yieldBreak","yieldReturn","dispose","force","defaultAction","element","skip","count","isFinite","assert","take","elementAt","v","elementAtOrDefault","Error","defaultValue","isNaN","n","using","e","i","first","firstOrDefault","single","value","singleOrDefault","any","traverseBreadthFirst","func","resultSelector","buffer","len","nestLevel","next","from","selectMany","length","traverseDepthFirst","enumeratorStack","these","flatten","middleEnumerator","c","Array","isArray","Identity","pairwise","selector","prev","scan","seed","isUseSeed","isFirst","select","WhereSelectEnumerable","_selectMany","collectionSelector","undefined","middleSeq","_choose","result","choose","where","predicate","WhereEnumerable","ofType","type","typeName","Number","NUMBER","String","STRING","Boolean","BOOLEAN","Function","FUNCTION","x","except","second","compareSelector","keys","forEach","key","addByKeyValue","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","defaultIfEmpty","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","dequeue","join","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","toLookup","innerElement","groupJoin","concatWith","other","merge","enumerables","queue","concat","_i","union","insertAt","isEnumerated","alternateMultiple","sequence","mode","alternateEnumerator","toArray","hasAtLeastOne","reset","latest","another","alternateSingle","make","alternate","enumeratorFactory","source","isObject","isString","isArrayLike","ArrayEnumerable","isEnumerable","choice","values","random","chooseFrom","args","cycle","cycleThrough","FiniteEnumerable","repeat","Infinity","repeatWithFinalize","range","start","step","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","matches","input","pattern","flags","RegExp","indexOf","regex","match","exec","generate","factory","unfold","valueFactory","skipSeed","map","max","takeUntil","aggregate","min","skipWhile","takeWhile","includeUntilValue","found","throwIfEndless","copyTo","target","elementSelector","dict","array","getValue","push","Lookup","toMap","obj","toDictionary","toJoinedString","separator","takeExceptLast","q","enqueue","skipToLast","reverse","shuffle","capacity","selectedIndex","selectedValue","all","every","some","isEmpty","contains","areEqual","lastIndexOf","intersect","outs","sequenceEqual","equalityComparer","e1","e2","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","_this","partitionBy","elements","Grouping","group","hasNext","size","initialize","lastOrDefault","average","numberOrNaN","sum","sumInfinite","NaN","maxBy","minBy","product","exists","quotient","last","share","sharedEnumerator","memoize","cache","catchError","handler","finallyAction","_source","_disposableObjectName","s","_groupKey","_dictionary","prevSource","prevPredicate","composedPredicate","prevSelector","composedSelector","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes"],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../System/Compare\", \"../System/Collections/Array/Compare\", \"../System/Collections/Array/Utility\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Types\", \"../System/Integer\", \"../System/Functions\", \"../System/Collections/Enumeration/ArrayEnumerator\", \"../System/Collections/Enumeration/EnumeratorBase\", \"../System/Collections/Dictionaries/Dictionary\", \"../System/Collections/Queue\", \"../System/Disposable/dispose\", \"../System/Disposable/DisposableBase\", \"../System/Collections/Enumeration/UnsupportedEnumerableException\", \"../System/Disposable/ObjectDisposedException\", \"../System/Collections/Sorting/KeySortedContext\", \"../System/Exceptions/ArgumentNullException\", \"../System/Exceptions/ArgumentOutOfRangeException\"], function (require, exports, Values, Arrays, ArrayUtility, Enumerator_1, Types_1, Integer_1, Functions_1, ArrayEnumerator_1, EnumeratorBase_1, Dictionary_1, Queue_1, dispose_1, DisposableBase_1, UnsupportedEnumerableException_1, ObjectDisposedException_1, KeySortedContext_1, ArgumentNullException_1, ArgumentOutOfRangeException_1) {\n    'use strict';\n    var INVALID_DEFAULT = {};\n    var VOID0 = void 0;\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            _super.apply(this, arguments);\n        }\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.default));\n    var Functions = new LinqFunctions();\n    Object.freeze(Functions);\n    function getEmptyEnumerator() {\n        return Enumerator_1.empty;\n    }\n    var InfiniteEnumerable = (function (_super) {\n        __extends(InfiniteEnumerable, _super);\n        function InfiniteEnumerable(_enumeratorFactory, finalizer) {\n            _super.call(this, finalizer);\n            this._enumeratorFactory = _enumeratorFactory;\n            this._isEndless = true;\n        }\n        Object.defineProperty(InfiniteEnumerable.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        InfiniteEnumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        InfiniteEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._enumeratorFactory = null;\n        };\n        InfiniteEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new InfiniteEnumerable(function () { return _.getEnumerator(); });\n        };\n        InfiniteEnumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (initializer)\n                        initializer();\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var actionResult = action(enumerator.current, index++);\n                        if (actionResult === false || actionResult === 0)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2)\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.force = function (defaultAction) {\n            if (defaultAction === void 0) { defaultAction = 0; }\n            this.throwIfDisposed();\n            this.doAction(function (element) { return defaultAction; });\n        };\n        InfiniteEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            return this.doAction(function (element, index) {\n                return index < count\n                    ? 2\n                    : 1;\n            });\n        };\n        InfiniteEnumerable.prototype.take = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                throw new ArgumentOutOfRangeException_1.default('count', count, 'Must be finite.');\n            Integer_1.default.assert(count, \"count\");\n            return _.doAction(function (element, index) { return index < count; }, null, false);\n        };\n        InfiniteEnumerable.prototype.elementAt = function (index) {\n            var v = this.elementAtOrDefault(index, INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"index is greater than or equal to the number of elements in source.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                var i = 0;\n                while (e.moveNext()) {\n                    if (i == n)\n                        return e.current;\n                    i++;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.first = function () {\n            var v = this.firstOrDefault(INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"first:The sequence is empty.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext() ? e.current : defaultValue; });\n        };\n        InfiniteEnumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                    throw new Error(\"single:sequence contains more than one element.\");\n                }\n                throw new Error(\"single:The sequence is empty.\");\n            });\n        };\n        InfiniteEnumerable.prototype.singleOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.any = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext(); });\n        };\n        InfiniteEnumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.default(function () {\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .from(buffer)\n                            .selectMany(func);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    buffer.length = 0;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.traverseDepthFirst = function (func, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumeratorStack = [];\n                var enumerator;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            enumerator = func(enumerator.current).getEnumerator();\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        dispose_1.dispose.these(enumeratorStack);\n                    }\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.flatten = function () {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (middleEnumerator != null) {\n                            if (middleEnumerator.moveNext()) {\n                                return yielder.yieldReturn(middleEnumerator.current);\n                            }\n                            else {\n                                middleEnumerator = null;\n                            }\n                        }\n                        if (enumerator.moveNext()) {\n                            var c = enumerator.current;\n                            if (Array.isArray(c)) {\n                                middleEnumerator.dispose();\n                                middleEnumerator\n                                    = Enumerable.from(c)\n                                        .selectMany(Functions.Identity)\n                                        .flatten()\n                                        .getEnumerator();\n                                continue;\n                            }\n                            else {\n                                return yielder.yieldReturn(enumerator.current);\n                            }\n                        }\n                        return false;\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    enumerator.moveNext();\n                }, function (yielder) {\n                    var prev = enumerator.current;\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.scan = function (func, seed) {\n            var isUseSeed = seed !== VOID0;\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    isFirst = true;\n                }, function (yielder) {\n                    if (isFirst) {\n                        isFirst = false;\n                        return isUseSeed\n                            ? yielder.yieldReturn(value = seed)\n                            : enumerator.moveNext() && yielder.yieldReturn(value\n                                = enumerator.current);\n                    }\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.select = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (selector.length < 2)\n                return new WhereSelectEnumerable(_, null, selector);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return enumerator.moveNext()\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype._selectMany = function (collectionSelector, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = undefined;\n                    index = 0;\n                }, function (yielder) {\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    do {\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = Enumerator_1.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                    enumerator = null;\n                    middleEnumerator = null;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        InfiniteEnumerable.prototype._choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var result = selector(enumerator.current, index++);\n                        if (result !== null && result !== VOID0)\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        InfiniteEnumerable.prototype.where = function (predicate) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (predicate.length < 2)\n                return new WhereEnumerable(_, predicate);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        if (predicate(enumerator.current, index++))\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.default.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.default.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.default.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.default.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .where(function (x) { return typeof x === typeName; });\n        };\n        InfiniteEnumerable.prototype.except = function (second, compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    if (second)\n                        Enumerator_1.forEach(second, function (key) { return keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    keys.clear();\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.distinct = function (compareSelector) {\n            return this.except(null, compareSelector);\n        };\n        InfiniteEnumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (compareKey === key) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(second);\n                }, function (yielder) { return firstEnumerator.moveNext()\n                    && secondEnumerator.moveNext()\n                    && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)); }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    secondTemp = new Queue_1.default(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = null;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = Enumerator_1.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = null;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements = null;\n                var innerCount = 0;\n                return new EnumeratorBase_1.default(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements != null) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElement = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(outerEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.concatWith = function (other) {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    if (firstEnumerator != null) {\n                        if (firstEnumerator.moveNext())\n                            return yielder.yieldReturn(firstEnumerator.current);\n                        secondEnumerator = Enumerator_1.from(other);\n                        firstEnumerator.dispose();\n                        firstEnumerator = null;\n                    }\n                    if (secondEnumerator.moveNext())\n                        return yielder.yieldReturn(secondEnumerator.current);\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.merge = function (enumerables) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.default(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.count) {\n                            enumerator = Enumerator_1.from(queue.dequeue());\n                        }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = null;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, queue);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            var _ = this;\n            if (enumerables.length == 0)\n                return _;\n            if (enumerables.length == 1)\n                return _.concatWith(enumerables[0]);\n            return _.merge(enumerables);\n        };\n        InfiniteEnumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = Enumerator_1.from(second);\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.insertAt = function (index, other) {\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this, isEndless = _._isEndless || null;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.default(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    alternateEnumerator = new ArrayEnumerator_1.default(Enumerable.toArray(sequence));\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1\n                        : 0;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0:\n                            return yielder.yieldBreak();\n                        case 2:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1;\n                            break;\n                    }\n                    var latest = buffer;\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2\n                        : 0;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    dispose_1.dispose(enumerator, alternateEnumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        InfiniteEnumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i - 0] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        return InfiniteEnumerable;\n    }(DisposableBase_1.default));\n    exports.InfiniteEnumerable = InfiniteEnumerable;\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(enumeratorFactory, finalizer, isEndless) {\n            if (isEndless === void 0) { isEndless = null; }\n            _super.call(this, enumeratorFactory, finalizer);\n            this._isEndless = isEndless;\n        }\n        Enumerable.from = function (source) {\n            if (Types_1.default.isObject(source) || Types_1.default.isString(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Types_1.default.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); }, null, source.isEndless);\n            }\n            throw new UnsupportedEnumerableException_1.default();\n        };\n        Enumerable.toArray = function (source) {\n            if (source instanceof Enumerable)\n                return source.toArray();\n            return Enumerator_1.toArray(source);\n        };\n        Enumerable.choice = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.default('length', length);\n            return new InfiniteEnumerable(function () { return new EnumeratorBase_1.default(null, function (yielder) {\n                return yielder.yieldReturn(Integer_1.default.random.select(values));\n            }, true); });\n        };\n        Enumerable.chooseFrom = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.choice(args);\n        };\n        Enumerable.cycle = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.default('length', length);\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                }, function (yielder) {\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                }, true);\n            });\n        };\n        Enumerable.cycleThrough = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.cycle(args);\n        };\n        Enumerable.empty = function () {\n            return new FiniteEnumerable(getEmptyEnumerator);\n        };\n        Enumerable.repeat = function (element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!(count > 0))\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new FiniteEnumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () { index = 0; }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); }, null, false);\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.default(null, function (yielder) { return yielder.yieldReturn(element); }, true);\n                });\n        };\n        Enumerable.repeatWithFinalize = function (initializer, finalizer) {\n            return new InfiniteEnumerable(function () {\n                var element;\n                return new EnumeratorBase_1.default(function () {\n                    element = initializer();\n                }, function (yielder) { return yielder.yieldReturn(element); }, function () {\n                    finalizer(element);\n                }, true);\n            });\n        };\n        Enumerable.make = function (element) {\n            return Enumerable.repeat(element, 1);\n        };\n        Enumerable.range = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.default(\"start\", start, \"Must be a finite number.\");\n            if (!(count > 0))\n                return Enumerable.empty();\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite number.\");\n            Integer_1.default.assert(count, \"count\");\n            return new FiniteEnumerable(function () {\n                var value;\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = start;\n                }, function (yielder) {\n                    var result = index++ < c\n                        && yielder.yieldReturn(value);\n                    if (result && index < count)\n                        value += step;\n                    return result;\n                }, false);\n            });\n        };\n        Enumerable.rangeDown = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return Enumerable.range(start, count, step);\n        };\n        Enumerable.toInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.default(\"start\", start, \"Must be a finite number.\");\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite number.\");\n            return new InfiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.default(function () {\n                    value = start;\n                }, function (yielder) {\n                    var current = value;\n                    value += step;\n                    return yielder.yieldReturn(current);\n                }, true);\n            });\n        };\n        Enumerable.toNegativeInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.toInfinity(start, -step);\n        };\n        Enumerable.rangeTo = function (start, to, step) {\n            if (step === void 0) { step = 1; }\n            if (isNaN(to) || !isFinite(to))\n                throw new ArgumentOutOfRangeException_1.default(\"to\", to, \"Must be a finite number.\");\n            if (step && !isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite non-zero number.\");\n            step = Math.abs(step);\n            return new FiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.default(function () { value = start; }, start < to\n                    ?\n                        function (yielder) {\n                            var result = value <= to && yielder.yieldReturn(value);\n                            if (result)\n                                value += step;\n                            return result;\n                        }\n                    :\n                        function (yielder) {\n                            var result = value >= to && yielder.yieldReturn(value);\n                            if (result)\n                                value -= step;\n                            return result;\n                        }, false);\n            });\n        };\n        Enumerable.matches = function (input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            var type = typeof input;\n            if (type != Types_1.default.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new FiniteEnumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.default(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        };\n        Enumerable.generate = function (factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ?\n                    new FiniteEnumerable(function () {\n                        var c = count;\n                        var index = 0;\n                        return new EnumeratorBase_1.default(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            var current = index++;\n                            return current < c && yielder.yieldReturn(factory(current));\n                        }, false);\n                    })\n                :\n                    new InfiniteEnumerable(function () {\n                        var index = 0;\n                        return new EnumeratorBase_1.default(function () {\n                            index = 0;\n                        }, function (yielder) { return yielder.yieldReturn(factory(index++)); }, true);\n                    });\n        };\n        Enumerable.unfold = function (seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                }, true);\n            });\n        };\n        Enumerable.forEach = function (enumerable, action) {\n            Enumerator_1.forEach(enumerable, action);\n        };\n        Enumerable.map = function (enumerable, selector) {\n            return Enumerator_1.map(enumerable, selector);\n        };\n        Enumerable.max = function (values) {\n            return values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n        };\n        Enumerable.min = function (values) {\n            return values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            return _super.prototype.doAction.call(this, action, initializer, isEndless);\n        };\n        Enumerable.prototype.skip = function (count) {\n            return _super.prototype.skip.call(this, count);\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.default('predicate');\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1\n                    : 0;\n            }, null, null);\n        };\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.default('predicate');\n            if (!includeUntilValue)\n                return this.doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0\n                        : 1;\n                }, null, null);\n            var found = false;\n            return this.doAction(function (element, index) {\n                if (found)\n                    return 0;\n                found = predicate(element, index);\n                return 1;\n            }, function () {\n                found = false;\n            }, null);\n        };\n        Enumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_.isEndless);\n            var index = 0;\n            dispose_1.using(_.getEnumerator(), function (e) {\n                Enumerator_1.throwIfEndless(e.isEndless);\n                while (_.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            });\n        };\n        Enumerable.prototype.toArray = function (predicate) {\n            return predicate\n                ? this.where(predicate).toArray()\n                : this.copyTo([]);\n        };\n        Enumerable.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            this.throwIfDisposed();\n            if (!target)\n                throw new ArgumentNullException_1.default(\"target\");\n            Integer_1.default.assert(index);\n            if (index < 0)\n                throw new ArgumentOutOfRangeException_1.default(\"index\", index, \"Must be zero or greater\");\n            Enumerator_1.forEach(this, function (x, i) {\n                target[i + index] = x;\n            });\n            return target;\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) {\n                var key = keySelector(x);\n                var element = elementSelector(x);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x) {\n                obj[keySelector(x)] = elementSelector(x);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) { return dict.addByKeyValue(keySelector(x), elementSelector(x)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this.select(selector).toArray().join(separator);\n        };\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.default();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        q.enqueue(enumerator.current);\n                        if (q.count > c)\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            Integer_1.default.assert(count, \"count\");\n            return _.reverse()\n                .take(count)\n                .reverse();\n        };\n        Enumerable.prototype.where = function (predicate) {\n            return _super.prototype.where.call(this, predicate);\n        };\n        Enumerable.prototype.select = function (selector) {\n            return _super.prototype.select.call(this, selector);\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        Enumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) { return index && yielder.yieldReturn(buffer[--index]); }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.default.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len];\n                    buffer[len] = null;\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var count = 0;\n            this.forEach(predicate\n                ?\n                    function (x, i) {\n                        if (predicate(x, i))\n                            ++count;\n                    }\n                :\n                    function () {\n                        ++count;\n                    });\n            return count;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            if (!predicate)\n                throw new ArgumentNullException_1.default(\"predicate\");\n            var result = true;\n            this.forEach(function (x) {\n                if (!predicate(x)) {\n                    result = false;\n                    return false;\n                }\n            });\n            return result;\n        };\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        Enumerable.prototype.any = function (predicate) {\n            if (!predicate)\n                return _super.prototype.any.call(this);\n            var result = false;\n            this.forEach(function (x) {\n                result = predicate(x);\n                return !result;\n            });\n            return result;\n        };\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            return compareSelector\n                ? this.any(function (v) { return compareSelector(v) === compareSelector(value); })\n                : this.any(function (v) { return v === value; });\n        };\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element), compareSelector(value), true)) {\n                            found = i;\n                            return false;\n                        }\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true)) {\n                            found = i;\n                            return false;\n                        }\n                    });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element), compareSelector(value), true))\n                            result\n                                = i;\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true))\n                            result = i;\n                    });\n            return result;\n        };\n        Enumerable.prototype.concatWith = function (other) {\n            return _super.prototype.concatWith.call(this, other);\n        };\n        Enumerable.prototype.merge = function (enumerables) {\n            return _super.prototype.merge.call(this, enumerables);\n        };\n        Enumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            if (enumerables.length == 0)\n                return this;\n            if (enumerables.length == 1)\n                return this.concatWith(enumerables[0]);\n            return this.merge(enumerables);\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    outs = new Dictionary_1.default(compareSelector);\n                    Enumerator_1.forEach(second, function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator, keys, outs);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            return dispose_1.using(this.getEnumerator(), function (e1) { return dispose_1.using(Enumerator_1.from(second), function (e2) {\n                Enumerator_1.throwIfEndless(e1.isEndless && e2.isEndless);\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.ofType = function (type) {\n            return _super.prototype.ofType.call(this, type);\n        };\n        Enumerable.prototype.except = function (second, compareSelector) {\n            return _super.prototype.except.call(this, second, compareSelector);\n        };\n        Enumerable.prototype.distinct = function (compareSelector) {\n            return _super.prototype.distinct.call(this, compareSelector);\n        };\n        Enumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            return _super.prototype.distinctUntilChanged.call(this, compareSelector);\n        };\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, 1);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            return new OrderedEnumerable(this, null, 1, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this, null, -1, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, -1);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _this = this;\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () { return _this.toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        key = keySelector(enumerator.current);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(enumerator.current)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (compareKey === compareSelector(keySelector(c)))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    group = null;\n                });\n            });\n        };\n        Enumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.default.assert(size, \"size\");\n            var _ = this, len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext()) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return len && yielder.yieldReturn(array);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            return this.scan(func, seed).lastOrDefault();\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            var count = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n                ++count;\n            });\n            if (sumInfinite)\n                return sumInfinite * Infinity;\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x) {\n                exists = true;\n                var value = selector(x);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0;\n                    return false;\n                }\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        Enumerable.prototype.quotient = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var count = 0;\n            var result = NaN;\n            this.forEach(function (x) {\n                var value = selector(x);\n                count++;\n                if (count === 1) {\n                    result = value;\n                }\n                else {\n                    if (isNaN(value) || value === 0 || !isFinite(value)) {\n                        result = NaN;\n                        return false;\n                    }\n                    result /= value;\n                }\n            });\n            if (count === 1)\n                result = NaN;\n            return result;\n        };\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return new EnumeratorBase_1.default(function () {\n                    if (!sharedEnumerator)\n                        sharedEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    return sharedEnumerator.moveNext()\n                        && yielder.yieldReturn(sharedEnumerator.current);\n                });\n            }, function () {\n                dispose_1.dispose(sharedEnumerator);\n            });\n        };\n        Enumerable.prototype.memoize = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = null;\n                dispose_1.dispose(enumerator);\n                enumerator = null;\n            });\n        };\n        Enumerable.prototype.catchError = function (handler) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.finallyAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        return Enumerable;\n    }(InfiniteEnumerable));\n    exports.Enumerable = Enumerable;\n    var FiniteEnumerable = (function (_super) {\n        __extends(FiniteEnumerable, _super);\n        function FiniteEnumerable(enumeratorFactory, finalizer) {\n            _super.call(this, enumeratorFactory, finalizer, false);\n        }\n        return FiniteEnumerable;\n    }(Enumerable));\n    exports.FiniteEnumerable = FiniteEnumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.default(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source;\n                });\n            });\n            var _ = this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = null;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return Enumerator_1.toArray(_._source);\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.forEach(_._source, action);\n        };\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAt = function (index) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : _super.prototype.elementAt.call(this, index);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this, len = _._source ? _._source.length : 0;\n            return _.take(len - count);\n        };\n        ArrayEnumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            var len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, _._source\n                ? (_._source.length - 1)\n                : 0, -1); });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return this;\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            if (Types_1.default.isArrayLike(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(FiniteEnumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            _super.call(this, elements);\n            this._groupKey = _groupKey;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key);\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                dispose_1.dispose(enumerator);\n            });\n        };\n        return Lookup;\n    }());\n    var WhereEnumerable = (function (_super) {\n        __extends(WhereEnumerable, _super);\n        function WhereEnumerable(prevSource, prevPredicate) {\n            _super.call(this, null, null, prevSource && prevSource.isEndless);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n        }\n        WhereEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            var prevPredicate = this.prevPredicate;\n            var composedPredicate = function (x) { return prevPredicate(x) && predicate(x); };\n            return new WhereEnumerable(this.prevSource, composedPredicate);\n        };\n        WhereEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector);\n        };\n        WhereEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var predicate = _.prevPredicate;\n            var source = _.prevSource;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    if (predicate(enumerator.current))\n                        return yielder.yieldReturn(enumerator.current);\n                }\n                return false;\n            }, function () {\n                dispose_1.dispose(enumerator);\n            }, _._isEndless);\n        };\n        WhereEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.prevPredicate = null;\n            this.prevSource = null;\n        };\n        return WhereEnumerable;\n    }(Enumerable));\n    var WhereSelectEnumerable = (function (_super) {\n        __extends(WhereSelectEnumerable, _super);\n        function WhereSelectEnumerable(prevSource, prevPredicate, prevSelector) {\n            _super.call(this, null, null, prevSource && prevSource.isEndless);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n            this.prevSelector = prevSelector;\n        }\n        WhereSelectEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            return new WhereEnumerable(this, predicate);\n        };\n        WhereSelectEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            var _ = this;\n            var prevSelector = _.prevSelector;\n            var composedSelector = function (x) { return selector(prevSelector(x)); };\n            return new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\n        };\n        WhereSelectEnumerable.prototype.getEnumerator = function () {\n            var _ = this, predicate = _.prevPredicate, source = _.prevSource, selector = _.prevSelector, enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    var c = enumerator.current;\n                    if (predicate == null || predicate(c)) {\n                        return yielder.yieldReturn(selector(c));\n                    }\n                }\n                return false;\n            }, function () {\n                dispose_1.dispose(enumerator);\n            }, _._isEndless);\n        };\n        WhereSelectEnumerable.prototype._onDispose = function () {\n            var _ = this;\n            _super.prototype._onDispose.call(this);\n            _.prevPredicate = null;\n            _.prevSource = null;\n            _.prevSelector = null;\n        };\n        return WhereSelectEnumerable;\n    }(Enumerable));\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Values.compare; }\n            _super.call(this, null);\n            this.source = source;\n            this.keySelector = keySelector;\n            this.order = order;\n            this.parent = parent;\n            this.comparer = comparer;\n            Enumerator_1.throwIfEndless(source && source.isEndless);\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.default(function () {\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_).generateSortedIndexes(buffer);\n            }, function (yielder) {\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = null;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = null;\n            }, false);\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.source = null;\n            this.keySelector = null;\n            this.order = null;\n            this.parent = null;\n        };\n        return OrderedEnumerable;\n    }(FiniteEnumerable));\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.default(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed, className) {\n        if (className === void 0) { className = \"Enumerable\"; }\n        if (disposed)\n            throw new ObjectDisposedException_1.default(className);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/Primitive.d.ts\"/>\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../System/IComparer.d.ts\"/>\r\n///<reference path=\"../System/Collections/Sorting/Order.d.ts\"/>\r\n///<reference path=\"../System/Collections/IEnumerableOrArray.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {\r\n\tempty as EmptyEnumerator,\r\n\tfrom as enumeratorFrom,\r\n\tforEach,\r\n\ttoArray,\r\n\tmap,\r\n\tisEnumerable,\r\n\tthrowIfEndless\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport Type from \"../System/Types\";\r\nimport Integer from \"../System/Integer\";\r\nimport BaseFunctions from \"../System/Functions\";\r\nimport ArrayEnumerator from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport EnumeratorBase from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport Dictionary from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport Queue from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport DisposableBase from \"../System/Disposable/DisposableBase\";\r\nimport UnsupportedEnumerableException from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport ObjectDisposedException from \"../System/Disposable/ObjectDisposedException\";\r\nimport KeySortedContext from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport ArgumentNullException from \"../System/Exceptions/ArgumentNullException\";\r\nimport ArgumentOutOfRangeException from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\ntype Comparable = Primitive|IComparable<any>;\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:any = void 0;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n/*\r\n * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\r\n * There may seem like there's extra overrides here and they may seem unnecessary.\r\n * But after closer inspection you'll see the type chain is retained and\r\n * infinite enumerables are prevented from having features that finite ones have.\r\n *\r\n * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\r\n */\r\n\r\nexport class InfiniteEnumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t\tthis._isEndless = true;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn new InfiniteEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>,\r\n\t\tinitializer?:()=>void,\r\n\t\tisEndless:boolean = this.isEndless):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforce(defaultAction:EnumerableAction = EnumerableAction.Break):void\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.doAction(element => defaultAction);\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<count\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn <Enumerable<T>>_.doAction((element:T, index?:number) => index<count, null, false);\r\n\t}\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar v = this.elementAtOrDefault(index, INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"index is greater than or equal to the number of elements in source.\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.from<T>(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(func);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tenumerator = func(enumerator.current).getEnumerator();\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\tif(Array.isArray(c))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator\r\n\t\t\t\t\t\t\t\t\t\t= Enumerable.from<any>(c)\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(selector.length<2)\r\n\t\t\treturn new WhereSelectEnumerable(_, null, selector);\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tprotected _choose<TResult>(selector:Selector<T, TResult> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tchoose<T>():Enumerable<T>\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t * @param selector\r\n\t * @returns {Enumerable<TResult>}\r\n\t */\r\n\tchoose<TResult>(selector:Selector<T, TResult> = Functions.Identity):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._choose(selector)\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(predicate.length<2)\r\n\t\t\treturn new WhereEnumerable(_, predicate);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):InfiniteEnumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.where(x=>typeof x===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tforEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(compareKey===key)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerableOrArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerableOrArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcatWith(other:IEnumerableOrArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator!=null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(firstEnumerator.moveNext()) return yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\t\tfirstEnumerator.dispose();\r\n\t\t\t\t\t\t\tfirstEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(secondEnumerator.moveNext()) return yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerableOrArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerableOrArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn _.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends InfiniteEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void,\r\n\t\tisEndless:boolean = null)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(array:IArray<T>):FiniteEnumerable<T>;\r\n\tstatic from<T>(source:IEnumerable<T>):Enumerable<T>;\r\n\tstatic from<T>(source:IEnumerableOrArray<T>):Enumerable<T>;\r\n\tstatic from<T>(source:any):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable<T>(\r\n\t\t\t\t\t()=>source.getEnumerator(),\r\n\t\t\t\t\tnull, source.isEndless);\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\tstatic toArray<T>(source:IEnumerableOrArray<T>):T[]\r\n\t{\r\n\t\tif(source instanceof Enumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn toArray(source);\r\n\t}\r\n\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(Integer.random.select(values)),\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic chooseFrom<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.choice(args);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycleThrough<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.cycle(args);\r\n\t}\r\n\r\n\tstatic empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single static instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T):InfiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\tstatic make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\r\n\tstatic range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\treturn Enumerable.toInfinity(start, -step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t(yielder:IYield<number>)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t(yielder:IYield<number>)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T):InfiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number):FiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t?\r\n\t\t\tnew FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c:number = count;\r\n\t\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t:\r\n\t\t\tnew InfiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++)),\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:Selector<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\tforEach(enumerable, action);\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn map(enumerable, selector);\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tdoAction(\r\n\t\taction:Action<T>|Predicate<T>|Selector<T, number>|Selector<T, EnumerableAction>,\r\n\t\tinitializer?:()=>void,\r\n\t\tisEndless:boolean = this.isEndless):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.doAction(action, initializer, isEndless);\r\n\t}\r\n\r\n// #region Indexing/Paging methods.\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.skip(count);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assert(index);\r\n\t\tif(index<0) throw new ArgumentOutOfRangeException(\"index\", index, \"Must be zero or greater\");\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use forEach utility instead.\r\n\t\tforEach<T>(this, (x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t});\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach(x=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x)] = elementSelector(x);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach(x=> dict.addByKeyValue(keySelector(x), elementSelector(x)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.where(predicate);\r\n\t}\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\treturn <Enumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement)=>TResult):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tchoose<T>():Enumerable<T>;\r\n\tchoose<TResult>(selector:Selector<T, TResult> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._choose(selector);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t?\r\n\t\t\t\t(x, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tvar result = true;\r\n\t\tthis.forEach(x =>\r\n\t\t{\r\n\t\t\tif(!predicate(x))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tvar result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true)) result\r\n\t\t\t\t\t\t= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\tconcatWith(other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.concatWith(other);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.merge(enumerables);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn this;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn this.concatWith(enumerables[0]);\r\n\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tforEach(second, key=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, keys, outs);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tenumeratorFrom(second),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerableOrArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\treturn <Enumerable<TType>>super.ofType(type);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.except(second, compareSelector);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T)=>T):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.distinct(compareSelector);\r\n\t}\r\n\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.distinctUntilChanged(compareSelector);\r\n\t}\r\n\r\n// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement> = Functions.Identity,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):Enumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tvar count = 0; // No need to make integer if the result could be a float.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tfunction(x)\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(sumInfinite) // Not zero?\r\n\t\t\treturn sumInfinite*Infinity;\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n\r\n\t\t\t\t\t\tif(!sharedEnumerator)\r\n\t\t\t\t\t\t\tsharedEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tsharedEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(sharedEnumerator.current)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:Error) => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Could possibly be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tforEach(_._source, action);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: super.elementAt(index);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, len = _._source ? _._source.length : 0;\r\n\t\treturn _.take(len - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tvar len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends Enumerable<TElement>\r\n{\r\n\tkey:TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount:number;\r\n\tget(key:TKey):TElement[];\r\n\tcontains(key:TKey):boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WhereEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<T>,\r\n\t\tprivate prevPredicate:Predicate<T>  // predicate.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null, null, prevSource && prevSource.isEndless);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\tvar prevPredicate = this.prevPredicate;\r\n\t\tvar composedPredicate = (x:T) => prevPredicate(x) && predicate(x);\r\n\t\treturn new WhereEnumerable<T>(this.prevSource, composedPredicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\treturn new WhereSelectEnumerable<T, TSelect>(\r\n\t\t\tthis.prevSource,\r\n\t\t\tthis.prevPredicate,\r\n\t\t\tselector\r\n\t\t);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar predicate = _.prevPredicate;\r\n\t\tvar source = _.prevSource;\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(enumerator.current))\r\n\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.prevPredicate = null;\r\n\t\tthis.prevSource = null;\r\n\t}\r\n}\r\n\r\nclass WhereSelectEnumerable<TSource, T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<TSource>,\r\n\t\tprivate prevPredicate:Predicate<TSource>,  // predicate.length always <= 1\r\n\t\tprivate prevSelector:Selector<TSource, T> // selector.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null, null, prevSource && prevSource.isEndless);\r\n\t}\r\n\r\n\twhere(predicate:(value:T, index?:number) => boolean):Enumerable<T>\r\n\t{\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\treturn new WhereEnumerable<T>(this, predicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t// if selector use index, can't compose\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prevSelector = _.prevSelector;\r\n\t\tvar composedSelector = (x:TSource) => selector(prevSelector(x));\r\n\t\treturn new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _                             = this,\r\n\t\t    predicate                     = _.prevPredicate,\r\n\t\t    source                        = _.prevSource,\r\n\t\t    selector:Selector<TSource, T> = _.prevSelector, // Type definition needed for correct inference.\r\n\t\t    enumerator:IEnumerator<TSource>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\tif(predicate==null || predicate(c))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selector(c));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.prevPredicate = null;\r\n\t\t_.prevSource = null;\r\n\t\t_.prevSelector = null;\r\n\t}\r\n}\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n}\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends FiniteEnumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t\tthrowIfEndless(source && source.isEndless);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean, className:string = \"Enumerable\"):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(className);\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}