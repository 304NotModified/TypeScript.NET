{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["define","require","exports","Compare_1","Arrays","ArrayUtility","Utility_1","enumUtil","Enumerator_1","EmptyEnumerator_1","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","dispose_1","DisposableBase_1","UnsupportedEnumerableException_1","ObjectDisposedException_1","KeySortedContext_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","IndexEnumerator_1","IteratorEnumerator_1","extends_1","BREAK","RETURN","isNotNullOrUndefined","e","VOID0","getEmptyEnumerator","EmptyEnumerator","nextEnumerator","queue","moveNext","dispose","enqueue","createSortContext","orderedEnumerable","currentContext","context","KeySortedContext","keySelector","order","comparer","parent","throwIfDisposed","disposed","ObjectDisposedException","__extends","INVALID_DEFAULT","NULL","LinqFunctions","_super","apply","this","arguments","prototype","Greater","a","b","Lesser","Functions","Object","freeze","InfiniteEnumerable","_enumeratorFactory","finalizer","_this","call","_isEndless","_disposableObjectName","defineProperty","get","enumerable","configurable","getEnumerator","_onDispose","asEnumerable","_","doAction","action","initializer","isEndless","onComplete","isE","undefined","ArgumentNullException","Enumerable","enumerator","index","EnumeratorBase","yielder","c","current","actionResult","yieldBreak","yieldReturn","force","skip","count","isFinite","Integer","assert","where","element","take","empty","ArgumentOutOfRangeException","elementAt","v","elementAtOrDefault","defaultValue","assertZeroOrGreater","n","using","i","first","firstOrDefault","Error","single","value","singleOrDefault","any","isEmpty","traverseDepthFirst","childrenSelector","resultSelector","Identity","len","enumeratorStack","Type","isString","fromAny","length","these","flatten","selectMany","entry","pairwise","selector","previous","select","result","scan","func","seed","_filterSelected","_selectMany","collectionSelector","middleEnumerator","middleSeq","from","filter","choose","predicate","nonNull","ofType","type","typeName","Number","NUMBER","String","STRING","Boolean","BOOLEAN","Function","FUNCTION","x","except","second","compareSelector","keys","Dictionary","forEach","key","addByKeyValue","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","areEqual","defaultIfEmpty","isFirst","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","Queue","next","dequeue","join","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","toLookup","innerElement","groupJoin","merge","enumerables","tryDequeue","concat","_i","union","insertAt","other","isEnumerated","alternateMultiple","sequence","buffer","mode","alternateEnumerator","ArrayEnumerator","toArray","hasAtLeastOne","reset","latest","another","alternateSingle","make","alternate","catchError","handler","finallyAction","size","array","initialize","share","sharedEnumerator","DisposableBase","enumeratorFactory","skipWhile","takeWhile","takeUntil","includeUntilValue","found","traverseBreadthFirst","nestLevel","max","Infinity","throwIfEndless","copyTo","target","elementSelector","dict","getValue","push","Lookup","toMap","obj","toDictionary","toJoinedString","separator","takeExceptLast","q","skipToLast","reverse","shuffle","capacity","selectedIndex","random","selectedValue","all","every","some","contains","s_1","indexOf","lastIndexOf","intersect","outs","sequenceEqual","equalityComparer","e1","e2","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","partitionBy","elements","Grouping","group","hasNext","aggregate","average","numberOrNaN","sum","isNaN","NaN","min","maxBy","minBy","sumInfinite","product","exists","quotient","last","lastOrDefault","memoize","cache","throwWhenEmpty","FiniteEnumerable","ArrayEnumerable","source","_source","IndexEnumerator","s","pointer","step","isArrayLike","Array","isArray","_groupKey","_dictionary","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes","UnsupportedEnumerableException","defaultEnumerable","isObject","isEnumerable","isEnumerator","isIterator","IteratorEnumerator","fromOrEmpty","_choice","values","choice","copy","chooseFrom","args","_cycle","cycle","cycleThrough","repeat","repeatWithFinalize","range","start","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","matches","input","pattern","flags","RegExp","regex","match","exec","generate","factory","unfold","valueFactory","skipSeed","map","weave","mainEnumerator","dump"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,oBAAqB,sCAAuC,sCAAuC,sCAAuC,+CAAgD,+CAAgD,oDAAqD,kBAAmB,oBAAqB,sBAAuB,oDAAqD,mDAAoD,gDAAiD,8BAA+B,+BAAgC,sCAAuC,mEAAoE,+CAAgD,iDAAkD,6CAA8C,mDAAoD,oDAAqD,uDAAwD,cAAe,SAAUC,EAASC,EAASC,EAAWC,EAAQC,EAAcC,EAAWC,EAAUC,EAAcC,EAAmBC,EAASC,EAAWC,EAAaC,EAAmBC,EAAkBC,EAAcC,EAASC,EAAWC,EAAkBC,EAAkCC,EAA2BC,EAAoBC,EAAyBC,EAA+BC,EAAmBC,EAAsBC,GAC35C,YC2EJ,SAAAC,KAEC,MAAO,GAER,QAAAC,KAEC,MAAO,GAER,QAAAC,GAA8BC,GAE7B,MAAW,QAAJA,GAAYA,IAAIC,EAwBxB,QAAAC,KAEC,MAAOvB,GAAAwB,gBAqlGR,QAAAC,GAA2BC,EAA6BL,GAEvD,GAAGA,EACH,CACC,IAAGA,EAAEM,WAOJ,MADAnB,GAAAoB,QAAQP,GACD,IALPK,GAAMG,QAAQR,GAQhB,MAAOA,GASR,QAAAS,GACCC,EACAC,GAAA,SAAAA,IAAAA,EAAA,KAGA,IAAMC,GAAU,GAAIrB,GAAAsB,iBACnBF,EACAD,EAAkBI,YAClBJ,EAAkBK,MAClBL,EAAkBM,SAEnB,OAAGN,GAAkBO,OACbR,EAAkBC,EAAkBO,OAAQL,GAE7CA,EAUR,QAAAM,GAAyBC,GAExB,GAAGA,EAAU,KAAM,IAAI7B,GAAA8B,wBAAwB,aAC/C,QAAO,EAnrGR,GAAMC,GAAYzB,EAAAA,WAKZ0B,KACArB,EAAkB,OAClBsB,EAAW,KAgBjBC,EAAA,SAAAC,GAAA,QAAAD,KDtEY,MAAOC,GAAOC,MAAMC,KAAMC,YAAcD,KCoFpD,MAd4BN,GAAAG,EAAAC,GAG3BD,EAAAK,UAAAC,QAAA,SAAWC,EAAKC,GAEf,MAAOD,GAAEC,EAAID,EAAIC,GAKlBR,EAAAK,UAAAI,OAAA,SAAUF,EAAKC,GAEd,MAAOD,GAAEC,EAAID,EAAIC,GAEnBR,GAd4B1C,EAAAoD,WAgBtBA,EAAYC,OAAOC,OAAO,GAAIZ,IAoBpCa,EAAA,SAAAZ,GAGC,QAAAY,GACWC,EACVC,GAFD,GAAAC,GAICf,EAAAgB,KAAAd,KAAMY,IAAUZ,IDhFN,OC6EAa,GAAAF,mBAAAA,EAIVE,EAAKE,YAAa,EAClBF,EAAKG,sBAAwB,qBDlFZH,ECmjDnB,MAz+CQnB,GAAAgB,EAAAZ,GAYPU,OAAAS,eAAIP,EAAAR,UAAA,aDnFOgB,ICmFX,WAEC,MAAOlB,MAAKe,YDlFFI,YAAY,EACZC,cAAc,ICqFzBV,EAAAR,UAAAmB,cAAA,WAKC,MAFArB,MAAKT,kBAEES,KAAKW,sBAMHD,EAAAR,UAAAoB,WAAV,WAECxB,EAAAI,UAAMoB,WAAUR,KAAAd,MACVA,KAAMW,mBAAqB,MAMlCD,EAAAR,UAAAqB,aAAA,WAEC,GAAMC,GAAIxB,IAEV,OADAwB,GAAEjC,kBACW,GAAImB,GAAsB,WAAM,MAAAc,GAAEH,mBA2BhDX,EAAAR,UAAAuB,SAAA,SACCC,EACAC,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAmC5B,KAAK4B,UAIxC,IAAMJ,GAAIxB,IACVwB,GAAEjC,iBACF,IAAMuC,GAAwBF,GAAaG,MAC3C,KAAIL,EACH,KAAM,IAAI7D,GAAAmE,sBAAsB,SAEjC,OAAa,IAAIC,GAChB,WAEC,GAAIC,GACAC,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAEC7C,GAAiBmC,GAEdC,GAAaA,IAChBQ,EAAQ,EACRD,EAAaV,EAAEH,iBAIhB,SAACgB,GAIA,IAFA9C,GAAiBmC,GAEXQ,EAAWvD,YACjB,CACC,GAAI2D,GAAIJ,EAAWK,QACfC,EAAoBd,EAAOY,EAAGH,IAElC,IAAGK,KAAe,GAAwB,IAAfA,EAC1B,MAAOH,GAAQI,YAEhB,IAAkB,IAAfD,EACF,MAAOH,GAAQK,YAAYJ,GAK7B,MADGT,IAAYA,EAAWM,IACnB,GAGR,WAEC3E,EAAAoB,QAAQsD,IAGTJ,IAMF,WAECJ,EAAS9B,GAGVkC,IAKFpB,EAAAR,UAAAyC,MAAA,WAEC3C,KAAKT,kBACLS,KAAKyB,SAASvD,GACZmD,gBACA1C,YAKH+B,EAAAR,UAAA0C,KAAA,SAAKC,GAEJ,GAAMrB,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEEuD,SAASD,IAGb3F,EAAA6F,QAAQC,OAAOH,EAAO,SAEf7C,KAAKiD,MAAM,SAACC,EAASf,GAAU,MAAAA,IAAOU,KAJ/B,GAAInC,GAAsBnC,IAQzCmC,EAAAR,UAAAiD,KAAA,SAAKN,GAEJ,KAAKA,EAAM,GACV,MAAOZ,GAAWmB,OAEnB,IAAM5B,GAAIxB,IAGV,IAFAwB,EAAEjC,mBAEEuD,SAASD,GACZ,KAAM,IAAI/E,GAAAuF,4BAA4B,QAASR,EAAO,kBAKvD,OAHA3F,GAAA6F,QAAQC,OAAOH,EAAO,SAGTrB,EAAEC,SAAS,SAACyB,EAASf,GAAU,MAAAA,GAAMU,GAAO,MAAM,IAKhEnC,EAAAR,UAAAoD,UAAA,SAAUnB,GAET,GAAMoB,GAAIvD,KAAKwD,mBAAmBrB,EAAOxC,EACzC,IAAG4D,IAAI5D,EAAiB,KAAM,IAAI7B,GAAAuF,4BAA4B,QAASlB,EAAO,+DAC9E,OAAUoB,IAKX7C,EAAAR,UAAAsD,mBAAA,SAAmBrB,EAAcsB,GAEhC,GAAMjC,GAAIxB,IACVwB,GAAEjC,kBAEFrC,EAAA6F,QAAQW,oBAAoBvB,EAAO,QACnC,IAAMwB,GAAWxB,CAEjB,OAAO3E,GAAAoG,MACN5D,KAAKqB,gBACL,SAAAhD,GAGC,IADA,GAAIwF,GAAI,EACFxF,EAAEM,YACR,CACC,GAAGkF,GAAGF,EAAG,MAAOtF,GAAEkE,OAClBsB,KAGD,MAAOJ,MAcV/C,EAAAR,UAAA4D,MAAA,WAEC,GAAMP,GAAIvD,KAAK+D,eAAepE,EAC9B,IAAG4D,IAAI5D,EAAiB,KAAM,IAAIqE,OAAM,+BACxC,OAAUT,IAKX7C,EAAAR,UAAA6D,eAAA,SAAeN,GAEd,GAAMjC,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEK/B,EAAAoG,MACN5D,KAAKqB,gBACL,SAAAhD,GAAI,MAAAA,GAAEM,WAAaN,EAAEkE,QAAUkB,KAKjC/C,EAAAR,UAAA+D,OAAA,WAEC,GAAMzC,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEQ/B,EAAAoG,MACT5D,KAAKqB,gBACL,SAAAhD,GAEC,GAAGA,EAAEM,WACL,CACC,GAAIuF,GAAQ7F,EAAEkE,OACd,KAAIlE,EAAEM,WAAY,MAAOuF,EACzB,MAAM,IAAIF,OAAM,mDAEjB,KAAM,IAAIA,OAAM,oCAOnBtD,EAAAR,UAAAiE,gBAAA,SAAgBV,GAGf,GAAMjC,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEK/B,EAAAoG,MACN5D,KAAKqB,gBACL,SAAAhD,GAEC,GAAGA,EAAEM,WACL,CACC,GAAIuF,GAAQ7F,EAAEkE,OACd,KAAIlE,EAAEM,WAAY,MAAOuF,GAE1B,MAAOT,MAKV/C,EAAAR,UAAAkE,IAAA,WAEC,GAAM5C,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEK/B,EAAAoG,MACN5D,KAAKqB,gBACL,SAAAhD,GAAI,MAAAA,GAAEM,cAIR+B,EAAAR,UAAAmE,QAAA,WAEC,OAAQrE,KAAKoE,OAuBd1D,EAAAR,UAAAoE,mBAAA,SACCC,EACAC,GAAA,SAAAA,IAAAA,EAE4BjE,EAAUkE,SAEtC,IAAMjD,GAAIxB,KACNR,GAAYgC,EAAEjC,kBAEZqC,EAAYJ,EAAET,UAEpB,OAAO,IAAIkB,GACV,WAGC,GACIC,GACAwC,EAFAC,IAIJ,OAAO,IAAItH,GAAA+E,eACV,WAEC7C,EAAgBC,GAChB0C,EAAaV,EAAEH,gBACfqD,EAAM,GAGP,SAACrC,GAGA,IADA9C,EAAgBC,KAEhB,CACC,GAAG0C,EAAWvD,WACd,CACC,GAAIuF,GAAQM,EAAsBtC,EAAWK,QAASmC,EACtDC,GAAgBD,KAASxC,CACzB,IAAII,GAAIiC,EAA0BrC,EAAWK,SACzClE,GAAKpB,EAAA2H,KAAKC,SAASvC,IAAML,EAAW6C,QAAQxC,EAEhD,OADAJ,GAAa7D,EAAIA,EAAEgD,gBAAkBrE,EAAAwB,gBAC9B6D,EAAQK,YAAYwB,GAG5B,GAAQ,GAALQ,EAAQ,OAAO,CAElBxC,GAAWtD,UACXsD,EAAayC,IAAkBD,GAC/BC,EAAgBI,OAASL,IAI3B,WAEC,IAEClH,EAAAoB,QAAQsD,GD1PK,QC8Pb1E,EAAAoB,QAAQoG,MAAML,KAIhB/C,IAGF,WAECpC,GAAW,GAEZoC,IAOFlB,EAAAR,UAAA+E,QAAA,WAEC,MAAOjF,MAAKkF,WAAW,SAAAC,GAEtB,GAAI9G,IAAKpB,EAAA2H,KAAKC,SAASM,IAAUlD,EAAW6C,QAAQK,EACpD,OAAO9G,GAAIA,EAAE4G,WAAaE,MAK5BzE,EAAAR,UAAAkF,SAAA,SACCC,GAIA,GAAM7D,GAAIxB,IAGV,IAFAwB,EAAEjC,mBAEE8F,EACH,KAAM,IAAIxH,GAAAmE,sBAAsB,WAEjC,IAAIsD,EACJ,OAAOtF,MAAKuF,OAAgB,SAACrB,EAAOL,GAEnC,GAAM2B,GAAa3B,EAAIwB,EAASC,EAAWpB,EAAOL,GAAKjE,CAEvD,OADA0F,GAAWpB,EACJsB,IACL5C,KAAK,IAGTlC,EAAAR,UAAAuF,KAAA,SAAKC,EAAiDC,GAErD,GAAMnE,GAAIxB,IAGV,IAFAwB,EAAEjC,mBAEEmG,EACH,KAAM,IAAI7H,GAAAmE,sBAAsB,OAEjC,OACC2D,KAAOrH,EACJ0B,KAAKuF,OAAO,SAACrB,EAAOL,GAAI,MAAA8B,GAAO9B,EAAI6B,EAAKC,EAAOzB,EAAOL,GAAKK,IAC3DlE,KAAKuF,OAAO,SAACrB,EAAOL,GAAI,MAAA8B,GAAOD,EAAKC,EAAOzB,EAAOL,MAMvDnD,EAAAR,UAAAqF,OAAA,SAAgBF,GAEf,MAAOrF,MAAK4F,gBAAgBP,IAUnB3E,EAAAR,UAAA2F,YAAV,SACCC,EACAtB,GAEA,GAAMhD,GAAIxB,IAGV,IAFAwB,EAAEjC,mBAEEuG,EACH,KAAM,IAAIjI,GAAAmE,sBAAsB,qBAEjC,IAAMJ,GAAYJ,EAAET,UAIpB,OAHIyD,KACHA,EAAiB,SAACpE,EAAKC,GAAU,MAASA,KAEpC,GAAI4B,GACV,WAEC,GAAIC,GACA6D,EACA5D,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAEC7C,GAAiBuG,GACjB5D,EAAaV,EAAEH,gBACf0E,EAAmBzH,EACnB6D,EAAQ,GAGT,SAACE,GAIA,GAFA9C,GAAiBuG,GAEdC,IAAmBzH,IAAU4D,EAAWvD,WAC1C,OAAO,CAGR,GACA,CAGC,IAAIoH,EACJ,CACC,GAAIC,GAAYF,EAAsB5D,EAAWK,QAASJ,IAG1D,KAAI6D,EACH,QAEDD,GAAmBjJ,EAASmJ,KAAKD,GAGlC,GAAGD,EAAiBpH,WACnB,MAAO0D,GAAQK,YACd8B,EACItC,EAAWK,QAAmBwD,EAAiBxD,SAMrDwD,GAAiBnH,UACjBmH,EAAmB,WAGd7D,EAAWvD,WAEjB,QAAO,GAGR,WAECnB,EAAAoB,QAAQsD,EAAY6D,GACpB7D,EAAatC,EACbmG,EAAmB,MAGpBnE,IAGF,WAECkE,EAAqBlG,GAGtBgC,IAYFlB,EAAAR,UAAAgF,WAAA,SACCY,EACAtB,GAEA,MAAOxE,MAAK6F,YAAYC,EAAoBtB,IASnC9D,EAAAR,UAAA0F,gBAAV,SACCP,EACAa,GADA,SAAAb,IAAAA,EAAqC9E,EAAUkE,SAG/C,IAAMjD,GAAIxB,KACNR,GAAYgC,EAAEjC,iBAClB,KAAI8F,EACH,KAAM,IAAIxH,GAAAmE,sBAAsB,WAEjC,OAAO,IAAIC,GACV,WAEC,GAAIC,GACAC,EAAe,CAGnB,OAAO,IAAI9E,GAAA+E,eACV,WAEC7C,GAAiB8F,GAEjBlD,EAAQ,EACRD,EAAaV,EAAEH,iBAGhB,SAACgB,GAIA,IAFA9C,EAAgBC,GAEV0C,EAAWvD,YACjB,CACC,GAAIkF,GAAI1B,IACJqD,EAASH,EAASnD,EAAWK,QAAUsB,EAC3C,KAAIqC,GAAUA,EAAOV,EAAQ3B,KAC5B,MAAOxB,GAAQK,YAAY8C,GAG7B,OAAO,GAGR,WAEChI,EAAAoB,QAAQsD,IAGTV,EAAET,aAIJ,WAECvB,GAAW,GAGZgC,EAAET,aASJL,EAAAR,UAAAiG,OAAA,SAAOd,GAEN,MAFM,UAAAA,IAAAA,EAA4B9E,EAAUkE,UAErCzE,KAAK4F,gBAAgBP,EAAUjH,IAGvCsC,EAAAR,UAAA+C,MAAA,SAAMmD,GAEL,MAAYpG,MAAK4F,gBAAgBrF,EAAUkE,SAAU2B,IAGtD1F,EAAAR,UAAAmG,QAAA,WAEC,MAAOrG,MAAKiD,MAAM,SAAAM,GAAG,MAAG,OAAHA,GAAWA,GAAGjF,KAIpCoC,EAAAR,UAAAoG,OAAA,SAAcC,GAEb,GAAIC,EACJ,QAAYD,GAEX,IAAKE,QACJD,EAAWvJ,EAAA2H,KAAK8B,MAChB,MACD,KAAKC,QACJH,EAAWvJ,EAAA2H,KAAKgC,MAChB,MACD,KAAKC,SACJL,EAAWvJ,EAAA2H,KAAKkC,OAChB,MACD,KAAKC,UACJP,EAAWvJ,EAAA2H,KAAKoC,QAChB,MACD,SACC,MAAahH,MACXiD,MAAM,SAAAgE,GAAG,MAAAA,aAAaV,KAE1B,MAAYvG,MACViD,MAAM,SAAAgE,GAAI,MAAA7I,GAAqB6I,UAAaA,KAAIT,KAGnD9F,EAAAR,UAAAgH,OAAA,SACCC,EACAC,GAEA,GAAM5F,GAAIxB,KACNR,GAAYgC,EAAEjC,kBACZqC,EAAYJ,EAAET,UAEpB,OAAa,IAAIkB,GAChB,WAEC,GAAIC,GACAmF,CAEJ,OAAO,IAAIhK,GAAA+E,eACV,WAEC7C,EAAgBC,GAChB0C,EAAaV,EAAEH,gBACfgG,EAAO,GAAI/J,GAAAgK,WAAuBF,GAC/BD,GACFrK,EAASyK,QAAQJ,EAAQ,SAAAK,GAASH,EAAKI,cAAcD,GAAK,MAG5D,SAACnF,GAGA,IADA9C,EAAgBC,GACV0C,EAAWvD,YACjB,CACC,GAAI4D,GAAaL,EAAWK,OAC5B,KAAI8E,EAAKK,YAAYnF,GAGpB,MADA8E,GAAKI,cAAclF,GAAS,GACrBF,EAAQK,YAAYH,GAG7B,OAAO,GAGR,WAEC/E,EAAAoB,QAAQsD,GACRmF,EAAKM,SAGN/F,IAIF,WAECpC,GAAW,GAGZoC,IAKFlB,EAAAR,UAAA0H,SAAA,SAASR,GAER,MAAOpH,MAAKkH,OAAOtH,EAAMwH,IAI1B1G,EAAAR,UAAA2H,qBAAA,SAAqBT,GAAA,SAAAA,IAAAA,EAAmC7G,EAAUkE,SAGjE,IAAMjD,GAAIxB,KACNR,GAAYgC,EAAEjC,kBACZqC,EAAYJ,EAAET,UAEpB,OAAa,IAAIkB,GAChB,WAEC,GAAIC,GACA4F,EACAC,GAAkB,CAEtB,OAAO,IAAI1K,GAAA+E,eACV,WAEC7C,EAAgBC,GAChB0C,EAAaV,EAAEH,iBAGhB,SAACgB,GAGA,IADA9C,EAAgBC,GACV0C,EAAWvD,YACjB,CACC,GAAI6I,GAAMJ,EAAmBlF,EAAWK,QAExC,IAAGwF,EAEFA,GAAU,MAEN,IAAGrL,EAAAsL,SAAeF,EAAYN,GAElC,QAID,OADAM,GAAaN,EACNnF,EAAQK,YAAYR,EAAWK,SAEvC,OAAO,GAGR,WAEC/E,EAAAoB,QAAQsD,IAGTN,IAIF,WAECpC,GAAW,GAGZoC,IASFlB,EAAAR,UAAA+H,eAAA,SAAexE,GAEd,GAAMjC,GAAIxB,KACJR,GAAoBgC,EAAEjC,kBACtBqC,EAAYJ,EAAET,UAEpB,OAAa,IAAIkB,GAChB,WAEC,GAAIC,GACAgG,CAEJ,OAAO,IAAI7K,GAAA+E,eACV,WAEC8F,GAAU,EACV3I,EAAgBC,GAChB0C,EAAaV,EAAEH,iBAGhB,SAACgB,GAIA,MAFA9C,GAAgBC,GAEb0C,EAAWvD,YAEbuJ,GAAU,EACH7F,EAAQK,YAAYR,EAAWK,YAE/B2F,IAEPA,GAAU,EACH7F,EAAQK,YAAYe,KAK7B,WAECjG,EAAAoB,QAAQsD,IAGTN,IAGF,KAEAA,IAKFlB,EAAAR,UAAAiI,IAAA,SACChB,EACA3C,GAEA,GAAMhD,GAAIxB,IAIV,OAHAwB,GAAEjC,kBAGK,GAAI0C,GACV,WAEC,GAAImG,GACAC,EACAlG,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAECD,EAAQ,EACRiG,EAAkB5G,EAAEH,gBACpBgH,EAAmBvL,EAASmJ,KAAckB,IAG3C,SAAC9E,GAAW,MAAA+F,GAAgBzJ,YACzB0J,EAAiB1J,YACjB0D,EAAQK,YAAY8B,EAAkB4D,EAAgB7F,QAAkB8F,EAAiB9F,QAASJ,OAErG,WAEC3E,EAAAoB,QAAQwJ,EAAiBC,QAQ9B3H,EAAAR,UAAAoI,YAAA,SACCnB,EACA3C,GAEA,GAAMhD,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEE4H,EAAOpC,OAGJ,GAAI9C,GACV,WAEC,GAAIsG,GACAH,EACAC,EACAlG,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAECmG,EAAa,GAAIhL,GAAAiL,MAAWrB,GAC5BhF,EAAQ,EACRiG,EAAkB5G,EAAEH,gBACpBgH,EAAmBzI,GAGpB,SAACyC,GAEA,GAAG+F,EAAgBzJ,WAElB,OACA,CACC,MAAO0J,GACP,CACC,IAAGE,EAAW1F,MAOb,MAAOR,GAAQI,YALf,IAAIgG,GAAOF,EAAWG,SACnBD,KACFJ,EAAmBvL,EAASmJ,KAAcwC,IAM7C,GAAGJ,EAAiB1J,WACnB,MAAO0D,GAAQK,YACd8B,EAAkB4D,EAAgB7F,QAAkB8F,EAAiB9F,QAASJ,KAGhFkG,GAAiBzJ,UACjByJ,EAAmBzI,EAIrB,MAAOyC,GAAQI,cAGhB,WAECjF,EAAAoB,QAAQwJ,EAAiBG,OApDrBtG,EAAWmB,SA8DpB1C,EAAAR,UAAAyI,KAAA,SACCC,EACAC,EACAC,EACAtE,EACA4C,GAAA,SAAAA,IAAAA,EAAuD7G,EAAUkE,SAGjE,IAAMjD,GAAIxB,IACV,OAAO,IAAIiC,GACV,WAEC,GAAI8G,GACAC,EACAC,EACAC,EAAoB,CAExB,OAAO,IAAI7L,GAAA+E,eACV,WAEC2G,EAAkBvH,EAAEH,gBACpB2H,EAAS/G,EAAWgE,KAAK2C,GACvBO,SAASL,EAAkBvI,EAAUkE,SAAU2C,IAGlD,SAAC/E,GAEA,OACA,CACC,GAAG4G,EACH,CACC,GAAIG,GAAeH,EAAcC,IACjC,IAAGE,IAAe9K,EACjB,MAAO+D,GAAQK,YAAY8B,EAAkBuE,EAAgBxG,QAAS6G,GAEvEH,GAAgB,KAChBC,EAAa,EAGd,IAAGH,EAAgBpK,WAOlB,MAAO0D,GAAQI,YALf,IAAI+E,GAAMqB,EAAoBE,EAAgBxG,QAC9C0G,GAAgBD,EAAO9H,IAAIsG,KAS9B,WAEChK,EAAAoB,QAAQmK,GACRE,EAAgB,KAChBF,EAAkBnJ,EAClBoJ,EAASpJ,OAOdc,EAAAR,UAAAmJ,UAAA,SACCT,EACAC,EACAC,EACAtE,EACA4C,GAAA,SAAAA,IAAAA,EAAuD7G,EAAUkE,SAEjE,IAAMjD,GAAIxB,IAEV,OAAO,IAAIiC,GACV,WAEC,GAAIC,GACA8G,CAEJ,OAAO,IAAI3L,GAAA+E,eACV,WAECF,EAAaV,EAAEH,gBACf2H,EAAS/G,EAAWgE,KAAK2C,GACvBO,SAASL,EAAkBvI,EAAUkE,SAAU2C,IAGlD,SAAC/E,GACD,MAAAH,GAAWvD,YACR0D,EAAQK,YACV8B,EACItC,EAAWK,QACdyG,EAAO9H,IAAI2H,EAAoB3G,EAAWK,aAI5C,WAEC/E,EAAAoB,QAAQsD,GACRA,EAAatC,EACboJ,EAASpJ,OAQdc,EAAAR,UAAAoJ,MAAA,SAAMC,GAEL,GAAM/H,GAAIxB,KACJ4B,EAAYJ,EAAET,UAEpB,OAAIwI,IAAmC,GAApBA,EAAYxE,OAGlB,GAAI9C,GAChB,WAEC,GAAIC,GACAxD,CAEJ,OAAO,IAAIrB,GAAA+E,eACV,WAGCF,EAAaV,EAAEH,gBACf3C,EAAQ,GAAInB,GAAAiL,MAA4Be,IAGzC,SAAClH,GAEA,OACA,CAEC,MAAOH,GAAcxD,EAAM8K,WAAW,SAAAtF,GACrChC,EAAapF,EAASmJ,KAAQ/B,OAG/B,GAAGhC,GAAcA,EAAWvD,WAC3B,MAAO0D,GAAQK,YAAYR,EAAWK,QAEvC,EAAA,IAAGL,EAOH,MAAOG,GAAQI,YALdP,GAAWtD,UACXsD,EAAatC,KAQhB,WAECpC,EAAAoB,QAAQsD,EAAYxD,IAGrBkD,IAGF,KACAA,GAhDOJ,GAoDTd,EAAAR,UAAAuJ,OAAA,WDplBW,IColBJ,GAAAF,MAAAG,EAAA,EAAAA,EAAAzJ,UAAA8E,OAAA2E,IAAAH,EAAAG,GAAAzJ,UAAAyJ,EAEN,OAAO1J,MAAKsJ,MAAMC,IAInB7I,EAAAR,UAAAyJ,MAAA,SACCxC,EACAC,GAAA,SAAAA,IAAAA,EAAoD7G,EAAUkE,SAE9D,IAAMjD,GAAIxB,KACJ4B,EAAYJ,EAAET,UAEpB,OAAa,IAAIkB,GAChB,WAEC,GAAImG,GACAC,EACAhB,CAEJ,OAAO,IAAIhK,GAAA+E,eACV,WAECgG,EAAkB5G,EAAEH,gBACpBgG,EAAO,GAAI/J,GAAAgK,WAAmBF,IAG/B,SAAC/E,GAEA,GAAIE,EACJ,IAAG8F,IAAmB/J,EACtB,CACC,KAAM8J,EAAgBzJ,YAGrB,GADA4D,EAAa6F,EAAgB7F,SACzB8E,EAAKK,YAAYnF,GAGpB,MADA8E,GAAKI,cAAclF,EAAS,MACrBF,EAAQK,YAAYH,EAG7B8F,GAAmBvL,EAASmJ,KAAKkB,GAElC,KAAMkB,EAAiB1J,YAGtB,GADA4D,EAAa8F,EAAiB9F,SAC1B8E,EAAKK,YAAYnF,GAGpB,MADA8E,GAAKI,cAAclF,EAAS,MACrBF,EAAQK,YAAYH,EAG7B,QAAO,GAGR,WAEC/E,EAAAoB,QAAQwJ,EAAiBC,IAG1BzG,IAGF,KAEAA,IAIFlB,EAAAR,UAAA0J,SAAA,SAASzH,EAAc0H,GAEtB3M,EAAA6F,QAAQW,oBAAoBvB,EAAO,QACnC,IAAMwB,GAAWxB,EAEXX,EAAIxB,IACVwB,GAAEjC,iBACF,IAAMqC,GAAYJ,EAAET,UAEpB,OAAa,IAAIkB,GAChB,WAGC,GAAImG,GACAC,EAEAxF,EAAe,EACfiH,GAAuB,CAE3B,OAAO,IAAIzM,GAAA+E,eACV,WAECS,EAAQ,EACRuF,EAAkB5G,EAAEH,gBACpBgH,EAAmBvL,EAASmJ,KAAQ4D,GACpCC,GAAe,GAGhB,SAACzH,GAEA,MAAGQ,IAAOc,IAETmG,GAAe,EACZzB,EAAiB1J,YACZ0D,EAAQK,YAAY2F,EAAiB9F,SAG3C6F,EAAgBzJ,YAElBkE,IACOR,EAAQK,YAAY0F,EAAgB7F,WAGpCuH,GACJzB,EAAiB1J,YACjB0D,EAAQK,YAAY2F,EAAiB9F,UAG1C,WAEC/E,EAAAoB,QAAQwJ,EAAiBC,IAG1BzG,IAGF,KAEAA,IAKFlB,EAAAR,UAAA6J,kBAAA,SAAkBC,GAEjB,GAAMxI,GAAIxB,KACJ4B,EAAYJ,EAAET,UAEpB,OAAa,IAAIkB,GAChB,WAEC,GAAIgI,GACAC,EACAhI,EACAiI,CAEJ,OAAO,IAAI9M,GAAA+E,eACV,WAGC+H,EAAsB,GAAI/M,GAAAgN,gBACzBnI,EAAWoI,QAAWL,IAGvB9H,EAAaV,EAAEH,eAEf,IAAIiJ,GAAgBpI,EAAWvD,UAC/BuL,GAAOI,EACJ,EACA,EAEAA,IACFL,EAAY/H,EAAWK,UAGzB,SAACF,GAEA,OAAO6H,GAEN,IAAK,GACJ,MAAO7H,GAAQI,YAEhB,KAAK,GACJ,GAAG0H,EAAoBxL,WACtB,MAAO0D,GAAQK,YAAYyH,EAAoB5H,QAChD4H,GAAoBI,QACpBL,EAAO,EAIT,GAAIM,GAASP,EAKTQ,EAAUvI,EAAWvD,UAQzB,OAPAuL,GAAOO,EACJ,EACA,EAEAA,IACFR,EAAY/H,EAAWK,SAEjBF,EAAQK,YAAY8H,IAI5B,WAEChN,EAAAoB,QAAQsD,EAAYiI,IAGrBvI,IAGF,KAEAA,IAIFlB,EAAAR,UAAAwK,gBAAA,SAAgBxG,GAEf,MAAOlE,MAAK+J,kBAAkB9H,EAAW0I,KAAKzG,KAG/CxD,EAAAR,UAAA0K,UAAA,WDlrBW,ICkrBD,GAAAZ,MAAAN,EAAA,EAAAA,EAAAzJ,UAAA8E,OAAA2E,IAAAM,EAAAN,GAAAzJ,UAAAyJ,EAET,OAAO1J,MAAK+J,kBAAkBC,IAK/BtJ,EAAAR,UAAA2K,WAAA,SAAWC,GAEV,GAAMtJ,GAAIxB,KACJR,GAAYgC,EAAEjC,iBACpB,OAAa,IAAI0C,GAChB,WAEC,GAAIC,EAEJ,OAAO,IAAI7E,GAAA+E,eACV,WAEC,IAEC7C,EAAgBC,GAChB0C,EAAaV,EAAEH,gBAEhB,MAAMhD,MAMP,SAACgE,GAEA,IAGC,GADA9C,EAAgBC,GACb0C,EAAWvD,WACb,MAAO0D,GAAQK,YAAYR,EAAWK,SAExC,MAAMlE,GAELyM,EAAQzM,GAET,OAAO,GAGR,WAECb,EAAAoB,QAAQsD,QAObxB,EAAAR,UAAA6K,cAAA,SAAcrJ,GAEb,GAAMF,GAAIxB,KACJR,GAAYgC,EAAEjC,iBAEpB,OAAa,IAAI0C,GAChB,WAEC,GAAIC,EAEJ,OAAO,IAAI7E,GAAA+E,eACV,WAEC7C,EAAgBC,GAChB0C,EAAaV,EAAEH,iBAGhB,SAACgB,GAGA,MADA9C,GAAgBC,KACR0C,EAAWvD,YAChB0D,EAAQK,YAAYR,EAAWK,UAInC,WAEC,IAEC/E,EAAAoB,QAAQsD,GDntBK,QCutBbR,UAUNhB,EAAAR,UAAA+J,OAAA,SAAOe,GAEN,GAAGA,EAAK,IAAMlI,SAASkI,GACtB,KAAM,IAAIhH,OAAM,uBAEjB9G,GAAA6F,QAAQC,OAAOgI,EAAM,OAErB,IAEItG,GAFElD,EAAIxB,KACJ4B,EAAYJ,EAAET,UAGpB,OAAO,IAAIkB,GACV,WAEC,GAAIC,EACJ,OAAO,IAAI7E,GAAA+E,eACV,WAECF,EAAaV,EAAEH,iBAGhB,SAACgB,GAEA,GAAI4I,GAAYrO,EAAasO,WAAcF,EAE3C,KADAtG,EAAM,EACAA,EAAIsG,GAAQ9I,EAAWvD,YAE5BsM,EAAMvG,KAAYxC,EAAWK,OAI9B,OADA0I,GAAMlG,OAASL,IACNA,GAAOrC,EAAQK,YAAYuI,IAGrC,WAECzN,EAAAoB,QAAQsD,IAGTN,IAGF,KAEAA,IAKFlB,EAAAR,UAAAiL,MAAA,WAEC,GAAM3J,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAI6L,EACJ,OAAa,IAAInJ,GAChB,WAEC,MAAOmJ,KAAqBA,EAAmB5J,EAAEH,kBAGlD,WAEC7D,EAAAoB,QAAQwM,IAGT5J,EAAET,aAKLL,GAz+CQjD,EAAA4N,eADK5O,GAAAiE,mBAAAA,CAm/Cb,IAAAuB,GAAA,SAAAnC,GAIC,QAAAmC,GACCqJ,EACA1K,EACAgB,GAHD,GAAAf,GAKCf,EAAAgB,KAAAd,KAAMsL,EAAmB1K,IAAUZ,IDlwBzB,OCmwBVa,GAAKE,WAAaa,EAClBf,EAAKG,sBAAwB,aDpwBZH,ECu7DnB,MA7rCQnB,GAAAuC,EAAAnC,GAcPmC,EAAA/B,UAAAqB,aAAA,WAEC,GAAMC,GAAIxB,IAEV,OADAwB,GAAEjC,kBACW,GAAI0C,GAAc,WAAM,MAAAT,GAAEH,mBAKxCY,EAAA/B,UAAA0C,KAAA,SAAKC,GAEJ,MAAY/C,GAAAI,UAAM0C,KAAI9B,KAAAd,KAAC6C,IAGxBZ,EAAA/B,UAAAqL,UAAA,SAAUnF,GAGT,MADApG,MAAKT,kBACES,KAAKyB,SACX,SAACyB,EAAWf,GACX,MAAAiE,GAAUlD,EAASf,GAChB,EACA,KAINF,EAAA/B,UAAAsL,UAAA,SAAUpF,GAIT,GAFApG,KAAKT,mBAED6G,EACH,KAAM,IAAIvI,GAAAmE,sBAAsB,YAEjC,OAAYhC,MAAKyB,SAChB,SAACyB,EAAWf,GACX,MAAAiE,GAAUlD,EAASf,GAChB,EACA,GACJ,KACA,OAKFF,EAAA/B,UAAAuL,UAAA,SAAUrF,EAAiCsF,GAI1C,GAFA1L,KAAKT,mBAED6G,EACH,KAAM,IAAIvI,GAAAmE,sBAAsB,YAEjC,KAAI0J,EACH,MAAY1L,MAAKyB,SAChB,SAACyB,EAAWf,GACX,MAAAiE,GAAUlD,EAASf,GAChB,EACA,GACJ,KACA,KAGF,IAAIwJ,IAAgB,CACpB,OAAY3L,MAAKyB,SAChB,SAACyB,EAAWf,GAEX,MAAGwJ,GACK,GAERA,EAAQvF,EAAUlD,EAASf,GACpB,IAER,WAECwJ,GAAQ,GAET,OAmBF1J,EAAA/B,UAAA0L,qBAAA,SACCrH,EACAC,GAAA,SAAAA,IAAAA,EAE4BjE,EAAUkE,SAEtC,IAAMjD,GAAIxB,KACNR,GAAYgC,EAAEjC,kBAEZqC,EAAYJ,EAAET,UAGpB,OAAO,IAAIkB,GACV,WAEC,GAAIC,GAEA+H,EAAcvF,EADdmH,EAAmB,CAGvB,OAAO,IAAIxO,GAAA+E,eACV,WAEC7C,EAAgBC,GAChB0C,EAAaV,EAAEH,gBAEfwK,EAAY,EACZ5B,KACAvF,EAAM,GAGP,SAACrC,GAIA,IAFA9C,EAAgBC,KAGhB,CACC,GAAG0C,EAAWvD,WAGb,MADAsL,GAAOvF,KAASxC,EAAWK,QACpBF,EAAQK,YAAY8B,EAAetC,EAAWK,QAASsJ,GAG/D,KAAInH,EACH,MAAOrC,GAAQI,YAEhB,IAAIgG,GAAOxG,EACTgE,KAAKgE,GACL/E,WAAWX,EAEb,KAAIkE,EAAKrE,MAER,MAAO/B,GAAQI,YAIfoJ,KACA5B,KACAvF,EAAM,EACNxC,EAAWtD,UACXsD,EAAauG,EAAKpH,kBAKrB,WAEC7D,EAAAoB,QAAQsD,GACR+H,EAAOlF,OAAS,GAGjBnD,IAGF,WAECpC,GAAW,GAGZoC,IAOFK,EAAA/B,UAAAqH,QAAA,SAAQ7F,EAAmDoK,GAAA,SAAAA,IAAAA,EAAAC,EAAAA,EAE1D,IAAMvK,GAAIxB,IAEV,IADAwB,EAAEjC,mBACEmC,EACH,KAAM,IAAI7D,GAAAmE,sBAAsB,SAWjC,OAVAjF,GAAAiP,eAAexK,EAAEI,WAUVkK,EAAI,EAAItO,EAAAoG,MACdpC,EAAEH,gBAAiB,SAAAhD,GAGlBtB,EAAAiP,gBAAgBlJ,SAASgJ,IAAQzN,EAAEuD,UAInC,KAFA,GAAIiC,GAAI,EAEFiI,EAAIjI,GAAKrC,EAAEjC,mBAAqBlB,EAAEM,YAEpC+C,EAAUrD,EAAEkE,QAASsB,QAAO,IAGhC,MAAOA,KAEL,GAIL5B,EAAA/B,UAAAmK,QAAA,SAAQjE,GAEP,MAAOA,GACJpG,KAAKiD,MAAMmD,GAAWiE,UACtBrK,KAAKiM,YAGThK,EAAA/B,UAAA+L,OAAA,SAAOC,EAAY/J,EAAkBU,GAGpC,GAHkB,SAAAV,IAAAA,EAAA,GAAkB,SAAAU,IAAAA,EAAAkJ,EAAAA,GAEpC/L,KAAKT,mBACD2M,EAAQ,KAAM,IAAIrO,GAAAmE,sBAAsB,SAS5C,OARA9E,GAAA6F,QAAQW,oBAAoBvB,GAG5BrF,EAASyK,QAAWvH,KAAM,SAACiH,EAAGpD,GAE7BqI,EAAOrI,EAAI1B,GAAS8E,GAClBpE,GAEIqJ,GAIRjK,EAAA/B,UAAAiJ,SAAA,SACChK,EACAgN,EACA/E,GADA,SAAA+E,IAAAA,EAA+C5L,EAAUkE,UACzD,SAAA2C,IAAAA,EAAuD7G,EAAUkE,SAEjE,IAAM2H,GAAkC,GAAI9O,GAAAgK,WAA2BF,EAYvE,OAXApH,MAAKuH,QACJ,SAACN,EAAGpD,GAEH,GAAI2D,GAAMrI,EAAY8H,EAAGpD,GACrBX,EAAUiJ,EAAgBlF,EAAGpD,GAE7BoH,EAAQmB,EAAKC,SAAS7E,EACvByD,KAAQ3M,EAAO2M,EAAMqB,KAAKpJ,GACxBkJ,EAAK3E,cAAcD,GAAMtE,MAGzB,GAAIqJ,GAAqBH,IAGjCnK,EAAA/B,UAAAsM,MAAA,SACCrN,EACAgN,GAEA,GAAMM,KAKN,OAJAzM,MAAKuH,QAAQ,SAACN,EAAGpD,GAEhB4I,EAAItN,EAAY8H,EAAGpD,IAAMsI,EAAgBlF,EAAGpD,KAEtC4I,GAIRxK,EAAA/B,UAAAwM,aAAA,SACCvN,EACAgN,EACA/E,GAAA,SAAAA,IAAAA,EAAuD7G,EAAUkE,SAEjE,IAAM2H,GAAgC,GAAI9O,GAAAgK,WAAyBF,EAEnE,OADApH,MAAKuH,QAAQ,SAACN,EAAGpD,GAAK,MAAAuI,GAAK3E,cAActI,EAAY8H,EAAGpD,GAAIsI,EAAgBlF,EAAGpD,MACxEuI,GAGRnK,EAAA/B,UAAAyM,eAAA,SAAeC,EAAuBvH,GAErC,MAFc,UAAAuH,IAAAA,EAAA,IAAuB,SAAAvH,IAAAA,EAA+B9E,EAAUkE,UAEvEzE,KACLuF,OAAOF,GACPgF,UACA1B,KAAKiE,IAMR3K,EAAA/B,UAAA2M,eAAA,SAAehK,GAAA,SAAAA,IAAAA,EAAA,EAEd,IAAMrB,GAAIxB,IAEV,MAAK6C,EAAM,GACV,MAAOrB,EAER,KAAIsB,SAASD,GACZ,MAAaZ,GAAWmB,OAEzBlG,GAAA6F,QAAQC,OAAOH,EAAO,QACtB,IAAMP,GAAIO,CAEV,OAAa,IAAIZ,GAChB,WAEC,GAAIC,GACA4K,CAEJ,OAAO,IAAIzP,GAAA+E,eACV,WAECF,EAAaV,EAAEH,gBACfyL,EAAI,GAAIvP,GAAAiL,OAGT,SAACnG,GAEA,KAAMH,EAAWvD,YAMhB,GAHAmO,EAAEjO,QAAWqD,EAAWK,SAGrBuK,EAAEjK,MAAMP,EAEV,MAAOD,GAAQK,YAAYoK,EAAEpE,UAE/B,QAAO,GAGR,WAEClL,EAAAoB,QAAQsD,EAAY4K,QAOzB7K,EAAA/B,UAAA6M,WAAA,SAAWlK,GAEV,KAAKA,EAAM,GACV,MAAaZ,GAAWmB,OAEzB,IAAM5B,GAAIxB,IAEV,OAAI8C,UAASD,IAGb3F,EAAA6F,QAAQC,OAAOH,EAAO,SAGTrB,EAAEwL,UACb7J,KAAKN,GACLmK,WAPMxL,GAYTS,EAAA/B,UAAAqF,OAAA,SAAgBF,GAEf,MAA4BvF,GAAAI,UAAMqF,OAAMzE,KAAAd,KAACqF,IAU1CpD,EAAA/B,UAAAgF,WAAA,SACCY,EACAtB,GAEA,MAAOxE,MAAK6F,YAAYC,EAAoBtB,IAK7CvC,EAAA/B,UAAAiG,OAAA,SAAOd,GAEN,MAFM,UAAAA,IAAAA,EAAqC9E,EAAUkE,UAE9CzE,KAAK4F,gBAAgBP,EAAUjH,IAGvC6D,EAAA/B,UAAA8M,QAAA,WAEC,GAAMxL,GAAIxB,KACNR,GAAYgC,EAAEjC,iBAGlB,OAFAxC,GAAAiP,eAAexK,EAAET,YAEJ,GAAIkB,GAChB,WAEC,GAAIgI,GACA9H,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAEC7C,EAAgBC,GAChBgC,EAAEjC,kBACF0K,EAASzI,EAAE6I,UACXlI,EAAQ8H,EAAOlF,QAGhB,SAAC1C,GAAW,QAAEF,GAASE,EAAQK,YAAYuH,IAAS9H,KAEpD,WAEC8H,EAAOlF,OAAS,KAKnB,WAECvF,GAAW,KAKdyC,EAAA/B,UAAA+M,QAAA,WAEC,GAAMzL,GAAIxB,KACNR,GAAYgC,EAAEjC,iBAGlB,OAFAxC,GAAAiP,eAAexK,EAAET,YAEJ,GAAIkB,GAChB,WAEC,GAAIgI,GACAiD,EACAxI,CAEJ,OAAO,IAAIrH,GAAA+E,eACV,WAEC7C,EAAgBC,GAChByK,EAASzI,EAAE6I,UACX6C,EAAWxI,EAAMuF,EAAOlF,QAGzB,SAAC1C,GAGA,IAAIqC,EACH,MAAOrC,GAAQI,YAEhB,IAAI0K,GAAgBjQ,EAAA6F,QAAQqK,OAAO1I,GAC/B2I,EAAgBpD,EAAOkD,EAQ3B,OANAlD,GAAOkD,GAAiBlD,IAASvF,GACjCuF,EAAOvF,GAAO9E,EAEX8E,EAAI,IAAI,IACVuF,EAAOlF,OAASL,GAEVrC,EAAQK,YAAY2K,IAG5B,WAECpD,EAAOlF,OAAS,KAKnB,WAECvF,GAAW,KAKdyC,EAAA/B,UAAA2C,MAAA,SAAMuD,GAEL,GAAIvD,GAAe,CAiBnB,OAhBA7C,MAAKuH,QACJnB,EAGC,SAACa,EAAGpD,GAEAuC,EAAUa,EAAGpD,MAAKhB,GAItB,aAEGA,IAIEA,GAIRZ,EAAA/B,UAAAoN,IAAA,SAAIlH,GAEH,IAAIA,EACH,KAAM,IAAIvI,GAAAmE,sBAAsB,YAEjC,IAAIwD,IAAS,CASb,OARAxF,MAAKuH,QAAQ,SAACN,EAAGpD,GAEhB,IAAIuC,EAAUa,EAAGpD,GAGhB,MADA2B,IAAS,GACF,IAGFA,GAIRvD,EAAA/B,UAAAqN,MAAA,SAAMnH,GAEL,MAAOpG,MAAKsN,IAAIlH,IAIjBnE,EAAA/B,UAAAkE,IAAA,SAAIgC,GAEH,IAAIA,EACH,MAAOtG,GAAAI,UAAMkE,IAAGtD,KAAAd,KAEjB,IAAIwF,IAAS,CASb,OANAxF,MAAKuH,QACJ,SAACN,EAAGpD,GAGH,MADA2B,GAASY,EAAUa,EAAGpD,IACd2B,IAEHA,GAKRvD,EAAA/B,UAAAsN,KAAA,SAAKpH,GAEJ,MAAOpG,MAAKoE,IAAIgC,IAIjBnE,EAAA/B,UAAAuN,SAAA,SAASvJ,EAASkD,GAEjB,GAAGA,EACH,CACC,GAAMsG,GAAItG,EAAgBlD,EAC1B,OAAOlE,MAAKoE,IAAI,SAAAb,GAAI,MAAA7G,GAAAsL,SAAeZ,EAAgB7D,GAAImK,KAExD,MAAO1N,MAAKoE,IAAI,SAAAb,GAAI,MAAA7G,GAAAsL,SAAezE,EAAGW,MAMvCjC,EAAA/B,UAAAyN,QAAA,SAAQzJ,EAASkD,GAEhB,GAAIuE,KAwBJ,OAvBA3L,MAAKuH,QACJH,EAEC,SAAClE,EAAWW,GAEX,GAAGnH,EAAAsL,SAAeZ,EAAgBlE,EAASW,GAAIuD,EAAgBlD,EAAOL,IAAI,GAGzE,MADA8H,GAAQ9H,GACD,GAIT,SAACX,EAAWW,GAGX,GAAGnH,EAAAsL,SAAe9E,EAASgB,GAAO,GAGjC,MADAyH,GAAQ9H,GACD,IAKJ8H,GAGR1J,EAAA/B,UAAA0N,YAAA,SAAY1J,EAASkD,GAEpB,GAAI5B,KAgBJ,OAfAxF,MAAKuH,QACJH,EAEC,SAAClE,EAAWW,GAERnH,EAAAsL,SAAeZ,EAAgBlE,EAASW,GAAIuD,EAAgBlD,EAAOL,IAAI,KAAO2B,EAC9E3B,IAIJ,SAACX,EAAWW,GAERnH,EAAAsL,SAAe9E,EAASgB,GAAO,KAAOsB,EAAS3B,KAG9C2B,GAIRvD,EAAA/B,UAAA2N,UAAA,SACC1G,EACAC,GAEA,GAAM5F,GAAIxB,IAGV,IAFAwB,EAAEjC,mBAEE4H,EACH,KAAM,IAAItJ,GAAAmE,sBAAsB,SAEjC,IAAMJ,GAAYJ,EAAEI,SAEpB,OAAa,IAAIK,GAChB,WAEC,GAAIC,GACAmF,EACAyG,CAEJ,OAAO,IAAIzQ,GAAA+E,eACV,WAEC7C,GAAiB4H,GACjBjF,EAAaV,EAAEH,gBAEfgG,EAAO,GAAI/J,GAAAgK,WAAuBF,GAClC0G,EAAO,GAAIxQ,GAAAgK,WAAuBF,GAElCtK,EAASyK,QAAQJ,EAAQ,SAAAK,GAExBH,EAAKI,cAAcD,GAAK,MAI1B,SAACnF,GAEA,KAAMH,EAAWvD,YACjB,CACC,GAAI4D,GAAaL,EAAWK,OAC5B,KAAIuL,EAAKpG,YAAYnF,IAAY8E,EAAKK,YAAYnF,GAGjD,MADAuL,GAAKrG,cAAclF,GAAS,GACrBF,EAAQK,YAAYH,GAG7B,MAAOF,GAAQI,cAGhB,WAECjF,EAAAoB,QAAQsD,EAAYmF,EAAMyG,IAE3BlM,IAGF,WAECuF,EAASvH,GAEVgC,IAIFK,EAAA/B,UAAA6N,cAAA,SACC5G,EACA6G,GAIA,MAJA,UAAAA,IAAAA,EAAAtR,EAAAsL,UAEAhI,KAAKT,kBAEE/B,EAAAoG,MACN5D,KAAKqB,gBACL,SAAA4M,GAAK,MAAAzQ,GAAAoG,MACJ9G,EAASmJ,KAAKkB,GACd,SAAA+G,GAKC,IAFAnR,EAAAiP,eAAeiC,EAAGrM,WAAasM,EAAGtM,WAE5BqM,EAAGtP,YAER,IAAIuP,EAAGvP,aAAeqP,EAAoBC,EAAG1L,QAAY2L,EAAG3L,SAC3D,OAAO,CAGT,QAAQ2L,EAAGvP,gBAmBfsD,EAAA/B,UAAAoG,OAAA,SAAcC,GAGb,MADAvG,MAAKT,kBACqBO,EAAAI,UAAMoG,OAAMxF,KAAAd,KAACuG,IAKxCtE,EAAA/B,UAAAiO,QAAA,SAAiChP,GAGhC,MAHgC,UAAAA,IAAAA,EAAgCoB,EAAUkE,UAE1EzE,KAAKT,kBACE,GAAI6O,GAA0BpO,KAAMb,EAAa,IAGzD8C,EAAA/B,UAAAmO,WAAA,SAAWC,GAGV,MADAtO,MAAKT,kBACE,GAAI6O,GAAyBpO,KAAM,KAAM,EAAiB,KAAMsO,IAGxErM,EAAA/B,UAAAqO,mBAAA,SAAmBD,GAGlB,MADAtO,MAAKT,kBACE,GAAI6O,GAAyBpO,KAAM,UAAwB,KAAMsO,IAGzErM,EAAA/B,UAAAsO,kBAAA,SAA2CrP,GAG1C,MAH0C,UAAAA,IAAAA,EAAgCoB,EAAUkE,UAEpFzE,KAAKT,kBACE,GAAI6O,GAA0BpO,KAAMb,SAmD5C8C,EAAA/B,UAAA+J,OAAA,SAAOe,GAEN,MAAwBlL,GAAAI,UAAM+J,OAAMnJ,KAAAd,KAACgL,IAoBtC/I,EAAA/B,UAAAuO,QAAA,SACCtP,EACAgN,EACA/E,GAHD,GAAAvG,GAAAb,IAMC,OADImM,KAAiBA,EAAkB5L,EAAUkE,UAC1C,GAAIxC,GACV,WAAM,MAAApB,GACJsI,SAAShK,EAAagN,EAAiB/E,GACvC/F,mBAUJY,EAAA/B,UAAAwO,YAAA,SACCvP,EACAgN,EACA3H,EAEA4C,GAFA,SAAA5C,IAAAA,EAAA,SACIgD,EAAUmH,GAAwB,MAAA,IAAIC,GAAyBpH,EAAKmH,KACxE,SAAAvH,IAAAA,EACG7G,EAAUkE,SAGb,IAAMjD,GAAIxB,IAEV,OADImM,KAAiBA,EAAkB5L,EAAUkE,UAC1C,GAAIxC,GACV,WAEC,GAAIC,GACAsF,EACAM,EACA+G,EACAnK,CAEJ,OAAO,IAAIrH,GAAA+E,eACV,WAIC,GAFA7C,GAAiB4M,GACjBjK,EAAaV,EAAEH,gBACZa,EAAWvD,WACd,CACC,GAAI4E,GAAOrB,EAAWK,OACtBiF,GAAMrI,EAAYoE,GAClBuE,EAAaV,EAAgBI,GAC7BqH,GAAS1C,EAAiB5I,IAC1BmB,EAAM,MAGNmK,GAAQ,MAGV,SAACxM,GAIA,GAFA9C,GAAiB4M,IAEb0C,EACH,MAAOxM,GAAQI,YAGhB,KADA,GAAIqM,GAAiBxM,GACdwM,EAAU5M,EAAWvD,cAE3B2D,EAAOJ,EAAWK,QACf7F,EAAAsL,SAAeF,EAAYV,EAAgBjI,EAAYmD,OACzDuM,EAAMnK,KAASyH,EAAiB7J,EAKlC,IAAIkD,GACGhB,EAAegD,EAAKqH,EAe3B,OAbGC,IAEFxM,EAAOJ,EAAWK,QAClBiF,EAAMrI,EAAYmD,GAClBwF,EAAaV,EAAgBI,GAC7BqH,GAAS1C,EAAiB7J,IAC1BoC,EAAM,GAINmK,EAAQ,KAGFxM,EAAQK,YAAY8C,IAG5B,WAEChI,EAAAoB,QAAQsD,GACR2M,EAAQ,QAIX,WAEC1C,EAAkBvM,KAWrBqC,EAAA/B,UAAA+E,QAAA,WAEC,MAAYnF,GAAAI,UAAM+E,QAAOnE,KAAAd,OAG1BiC,EAAA/B,UAAAkF,SAAA,SAAkBC,GAEjB,MAAYvF,GAAAI,UAAMkF,SAAQtE,KAAAd,KAACqF,IAS5BpD,EAAA/B,UAAA6O,UAAA,SACCrJ,EACAC,GAMA,MAJA3F,MAAKuH,QAAQ,SAACrD,EAAOL,GAEpB8B,EAAO9B,EAAI6B,EAAKC,EAAOzB,EAAOL,GAAKK,IAE7ByB,GAGR1D,EAAA/B,UAAA8O,QAAA,SAAQ3J,GAAA,SAAAA,IAAAA,EAAwCpI,EAAA2H,KAAKqK,YAEpD,IAAIpM,GAAQ,EACNqM,EAAMlP,KAAKkP,IAAI,SAAC7Q,EAAGwF,GAGxB,MADAhB,KACOwC,EAAShH,EAAGwF,IAGpB,OAAQsL,OAAMD,KAASrM,EACpBuM,IACCF,EAAIrM,GAITZ,EAAA/B,UAAA4L,IAAA,WAEC,MAAO9L,MAAK+O,UAAUxO,EAAUJ,UAGjC8B,EAAA/B,UAAAmP,IAAA,WAEC,MAAOrP,MAAK+O,UAAUxO,EAAUD,SAGjC2B,EAAA/B,UAAAoP,MAAA,SAAMnQ,GAEL,MAFK,UAAAA,IAAAA,EAAqCoB,EAAUkE,UAE7CzE,KAAK+O,UAAU,SAAC3O,EAAKC,GAAQ,MAAClB,GAAYiB,GAAGjB,EAAYkB,GAAMD,EAAIC,KAG3E4B,EAAA/B,UAAAqP,MAAA,SAAMpQ,GAEL,MAFK,UAAAA,IAAAA,EAAqCoB,EAAUkE,UAE7CzE,KAAK+O,UAAU,SAAC3O,EAAKC,GAAQ,MAAClB,GAAYiB,GAAGjB,EAAYkB,GAAMD,EAAIC,KAI3E4B,EAAA/B,UAAAgP,IAAA,SAAI7J,GAAA,SAAAA,IAAAA,EAAwCpI,EAAA2H,KAAKqK,YAEhD,IAAIC,GAAM,EAGNM,EAAc,CAqBlB,OAnBAxP,MAAKuH,QACJ,SAACN,EAAGpD,GAEH,GAAIK,GAAQmB,EAAS4B,EAAGpD,EACxB,OAAGsL,OAAMjL,IAERgL,EAAME,KACC,QAELtM,SAASoB,GACXgL,GAAOhL,EAEPsL,GACCtL,EAAM,EACL,QAKEiL,MAAMD,GAAOE,IAAOI,EAAeA,GAAYzD,EAAAA,GAAYmD,GAInEjN,EAAA/B,UAAAuP,QAAA,SAAQpK,GAAA,SAAAA,IAAAA,EAAwCpI,EAAA2H,KAAKqK,YAEpD,IAAIzJ,GAAS,EAAGkK,GAAiB,CAyBjC,OAvBA1P,MAAKuH,QACJ,SAACN,EAAGpD,GAEH6L,GAAS,CACT,IAAIxL,GAAQmB,EAAS4B,EAAGpD,EACxB,OAAGsL,OAAMjL,IAERsB,EAAS4J,KACF,GAGE,GAAPlL,GAEFsB,EAAS,GACF,QAKRA,GAAUtB,KAIJwL,GAAUP,MAAM3J,GAAW4J,IAAM5J,GAQ1CvD,EAAA/B,UAAAyP,SAAA,SAAStK,GAAA,SAAAA,IAAAA,EAAwCpI,EAAA2H,KAAKqK,YAErD,IAAIpM,GAAQ,EACR2C,EAAgB4J,GA6BpB,OA3BApP,MAAKuH,QACJ,SAACN,EAAGpD,GAEH,GAAIK,GAAQmB,EAAS4B,EAAGpD,EAGxB,IAFAhB,IAEW,IAARA,EAEF2C,EAAStB,MAGV,CACC,GAAGiL,MAAMjL,IAAkB,IAARA,IAAcpB,SAASoB,GAGzC,MADAsB,GAAS4J,KACF,CAGR5J,IAAUtB,KAMF,IAARrB,IACF2C,EAAS4J,KAEH5J,GAORvD,EAAA/B,UAAA0P,KAAA,WAEC,GAAMpO,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAI2E,GAAoB5F,EACpBqN,GAAgB,CASpB,IARAnK,EAAE+F,QACD,SAAAN,GAEC0E,GAAQ,EACRzH,EAAQ+C,KAIN0E,EAAO,KAAM,IAAI3H,OAAM,2CAC3B,OAAYE,IAKbjC,EAAA/B,UAAA2P,cAAA,SAAcpM,GAEb,GAAMjC,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAI2E,GAAoB5F,EACpBqN,GAAgB,CAQpB,OAPAnK,GAAE+F,QACD,SAAAN,GAEC0E,GAAQ,EACRzH,EAAQ+C,IAGD0E,EAAwBzH,EAAfT,GAKnBxB,EAAA/B,UAAA4P,QAAA,WAEC,GAGIC,GACA7N,EAJEV,EAAIxB,KACNR,GAAoBgC,EAAEjC,iBAK1B,OAAa,IAAI0C,GAChB,WAGC,GAAIE,GAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAEC7C,EAAgBC,GACZ0C,IACHA,EAAaV,EAAEH,iBACZ0O,IACHA,MACD5N,EAAQ,GAGT,SAACE,GAEA9C,EAAgBC,EAEhB,IAAIqE,GAAI1B,GAER,OAAG0B,IAAGkM,EAAMhL,SAEH7C,EAAWvD,YAChB0D,EAAQK,YAAYqN,EAAMlM,GAAQ3B,EAAWK,SAI1CF,EAAQK,YAAYqN,EAAMlM,OAKpC,WAECrE,GAAW,EACRuQ,IACFA,EAAMhL,OAAS,GAChBgL,EAAQnQ,EAERpC,EAAAoB,QAAQsD,GACRA,EAAatC,KAKhBqC,EAAA/B,UAAA8P,eAAA,WAEC,MAAYhQ,MAAKyB,SAAStD,EAAQ,KAAM6B,KAAK4B,UAAW,SAAAiB,GAEvD,IAAIA,EAAO,KAAM,0BAGpBZ,GA7rCQvB,EADKjE,GAAAwF,WAAAA,CAisCb,IAAAgO,GAAA,SAAAnQ,GAGC,QAAAmQ,GACC3E,EACA1K,GAFD,GAAAC,GAICf,EAAAgB,KAAAd,KAAMsL,EAAmB1K,GAAW,IAAMZ,ID1tChC,OC2tCVa,GAAKG,sBAAwB,mBD3tCZH,EC8tCnB,MAVQnB,GAAAuQ,EAAAnQ,GAURmQ,GAVQhO,EADKxF,GAAAwT,iBAAAA,CAab,IAAAC,GAAA,SAAApQ,GAKC,QAAAoQ,GAAYC,GAAZ,GAAAtP,GAECf,EAAAgB,KAAAd,KAAM,WAGL,MADAwB,GAAEjC,kBACK,GAAInC,GAAAgN,gBAAmB,WAI7B,MAFA5I,GAAEjC,gBAAgB,+CAAgD,mBAE3DiC,EAAE4O,aAETpQ,KAEIwB,EAAIX,CDhuCA,OCiuCVW,GAAER,sBAAwB,kBAC1BQ,EAAE4O,QAAUD,EDluCKtP,ECw6CnB,MAzNQnB,GAAAwQ,EAAApQ,GAuBGoQ,EAAAhQ,UAAAoB,WAAV,WAECxB,EAAAI,UAAMoB,WAAUR,KAAAd,MAChBA,KAAKoQ,QAAUxQ,GAGhBY,OAAAS,eAAIiP,EAAAhQ,UAAA,UDruCOgB,ICquCX,WAEC,MAAOlB,MAAKoQ,SDpuCFjP,YAAY,EACZC,cAAc,ICsuCzB8O,EAAAhQ,UAAAmK,QAAA,WAEC,GAAM7I,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEKzC,EAASuN,QAAQ7I,EAAE4O,UAG3BF,EAAAhQ,UAAAqB,aAAA,WAEC,GAAMC,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEW,GAAI2Q,GAAmBlQ,KAAKoQ,UAM1CF,EAAAhQ,UAAAqH,QAAA,SAAQ7F,EAAmDoK,GAAA,SAAAA,IAAAA,EAAAC,EAAAA,EAE1D,IAAMvK,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEKzC,EAASyK,QAAQ/F,EAAE4O,QAAS1O,EAAQoK,IAK5CoE,EAAAhQ,UAAAkE,IAAA,SAAIgC,GAEH,GAAM5E,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAM4Q,GAAS3O,EAAE4O,QACb1L,EAAMyL,EAAOpL,MACjB,SAASL,KAAS0B,GAAatG,EAAAI,UAAMkE,IAAGtD,KAAAd,KAACoG,KAG1C8J,EAAAhQ,UAAA2C,MAAA,SAAMuD,GAEL,GAAM5E,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAM4Q,GAAS3O,EAAE4O,QAAS1L,EAAMyL,EAAOpL,MACvC,OAAOL,KAAQ0B,EAAYtG,EAAAI,UAAM2C,MAAK/B,KAAAd,KAACoG,GAAa1B,IAKrDwL,EAAAhQ,UAAAsD,mBAAA,SAAmBrB,EAAcsB,GAEhC,GAAMjC,GAAIxB,IACVwB,GAAEjC,kBACFrC,EAAA6F,QAAQW,oBAAoBvB,EAAO,QAEnC,IAAMgO,GAAS3O,EAAE4O,OACjB,OAAOjO,GAAMgO,EAAOpL,OACjBoL,EAAOhO,GACPsB,GAGJyM,EAAAhQ,UAAA0P,KAAA,WAEC,GAAMpO,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAM4Q,GAAS3O,EAAE4O,QAAS1L,EAAMyL,EAAOpL,MACvC,OAAO,GACJoL,EAAOzL,EAAM,GACb5E,EAAAI,UAAM0P,KAAI9O,KAAAd,OAKdkQ,EAAAhQ,UAAA2P,cAAA,SAAcpM,GAEb,GAAMjC,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAM4Q,GAAS3O,EAAE4O,QAAS1L,EAAMyL,EAAOpL,MACvC,OAAOL,GACJyL,EAAOzL,EAAM,GACbjB,GAGJyM,EAAAhQ,UAAA0C,KAAA,SAAKC,GAGJ,GAAMrB,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEGsD,EAAM,EAGE,GAAIZ,GAChB,WAAM,MAAA,IAAI7E,GAAAgN,gBAAmB,WAAM,MAAA5I,GAAE4O,SAASvN,KAHvCrB,GAOT0O,EAAAhQ,UAAA2M,eAAA,SAAehK,GAAA,SAAAA,IAAAA,EAAA,EAEd,IAAMrB,GAAIxB,IAGV,OAFAwB,GAAEjC,kBAEWiC,EAAE2B,KAAK3B,EAAE4O,QAAQrL,OAASlC,IAGxCqN,EAAAhQ,UAAA6M,WAAA,SAAWlK,GAEV,GAAMrB,GAAIxB,IAGV,IAFAwB,EAAEjC,oBAEGsD,EAAM,GACV,MAAaZ,GAAWmB,OAEzB,KAAIN,SAASD,GACZ,MAAOrB,EAER,IAAMkD,GAAMlD,EAAE4O,QACX5O,EAAE4O,QAAQrL,OACV,CAEH,OAAavD,GAAEoB,KAAK8B,EAAM7B,IAG3BqN,EAAAhQ,UAAA8M,QAAA,WAEC,GAAMxL,GAAIxB,KACNR,GAAYgC,EAAEjC,iBAElB,OAAa,IAAI0C,GAChB,WAGC,MADAT,GAAEjC,kBACK,GAAIxB,GAAAsS,gBACV,WAEC,GAAIC,GAAI9O,EAAE4O,OAEV,OADA7Q,GAAgBC,IAAa8Q,IAE5BH,OAAQG,EACRC,QAAUD,EAAEvL,OAAS,EACrBA,OAAQuL,EAAEvL,OACVyL,YAKJ,WAEChR,GAAW,KAKd0Q,EAAAhQ,UAAA4P,QAAA,WAEC,MAAO9P,MAAKuB,gBAGb2O,EAAAhQ,UAAA6N,cAAA,SACC5G,EACA6G,GAEA,MAFA,UAAAA,IAAAA,EAAAtR,EAAAsL,UAEG/K,EAAA2H,KAAK6L,YAAYtJ,GACZxK,EAAOqL,SAAShI,KAAKmQ,OAAQhJ,GAAQ,EAAM6G,GAEhD7G,YAAkB+I,GACb/I,EAAO4G,cAAc/N,KAAKmQ,OAAQnC,GAEnClO,EAAAI,UAAM6N,cAAajN,KAAAd,KAACmH,EAAQ6G,IAIpCkC,EAAAhQ,UAAAyM,eAAA,SAAeC,EAAuBvH,GAAvB,SAAAuH,IAAAA,EAAA,IAAuB,SAAAvH,IAAAA,EAA+B9E,EAAUkE,SAE9E,IAAM6L,GAAItQ,KAAKoQ,OACf,QAAQ/K,GAAYqL,MAAMC,QAAQL,GACpBA,EAAG3H,KAAKiE,GACnB9M,EAAAI,UAAMyM,eAAc7L,KAAAd,KAAC4M,EAAWvH,IAGrC6K,GAzNQD,GA4NRrB,EAAA,SAAA9O,GAIC,QAAA8O,GAAoBgC,EAAgBjC,GAApC,GAAA9N,GAECf,EAAAgB,KAAAd,KAAM2O,IAAS3O,IDtyCL,OCoyCSa,GAAA+P,UAAAA,EAGnB/P,EAAKG,sBAAwB,WDvyCZH,EC8yCnB,MAbQnB,GAAAkP,EAAA9O,GASPU,OAAAS,eAAI2N,EAAA1O,UAAA,ODvyCOgB,ICuyCX,WAEC,MAAOlB,MAAK4Q,WDtyCFzP,YAAY,EACZC,cAAc,ICuyC1BwN,GAbQsB,GAeR3D,EAAA,WAIC,QAAAA,GAAoBsE,GAAA7Q,KAAA6Q,YAAAA,EA+CrB,MA3CCrQ,QAAAS,eAAIsL,EAAArM,UAAA,SDxyCOgB,ICwyCX,WAEC,MAAOlB,MAAK6Q,YAAYhO,ODvyCd1B,YAAY,EACZC,cAAc,ICyyCzBmL,EAAArM,UAAAgB,IAAA,SAAIsG,GAEH,MAAOxH,MAAK6Q,YAAYxE,SAAS7E,IAAQ,MAG1C+E,EAAArM,UAAAuN,SAAA,SAASjG,GAER,MAAOxH,MAAK6Q,YAAYnJ,YAAYF,IAGrC+E,EAAArM,UAAAmB,cAAA,WAGC,GACIa,GADEV,EAAIxB,IAGV,OAAO,IAAI3C,GAAA+E,eACV,WAECF,EAAaV,EAAEqP,YAAYxP,iBAE5B,SAACgB,GAGA,IAAIH,EAAWvD,WACd,OAAO,CAER,IAAI4D,GAA2CL,EAAWK,OAC1D,OAAOF,GAAQK,YAAY,GAAIkM,GAAyBrM,EAAQiF,IAAKjF,EAAQ2B,SAE9E,WAEC1G,EAAAoB,QAAQsD,GACRA,EAAatC,KAKjB2M,KAGA6B,EAAA,SAAAtO,GAIC,QAAAsO,GACS+B,EACDhR,EACAC,EACAE,EACAD,GAAA,SAAAA,IAAAA,EAAA3C,EAAAoU,QALR,IAAAjQ,GAOCf,EAAAgB,KAAAd,KAAMJ,IAAKI,IDxzCD,OCkzCFa,GAAAsP,OAAAA,EACDtP,EAAA1B,YAAAA,EACA0B,EAAAzB,MAAAA,EACAyB,EAAAvB,OAAAA,EACAuB,EAAAxB,SAAAA,EAGPtC,EAAAiP,eAAemE,GAAUA,EAAOvO,WAChCf,EAAKG,sBAAwB,oBD1zCZH,EC44CnB,MA9FQnB,GAAA0O,EAAAtO,GAeCsO,EAAAlO,UAAA6Q,wBAAR,SACC5R,EACAC,GAGA,MADAY,MAAKT,kBACE,GAAI6O,GAA8BpO,KAAKmQ,OAAQhR,EAAaC,EAAOY,OAG3EoO,EAAAlO,UAAA8Q,OAAA,SAAO7R,GAEN,MAAOa,MAAK+Q,wBAAwB5R,EAAa,IAGlDiP,EAAAlO,UAAA+Q,UAAA,SAAU3C,GAET,MAAO,IAAIF,GAAyBpO,KAAKmQ,OAAQ,KAAM,EAAiBnQ,KAAMsO,IAG/EF,EAAAlO,UAAAgR,iBAAA,SAAiB/R,GAEhB,MAAOa,MAAK+Q,wBAAwB5R,OAGrCiP,EAAAlO,UAAAiR,kBAAA,SAAkB7C,GAEjB,MAAO,IAAIF,GAAyBpO,KAAKmQ,OAAQ,UAAwBnQ,KAAMsO,IAGhFF,EAAAlO,UAAAmB,cAAA,WAEC,GAAMG,GAAIxB,IACVwB,GAAEjC,iBAEF,IAAI0K,GACAmH,EACAjP,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAECZ,EAAEjC,kBACF4C,EAAQ,EACR8H,EAAShI,EAAWoI,QAAQ7I,EAAE2O,QAC9BiB,EAAUtS,EAAkB0C,GAC1B6P,sBAAsBpH,IAGzB,SAAC5H,GAGA,MADAb,GAAEjC,kBACM4C,EAAMiP,EAAQrM,QACnB1C,EAAQK,YAAYuH,EAAOmH,EAAQjP,QAIvC,WAEI8H,IACFA,EAAOlF,OAAS,GACjBkF,EAASrK,EACNwR,IACFA,EAAQrM,OAAS,GAClBqM,EAAUxR,KAGX,KAIQwO,EAAAlO,UAAAoB,WAAV,WAEC,GAAME,GAASxB,IACfF,GAAAI,UAAMoB,WAAUR,KAAAd,MAChBwB,EAAE2O,OAASvQ,EACX4B,EAAErC,YAAcS,EAChB4B,EAAEpC,MAAQQ,EACV4B,EAAElC,OAASM,GAGbwO,GA9FQ6B,IAwJR,SAAchO,GAOb,QAAAgE,GAAwBkK,GAEvB,GAAI9R,GAAIyG,EAAQqL,EAChB,KAAI9R,EAAG,KAAM,IAAIX,GAAA4T,8BACjB,OAAOjT,GAaR,QAAAyG,GACCqL,EACAoB,GAEA,GAAGtU,EAAA2H,KAAK4M,SAASrB,IAAWlT,EAAA2H,KAAKC,SAASsL,GAC1C,CACC,GAAGA,YAAkBlO,GACpB,MAAOkO,EAER,IAAGlT,EAAA2H,KAAK6L,YAAeN,GACtB,MAAO,IAAID,GAAmBC,EAE/B,IAAGpT,EAAA0U,aAAgBtB,GAClB,MAAO,IAAIlO,GACV,WAAI,MAAAkO,GAAO9O,iBACX,KAAM8O,EAAOvO,UAEf,IAAG7E,EAAA2U,aAAgBvB,GAClB,MAAO,IAAIlO,GACV,WAAI,MAAAkO,IAAQ,KAAMA,EAAOvO,UAE3B,IAAG7E,EAAA4U,WAAcxB,GAChB,MAAOrL,GAAQ,GAAI9G,GAAA4T,mBAAmBzB,IAGxC,MAAOoB,GAGR,QAAAM,GAA+B1B,GAE9B,MAAOlO,GAAW6C,QAAQqL,IAAWlO,EAAWmB,QAQjD,QAAAiH,GAA2B8F,GAE1B,MAAGA,aAAkBlO,GACbkO,EAAO9F,UAERvN,EAASuN,QAAQ8F,GAIzB,QAAA2B,GAA2BC,GAE1B,MAAO,IAAIrR,GACV,WAAM,MAAA,IAAIrD,GAAA+E,eACT,KACA,SAACC,GAGA,MADA9C,IAAiBwS,GACV1P,EAAQK,YAAYxF,EAAA6F,QAAQqK,OAAO7H,OAAOwM,OAElD,KAED,WAECA,EAAOhN,OAAS,EAChBgN,EAASnS,IAKZ,QAAAoS,GAA0BD,GAEzB,GAAIrN,GAAMqN,GAAUA,EAAOhN,MAG3B,KAAIL,IAAQ5B,SAAS4B,GACpB,KAAM,IAAI5G,GAAAuF,4BAA4B,SAAU0B,OAEjD,OAAO+M,GAAQjV,EAAAoV,KAAKF,IAIrB,QAAAG,KDr5CW,ICq5CmB,GAAAC,MAAAzI,EAAA,EAAAA,EAAAzJ,UAAA8E,OAAA2E,IAAAyI,EAAAzI,GAAAzJ,UAAAyJ,EAI7B,KAAIyI,EAAKpN,OACR,KAAM,IAAIjH,GAAAuF,4BAA4B,SAAU0B,OAEjD,OAAO+M,GAAQK,GAGhB,QAAAC,GAAmBL,GAElB,MAAO,IAAIrR,GACV,WAEC,GAAIyB,GAAe,CACnB,OAAO,IAAI9E,GAAA+E,eACV,WAECD,EAAQ,GAET,SAACE,GAIA,MAFA9C,IAAiBwS,GACd5P,GAAO4P,EAAOhN,SAAQ5C,EAAQ,GAC1BE,EAAQK,YAAYqP,EAAO5P,SAEnC,KAGF,WAEC4P,EAAOhN,OAAS,EAChBgN,EAASnS,IAKZ,QAAAyS,GAAyBN,GAExB,GAAIrN,GAAMqN,GAAUA,EAAOhN,MAG3B,KAAIL,IAAQ5B,SAAS4B,GACpB,KAAM,IAAI5G,GAAAuF,4BAA4B,SAAU0B,OAGjD,OAAOqN,GAAOvV,EAAAoV,KAAKF,IAIpB,QAAAO,KDh6CW,ICg6CqB,GAAAH,MAAAzI,EAAA,EAAAA,EAAAzJ,UAAA8E,OAAA2E,IAAAyI,EAAAzI,GAAAzJ,UAAAyJ,EAI/B,KAAIyI,EAAKpN,OACR,KAAM,IAAIjH,GAAAuF,4BAA4B,SAAU0B,OAEjD,OAAOqN,GAAOD,GAGf,QAAA/O,KAGC,MAAO,IAAI6M,GAAoB1R,GAKhC,QAAAgU,GAA0BrP,EAAWL,GAEpC,MAFoC,UAAAA,IAAAA,EAAAkJ,EAAAA,GAE/BlJ,EAAM,EAGJC,SAASD,IAAU3F,EAAA6F,QAAQC,OAAOH,EAAO,SAC7C,GAAIoN,GACN,WAEC,GAAI3N,GAAWO,EACXV,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAAQD,EAAQ,GAChB,SAACE,GAAW,MAACF,KAAQG,GAAMD,EAAQK,YAAYQ,IAC/C,OACA,MAIA,GAAIjB,GACN,WACC,MAAA,IAAI5E,GAAA+E,eACH,KACA,SAACC,GAAW,MAAAA,GAAQK,YAAYQ,MAChC,MAtBKjB,EAAWmB,QAwCpB,QAAAoP,GACC7Q,EACAf,GAEA,IAAIe,EACH,KAAM,IAAI9D,GAAAmE,sBAAsB,cAEjC,OAAO,IAAItB,GACV,WAEC,GAAIwC,EACJ,OAAO,IAAI7F,GAAA+E,eACV,WAEIT,IACFuB,EAAUvB,MAGZ,SAACU,GAEA,MAAOV,GACJU,EAAQK,YAAYQ,GACpBb,EAAQI,cAGZ,WAECS,EAAUtD,EACPgB,GAAWA,EAAUsC,MAGzB,KAIF,WAECvB,EAAc/B,EACdgB,EAAYtC,IAUf,QAAAqM,GAAwBzH,GAEvB,MAAOqP,GAAUrP,EAAS,GAK3B,QAAAuP,GACCC,EACA7P,EACA2N,GAEA,GAFA,SAAAA,IAAAA,EAAA,IAEI1N,SAAS4P,GACZ,KAAM,IAAI5U,GAAAuF,4BAA4B,QAASqP,EAAO,2BAEvD,MAAK7P,EAAM,GACV,MAAOO,IAER,KAAIoN,EACH,KAAM,IAAI1S,GAAAuF,4BAA4B,OAAQmN,EAAM,wBAErD,KAAI1N,SAAS0N,GACZ,KAAM,IAAI1S,GAAAuF,4BAA4B,OAAQmN,EAAM,2BAIrD,OAFAtT,GAAA6F,QAAQC,OAAOH,EAAO,SAEf,GAAIoN,GACV,WAEC,GAAI/L,GACA5B,EAAWO,EACXV,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAECD,EAAQ,EACR+B,EAAQwO,GAGT,SAACrQ,GAEA,GAAImD,GACCrD,IAAQG,GACLD,EAAQK,YAAYwB,EAK5B,OAHGsB,IAAUrD,EAAMU,IAClBqB,GAASsM,GAEHhL,KAGR,MAKJ,QAAAmN,GACCD,EACA7P,EACA2N,GAIA,MAJA,UAAAA,IAAAA,EAAA,GAEAA,EAAOoC,KAAKC,IAAIrC,MAETiC,EAAMC,EAAO7P,EAAO2N,GAI5B,QAAAsC,GACCJ,EACAlC,GAEA,GAHA,SAAAkC,IAAAA,EAAA,GACA,SAAAlC,IAAAA,EAAA,IAEI1N,SAAS4P,GACZ,KAAM,IAAI5U,GAAAuF,4BAA4B,QAASqP,EAAO,2BAEvD,KAAIlC,EACH,KAAM,IAAI1S,GAAAuF,4BAA4B,OAAQmN,EAAM,wBAErD,KAAI1N,SAAS0N,GACZ,KAAM,IAAI1S,GAAAuF,4BAA4B,OAAQmN,EAAM,2BAErD,OAAO,IAAI9P,GACV,WAEC,GAAIwD,EAEJ,OAAO,IAAI7G,GAAA+E,eACV,WAEC8B,EAAQwO,GAGT,SAACrQ,GAEA,GAAIE,GAAiB2B,CAErB,OADAA,IAASsM,EACFnO,EAAQK,YAAYH,MAG5B,MAMJ,QAAAwQ,GACCL,EACAlC,GAEA,MAHA,UAAAkC,IAAAA,EAAA,GACA,SAAAlC,IAAAA,EAAA,GAEOsC,EAAWJ,GAAQlC,GAG3B,QAAAwC,GACCN,EACAO,EACAzC,GAEA,GAFA,SAAAA,IAAAA,EAAA,GAEGrB,MAAM8D,KAAQnQ,SAASmQ,GACzB,KAAM,IAAInV,GAAAuF,4BAA4B,KAAM4P,EAAI,2BAEjD,IAAGzC,IAAS1N,SAAS0N,GACpB,KAAM,IAAI1S,GAAAuF,4BAA4B,OAAQmN,EAAM,oCAKrD,OAFAA,GAAOoC,KAAKC,IAAIrC,GAET,GAAIP,GACV,WAEC,GAAI/L,EAEJ,OAAO,IAAI7G,GAAA+E,eAAuB,WAAQ8B,EAAQwO,GACjDA,EAAMO,EAEL,SAAA5Q,GAEC,GAAImD,GAAiBtB,GAAO+O,GAAM5Q,EAAQK,YAAYwB,EAKtD,OAHGsB,KACFtB,GAASsM,GAEHhL,GAGR,SAAAnD,GAEC,GAAImD,GAAiBtB,GAAO+O,GAAM5Q,EAAQK,YAAYwB,EAKtD,OAHGsB,KACFtB,GAASsM,GAEHhL,KAEP,MAKN,QAAA0N,GACCC,EAAcC,EACdC,GAEA,GAFA,SAAAA,IAAAA,EAAA,IAEW,OAARF,GAAgBA,IAAQ7U,EAC1B,KAAM,IAAIT,GAAAmE,sBAAsB,QACjC,IAAMuE,SAAc4M,EACpB,IAAG5M,GAAMtJ,EAAA2H,KAAKgC,OACb,KAAM,IAAI5C,OAAM,uCAAyCuC,EAAO,KAWjE,OATG6M,aAAmBE,UAErBD,GAAUD,EAAkB,WAAI,IAAM,GACtCC,GAAUD,EAAiB,UAAI,IAAM,GACrCA,EAAUA,EAAQjD,QAGhBkD,EAAM1F,QAAQ,YAAY0F,GAAS,KAE/B,GAAIpD,GACV,WAEC,GAAIsD,EACJ,OAAO,IAAIlW,GAAA+E,eACV,WAECmR,EAAQ,GAAID,QAAOF,EAASC,IAG7B,SAAChR;AAGA,GAAImR,GAAQD,EAAME,KAAKN,EACvB,OAAgB,QAARK,GAAgBnR,EAAQK,YAAY8Q,OASjD,QAAAE,GACCC,EACA9Q,GAEA,GAFA,SAAAA,IAAAA,EAAAkJ,EAAAA,IAEI4H,EACH,KAAM,IAAI9V,GAAAmE,sBAAsB,UAEjC,OAAGmN,OAAMtM,IAAUA,GAAO,EAClBZ,EAAWmB,QAEZN,SAASD,IAAU3F,EAAA6F,QAAQC,OAAOH,EAAO,SAE/C,GAAIoN,GACH,WAEC,GAAI3N,GAAWO,EACXV,EAAe,CAEnB,OAAO,IAAI9E,GAAA+E,eACV,WAECD,EAAQ,GAGT,SAACE,GAEA9C,GAAiBoU,EACjB,IAAIpR,GAAiBJ,GACrB,OAAOI,GAAQD,GAAKD,EAAQK,YAAYiR,EAAQpR,OAGjD,KAGF,WAECoR,EAAU/T,IAGZ,GAAIc,GACH,WAEC,GAAIyB,GAAe,CACnB,OAAO,IAAI9E,GAAA+E,eACV,WAECD,EAAQ,GAGT,SAACE,GAGA,MADA9C,IAAiBoU,GACVtR,EAAQK,YAAYiR,EAAQxR,SAGpC,KAGF,WAECwR,EAAU/T,IAId,QAAAgU,GACCjO,EACAkO,EACAC,GAEA,GAFA,SAAAA,IAAAA,GAAA,IAEID,EACH,KAAM,IAAIhW,GAAAmE,sBAAsB,UAEjC,OAAO,IAAItB,GACV,WAEC,GACIwD,GACAgE,EAFA/F,EAAe,CAGnB,OAAO,IAAI9E,GAAA+E,eACV,WAECD,EAAQ,EACR+B,EAAQyB,EACRuC,GAAW4L,GAGZ,SAACzR,GAEA9C,GAAiBsU,EACjB,IAAIhQ,GAAI1B,GAKR,OAJG+F,GACFA,GAAU,EAEVhE,EAAQ2P,EAAa3P,EAAOL,GACtBxB,EAAQK,YAAYwB,MAG5B,KAGF,WAEC2P,EAAejU,IAelB,QAAA2H,GACCpG,EACAO,EACAoK,GAIA,MAJA,UAAAA,IAAAA,EAAAC,EAAAA,GAIOjP,EAASyK,QAAQpG,EAAYO,EAAQoK,GAG7C,QAAAiI,GACC5S,EACAkE,GAIA,MAAOvI,GAASiX,IAAI5S,EAAYkE,GAIjC,QAAAyG,GAAoBiG,GAEnB,GAAMxO,GAAIwO,EACRtG,UAAU,SAAAlI,GAAK,MAAAA,MAAKwI,EAAAA,KAAU,GAC9BgD,UAAUxO,EAAUJ,QAEtB,OAAOoD,KAAIjF,EAAQ8Q,IAAM7L,EAG1B,QAAA8L,GAAoB0C,GAEnB,GAAMxO,GAAIwO,EACRtG,UAAU,SAAAlI,GAAK,MAAAA,MAAKwI,EAAAA,KAAU,GAC9BgD,UAAUxO,EAAUD,OAEtB,OAAOiD,KAAIjF,EAAQ8Q,IAAM7L,EAS1B,QAAAyQ,GACCzK,GAEA,IAAIA,EACH,KAAM,IAAI1L,GAAAmE,sBAAsB,cAEjC,IAAIxC,IAAW,CACf,OAAO,IAAIyC,GACV,WAEC,GAAIvD,GACAuV,EACA9R,CAEJ,OAAO,IAAI9E,GAAA+E,eACV,WAEC7C,EAAgBC,GAChB2C,EAAQ,EACRzD,EAAQ,GAAInB,GAAAiL,MACZyL,EAAiBnX,EAASmJ,KAAKsD,IAGhC,SAAClH,GAEA9C,EAAgBC,EAChB,IAAInB,GAAwB,IAG5B,IAAG4V,EACH,CACC,MAAO5V,GAAK4V,EAAetV,YAC3B,CACC,GAAI2D,GAAI2R,EAAe1R,OACvBlE,GAAII,EAAeC,EAAO4D,EAAIxF,EAASmJ,KAAK3D,GAAK1C,GAG9CvB,IACH4V,EAAiB,MAGnB,MAAO5V,GAAKK,EAAM8K,WAAW,SAAAtF,GAC5B7F,EAAII,EAAeC,EAAO5B,EAASmJ,KAAQ/B,QAG5C,MAAO7F,GACJgE,EAAQK,YAAYrE,EAAEkE,SACtBF,EAAQI,cAIZ,WAECjF,EAAAoB,QAAQoG,MAAMtG,EAAMwV,QACpB1W,EAAAoB,QAAQqV,EAAgBvV,GACxBuV,EAAiB,KACjBvV,EAAQkB,KAIX,WAECJ,GAAW,IAvqBEyC,EAAAgE,KAAIA,EAiBJhE,EAAA6C,QAAOA,EA4BP7C,EAAA4P,YAAWA,EAUX5P,EAAAoI,QAAOA,EASPpI,EAAA6P,QAAOA,EAoBP7P,EAAA+P,OAAMA,EAYN/P,EAAAiQ,WAAUA,EAsCVjQ,EAAAoQ,MAAKA,EAaLpQ,EAAAqQ,aAAYA,EAUZrQ,EAAAmB,MAAKA,EAQLnB,EAAAsQ,OAAMA,EA2CNtQ,EAAAuQ,mBAAkBA,EAgDlBvQ,EAAA0I,KAAIA,EAOJ1I,EAAAwQ,MAAKA,EAkDLxQ,EAAA0Q,UAASA,EAWT1Q,EAAA6Q,WAAUA,EAqCV7Q,EAAA8Q,mBAAkBA,EAOlB9Q,EAAA+Q,QAAOA,EA8CP/Q,EAAAiR,QAAOA,EA0CPjR,EAAAyR,SAAQA,EAgERzR,EAAA2R,OAAMA,EAqDN3R,EAAAsF,QAAOA,EAUPtF,EAAA8R,IAAGA,EAUH9R,EAAA6J,IAAGA,EASH7J,EAAAoN,IAAGA,EAeHpN,EAAA+R,MAAKA,GAhnBR/R,EAAAxF,EAAAwF,aAAAxF,EAAAwF,gBA1oDDxF,EAAAwF,WAAAA,EDssBTzB,OAAOS,eAAexE,EAAS,cAAgByH,OAAO,ICynD1DzH,EAAAA,WAAewF","file":"Linq.js","sourcesContent":["define([\"require\", \"exports\", \"../System/Compare\", \"../System/Collections/Array/Compare\", \"../System/Collections/Array/Utility\", \"../System/Collections/Array/Utility\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Collections/Enumeration/EmptyEnumerator\", \"../System/Types\", \"../System/Integer\", \"../System/Functions\", \"../System/Collections/Enumeration/ArrayEnumerator\", \"../System/Collections/Enumeration/EnumeratorBase\", \"../System/Collections/Dictionaries/Dictionary\", \"../System/Collections/Queue\", \"../System/Disposable/dispose\", \"../System/Disposable/DisposableBase\", \"../System/Collections/Enumeration/UnsupportedEnumerableException\", \"../System/Disposable/ObjectDisposedException\", \"../System/Collections/Sorting/KeySortedContext\", \"../System/Exceptions/ArgumentNullException\", \"../System/Exceptions/ArgumentOutOfRangeException\", \"../System/Collections/Enumeration/IndexEnumerator\", \"../System/Collections/Enumeration/IteratorEnumerator\", \"../extends\"], function (require, exports, Compare_1, Arrays, ArrayUtility, Utility_1, enumUtil, Enumerator_1, EmptyEnumerator_1, Types_1, Integer_1, Functions_1, ArrayEnumerator_1, EnumeratorBase_1, Dictionary_1, Queue_1, dispose_1, DisposableBase_1, UnsupportedEnumerableException_1, ObjectDisposedException_1, KeySortedContext_1, ArgumentNullException_1, ArgumentOutOfRangeException_1, IndexEnumerator_1, IteratorEnumerator_1, extends_1) {\n    \"use strict\";\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    // #region Local Constants.\n    var INVALID_DEFAULT = {}; // create a private unique instance for referencing.\n    var VOID0 = void 0;\n    var NULL = null;\n    function BREAK() {\n        return 0 /* Break */;\n    }\n    function RETURN() {\n        return 1 /* Return */;\n    }\n    function isNotNullOrUndefined(e) {\n        return e !== null && e !== VOID0;\n    }\n    // Leave internal to avoid accidental overwriting.\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            return _super.apply(this, arguments) || this;\n        }\n        // noinspection JSMethodCanBeStatic\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        // noinspection JSMethodCanBeStatic\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.Functions));\n    var Functions = Object.freeze(new LinqFunctions());\n    // For re-use as a factory.\n    function getEmptyEnumerator() {\n        return EmptyEnumerator_1.EmptyEnumerator;\n    }\n    // #endregion\n    /*\n     * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\n     * There may seem like there's extra overrides here and they may seem unnecessary.\n     * But after closer inspection you'll see the type chain is retained and\n     * infinite enumerables are prevented from having features that finite ones have.\n     *\n     * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\n     */\n    var InfiniteEnumerable = (function (_super) {\n        __extends(InfiniteEnumerable, _super);\n        function InfiniteEnumerable(_enumeratorFactory, finalizer) {\n            var _this = _super.call(this, finalizer) || this;\n            _this._enumeratorFactory = _enumeratorFactory;\n            _this._isEndless = true;\n            _this._disposableObjectName = \"InfiniteEnumerable\";\n            return _this;\n        }\n        Object.defineProperty(InfiniteEnumerable.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // #region IEnumerable<T> Implementation...\n        InfiniteEnumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        // #endregion\n        // #region IDisposable override...\n        InfiniteEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this); // Just in case.\n            this._enumeratorFactory = null;\n        };\n        // #endregion\n        // Return a default (unfiltered) enumerable.\n        InfiniteEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new InfiniteEnumerable(function () { return _.getEnumerator(); });\n        };\n        InfiniteEnumerable.prototype.doAction = function (action, initializer, isEndless, onComplete) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            var _ = this;\n            _.throwIfDisposed();\n            var isE = isEndless || undefined; // In case it's null.\n            if (!action)\n                throw new ArgumentNullException_1.ArgumentNullException(\"action\");\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!action);\n                    if (initializer)\n                        initializer();\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                    // May need a way to propagate isEndless\n                }, function (yielder) {\n                    throwIfDisposed(!action);\n                    while (enumerator.moveNext()) {\n                        var c = enumerator.current;\n                        var actionResult = action(c, index++);\n                        if (actionResult === false || actionResult === 0 /* Break */)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2 /* Skip */)\n                            return yielder.yieldReturn(c);\n                    }\n                    if (onComplete)\n                        onComplete(index);\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isE);\n            }, \n            // Using a finalizer value reduces the chance of a circular reference\n            // since we could simply reference the enumeration and check e.wasDisposed.\n            function () {\n                action = NULL;\n            }, isE);\n        };\n        InfiniteEnumerable.prototype.force = function () {\n            this.throwIfDisposed();\n            this.doAction(BREAK)\n                .getEnumerator()\n                .moveNext();\n        };\n        // #region Indexing/Paging methods.\n        InfiniteEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return new InfiniteEnumerable(getEmptyEnumerator);\n            Integer_1.Integer.assert(count, \"count\");\n            return this.where(function (element, index) { return index >= count; });\n        };\n        InfiniteEnumerable.prototype.take = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, 'Must be finite.');\n            Integer_1.Integer.assert(count, \"count\");\n            // Once action returns false, the enumeration will stop.\n            return _.doAction(function (element, index) { return index < count; }, null, false);\n        };\n        // #region Single Value Return...\n        InfiniteEnumerable.prototype.elementAt = function (index) {\n            var v = this.elementAtOrDefault(index, INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var n = index;\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                var i = 0;\n                while (e.moveNext()) {\n                    if (i == n)\n                        return e.current;\n                    i++;\n                }\n                return defaultValue;\n            });\n        };\n        /* Note: Unlike previous implementations, you could pass a predicate into these methods.\n         * But since under the hood it ends up calling .where(predicate) anyway,\n         * it may be better to remove this to allow for a cleaner signature/override.\n         * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\n         * Having to write extra override logic is error prone and confusing to the consumer.\n         * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\n         * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\n         * Otherwise there would need to be much more code to handle these cases (.first(predicate), etc);\n         * */\n        InfiniteEnumerable.prototype.first = function () {\n            var v = this.firstOrDefault(INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"first:The sequence is empty.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext() ? e.current : defaultValue; });\n        };\n        InfiniteEnumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                    throw new Error(\"single:sequence contains more than one element.\");\n                }\n                throw new Error(\"single:The sequence is empty.\");\n            });\n        };\n        InfiniteEnumerable.prototype.singleOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.any = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext(); });\n        };\n        InfiniteEnumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        InfiniteEnumerable.prototype.traverseDepthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless; // Is endless is not affirmative if false.\n            return new Enumerable(function () {\n                // Dev Note: May want to consider using an actual stack and not an array.\n                var enumeratorStack = [];\n                var enumerator;\n                var len; // Avoid using push/pop since they query .length every time and can be slower.\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            var c = childrenSelector(enumerator.current);\n                            var e = !Types_1.Type.isString(c) && Enumerable.fromAny(c);\n                            enumerator = e ? e.getEnumerator() : EmptyEnumerator_1.EmptyEnumerator;\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        dispose_1.dispose.these(enumeratorStack);\n                    }\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.flatten = function () {\n            return this.selectMany(function (entry) {\n                var e = !Types_1.Type.isString(entry) && Enumerable.fromAny(entry);\n                return e ? e.flatten() : [entry];\n            });\n        };\n        InfiniteEnumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!selector)\n                throw new ArgumentNullException_1.ArgumentNullException(\"selector\");\n            var previous;\n            return this.select(function (value, i) {\n                var result = i ? selector(previous, value, i) : NULL;\n                previous = value;\n                return result;\n            }).skip(1);\n        };\n        InfiniteEnumerable.prototype.scan = function (func, seed) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!func)\n                throw new ArgumentNullException_1.ArgumentNullException(\"func\");\n            return (seed === VOID0\n                ? this.select(function (value, i) { return seed = i ? func(seed, value, i) : value; })\n                : this.select(function (value, i) { return seed = func(seed, value, i); }));\n        };\n        // #endregion\n        InfiniteEnumerable.prototype.select = function (selector) {\n            return this._filterSelected(selector);\n        };\n        /*\n        public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\n            this IEnumerable<TSource> source,\n            Func<TSource, IEnumerable<TCollection>> collectionSelector,\n            Func<TSource, TCollection, TResult> resultSelector)\n         */\n        InfiniteEnumerable.prototype._selectMany = function (collectionSelector, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!collectionSelector)\n                throw new ArgumentNullException_1.ArgumentNullException(\"collectionSelector\");\n            var isEndless = _._isEndless; // Do second enumeration, it will be indeterminate if false.\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!collectionSelector);\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = VOID0;\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(!collectionSelector);\n                    // Just started, and nothing to enumerate? End.\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    // moveNext has been called at least once...\n                    do {\n                        // Initialize middle if there isn't one.\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            // Collection is null?  Skip it...\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = enumUtil.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        // else no more in this middle?  Then clear and reset for next...\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                    enumerator = NULL;\n                    middleEnumerator = null;\n                }, isEndless);\n            }, function () {\n                collectionSelector = NULL;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        InfiniteEnumerable.prototype._filterSelected = function (selector, filter) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            if (!selector)\n                throw new ArgumentNullException_1.ArgumentNullException(\"selector\");\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!selector);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var i = index++;\n                        var result = selector(enumerator.current, i);\n                        if (!filter || filter(result, i++))\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = false;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._filterSelected(selector, isNotNullOrUndefined);\n        };\n        InfiniteEnumerable.prototype.where = function (predicate) {\n            return this._filterSelected(Functions.Identity, predicate);\n        };\n        InfiniteEnumerable.prototype.nonNull = function () {\n            return this.where(function (v) { return v != null && v != VOID0; });\n        };\n        InfiniteEnumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.Type.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.Type.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.Type.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.Type.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .where(function (x) { return isNotNullOrUndefined(x) && typeof x === typeName; });\n        };\n        InfiniteEnumerable.prototype.except = function (second, compareSelector) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                    if (second)\n                        enumUtil.forEach(second, function (key) { keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    keys.clear();\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.distinct = function (compareSelector) {\n            return this.except(NULL, compareSelector);\n        };\n        // [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\n        InfiniteEnumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (Compare_1.areEqual(compareKey, key)) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        /**\n         * Returns a single default value if empty.\n         * @param defaultValue\n         * @returns {Enumerable}\n         */\n        InfiniteEnumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = enumUtil.from(second);\n                }, function (yielder) { return firstEnumerator.moveNext()\n                    && secondEnumerator.moveNext()\n                    && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)); }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    secondTemp = new Queue_1.Queue(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = NULL;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = enumUtil.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = NULL;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        // #region Join Methods\n        InfiniteEnumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements;\n                var innerCount = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElements = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(outerEnumerator);\n                    innerElements = null;\n                    outerEnumerator = NULL;\n                    lookup = NULL;\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    enumerator = NULL;\n                    lookup = NULL;\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.merge = function (enumerables) {\n            var _ = this;\n            var isEndless = _._isEndless;\n            if (!enumerables || enumerables.length == 0)\n                return _;\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    // 1) First get our values...\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.Queue(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.tryDequeue(function (value) {\n                            enumerator = enumUtil.from(value); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\n                        })) { }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = NULL;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, queue); // Just in case this gets disposed early.\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i] = arguments[_i];\n            }\n            return this.merge(enumerables);\n        };\n        InfiniteEnumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector); // Acting as a HashSet.\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = enumUtil.from(second);\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.insertAt = function (index, other) {\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = enumUtil.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    // Instead of recalling getEnumerator every time, just reset the existing one.\n                    alternateEnumerator = new ArrayEnumerator_1.ArrayEnumerator(Enumerable.toArray(sequence)); // Freeze\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1 /* Return */\n                        : 0 /* Break */;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0 /* Break */:\n                            return yielder.yieldBreak();\n                        case 2 /* Skip */:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1 /* Return */;\n                            break;\n                    }\n                    var latest = buffer;\n                    // Set up the next round...\n                    // Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2 /* Skip */\n                        : 0 /* Break */;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    dispose_1.dispose(enumerator, alternateEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        InfiniteEnumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        // #region Error Handling\n        InfiniteEnumerable.prototype.catchError = function (handler) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.finallyAction = function (action) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        // #endregion\n        InfiniteEnumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.Integer.assert(size, \"size\");\n            var _ = this;\n            var isEndless = _._isEndless;\n            var len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext()) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return !!len && yielder.yieldReturn(array);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return sharedEnumerator || (sharedEnumerator = _.getEnumerator());\n            }, function () {\n                dispose_1.dispose(sharedEnumerator);\n            }, _._isEndless);\n        };\n        return InfiniteEnumerable;\n    }(DisposableBase_1.DisposableBase));\n    exports.InfiniteEnumerable = InfiniteEnumerable;\n    /**\n     * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\n     *\n     * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\n     * In this case, we use Enumerable<T> as the underlying class that is being chained.\n     */\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(enumeratorFactory, finalizer, isEndless) {\n            var _this = _super.call(this, enumeratorFactory, finalizer) || this;\n            _this._isEndless = isEndless;\n            _this._disposableObjectName = \"Enumerable\";\n            return _this;\n        }\n        // Return a default (unfiltered) enumerable.\n        Enumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () { return _.getEnumerator(); });\n        };\n        // #region Indexing/Paging methods.\n        Enumerable.prototype.skip = function (count) {\n            return _super.prototype.skip.call(this, count);\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 2 /* Skip */\n                    : 1 /* Return */;\n            });\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException('predicate');\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1 /* Return */\n                    : 0 /* Break */;\n            }, null, null // We don't know the state if it is endless or not.\n            );\n        };\n        // Is like the inverse of take While with the ability to return the value identified by the predicate.\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException('predicate');\n            if (!includeUntilValue)\n                return this.doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0 /* Break */\n                        : 1 /* Return */;\n                }, null, null // We don't know the state if it is endless or not.\n                );\n            var found = false;\n            return this.doAction(function (element, index) {\n                if (found)\n                    return 0 /* Break */;\n                found = predicate(element, index);\n                return 1 /* Return */;\n            }, function () {\n                found = false;\n            }, null // We don't know the state if it is endless or not.\n            );\n        };\n        Enumerable.prototype.traverseBreadthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless; // Is endless is not affirmative if false.\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .from(buffer)\n                            .selectMany(childrenSelector);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    buffer.length = 0;\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        Enumerable.prototype.forEach = function (action, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.throwIfDisposed();\n            if (!action)\n                throw new ArgumentNullException_1.ArgumentNullException(\"action\");\n            Enumerator_1.throwIfEndless(_.isEndless);\n            /*\n            // It could be just as easy to do the following:\n            return enumUtil.forEach(_, action, max);\n            // But to be more active about checking for disposal, we use this instead:\n            */\n            // Return value of action can be anything, but if it is (===) false then the enumUtil.forEach will discontinue.\n            return max > 0 ? dispose_1.using(_.getEnumerator(), function (e) {\n                Enumerator_1.throwIfEndless(!isFinite(max) && e.isEndless);\n                var i = 0;\n                // It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\n                while (max > i && _.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, i++) === false)\n                        break;\n                }\n                return i;\n            }) : 0;\n        };\n        // #region Conversion Methods\n        Enumerable.prototype.toArray = function (predicate) {\n            return predicate\n                ? this.where(predicate).toArray()\n                : this.copyTo([]);\n        };\n        Enumerable.prototype.copyTo = function (target, index, count) {\n            if (index === void 0) { index = 0; }\n            if (count === void 0) { count = Infinity; }\n            this.throwIfDisposed();\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(\"target\");\n            Integer_1.Integer.assertZeroOrGreater(index);\n            // If not exposing an action that could cause dispose, then use enumUtil.forEach utility instead.\n            enumUtil.forEach(this, function (x, i) {\n                target[i + index] = x;\n            }, count);\n            return target;\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.Dictionary(compareSelector);\n            this.forEach(function (x, i) {\n                var key = keySelector(x, i);\n                var element = elementSelector(x, i);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x, i) {\n                obj[keySelector(x, i)] = elementSelector(x, i);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.Dictionary(compareSelector);\n            this.forEach(function (x, i) { return dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this\n                .select(selector)\n                .toArray()\n                .join(separator);\n        };\n        // #endregion\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.Integer.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.Queue();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        // Add the next one to the queue.\n                        q.enqueue(enumerator.current);\n                        // Did we reach our quota?\n                        if (q.count > c)\n                            // Okay then, start returning results.\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            Integer_1.Integer.assert(count, \"count\");\n            // This sets up the query so nothing is done until move next is called.\n            return _.reverse()\n                .take(count)\n                .reverse();\n        };\n        // To help with type guarding.\n        Enumerable.prototype.select = function (selector) {\n            return _super.prototype.select.call(this, selector);\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        Enumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._filterSelected(selector, isNotNullOrUndefined);\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless); // Cannot reverse an endless collection...\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    _.throwIfDisposed();\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) { return !!index && yielder.yieldReturn(buffer[--index]); }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless); // Cannot shuffle an endless collection...\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    // Avoid using major array operations like .slice();\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.Integer.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\n                    buffer[len] = NULL; // clear possible reference.\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var count = 0;\n            this.forEach(predicate\n                ?\n                    function (x, i) {\n                        if (predicate(x, i))\n                            ++count;\n                    }\n                :\n                    function () {\n                        ++count;\n                    });\n            return count;\n        };\n        // Akin to '.every' on an array.\n        Enumerable.prototype.all = function (predicate) {\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException(\"predicate\");\n            var result = true;\n            this.forEach(function (x, i) {\n                if (!predicate(x, i)) {\n                    result = false;\n                    return false; // break\n                }\n            });\n            return result;\n        };\n        // 'every' has been added here for parity/compatibility with an array.\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        // Akin to '.some' on an array.\n        Enumerable.prototype.any = function (predicate) {\n            if (!predicate)\n                return _super.prototype.any.call(this);\n            var result = false;\n            // Splitting the forEach up this way reduces iterative processing.\n            // forEach handles the generation and disposal of the enumerator.\n            this.forEach(function (x, i) {\n                result = predicate(x, i); // false = not found and therefore it should continue.  true = found and break;\n                return !result;\n            });\n            return result;\n        };\n        // 'some' has been added here for parity/compatibility with an array.\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            if (compareSelector) {\n                var s_1 = compareSelector(value);\n                return this.any(function (v) { return Compare_1.areEqual(compareSelector(v), s_1); });\n            }\n            return this.any(function (v) { return Compare_1.areEqual(v, value); });\n        };\n        // Originally has an overload for a predicate,\n        // but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\n        // Better to chain a where statement first to be more explicit.\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Compare_1.areEqual(compareSelector(element, i), compareSelector(value, i), true)) {\n                            found = i;\n                            return false;\n                        }\n                    }\n                :\n                    function (element, i) {\n                        // Why?  Because NaN doesn't equal NaN. :P\n                        if (Compare_1.areEqual(element, value, true)) {\n                            found = i;\n                            return false;\n                        }\n                    });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Compare_1.areEqual(compareSelector(element, i), compareSelector(value, i), true))\n                            result\n                                = i;\n                    }\n                :\n                    function (element, i) {\n                        if (Compare_1.areEqual(element, value, true))\n                            result = i;\n                    });\n            return result;\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second)\n                throw new ArgumentNullException_1.ArgumentNullException(\"second\");\n            var isEndless = _.isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!second);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                    outs = new Dictionary_1.Dictionary(compareSelector);\n                    enumUtil.forEach(second, function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator, keys, outs);\n                }, isEndless);\n            }, function () {\n                second = NULL;\n            }, isEndless);\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            this.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e1) { return dispose_1.using(enumUtil.from(second), function (e2) {\n                // if both are endless, this will never evaluate.\n                Enumerator_1.throwIfEndless(e1.isEndless && e2.isEndless);\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.ofType = function (type) {\n            this.throwIfDisposed();\n            return _super.prototype.ofType.call(this, type);\n        };\n        // #region Ordering Methods\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, keySelector, 1 /* Ascending */);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, null, 1 /* Ascending */, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, null, -1 /* Descending */, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, keySelector, -1 /* Descending */);\n        };\n        /*\n             weightedSample(weightSelector) {\n             weightSelector = Utils.createLambda(weightSelector);\n             var source = this;\n    \n             return new Enumerable<T>(() => {\n             var sortedByBound;\n             var totalWeight = 0;\n    \n             return new EnumeratorBase<T>(\n             () => {\n             sortedByBound = source\n             .choose(function (x) {\n             var weight = weightSelector(x);\n             if (weight <= 0) return null; // ignore 0\n    \n             totalWeight += weight;\n             return { value: x, bound: totalWeight }\n             })\n             .toArray();\n             },\n             () => {\n             if (sortedByBound.length > 0) {\n             var draw = (Math.random() * totalWeight) + 1;\n    \n             var lower = -1;\n             var upper = sortedByBound.length;\n             while (upper - lower > 1) {\n             var index = ((lower + upper) / 2);\n             if (sortedByBound[index].bound >= draw) {\n             upper = index;\n             }\n             else {\n             lower = index;\n             }\n             }\n    \n             return (<any>this).yieldReturn(sortedByBound[upper].value);\n             }\n    \n             return (<any>this).yieldBreak();\n             },\n             Functions.Blank);\n             });\n             }\n             */\n        // #endregion\n        Enumerable.prototype.buffer = function (size) {\n            return _super.prototype.buffer.call(this, size);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _this = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\n            return new Enumerable(function () { return _this\n                .toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!elementSelector);\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        var v = enumerator.current;\n                        key = keySelector(v);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(v)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    throwIfDisposed(!elementSelector);\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (Compare_1.areEqual(compareKey, compareSelector(keySelector(c))))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    group = null;\n                });\n            }, function () {\n                elementSelector = NULL;\n            });\n        };\n        Enumerable.prototype.flatten = function () {\n            return _super.prototype.flatten.call(this);\n        };\n        Enumerable.prototype.pairwise = function (selector) {\n            return _super.prototype.pairwise.call(this, selector);\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            this.forEach(function (value, i) {\n                seed = i ? func(seed, value, i) : value;\n            });\n            return seed;\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var count = 0;\n            var sum = this.sum(function (e, i) {\n                count++;\n                return selector(e, i);\n            });\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        // If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        // Addition...  Only works with numerical enumerations.\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var sum = 0;\n            // This allows for infinity math that doesn't destroy the other values.\n            var sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\n            this.forEach(function (x, i) {\n                var value = selector(x, i);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite +=\n                        value > 0 ?\n                            (+1) :\n                            (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        // Multiplication...\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x, i) {\n                exists = true;\n                var value = selector(x, i);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0; // Multiplying by zero will always end in zero.\n                    return false;\n                }\n                // Multiplication can never recover from infinity and simply must retain signs.\n                // You could cancel out infinity with 1/infinity but no available representation exists.\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        /**\n         * Takes the first number and divides it by all following.\n         * @param selector\n         * @returns {number}\n         */\n        Enumerable.prototype.quotient = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var count = 0;\n            var result = NaN;\n            this.forEach(function (x, i) {\n                var value = selector(x, i);\n                count++;\n                if (count === 1) {\n                    result = value;\n                }\n                else {\n                    if (isNaN(value) || value === 0 || !isFinite(value)) {\n                        result = NaN;\n                        return false;\n                    }\n                    result /= value;\n                }\n            });\n            if (count === 1)\n                result = NaN;\n            return result;\n        };\n        // #endregion\n        // #region Single Value Return...\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = VOID0;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = VOID0;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        // #endregion\n        Enumerable.prototype.memoize = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = NULL;\n                dispose_1.dispose(enumerator);\n                enumerator = NULL;\n            });\n        };\n        Enumerable.prototype.throwWhenEmpty = function () {\n            return this.doAction(RETURN, null, this.isEndless, function (count) {\n                if (!count)\n                    throw \"Collection is empty.\";\n            });\n        };\n        return Enumerable;\n    }(InfiniteEnumerable));\n    exports.Enumerable = Enumerable;\n    // Provided for type guarding.\n    var FiniteEnumerable = (function (_super) {\n        __extends(FiniteEnumerable, _super);\n        function FiniteEnumerable(enumeratorFactory, finalizer) {\n            var _this = _super.call(this, enumeratorFactory, finalizer, false) || this;\n            _this._disposableObjectName = \"FiniteEnumerable\";\n            return _this;\n        }\n        return FiniteEnumerable;\n    }(Enumerable));\n    exports.FiniteEnumerable = FiniteEnumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            var _this = _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.ArrayEnumerator(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source; // Should never be null, but ArrayEnumerable if not disposed simply treats null as empty array.\n                });\n            }) || this;\n            var _ = _this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n            return _this;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = NULL;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return enumUtil.toArray(_._source);\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.throwIfDisposed();\n            return enumUtil.forEach(_._source, action, max);\n        };\n        // These methods should ALWAYS check for array length before attempting anything.\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            var len = source.length;\n            return !!len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var source = _._source;\n            return index < source.length\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!(count > 0))\n                return _;\n            return new Enumerable(function () { return new ArrayEnumerator_1.ArrayEnumerator(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            _.throwIfDisposed();\n            return _.take(_._source.length - count);\n        };\n        ArrayEnumerable.prototype.skipToLast = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!(count > 0))\n                return Enumerable.empty();\n            if (!isFinite(count))\n                return _;\n            var len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                _.throwIfDisposed();\n                return new IndexEnumerator_1.IndexEnumerator(function () {\n                    var s = _._source;\n                    throwIfDisposed(disposed || !s);\n                    return {\n                        source: s,\n                        pointer: (s.length - 1),\n                        length: s.length,\n                        step: -1\n                    };\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return this.asEnumerable();\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            if (Types_1.Type.isArrayLike(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(FiniteEnumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            var _this = _super.call(this, elements) || this;\n            _this._groupKey = _groupKey;\n            _this._disposableObjectName = \"Grouping\";\n            return _this;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key) || null;\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                dispose_1.dispose(enumerator);\n                enumerator = NULL;\n            });\n        };\n        return Lookup;\n    }());\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Compare_1.compare; }\n            var _this = _super.call(this, NULL) || this;\n            _this.source = source;\n            _this.keySelector = keySelector;\n            _this.order = order;\n            _this.parent = parent;\n            _this.comparer = comparer;\n            Enumerator_1.throwIfEndless(source && source.isEndless);\n            _this._disposableObjectName = \"OrderedEnumerable\";\n            return _this;\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1 /* Ascending */);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1 /* Ascending */, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1 /* Descending */);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1 /* Descending */, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                _.throwIfDisposed();\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_)\n                    .generateSortedIndexes(buffer);\n            }, function (yielder) {\n                _.throwIfDisposed();\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = NULL;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = NULL;\n            }, false);\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            var _ = this;\n            _super.prototype._onDispose.call(this);\n            _.source = NULL;\n            _.keySelector = NULL;\n            _.order = NULL;\n            _.parent = NULL;\n        };\n        return OrderedEnumerable;\n    }(FiniteEnumerable));\n    // A private static helper for the weave function.\n    function nextEnumerator(queue, e) {\n        if (e) {\n            if (e.moveNext()) {\n                queue.enqueue(e);\n            }\n            else {\n                dispose_1.dispose(e);\n                return null;\n            }\n        }\n        return e;\n    }\n    /**\n     * Recursively builds a SortContext chain.\n     * @param orderedEnumerable\n     * @param currentContext\n     * @returns {any}\n     */\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.KeySortedContext(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed) {\n        if (disposed)\n            throw new ObjectDisposedException_1.ObjectDisposedException(\"Enumerable\");\n        return true;\n    }\n    // #endregion\n    (function (Enumerable) {\n        /**\n         * Universal method for converting a primitive enumerables into a LINQ enabled ones.\n         *\n         * Is not limited to TypeScript usages.\n         */\n        function from(source) {\n            var e = fromAny(source);\n            if (!e)\n                throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n            return e;\n        }\n        Enumerable.from = from;\n        function fromAny(source, defaultEnumerable) {\n            if (Types_1.Type.isObject(source) || Types_1.Type.isString(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Types_1.Type.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); }, null, source.isEndless);\n                if (Enumerator_1.isEnumerator(source))\n                    return new Enumerable(function () { return source; }, null, source.isEndless);\n                if (Enumerator_1.isIterator(source))\n                    return fromAny(new IteratorEnumerator_1.IteratorEnumerator(source));\n            }\n            return defaultEnumerable;\n        }\n        Enumerable.fromAny = fromAny;\n        function fromOrEmpty(source) {\n            return Enumerable.fromAny(source) || Enumerable.empty();\n        }\n        Enumerable.fromOrEmpty = fromOrEmpty;\n        /**\n         * Static helper for converting enumerables to an array.\n         * @param source\n         * @returns {any}\n         */\n        function toArray(source) {\n            if (source instanceof Enumerable)\n                return source.toArray();\n            return enumUtil.toArray(source);\n        }\n        Enumerable.toArray = toArray;\n        function _choice(values) {\n            return new InfiniteEnumerable(function () { return new EnumeratorBase_1.EnumeratorBase(null, function (yielder) {\n                throwIfDisposed(!values);\n                return yielder.yieldReturn(Integer_1.Integer.random.select(values));\n            }, true // Is endless!\n            ); }, function () {\n                values.length = 0;\n                values = NULL;\n            });\n        }\n        Enumerable._choice = _choice;\n        function choice(values) {\n            var len = values && values.length;\n            // We could return empty if no length, but that would break the typing and produce unexpected results.\n            // Enforcing that there must be at least 1 choice is key.\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return _choice(Utility_1.copy(values));\n        }\n        Enumerable.choice = choice;\n        function chooseFrom() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            // We could return empty if no length, but that would break the typing and produce unexpected results.\n            // Enforcing that there must be at least 1 choice is key.\n            if (!args.length)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return _choice(args);\n        }\n        Enumerable.chooseFrom = chooseFrom;\n        function _cycle(values) {\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                }, // Reinitialize the value just in case the enumerator is restarted.\n                function (yielder) {\n                    throwIfDisposed(!values);\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                }, true // Is endless!\n                );\n            }, function () {\n                values.length = 0;\n                values = NULL;\n            });\n        }\n        function cycle(values) {\n            var len = values && values.length;\n            // We could return empty if no length, but that would break the typing and produce unexpected results.\n            // Enforcing that there must be at least 1 choice is key.\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            // Make a copy to avoid modifying the collection as we go.\n            return _cycle(Utility_1.copy(values));\n        }\n        Enumerable.cycle = cycle;\n        function cycleThrough() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            // We could return empty if no length, but that would break the typing and produce unexpected results.\n            // Enforcing that there must be at least 1 choice is key.\n            if (!args.length)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return _cycle(args);\n        }\n        Enumerable.cycleThrough = cycleThrough;\n        function empty() {\n            // Could be single export function instance, but for safety, we'll make a new one.\n            return new FiniteEnumerable(getEmptyEnumerator);\n        }\n        Enumerable.empty = empty;\n        function repeat(element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!(count > 0))\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.Integer.assert(count, \"count\")\n                ? new FiniteEnumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.EnumeratorBase(function () { index = 0; }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); }, null, false);\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.EnumeratorBase(null, function (yielder) { return yielder.yieldReturn(element); }, true // Is endless!\n                    );\n                });\n        }\n        Enumerable.repeat = repeat;\n        function repeatWithFinalize(initializer, finalizer) {\n            if (!initializer)\n                throw new ArgumentNullException_1.ArgumentNullException(\"initializer\");\n            return new InfiniteEnumerable(function () {\n                var element;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    if (initializer)\n                        element = initializer();\n                }, function (yielder) {\n                    return initializer\n                        ? yielder.yieldReturn(element)\n                        : yielder.yieldBreak();\n                }, function () {\n                    element = NULL;\n                    if (finalizer)\n                        finalizer(element);\n                }, true // Is endless!\n                );\n            }, function () {\n                initializer = NULL;\n                finalizer = VOID0;\n            });\n        }\n        Enumerable.repeatWithFinalize = repeatWithFinalize;\n        /**\n         * Creates an enumerable of one element.\n         * @param element\n         * @returns {FiniteEnumerable<T>}\n         */\n        function make(element) {\n            return repeat(element, 1);\n        }\n        Enumerable.make = make;\n        // start and step can be other than integer.\n        function range(start, count, step) {\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\n            if (!(count > 0))\n                return empty();\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\n            Integer_1.Integer.assert(count, \"count\");\n            return new FiniteEnumerable(function () {\n                var value;\n                var c = count; // Force integer evaluation.\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    value = start;\n                }, function (yielder) {\n                    var result = index++ < c\n                        && yielder.yieldReturn(value);\n                    if (result && index < count)\n                        value += step;\n                    return result;\n                }, false);\n            });\n        }\n        Enumerable.range = range;\n        function rangeDown(start, count, step) {\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return range(start, count, step);\n        }\n        Enumerable.rangeDown = rangeDown;\n        // step = -1 behaves the same as toNegativeInfinity;\n        function toInfinity(start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\n            return new InfiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    value = start;\n                }, function (yielder) {\n                    var current = value;\n                    value += step;\n                    return yielder.yieldReturn(current);\n                }, true // Is endless!\n                );\n            });\n        }\n        Enumerable.toInfinity = toInfinity;\n        function toNegativeInfinity(start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return toInfinity(start, -step);\n        }\n        Enumerable.toNegativeInfinity = toNegativeInfinity;\n        function rangeTo(start, to, step) {\n            if (step === void 0) { step = 1; }\n            if (isNaN(to) || !isFinite(to))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\n            if (step && !isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\n            // This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\n            step = Math.abs(step);\n            return new FiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.EnumeratorBase(function () { value = start; }, start < to\n                    ?\n                        function (yielder) {\n                            var result = value <= to && yielder.yieldReturn(value);\n                            if (result)\n                                value += step;\n                            return result;\n                        }\n                    :\n                        function (yielder) {\n                            var result = value >= to && yielder.yieldReturn(value);\n                            if (result)\n                                value -= step;\n                            return result;\n                        }, false);\n            });\n        }\n        Enumerable.rangeTo = rangeTo;\n        function matches(input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            if (input === null || input === VOID0)\n                throw new ArgumentNullException_1.ArgumentNullException(\"input\");\n            var type = typeof input;\n            if (type != Types_1.Type.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new FiniteEnumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    // Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        }\n        Enumerable.matches = matches;\n        function generate(factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!factory)\n                throw new ArgumentNullException_1.ArgumentNullException(\"factory\");\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.Integer.assert(count, \"count\")\n                ?\n                    new FiniteEnumerable(function () {\n                        var c = count;\n                        var index = 0;\n                        return new EnumeratorBase_1.EnumeratorBase(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            throwIfDisposed(!factory);\n                            var current = index++;\n                            return current < c && yielder.yieldReturn(factory(current));\n                        }, false);\n                    }, function () {\n                        factory = NULL;\n                    })\n                :\n                    new InfiniteEnumerable(function () {\n                        var index = 0;\n                        return new EnumeratorBase_1.EnumeratorBase(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            throwIfDisposed(!factory);\n                            return yielder.yieldReturn(factory(index++));\n                        }, true // Is endless!\n                        );\n                    }, function () {\n                        factory = NULL;\n                    });\n        }\n        Enumerable.generate = generate;\n        function unfold(seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            if (!valueFactory)\n                throw new ArgumentNullException_1.ArgumentNullException(\"factory\");\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    throwIfDisposed(!valueFactory);\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                }, true // Is endless!\n                );\n            }, function () {\n                valueFactory = NULL;\n            });\n        }\n        Enumerable.unfold = unfold;\n        function forEach(enumerable, action, max) {\n            if (max === void 0) { max = Infinity; }\n            // Will properly dispose created enumerable.\n            // Will throw if enumerable is endless.\n            return enumUtil.forEach(enumerable, action, max);\n        }\n        Enumerable.forEach = forEach;\n        function map(enumerable, selector) {\n            // Will properly dispose created enumerable.\n            // Will throw if enumerable is endless.\n            return enumUtil.map(enumerable, selector);\n        }\n        Enumerable.map = map;\n        // Slightly optimized versions for numbers.\n        function max(values) {\n            var v = values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n            return v === VOID0 ? NaN : v;\n        }\n        Enumerable.max = max;\n        function min(values) {\n            var v = values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n            return v === VOID0 ? NaN : v;\n        }\n        Enumerable.min = min;\n        /**\n         * Takes any set of collections of the same type and weaves them together.\n         * @param enumerables\n         * @returns {Enumerable<T>}\n         */\n        function weave(enumerables) {\n            if (!enumerables)\n                throw new ArgumentNullException_1.ArgumentNullException('enumerables');\n            var disposed = false;\n            return new Enumerable(function () {\n                var queue;\n                var mainEnumerator;\n                var index;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    queue = new Queue_1.Queue();\n                    mainEnumerator = enumUtil.from(enumerables);\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var e = null;\n                    // First pass...\n                    if (mainEnumerator) {\n                        while (!e && mainEnumerator.moveNext()) {\n                            var c = mainEnumerator.current;\n                            e = nextEnumerator(queue, c ? enumUtil.from(c) : NULL);\n                        }\n                        if (!e)\n                            mainEnumerator = null;\n                    }\n                    while (!e && queue.tryDequeue(function (value) {\n                        e = nextEnumerator(queue, enumUtil.from(value));\n                    })) { }\n                    return e\n                        ? yielder.yieldReturn(e.current)\n                        : yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose.these(queue.dump());\n                    dispose_1.dispose(mainEnumerator, queue);\n                    mainEnumerator = null;\n                    queue = NULL;\n                });\n            }, function () {\n                disposed = true;\n            });\n        }\n        Enumerable.weave = weave;\n    })(Enumerable = exports.Enumerable || (exports.Enumerable = {}));\n    exports.Enumerable = Enumerable;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","﻿\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual as areEqualValues, compare as compareValues} from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {copy} from \"../System/Collections/Array/Utility\";\r\nimport * as enumUtil from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {\r\n\tisEnumerable,\r\n\tthrowIfEndless,\r\n\tisIterator,\r\n\tisEnumerator\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"../System/Collections/Enumeration/EmptyEnumerator\";\r\nimport {Type} from \"../System/Types\";\r\nimport {Integer} from \"../System/Integer\";\r\nimport {Functions as BaseFunctions} from \"../System/Functions\";\r\nimport {ArrayEnumerator} from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport {EnumeratorBase} from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport {Dictionary} from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport {Queue} from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport {DisposableBase} from \"../System/Disposable/DisposableBase\";\r\nimport {UnsupportedEnumerableException} from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport {ObjectDisposedException} from \"../System/Disposable/ObjectDisposedException\";\r\nimport {KeySortedContext} from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport {ArgumentNullException} from \"../System/Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\nimport {IEnumerator} from \"../System/Collections/Enumeration/IEnumerator\";\r\nimport {IEnumerable} from \"../System/Collections/Enumeration/IEnumerable\";\r\nimport {\r\n\tAction,\r\n\tPredicate,\r\n\tSelector,\r\n\tEqualityComparison,\r\n\tComparison,\r\n\tClosure,\r\n\tActionWithIndex,\r\n\tPredicateWithIndex,\r\n\tSelectorWithIndex\r\n} from \"../System/FunctionTypes\";\r\nimport {IArray} from \"../System/Collections/Array/IArray\";\r\nimport {IMap, IDictionary} from \"../System/Collections/Dictionaries/IDictionary\";\r\nimport {Comparable} from \"../System/IComparable\";\r\nimport {IComparer} from \"../System/IComparer\";\r\nimport {IKeyValuePair} from \"../System/KeyValuePair\";\r\nimport {Order} from \"../System/Collections/Sorting/Order\";\r\nimport {\r\n\tIInfiniteEnumerable,\r\n\tILinqEnumerable,\r\n\tIFiniteEnumerable,\r\n\tILookup,\r\n\tIOrderedEnumerable,\r\n\tIGrouping,\r\n\tNotEmptyEnumerable\r\n} from \"./Enumerable\";\r\nimport {EnumerableAction} from \"./EnumerableAction\";\r\nimport {IndexEnumerator} from \"../System/Collections/Enumeration/IndexEnumerator\";\r\nimport {Primitive} from \"../System/Primitive\";\r\nimport {IteratorEnumerator} from \"../System/Collections/Enumeration/IteratorEnumerator\";\r\nimport {ForEachEnumerable} from \"../System/Collections/Enumeration/ForEachEnumerable\";\r\nimport __extendsImport from \"../extends\";\r\nimport select = Integer.random.select;\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:undefined = void 0;\r\nconst NULL:any = null;\r\nfunction BREAK():EnumerableAction\r\n{\r\n\treturn EnumerableAction.Break;\r\n}\r\nfunction RETURN():EnumerableAction\r\n{\r\n\treturn EnumerableAction.Return;\r\n}\r\nfunction isNotNullOrUndefined(e:any):boolean\r\n{\r\n\treturn e!==null && e!==VOID0;\r\n}\r\n\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\t// noinspection JSMethodCanBeStatic\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\r\n\t// noinspection JSMethodCanBeStatic\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nconst Functions = Object.freeze(new LinqFunctions());\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n\r\n/*\r\n * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\r\n * There may seem like there's extra overrides here and they may seem unnecessary.\r\n * But after closer inspection you'll see the type chain is retained and\r\n * infinite enumerables are prevented from having features that finite ones have.\r\n *\r\n * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\r\n */\r\n\r\nexport class InfiniteEnumerable<T>\r\nextends DisposableBase implements IInfiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure|null)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t\tthis._isEndless = true;\r\n\t\tthis._disposableObjectName = \"InfiniteEnumerable\";\r\n\t}\r\n\r\n\tprotected _isEndless:boolean|undefined;\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\t(<any>this)._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new InfiniteEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t * @param action\r\n\t * @param initializer\r\n\t * @param isEndless Special case where isEndless can be null in order to negate inheritance.\r\n\t * @param onComplete Executes just before the enumerator releases when there is no more entries.\r\n\t * @returns {any}\r\n\t */\r\n\r\n\tdoAction(\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T> | SelectorWithIndex<T, number> | SelectorWithIndex<T, EnumerableAction>,\r\n\t\tinitializer:Closure|null,\r\n\t\tisEndless:true,\r\n\t\tonComplete?:Action<number>):InfiniteEnumerable<T>\r\n\r\n\tdoAction(\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T> | SelectorWithIndex<T, number> | SelectorWithIndex<T, EnumerableAction>,\r\n\t\tinitializer?:Closure|null,\r\n\t\tisEndless?:boolean|null|undefined,\r\n\t\tonComplete?:Action<number>):Enumerable<T>\r\n\r\n\tdoAction(\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T> | SelectorWithIndex<T, number> | SelectorWithIndex<T, EnumerableAction>,\r\n\t\tinitializer?:Closure|null,\r\n\t\tisEndless:boolean|null|undefined = this.isEndless,\r\n\t\tonComplete?:Action<number>):Enumerable<T>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst isE:boolean|undefined = isEndless || undefined; // In case it's null.\r\n\t\tif(!action)\r\n\t\t\tthrow new ArgumentNullException(\"action\");\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!action);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!action);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet c = enumerator.current!;\r\n\t\t\t\t\t\t\tlet actionResult = <any>action(c, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(c);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(onComplete) onComplete(index);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisE\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\taction = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tisE\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforce():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.doAction(BREAK)\r\n\t\t\t.getEnumerator()\r\n\t\t\t.moveNext();\r\n\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):InfiniteEnumerable<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> new InfiniteEnumerable<T>(getEmptyEnumerator);\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this.where((element, index) => index>=count);\r\n\t}\r\n\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn <any> _.doAction((element, index) => index<count, null, false);\r\n\t}\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tconst v = this.elementAtOrDefault(index, INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number):T|undefined\r\n\telementAtOrDefault(index:number, defaultValue:T):T\r\n\telementAtOrDefault(index:number, defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tconst n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * Otherwise there would need to be much more code to handle these cases (.first(predicate), etc);\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tconst v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\tfirstOrDefault():T|undefined\r\n\tfirstOrDefault(defaultValue:T):T\r\n\tfirstOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <T>using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault():T|undefined\r\n\tsingleOrDefault(defaultValue:T):T\r\n\tsingleOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined):Enumerable<T>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => ForEachEnumerable<TNode> | null | undefined):Enumerable<TNode>;\r\n\r\n\ttraverseDepthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tlet enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet value = resultSelector(<TNode>enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tlet c = childrenSelector(<T|TNode>enumerator.current);\r\n\t\t\t\t\t\t\t\tlet e = !Type.isString(c) && Enumerable.fromAny(c);\r\n\t\t\t\t\t\t\t\tenumerator = e ? e.getEnumerator() : EmptyEnumerator;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten<TFlat>():InfiniteEnumerable<TFlat>\r\n\tflatten():InfiniteEnumerable<any>\r\n\tflatten():InfiniteEnumerable<any>\r\n\t{\r\n\t\treturn this.selectMany(entry=>\r\n\t\t{\r\n\t\t\tlet e = !Type.isString(entry) && Enumerable.fromAny(entry);\r\n\t\t\treturn e ? e.flatten() : [entry];\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(\r\n\t\tselector:(\r\n\t\t\tprevious:T, current:T,\r\n\t\t\tindex:number) => TSelect):InfiniteEnumerable<TSelect>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!selector)\r\n\t\t\tthrow new ArgumentNullException(\"selector\");\r\n\r\n\t\tlet previous:T;\r\n\t\treturn this.select<TSelect>((value, i)=>\r\n\t\t{\r\n\t\t\tconst result:any = i ? selector(previous!, value, i) : NULL;\r\n\t\t\tprevious = value;\r\n\t\t\treturn result;\r\n\t\t}).skip(1);\r\n\t}\r\n\r\n\tscan(func:(previous:T, current:T, index:number) => T, seed?:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!func)\r\n\t\t\tthrow new ArgumentNullException(\"func\");\r\n\r\n\t\treturn <this>(\r\n\t\t\tseed===VOID0\r\n\t\t\t\t? this.select((value, i)=>seed = i ? func(seed!, value, i) : value)\r\n\t\t\t\t: this.select((value, i)=>seed = func(seed!, value, i))\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tselect<TResult>(selector:SelectorWithIndex<T, TResult>):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._filterSelected(selector);\r\n\t}\r\n\r\n\t/*\r\n\tpublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\r\n\t\tthis IEnumerable<TSource> source,\r\n\t\tFunc<TSource, IEnumerable<TCollection>> collectionSelector,\r\n\t\tFunc<TSource, TCollection, TResult> resultSelector)\r\n\t */\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TElement> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!collectionSelector)\r\n\t\t\tthrow new ArgumentNullException(\"collectionSelector\");\r\n\r\n\t\tconst isEndless = _._isEndless; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet middleEnumerator:IEnumerator<any>|null|undefined;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!collectionSelector);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = VOID0;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!collectionSelector);\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet middleSeq = collectionSelector(<T>enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumUtil.from(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector!(\r\n\t\t\t\t\t\t\t\t\t\t<T>enumerator.current, <TElement>middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tcollectionSelector = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TResult> | null | undefined>):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TElement> | null | undefined>,\r\n\t\tresultSelector:(collection:T, element:TElement) => TResult):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<any> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:any) => TResult):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tprotected _filterSelected(\r\n\t\tselector?:SelectorWithIndex<T, T>,\r\n\t\tfilter?:PredicateWithIndex<T>):Enumerable<T>\r\n\tprotected _filterSelected<TResult>(\r\n\t\tselector:SelectorWithIndex<T, TResult>,\r\n\t\tfilter?:PredicateWithIndex<TResult>):Enumerable<TResult>\r\n\tprotected _filterSelected(\r\n\t\tselector:SelectorWithIndex<T, any> = Functions.Identity,\r\n\t\tfilter?:PredicateWithIndex<any>):Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tif(!selector)\r\n\t\t\tthrow new ArgumentNullException(\"selector\");\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!selector);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet i = index++;\r\n\t\t\t\t\t\t\tlet result = selector(enumerator.current!, i);\r\n\t\t\t\t\t\t\tif(!filter || filter(result, i++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = false;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t */\r\n\tchoose():InfiniteEnumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):InfiniteEnumerable<any>\r\n\t{\r\n\t\treturn this._filterSelected(selector, isNotNullOrUndefined);\r\n\t}\r\n\r\n\twhere(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\t\treturn <any>this._filterSelected(Functions.Identity, predicate);\r\n\t}\r\n\r\n\tnonNull():this\r\n\t{\r\n\t\treturn this.where(v=>v!=null && v!=VOID0);\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):InfiniteEnumerable<TType>;\r\n\tofType<TType>(type:any):InfiniteEnumerable<TType>\r\n\t{\r\n\t\tlet typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <any> this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <any>this\r\n\t\t\t.where(x=> isNotNullOrUndefined(x) && typeof x===typeName);\r\n\t}\r\n\r\n\texcept(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tcompareSelector?:Selector<T, string|number|symbol>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tenumUtil.forEach(second, key => { keys.addByKeyValue(key, true) });\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tdistinct(compareSelector?:Selector<T, string|number|symbol>):this\r\n\t{\r\n\t\treturn this.except(NULL, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged(compareSelector:Selector<T, any> = Functions.Identity):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet compareKey:any;\r\n\t\t\t\tlet initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet key = compareSelector(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(areEqualValues(compareKey, key))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue?:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst disposed:boolean = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:ForEachEnumerable<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumUtil.from<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<ForEachEnumerable<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet secondTemp:Queue<any>;\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tlet next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumUtil.from<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult>(\r\n\t\tinner:ForEachEnumerable<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tlet innerElements:TInner[]|null;\r\n\t\t\t\tlet innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(<T>outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet key = outerKeySelector(<T>outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\touterEnumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult>(\r\n\t\tinner:ForEachEnumerable<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]|null) => TResult,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:ILookup<TKey, TInner>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t<T>enumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(<T>enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmerge(enumerables:IArray<ForEachEnumerable<T>>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\tif(!enumerables || enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet queue:Queue<ForEachEnumerable<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<ForEachEnumerable<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.tryDequeue(value=>{\r\n\t\t\t\t\t\t\t\tenumerator = enumUtil.from<T>(value); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t})) { }\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<ForEachEnumerable<T>>):this\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tcompareSelector:Selector<T, string|number|symbol> = Functions.Identity):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = <T>firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumUtil.from(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = <T>secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:ForEachEnumerable<T>):this\r\n\t{\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tconst n:number = index;\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tlet count:number = 0;\r\n\t\t\t\tlet isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumUtil.from<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:ForEachEnumerable<T>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tlet hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tlet another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):this\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):this\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:any) => void):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst disposed = !_.throwIfDisposed();\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:Closure):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):InfiniteEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\t\tlet len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = <T>enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn !!len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tshare():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet sharedEnumerator:IEnumerator<T>;\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn sharedEnumerator || (sharedEnumerator = _.getEnumerator());\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends InfiniteEnumerable<T> implements ILinqEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure|null,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t\tthis._disposableObjectName = \"Enumerable\";\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n// #region Indexing/Paging methods.\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\treturn <any>super.skip(count);\r\n\t}\r\n\r\n\tskipWhile(predicate:PredicateWithIndex<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttakeWhile(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn <any>this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:PredicateWithIndex<T>, includeUntilValue?:boolean):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn <any>this.doAction(\r\n\t\t\t\t(element:T, index:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tlet found:boolean = false;\r\n\t\treturn <any>this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Since an infinite enumerable will always end up traversing breadth first, we have this only here for regular enumerable.\r\n\ttraverseBreadthFirst(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined):Enumerable<T>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => ForEachEnumerable<TNode> | null | undefined):Enumerable<TNode>;\r\n\r\n\ttraverseBreadthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet nestLevel:number = 0;\r\n\t\t\t\tlet buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tlet next = Enumerable\r\n\t\t\t\t\t\t\t\t.from(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(childrenSelector);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:ActionWithIndex<T>, max?:number):number\r\n\tforEach(action:PredicateWithIndex<T>, max?:number):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tif(!action)\r\n\t\t\tthrow new ArgumentNullException(\"action\");\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\t/*\r\n\t\t// It could be just as easy to do the following:\r\n\t\treturn enumUtil.forEach(_, action, max);\r\n\t\t// But to be more active about checking for disposal, we use this instead:\r\n\t\t*/\r\n\r\n\r\n\t\t// Return value of action can be anything, but if it is (===) false then the enumUtil.forEach will discontinue.\r\n\t\treturn max>0 ? using(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\r\n\t\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(max>i && _.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(<T>e.current, i++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t) : 0;\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:PredicateWithIndex<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0, count:number = Infinity):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assertZeroOrGreater(index);\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use enumUtil.forEach utility instead.\r\n\t\tenumUtil.forEach<T>(this, (x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t}, count);\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tconst dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tlet key = keySelector(x, i);\r\n\t\t\t\tlet element = elementSelector(x, i);\r\n\r\n\t\t\t\tlet array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:SelectorWithIndex<T, string|number|symbol>,\r\n\t\telementSelector:SelectorWithIndex<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tconst obj:IMap<TResult> = {};\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x, i)] = elementSelector(x, i);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\r\n\ttoDictionary<TKey, TValue>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):IDictionary<TKey, TValue>\r\n\t{\r\n\t\tconst dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach((x, i)=> dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this\r\n\t\t\t.select(selector)\r\n\t\t\t.toArray()\r\n\t\t\t.join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tconst c = count;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn <any> _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\tselect<TResult>(selector:SelectorWithIndex<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\treturn <Enumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TResult> | null | undefined>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TElement> | null | undefined>,\r\n\t\tresultSelector:(collection:T, element:TElement)=>TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<any> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:any)=>TResult):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tchoose():Enumerable<T>;\r\n\tchoose<TResult>(selector:SelectorWithIndex<T, TResult>):Enumerable<TResult>\r\n\tchoose(selector:SelectorWithIndex<T, any> = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\treturn this._filterSelected(selector, isNotNullOrUndefined);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> !!index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet capacity:number;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tlet selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = NULL; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:PredicateWithIndex<T>):number\r\n\t{\r\n\t\tlet count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t?\r\n\t\t\t\t(x, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tlet result = true;\r\n\t\tthis.forEach((x, i) =>\r\n\t\t{\r\n\t\t\tif(!predicate(x, i))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tlet result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x, i); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\tcontains(value:T, compareSelector?:Selector<T, any>):boolean\r\n\t{\r\n\t\tif(compareSelector)\r\n\t\t{\r\n\t\t\tconst s = compareSelector(value);\r\n\t\t\treturn this.any(v=> areEqualValues(compareSelector(v), s));\r\n\t\t}\r\n\t\treturn this.any(v=> areEqualValues(v, value));\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf(value:T, compareSelector?:SelectorWithIndex<T, any>):number\r\n\t{\r\n\t\tlet found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(areEqualValues(compareSelector(element, i), compareSelector(value, i), true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\t\tif(areEqualValues(element, value, true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf(value:T, compareSelector?:SelectorWithIndex<T, any>):number\r\n\t{\r\n\t\tlet result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(areEqualValues(compareSelector(element, i), compareSelector(value, i), true)) result\r\n\t\t\t\t\t\t= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(areEqualValues(element, value, true)) result = i;\r\n\t\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\tintersect(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tcompareSelector?:Selector<T, string|number|symbol>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second)\r\n\t\t\tthrow new ArgumentNullException(\"second\");\r\n\r\n\t\tconst isEndless = _.isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T,boolean>;\r\n\t\t\t\tlet outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!second);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tenumUtil.forEach(second, key=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, keys, outs);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tsecond = NULL;\r\n\t\t\t},\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqualValues):boolean\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tenumUtil.from(second),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(<T>e1.current, <T>e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:ForEachEnumerable<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = valuesAreEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn <Enumerable<TType>>super.ofType(type);\r\n\t}\r\n\r\n// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):Enumerable<T[]>\r\n\t{\r\n\t\treturn <Enumerable<T[]>>super.buffer(size);\r\n\t}\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\tgroupBy<TKey>(keySelector:SelectorWithIndex<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\r\n\tgroupBy<TKey>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, T>,\r\n\t\tcompareSelector?:Selector<TKey, string|number|symbol>):Enumerable<IGrouping<TKey, T>>;\r\n\r\n\tgroupBy<TKey, TElement>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, string|number|symbol>):Enumerable<IGrouping<TKey, TElement>>\r\n\r\n\r\n\tgroupBy<TKey, TElement>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>|Selector<T,TKey>,\r\n\t\telementSelector?:SelectorWithIndex<T, TElement>|Selector<T,TElement>,\r\n\t\tcompareSelector?:Selector<TKey, string|number|symbol>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this\r\n\t\t\t\t.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement>(\r\n\t\tkeySelector:Selector<T,TKey>,\r\n\t\telementSelector?:Selector<T,TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, any>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement>(\r\n\t\tkeySelector:Selector<T,TKey>,\r\n\t\telementSelector?:Selector<T,TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, any>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet key:TKey;\r\n\t\t\t\tlet compareKey:any;\r\n\t\t\t\tlet group:TElement[]|null;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!elementSelector);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet v = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(v);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(v)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!elementSelector);\r\n\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(areEqualValues(compareKey, compareSelector(keySelector(c))))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector!(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\telementSelector = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\tflatten<TFlat>():Enumerable<TFlat>\r\n\tflatten():Enumerable<any>\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\treturn <any>super.flatten();\r\n\t}\r\n\r\n\tpairwise<TSelect>(selector:(previous:T, current:T, index:number) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\treturn <any>super.pairwise(selector);\r\n\t}\r\n\r\n\taggregate(\r\n\t\tfunc:(previous:T, current:T, index:number) => T,\r\n\t\tseed:T):T\r\n\taggregate(\r\n\t\tfunc:(previous:T, current:T, index:number) => T,\r\n\t\tseed?:T):T|undefined\r\n\taggregate(\r\n\t\tfunc:(previous:T, current:T, index:number) => T,\r\n\t\tseed?:T):T|undefined\r\n\t{\r\n\t\tthis.forEach((value, i)=>\r\n\t\t{\r\n\t\t\tseed = i ? func(seed!, value, i) : value;\r\n\t\t});\r\n\t\treturn seed;\r\n\t}\r\n\r\n\taverage(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet count = 0;\r\n\t\tconst sum = this.sum((e, i) =>\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\treturn selector(e, i);\r\n\t\t});\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T|undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T|undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy(keySelector:Selector<T, Primitive> = Functions.Identity):T|undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy(keySelector:Selector<T, Primitive> = Functions.Identity):T|undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tlet sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite +=\r\n\t\t\t\t\t\tvalue>0 ?\r\n\t\t\t\t\t\t\t(+1) :\r\n\t\t\t\t\t\t\t(-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet count = 0;\r\n\t\tlet result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet value:T|undefined = VOID0;\r\n\t\tlet found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn <any>value;\r\n\t}\r\n\r\n\tlastOrDefault():T|undefined\r\n\tlastOrDefault(defaultValue:T):T\r\n\tlastOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet value:T|undefined = VOID0;\r\n\t\tlet found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tmemoize():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tlet cache:T[];\r\n\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tlet i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = <T>enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = NULL;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tthrowWhenEmpty():NotEmptyEnumerable<T>\r\n\t{\r\n\t\treturn <any>this.doAction(RETURN, null, this.isEndless, count=>\r\n\t\t{\r\n\t\t\tif(!count) throw \"Collection is empty.\";\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\nextends Enumerable<T> implements IFiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t\tthis._disposableObjectName = \"FiniteEnumerable\";\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Should never be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = NULL;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn enumUtil.toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <any> new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:ActionWithIndex<T>, max?:number):number\r\n\tforEach(action:PredicateWithIndex<T>, max?:number):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn enumUtil.forEach(_._source, action, max);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source;\r\n\t\tlet len = source.length;\r\n\t\treturn !!len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source, len = source.length;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number):T|undefined\r\n\telementAtOrDefault(index:number, defaultValue:T):T\r\n\telementAtOrDefault(index:number, defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\r\n\t\tconst source = _._source;\r\n\t\treturn index<source.length\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault():T|undefined\r\n\tlastOrDefault(defaultValue:T):T\r\n\tlastOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <any> _.take(_._source.length - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tconst len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn <any> _.skip(len - count);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet s = _._source;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed || !s);\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tsource: s,\r\n\t\t\t\t\t\t\tpointer: (s.length - 1),\r\n\t\t\t\t\t\t\tlength: s.length,\r\n\t\t\t\t\t\t\tstep: -1\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():this\r\n\t{\r\n\t\treturn this.asEnumerable();\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqualValues):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tconst s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t\tthis._disposableObjectName = \"Grouping\";\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:IDictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]|null\r\n\t{\r\n\t\treturn this._dictionary.getValue(key) || null;\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tlet enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tlet current = <IKeyValuePair<TKey, TElement[]>>enumerator.current;\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends FiniteEnumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:Selector<T,TOrderBy>|null,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>|null,\r\n\t\tpublic comparer:Comparison<T> = compareValues)\r\n\t{\r\n\t\tsuper(NULL);\r\n\t\tthrowIfEndless(source && source.isEndless);\r\n\t\tthis._disposableObjectName = \"OrderedEnumerable\";\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:Selector<T,TOrderBy>,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet buffer:T[];\r\n\t\tlet indexes:number[];\r\n\t\tlet index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_)\r\n\t\t\t\t\t.generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = NULL;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tconst _:this = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.source = NULL;\r\n\t\t_.keySelector = NULL;\r\n\t\t_.order = NULL;\r\n\t\t_.parent = NULL;\r\n\t}\r\n\r\n}\r\n\r\n// A private static helper for the weave function.\r\nfunction nextEnumerator<T>(queue:Queue<IEnumerator<T>>, e:IEnumerator<T>):IEnumerator<T>|null\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tqueue.enqueue(e);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdispose(e);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn e;\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T>|null = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tconst context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\n\r\nfunction throwIfDisposed(disposed:true):true\r\nfunction throwIfDisposed(disposed:false):never\r\nfunction throwIfDisposed(disposed:boolean):true|never\r\nfunction throwIfDisposed(disposed:boolean):true|never\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(\"Enumerable\");\r\n\treturn true;\r\n}\r\n// #endregion\r\n\r\n\r\nexport module Enumerable\r\n{\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\texport function from<T>(source:ForEachEnumerable<T>):Enumerable<T>\r\n\t{\r\n\t\tlet e = fromAny(source);\r\n\t\tif(!e) throw new UnsupportedEnumerableException();\r\n\t\treturn e;\r\n\t}\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:ForEachEnumerable<T>):Enumerable<T>\r\n\r\n\texport function fromAny(\r\n\t\tsource:any):Enumerable<any>|undefined\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:ForEachEnumerable<T>,\r\n\t\tdefaultEnumerable:Enumerable<T>):Enumerable<T>\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:any,\r\n\t\tdefaultEnumerable?:Enumerable<T>):Enumerable<T>|undefined\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable<T>(\r\n\t\t\t\t\t()=>source.getEnumerator(),\r\n\t\t\t\t\tnull, source.isEndless);\r\n\r\n\t\t\tif(isEnumerator<T>(source))\r\n\t\t\t\treturn new Enumerable<T>(\r\n\t\t\t\t\t()=>source, null, source.isEndless);\r\n\r\n\t\t\tif(isIterator<T>(source))\r\n\t\t\t\treturn fromAny(new IteratorEnumerator(source));\r\n\t\t}\r\n\r\n\t\treturn defaultEnumerable;\r\n\t}\r\n\r\n\texport function fromOrEmpty<T>(source:ForEachEnumerable<T>):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.fromAny(source) || Enumerable.empty<T>();\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\texport function toArray<T>(source:ForEachEnumerable<T>):T[]\r\n\t{\r\n\t\tif(source instanceof Enumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn enumUtil.toArray(source);\r\n\t}\r\n\r\n\r\n\texport function _choice<T>(values:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthrowIfDisposed(!values);\r\n\t\t\t\t\treturn yielder.yieldReturn(Integer.random.select(values));\r\n\t\t\t\t},\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t),\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tvalues.length = 0;\r\n\t\t\t\tvalues = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function choice<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tlet len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _choice(copy(values));\r\n\t}\r\n\r\n\texport function chooseFrom<T>(arg:T, ...args:T[]):InfiniteEnumerable<T>\r\n\texport function chooseFrom<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!args.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _choice(args);\r\n\t}\r\n\r\n\tfunction _cycle<T>(values:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!values);\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tvalues.length = 0;\r\n\t\t\t\tvalues = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function cycle<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tlet len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\t// Make a copy to avoid modifying the collection as we go.\r\n\t\treturn _cycle(copy(values));\r\n\t}\r\n\r\n\texport function cycleThrough<T>(arg:T, ...args:T[]):InfiniteEnumerable<T>\r\n\texport function cycleThrough<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!args.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _cycle(args);\r\n\t}\r\n\r\n\texport function empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single export function instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\texport function repeat<T>(element:T):InfiniteEnumerable<T>;\r\n\texport function repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\texport function repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet c:number = count;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * DEPRECATED This method began to not make sense in so many ways.\r\n\t * @deprecated since version 4.2\r\n\t * @param initializer\r\n\t * @param finalizer\r\n\t */\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:Closure):InfiniteEnumerable<T>\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer?:Action<T>):InfiniteEnumerable<T>\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer?:Action<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tif(!initializer)\r\n\t\t\tthrow new ArgumentNullException(\"initializer\");\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn initializer\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(element)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = NULL;\r\n\t\t\t\t\t\tif(finalizer) finalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tinitializer = NULL;\r\n\t\t\t\tfinalizer = VOID0;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\texport function make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn repeat<T>(element, 1);\r\n\t}\r\n\r\n// start and step can be other than integer.\r\n\r\n\texport function range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\t\t\t\tlet c:number = count; // Force integer evaluation.\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\texport function rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn range(start, count, step);\r\n\t}\r\n\r\n// step = -1 behaves the same as toNegativeInfinity;\r\n\texport function toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\treturn toInfinity(start, -step);\r\n\t}\r\n\r\n\texport function rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function matches(\r\n\t\tinput:string, pattern:any,\r\n\t\tflags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\t\tif(input===null || input===VOID0)\r\n\t\t\tthrow new ArgumentNullException(\"input\");\r\n\t\tconst type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tlet match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function generate<T>(factory:(index:number) => T):InfiniteEnumerable<T>;\r\n\texport function generate<T>(factory:(index:number) => T, count:number):FiniteEnumerable<T>;\r\n\texport function generate<T>(\r\n\t\tfactory:(index:number) => T,\r\n\t\tcount:number = Infinity):InfiniteEnumerable<T>\r\n\t{\r\n\t\tif(!factory)\r\n\t\t\tthrow new ArgumentNullException(\"factory\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t?\r\n\t\t\tnew FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet c:number = count;\r\n\t\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(!factory);\r\n\t\t\t\t\t\t\tlet current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tfactory = NULL;\r\n\t\t\t\t})\r\n\t\t\t:\r\n\t\t\tnew InfiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(!factory);\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(factory(index++));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tfactory = NULL;\r\n\t\t\t\t});\r\n\t}\r\n\r\n\texport function unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:SelectorWithIndex<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteEnumerable<T>\r\n\t{\r\n\t\tif(!valueFactory)\r\n\t\t\tthrow new ArgumentNullException(\"factory\");\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\tlet value:T;\r\n\t\t\t\tlet isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!valueFactory);\r\n\t\t\t\t\t\tlet i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tvalueFactory = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function forEach<T>(\r\n\t\te:ForEachEnumerable<T>,\r\n\t\taction:ActionWithIndex<T>,\r\n\t\tmax?:number):number\r\n\r\n\texport function forEach<T>(\r\n\t\te:ForEachEnumerable<T>,\r\n\t\taction:PredicateWithIndex<T>,\r\n\t\tmax?:number):number\r\n\r\n\texport function forEach<T>(\r\n\t\tenumerable:ForEachEnumerable<T>,\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T>,\r\n\t\tmax:number = Infinity):number\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn enumUtil.forEach(enumerable, action, max);\r\n\t}\r\n\r\n\texport function map<T,TResult>(\r\n\t\tenumerable:ForEachEnumerable<T>,\r\n\t\tselector:SelectorWithIndex<T,TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn enumUtil.map(enumerable, selector);\r\n\t}\r\n\r\n// Slightly optimized versions for numbers.\r\n\texport function max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tconst v = values\r\n\t\t\t.takeUntil(v => v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\texport function min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tconst v = values\r\n\t\t\t.takeUntil(v => v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Takes any set of collections of the same type and weaves them together.\r\n\t * @param enumerables\r\n\t * @returns {Enumerable<T>}\r\n\t */\r\n\texport function weave<T>(\r\n\t\tenumerables:ForEachEnumerable<ForEachEnumerable<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(!enumerables)\r\n\t\t\tthrow new ArgumentNullException('enumerables');\r\n\r\n\t\tlet disposed = false;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet queue:Queue<IEnumerator<T>>;\r\n\t\t\t\tlet mainEnumerator:IEnumerator<ForEachEnumerable<T>>|null;\r\n\t\t\t\tlet index:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerator<T>>();\r\n\t\t\t\t\t\tmainEnumerator = enumUtil.from(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tlet e:IEnumerator<T>|null = null;\r\n\r\n\t\t\t\t\t\t// First pass...\r\n\t\t\t\t\t\tif(mainEnumerator)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(!e && mainEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = mainEnumerator.current;\r\n\t\t\t\t\t\t\t\te = nextEnumerator(queue, c ? enumUtil.from(c) : NULL);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!e)\r\n\t\t\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile(!e && queue.tryDequeue(value=>{\r\n\t\t\t\t\t\t\te = nextEnumerator(queue, enumUtil.from<T>(value));\r\n\t\t\t\t\t\t})) { }\r\n\r\n\t\t\t\t\t\treturn e\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(e.current)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose.these(queue.dump());\r\n\t\t\t\t\t\tdispose(mainEnumerator, queue);\r\n\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\tqueue = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Enumerable;\r\n"]}