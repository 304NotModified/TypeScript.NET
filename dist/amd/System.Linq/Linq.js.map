{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Values","Arrays","ArrayUtility","Enumerator_1","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","dispose_1","DisposableBase_1","UnsupportedEnumerableException_1","ObjectDisposedException_1","KeySortedContext_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","getEmptyEnumerator","empty","createSortContext","orderedEnumerable","currentContext","context","keySelector","order","comparer","parent","throwIfDisposed","disposed","className","INVALID_DEFAULT","VOID0","LinqFunctions","_super","apply","arguments","Greater","a","Lesser","Functions","freeze","InfiniteEnumerable","_enumeratorFactory","finalizer","call","_isEndless","defineProperty","get","enumerable","configurable","getEnumerator","_onDispose","asEnumerable","_","_doAction","action","initializer","isEndless","Enumerable","enumerator","index","yielder","moveNext","actionResult","current","yieldBreak","yieldReturn","dispose","doAction","force","defaultAction","element","_skip","count","isFinite","assert","skip","skipWhile","predicate","take","takeWhile","takeUntil","includeUntilValue","found","elementAt","v","elementAtOrDefault","Error","defaultValue","isNaN","n","using","e","i","first","firstOrDefault","single","value","singleOrDefault","any","traverseBreadthFirst","func","resultSelector","buffer","len","nestLevel","next","fromArray","selectMany","length","traverseDepthFirst","enumeratorStack","these","flatten","middleEnumerator","c","Array","isArray","Identity","pairwise","selector","prev","scan","seed","isUseSeed","isFirst","_select","WhereSelectEnumerable","select","_selectMany","collectionSelector","undefined","middleSeq","from","_choose","result","choose","_where","WhereEnumerable","where","ofType","type","typeName","Number","NUMBER","String","STRING","Boolean","BOOLEAN","Function","FUNCTION","x","except","second","compareSelector","keys","forEach","key","addByKeyValue","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","defaultIfEmpty","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","dequeue","join","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","toLookup","innerElement","groupJoin","_concatWith","other","concatWith","_merge","enumerables","queue","merge","concat","_i","union","insertAt","isEnumerated","alternateMultiple","sequence","mode","alternateEnumerator","toArray","hasAtLeastOne","reset","latest","another","alternateSingle","make","alternate","enumeratorFactory","array","ArrayEnumerable","source","isObject","isString","isEnumerable","isArrayLike","FiniteEnumerable","choice","values","random","chooseFrom","args","cycle","cycleThrough","repeat","Infinity","repeatWithFinalize","range","start","step","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","matches","input","pattern","flags","RegExp","indexOf","regex","match","exec","generate","factory","unfold","valueFactory","skipSeed","map","max","aggregate","min","throwIfEndless","copyTo","target","elementSelector","dict","getValue","push","Lookup","toMap","obj","toDictionary","toJoinedString","separator","takeExceptLast","q","enqueue","skipToLast","reverse","shuffle","capacity","selectedIndex","selectedValue","all","every","some","isEmpty","contains","areEqual","lastIndexOf","intersect","outs","sequenceEqual","equalityComparer","e1","e2","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","_this","partitionBy","elements","Grouping","group","hasNext","size","initialize","lastOrDefault","average","numberOrNaN","sum","sumInfinite","NaN","maxBy","minBy","product","exists","quotient","last","share","sharedEnumerator","memoize","cache","catchError","handler","finallyAction","_source","_disposableObjectName","s","_groupKey","_dictionary","prevSource","prevPredicate","composedPredicate","prevSelector","composedSelector","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes"],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../System/Compare\", \"../System/Collections/Array/Compare\", \"../System/Collections/Array/Utility\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Types\", \"../System/Integer\", \"../System/Functions\", \"../System/Collections/Enumeration/ArrayEnumerator\", \"../System/Collections/Enumeration/EnumeratorBase\", \"../System/Collections/Dictionaries/Dictionary\", \"../System/Collections/Queue\", \"../System/Disposable/dispose\", \"../System/Disposable/DisposableBase\", \"../System/Collections/Enumeration/UnsupportedEnumerableException\", \"../System/Disposable/ObjectDisposedException\", \"../System/Collections/Sorting/KeySortedContext\", \"../System/Exceptions/ArgumentNullException\", \"../System/Exceptions/ArgumentOutOfRangeException\"], function (require, exports, Values, Arrays, ArrayUtility, Enumerator_1, Types_1, Integer_1, Functions_1, ArrayEnumerator_1, EnumeratorBase_1, Dictionary_1, Queue_1, dispose_1, DisposableBase_1, UnsupportedEnumerableException_1, ObjectDisposedException_1, KeySortedContext_1, ArgumentNullException_1, ArgumentOutOfRangeException_1) {\n    'use strict';\n    var INVALID_DEFAULT = {};\n    var VOID0 = void 0;\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            _super.apply(this, arguments);\n        }\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.default));\n    var Functions = new LinqFunctions();\n    Object.freeze(Functions);\n    function getEmptyEnumerator() {\n        return Enumerator_1.empty;\n    }\n    var InfiniteEnumerable = (function (_super) {\n        __extends(InfiniteEnumerable, _super);\n        function InfiniteEnumerable(_enumeratorFactory, finalizer) {\n            _super.call(this, finalizer);\n            this._enumeratorFactory = _enumeratorFactory;\n            this._isEndless = true;\n        }\n        Object.defineProperty(InfiniteEnumerable.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        InfiniteEnumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        InfiniteEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._enumeratorFactory = null;\n        };\n        InfiniteEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new InfiniteEnumerable(function () { return _.getEnumerator(); });\n        };\n        InfiniteEnumerable.prototype._doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (initializer)\n                        initializer();\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var actionResult = action(enumerator.current, index++);\n                        if (actionResult === false || actionResult === 0)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2)\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            return this._doAction(action, initializer, isEndless);\n        };\n        InfiniteEnumerable.prototype.force = function (defaultAction) {\n            if (defaultAction === void 0) { defaultAction = 0; }\n            this.throwIfDisposed();\n            this.doAction(function (element) { return defaultAction; });\n        };\n        InfiniteEnumerable.prototype._skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            return this._doAction(function (element, index) {\n                return index < count\n                    ? 2\n                    : 1;\n            });\n        };\n        InfiniteEnumerable.prototype.skip = function (count) {\n            return count > 0 ? this._skip(count) : this;\n        };\n        InfiniteEnumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this._doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 2\n                    : 1;\n            });\n        };\n        InfiniteEnumerable.prototype.take = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                throw new ArgumentOutOfRangeException_1.default('count', count, 'Must be finite.');\n            Integer_1.default.assert(count, \"count\");\n            return _._doAction(function (element, index) { return index < count; }, null, false);\n        };\n        InfiniteEnumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.default('predicate');\n            return this._doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1\n                    : 0;\n            }, null, null);\n        };\n        InfiniteEnumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.default('predicate');\n            if (!includeUntilValue)\n                return this._doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0\n                        : 1;\n                }, null, null);\n            var found = false;\n            return this._doAction(function (element, index) {\n                if (found)\n                    return 0;\n                found = predicate(element, index);\n                return 1;\n            }, function () {\n                found = false;\n            }, null);\n        };\n        InfiniteEnumerable.prototype.elementAt = function (index) {\n            var v = this.elementAtOrDefault(index, INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"index is greater than or equal to the number of elements in source.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                var i = 0;\n                while (e.moveNext()) {\n                    if (i == n)\n                        return e.current;\n                    i++;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.first = function () {\n            var v = this.firstOrDefault(INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"first:The sequence is empty.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext() ? e.current : defaultValue; });\n        };\n        InfiniteEnumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                    throw new Error(\"single:sequence contains more than one element.\");\n                }\n                throw new Error(\"single:The sequence is empty.\");\n            });\n        };\n        InfiniteEnumerable.prototype.singleOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.any = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext(); });\n        };\n        InfiniteEnumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.default(function () {\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .fromArray(buffer)\n                            .selectMany(func);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    buffer.length = 0;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.traverseDepthFirst = function (func, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumeratorStack = [];\n                var enumerator;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            enumerator = func(enumerator.current).getEnumerator();\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        dispose_1.dispose.these(enumeratorStack);\n                    }\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.flatten = function () {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (middleEnumerator != null) {\n                            if (middleEnumerator.moveNext()) {\n                                return yielder.yieldReturn(middleEnumerator.current);\n                            }\n                            else {\n                                middleEnumerator = null;\n                            }\n                        }\n                        if (enumerator.moveNext()) {\n                            var c = enumerator.current;\n                            if (Array.isArray(c)) {\n                                middleEnumerator.dispose();\n                                middleEnumerator = Enumerable.fromArray(c)\n                                    .selectMany(Functions.Identity)\n                                    .flatten()\n                                    .getEnumerator();\n                                continue;\n                            }\n                            else {\n                                return yielder.yieldReturn(enumerator.current);\n                            }\n                        }\n                        return false;\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    enumerator.moveNext();\n                }, function (yielder) {\n                    var prev = enumerator.current;\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.scan = function (func, seed) {\n            var isUseSeed = seed !== VOID0;\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    isFirst = true;\n                }, function (yielder) {\n                    if (isFirst) {\n                        isFirst = false;\n                        return isUseSeed\n                            ? yielder.yieldReturn(value = seed)\n                            : enumerator.moveNext() && yielder.yieldReturn(value\n                                = enumerator.current);\n                    }\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype._select = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (selector.length < 2)\n                return new WhereSelectEnumerable(_, null, selector);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return enumerator.moveNext()\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.select = function (selector) {\n            return this._select(selector);\n        };\n        InfiniteEnumerable.prototype._selectMany = function (collectionSelector, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = undefined;\n                    index = 0;\n                }, function (yielder) {\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    do {\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = Enumerator_1.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                    enumerator = null;\n                    middleEnumerator = null;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        InfiniteEnumerable.prototype._choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var result = selector(enumerator.current, index++);\n                        if (result !== null && result !== VOID0)\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        InfiniteEnumerable.prototype._where = function (predicate) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            if (predicate.length < 2)\n                return new WhereEnumerable(_, predicate);\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        if (predicate(enumerator.current, index++))\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.where = function (predicate) {\n            return this._where(predicate);\n        };\n        InfiniteEnumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.default.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.default.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.default.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.default.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .where(function (x) { return typeof x === typeName; });\n        };\n        InfiniteEnumerable.prototype.except = function (second, compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    if (second)\n                        Enumerator_1.forEach(second, function (key) { return keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    keys.clear();\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.distinct = function (compareSelector) {\n            return this.except(null, compareSelector);\n        };\n        InfiniteEnumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (compareKey === key) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(second);\n                }, function (yielder) { return firstEnumerator.moveNext()\n                    && secondEnumerator.moveNext()\n                    && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)); }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    secondTemp = new Queue_1.default(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = null;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = Enumerator_1.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = null;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements = null;\n                var innerCount = 0;\n                return new EnumeratorBase_1.default(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements != null) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElement = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(outerEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype._concatWith = function (other) {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    if (firstEnumerator != null) {\n                        if (firstEnumerator.moveNext())\n                            return yielder.yieldReturn(firstEnumerator.current);\n                        secondEnumerator = Enumerator_1.from(other);\n                        firstEnumerator.dispose();\n                        firstEnumerator = null;\n                    }\n                    if (secondEnumerator.moveNext())\n                        return yielder.yieldReturn(secondEnumerator.current);\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.concatWith = function (other) {\n            return other ? this._concatWith(other) : this;\n        };\n        InfiniteEnumerable.prototype._merge = function (enumerables) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.default(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.count) {\n                            enumerator = Enumerator_1.from(queue.dequeue());\n                        }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = null;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, queue);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.merge = function (enumerables) {\n            if (!enumerables || !enumerables.length)\n                return this;\n            if (enumerables.length == 1)\n                return this.concatWith(enumerables[0]);\n            return this._merge(enumerables);\n        };\n        InfiniteEnumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            var _ = this;\n            if (enumerables.length == 0)\n                return _;\n            if (enumerables.length == 1)\n                return _.concatWith(enumerables[0]);\n            return _.merge(enumerables);\n        };\n        InfiniteEnumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = Enumerator_1.from(second);\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.insertAt = function (index, other) {\n            if (isNaN(index) || index < 0 || !isFinite(index))\n                throw new Error(\"'index' is invalid or out of bounds.\");\n            Integer_1.default.assert(index, \"index\");\n            var n = index;\n            var _ = this, isEndless = _._isEndless || null;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.default(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    alternateEnumerator = new ArrayEnumerator_1.default(Enumerable.toArray(sequence));\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1\n                        : 0;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0:\n                            return yielder.yieldBreak();\n                        case 2:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1;\n                            break;\n                    }\n                    var latest = buffer;\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2\n                        : 0;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    dispose_1.dispose(enumerator, alternateEnumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        InfiniteEnumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i - 0] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        return InfiniteEnumerable;\n    }(DisposableBase_1.default));\n    exports.InfiniteEnumerable = InfiniteEnumerable;\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(enumeratorFactory, finalizer, isEndless) {\n            if (isEndless === void 0) { isEndless = null; }\n            _super.call(this, enumeratorFactory, finalizer);\n            this._isEndless = isEndless;\n        }\n        Enumerable.fromArray = function (array) {\n            return new ArrayEnumerable(array);\n        };\n        Enumerable.from = function (source) {\n            if (Types_1.default.isObject(source) || Types_1.default.isString(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Array.isArray(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); });\n                if (Types_1.default.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n            }\n            throw new UnsupportedEnumerableException_1.default();\n        };\n        Enumerable.toArray = function (source) {\n            if (source instanceof FiniteEnumerable)\n                return source.toArray();\n            return Enumerator_1.toArray(source);\n        };\n        Enumerable.choice = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.default('length', length);\n            return new InfiniteEnumerable(function () { return new EnumeratorBase_1.default(null, function (yielder) {\n                return yielder.yieldReturn(Integer_1.default.random.select(values));\n            }, true); });\n        };\n        Enumerable.chooseFrom = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.choice(args);\n        };\n        Enumerable.cycle = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.default('length', length);\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                }, function (yielder) {\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                }, true);\n            });\n        };\n        Enumerable.cycleThrough = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.cycle(args);\n        };\n        Enumerable.empty = function () {\n            return new FiniteEnumerable(getEmptyEnumerator);\n        };\n        Enumerable.repeat = function (element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!(count > 0))\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new FiniteEnumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () { index = 0; }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); }, null, false);\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.default(null, function (yielder) { return yielder.yieldReturn(element); }, true);\n                });\n        };\n        Enumerable.repeatWithFinalize = function (initializer, finalizer) {\n            return new InfiniteEnumerable(function () {\n                var element;\n                return new EnumeratorBase_1.default(function () {\n                    element = initializer();\n                }, function (yielder) { return yielder.yieldReturn(element); }, function () {\n                    finalizer(element);\n                }, true);\n            });\n        };\n        Enumerable.make = function (element) {\n            return Enumerable.repeat(element, 1);\n        };\n        Enumerable.range = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.default(\"start\", start, \"Must be a finite number.\");\n            if (!(count > 0))\n                return Enumerable.empty();\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite number.\");\n            Integer_1.default.assert(count, \"count\");\n            return new FiniteEnumerable(function () {\n                var value;\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = start;\n                }, function (yielder) {\n                    var result = index++ < c\n                        && yielder.yieldReturn(value);\n                    if (result && index < count)\n                        value += step;\n                    return result;\n                }, false);\n            });\n        };\n        Enumerable.rangeDown = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return Enumerable.range(start, count, step);\n        };\n        Enumerable.toInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.default(\"start\", start, \"Must be a finite number.\");\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite number.\");\n            return new InfiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.default(function () {\n                    value = start;\n                }, function (yielder) {\n                    var current = value;\n                    value += step;\n                    return yielder.yieldReturn(current);\n                }, true);\n            });\n        };\n        Enumerable.toNegativeInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.toInfinity(start, -step);\n        };\n        Enumerable.rangeTo = function (start, to, step) {\n            if (step === void 0) { step = 1; }\n            if (isNaN(to) || !isFinite(to))\n                throw new ArgumentOutOfRangeException_1.default(\"to\", to, \"Must be a finite number.\");\n            if (step && !isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite non-zero number.\");\n            step = Math.abs(step);\n            return new FiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.default(function () { value = start; }, start < to\n                    ?\n                        function (yielder) {\n                            var result = value <= to && yielder.yieldReturn(value);\n                            if (result)\n                                value += step;\n                            return result;\n                        }\n                    :\n                        function (yielder) {\n                            var result = value >= to && yielder.yieldReturn(value);\n                            if (result)\n                                value -= step;\n                            return result;\n                        }, false);\n            });\n        };\n        Enumerable.matches = function (input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            var type = typeof input;\n            if (type != Types_1.default.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new FiniteEnumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.default(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        };\n        Enumerable.generate = function (factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ?\n                    new FiniteEnumerable(function () {\n                        var c = count;\n                        var index = 0;\n                        return new EnumeratorBase_1.default(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            var current = index++;\n                            return current < c && yielder.yieldReturn(factory(current));\n                        }, false);\n                    })\n                :\n                    new InfiniteEnumerable(function () {\n                        var index = 0;\n                        return new EnumeratorBase_1.default(function () {\n                            index = 0;\n                        }, function (yielder) { return yielder.yieldReturn(factory(index++)); }, true);\n                    });\n        };\n        Enumerable.unfold = function (seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                }, true);\n            });\n        };\n        Enumerable.forEach = function (enumerable, action) {\n            Enumerator_1.forEach(enumerable, action);\n        };\n        Enumerable.map = function (enumerable, selector) {\n            return Enumerator_1.map(enumerable, selector);\n        };\n        Enumerable.max = function (values) {\n            return values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n        };\n        Enumerable.min = function (values) {\n            return values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.skip = function (count) {\n            return count > 0 ? this._skip(count) : this;\n        };\n        Enumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_.isEndless);\n            var index = 0;\n            dispose_1.using(_.getEnumerator(), function (e) {\n                Enumerator_1.throwIfEndless(e.isEndless);\n                while (_.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            });\n        };\n        Enumerable.prototype.toArray = function (predicate) {\n            return predicate\n                ? this.where(predicate).toArray()\n                : this.copyTo([]);\n        };\n        Enumerable.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            this.throwIfDisposed();\n            if (!target)\n                throw new ArgumentNullException_1.default(\"target\");\n            Integer_1.default.assert(index);\n            if (index < 0)\n                throw new ArgumentOutOfRangeException_1.default(\"index\", index, \"Must be zero or greater\");\n            Enumerator_1.forEach(this, function (x, i) {\n                target[i + index] = x;\n            });\n            return target;\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) {\n                var key = keySelector(x);\n                var element = elementSelector(x);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x) {\n                obj[keySelector(x)] = elementSelector(x);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) { return dict.addByKeyValue(keySelector(x), elementSelector(x)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this.select(selector).toArray().join(separator);\n        };\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.default();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        q.enqueue(enumerator.current);\n                        if (q.count > c)\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            Integer_1.default.assert(count, \"count\");\n            return _.reverse()\n                .take(count)\n                .reverse();\n        };\n        Enumerable.prototype.where = function (predicate) {\n            return this._where(predicate);\n        };\n        Enumerable.prototype.select = function (selector) {\n            return this._select(selector);\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        Enumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) { return index && yielder.yieldReturn(buffer[--index]); }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.default.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len];\n                    buffer[len] = null;\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var count = 0;\n            this.forEach(predicate\n                ?\n                    function (x, i) {\n                        if (predicate(x, i))\n                            ++count;\n                    }\n                :\n                    function () {\n                        ++count;\n                    });\n            return count;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            if (!predicate)\n                throw new ArgumentNullException_1.default(\"predicate\");\n            var result = true;\n            this.forEach(function (x) {\n                if (!predicate(x)) {\n                    result = false;\n                    return false;\n                }\n            });\n            return result;\n        };\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        Enumerable.prototype.any = function (predicate) {\n            if (!predicate)\n                return _super.prototype.any.call(this);\n            var result = false;\n            this.forEach(function (x) {\n                result = predicate(x);\n                return !result;\n            });\n            return result;\n        };\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            return compareSelector\n                ? this.any(function (v) { return compareSelector(v) === compareSelector(value); })\n                : this.any(function (v) { return v === value; });\n        };\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element), compareSelector(value), true)) {\n                            found = i;\n                            return false;\n                        }\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true)) {\n                            found = i;\n                            return false;\n                        }\n                    });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element), compareSelector(value), true))\n                            result\n                                = i;\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true))\n                            result = i;\n                    });\n            return result;\n        };\n        Enumerable.prototype.concatWith = function (other) {\n            return other ? this._concatWith(other) : this;\n        };\n        Enumerable.prototype.merge = function (enumerables) {\n            if (!enumerables || !enumerables.length)\n                return this;\n            if (enumerables.length == 1)\n                return this.concatWith(enumerables[0]);\n            return this._merge(enumerables);\n        };\n        Enumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            if (enumerables.length == 0)\n                return this;\n            if (enumerables.length == 1)\n                return this.concatWith(enumerables[0]);\n            return this.merge(enumerables);\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    outs = new Dictionary_1.default(compareSelector);\n                    Enumerator_1.forEach(second, function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator, keys, outs);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            return dispose_1.using(this.getEnumerator(), function (e1) { return dispose_1.using(Enumerator_1.from(second), function (e2) {\n                Enumerator_1.throwIfEndless(e1.isEndless && e2.isEndless);\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, 1);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            return new OrderedEnumerable(this, null, 1, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this, null, -1, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, -1);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _this = this;\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () { return _this.toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        key = keySelector(enumerator.current);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(enumerator.current)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (compareKey === compareSelector(keySelector(c)))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    group = null;\n                });\n            });\n        };\n        Enumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.default.assert(size, \"size\");\n            var _ = this, len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext()) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return len && yielder.yieldReturn(array);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            return this.scan(func, seed).lastOrDefault();\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            var count = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n                ++count;\n            });\n            if (sumInfinite)\n                return sumInfinite * Infinity;\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite += value > 0 ? (+1) : (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x) {\n                exists = true;\n                var value = selector(x);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0;\n                    return false;\n                }\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        Enumerable.prototype.quotient = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var count = 0;\n            var result = NaN;\n            this.forEach(function (x) {\n                var value = selector(x);\n                count++;\n                if (count === 1) {\n                    result = value;\n                }\n                else {\n                    if (isNaN(value) || value === 0 || !isFinite(value)) {\n                        result = NaN;\n                        return false;\n                    }\n                    result /= value;\n                }\n            });\n            if (count === 1)\n                result = NaN;\n            return result;\n        };\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return new EnumeratorBase_1.default(function () {\n                    if (!sharedEnumerator)\n                        sharedEnumerator = _.getEnumerator();\n                }, function (yielder) {\n                    return sharedEnumerator.moveNext()\n                        && yielder.yieldReturn(sharedEnumerator.current);\n                });\n            }, function () {\n                dispose_1.dispose(sharedEnumerator);\n            });\n        };\n        Enumerable.prototype.memoize = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = null;\n                dispose_1.dispose(enumerator);\n                enumerator = null;\n            });\n        };\n        Enumerable.prototype.catchError = function (handler) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        Enumerable.prototype.finallyAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        return Enumerable;\n    }(InfiniteEnumerable));\n    exports.Enumerable = Enumerable;\n    var FiniteEnumerable = (function (_super) {\n        __extends(FiniteEnumerable, _super);\n        function FiniteEnumerable(enumeratorFactory, finalizer) {\n            _super.call(this, enumeratorFactory, finalizer, false);\n        }\n        return FiniteEnumerable;\n    }(Enumerable));\n    exports.FiniteEnumerable = FiniteEnumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.default(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source;\n                });\n            });\n            var _ = this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = null;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return Enumerator_1.toArray(_._source);\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.forEach(_._source, action);\n        };\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source ? source.length : 0;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAt = function (index) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : _super.prototype.elementAt.call(this, index);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source;\n            return (index < source.length && index >= 0)\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this, len = _._source ? _._source.length : 0;\n            return _.take(len - count);\n        };\n        ArrayEnumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            var len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, _._source\n                ? (_._source.length - 1)\n                : 0, -1); });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return this;\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            if (Types_1.default.isArrayLike(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(FiniteEnumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            _super.call(this, elements);\n            this._groupKey = _groupKey;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key);\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                dispose_1.dispose(enumerator);\n            });\n        };\n        return Lookup;\n    }());\n    var WhereEnumerable = (function (_super) {\n        __extends(WhereEnumerable, _super);\n        function WhereEnumerable(prevSource, prevPredicate) {\n            _super.call(this, null, null, prevSource && prevSource.isEndless);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n        }\n        WhereEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            var prevPredicate = this.prevPredicate;\n            var composedPredicate = function (x) { return prevPredicate(x) && predicate(x); };\n            return new WhereEnumerable(this.prevSource, composedPredicate);\n        };\n        WhereEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector);\n        };\n        WhereEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var predicate = _.prevPredicate;\n            var source = _.prevSource;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    if (predicate(enumerator.current))\n                        return yielder.yieldReturn(enumerator.current);\n                }\n                return false;\n            }, function () {\n                dispose_1.dispose(enumerator);\n            }, _._isEndless);\n        };\n        WhereEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.prevPredicate = null;\n            this.prevSource = null;\n        };\n        return WhereEnumerable;\n    }(Enumerable));\n    var WhereSelectEnumerable = (function (_super) {\n        __extends(WhereSelectEnumerable, _super);\n        function WhereSelectEnumerable(prevSource, prevPredicate, prevSelector) {\n            _super.call(this, null, null, prevSource && prevSource.isEndless);\n            this.prevSource = prevSource;\n            this.prevPredicate = prevPredicate;\n            this.prevSelector = prevSelector;\n        }\n        WhereSelectEnumerable.prototype.where = function (predicate) {\n            if (predicate.length > 1)\n                return _super.prototype.where.call(this, predicate);\n            return new WhereEnumerable(this, predicate);\n        };\n        WhereSelectEnumerable.prototype.select = function (selector) {\n            if (selector.length > 1)\n                return _super.prototype.select.call(this, selector);\n            var _ = this;\n            var prevSelector = _.prevSelector;\n            var composedSelector = function (x) { return selector(prevSelector(x)); };\n            return new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\n        };\n        WhereSelectEnumerable.prototype.getEnumerator = function () {\n            var _ = this, predicate = _.prevPredicate, source = _.prevSource, selector = _.prevSelector, enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = source.getEnumerator();\n            }, function (yielder) {\n                while (enumerator.moveNext()) {\n                    var c = enumerator.current;\n                    if (predicate == null || predicate(c)) {\n                        return yielder.yieldReturn(selector(c));\n                    }\n                }\n                return false;\n            }, function () {\n                dispose_1.dispose(enumerator);\n            }, _._isEndless);\n        };\n        WhereSelectEnumerable.prototype._onDispose = function () {\n            var _ = this;\n            _super.prototype._onDispose.call(this);\n            _.prevPredicate = null;\n            _.prevSource = null;\n            _.prevSelector = null;\n        };\n        return WhereSelectEnumerable;\n    }(Enumerable));\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Values.compare; }\n            _super.call(this, null);\n            this.source = source;\n            this.keySelector = keySelector;\n            this.order = order;\n            this.parent = parent;\n            this.comparer = comparer;\n            Enumerator_1.throwIfEndless(source && source.isEndless);\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.default(function () {\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_).generateSortedIndexes(buffer);\n            }, function (yielder) {\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = null;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = null;\n            }, false);\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.source = null;\n            this.keySelector = null;\n            this.order = null;\n            this.parent = null;\n        };\n        return OrderedEnumerable;\n    }(FiniteEnumerable));\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.default(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed, className) {\n        if (className === void 0) { className = \"Enumerable\"; }\n        if (disposed)\n            throw new ObjectDisposedException_1.default(className);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/Primitive.d.ts\"/>\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../System/IComparer.d.ts\"/>\r\n///<reference path=\"../System/Collections/Sorting/Order.d.ts\"/>\r\n///<reference path=\"../System/Collections/IEnumerableOrArray.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {\r\n\tempty as EmptyEnumerator,\r\n\tfrom as enumeratorFrom,\r\n\tforEach,\r\n\ttoArray,\r\n\tmap,\r\n\tisEnumerable,\r\n\tthrowIfEndless\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport Type from \"../System/Types\";\r\nimport Integer from \"../System/Integer\";\r\nimport BaseFunctions from \"../System/Functions\";\r\nimport ArrayEnumerator from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport EnumeratorBase from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport Dictionary from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport Queue from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport DisposableBase from \"../System/Disposable/DisposableBase\";\r\nimport UnsupportedEnumerableException from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport ObjectDisposedException from \"../System/Disposable/ObjectDisposedException\";\r\nimport KeySortedContext from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport ArgumentNullException from \"../System/Exceptions/ArgumentNullException\";\r\nimport ArgumentOutOfRangeException from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\ntype Comparable = Primitive|IComparable<any>;\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:any = void 0;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n\r\n// Provided for type guarding.\r\nexport class InfiniteEnumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t\tthis._isEndless = true;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn new InfiniteEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\tprotected _doAction(\r\n\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>,\r\n\tinitializer?:()=>void,\r\n\tisEndless:boolean = this.isEndless):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>,\r\n\t\tinitializer?:()=>void,\r\n\t\tisEndless:boolean = this.isEndless):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn this._doAction(action,initializer,isEndless);\r\n\t}\r\n\r\n\r\n\tforce(defaultAction:EnumerableAction = EnumerableAction.Break):void\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.doAction(element => defaultAction);\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tprotected _skip(count:number):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this._doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<count\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tskip(count:number):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn count>0 ? this._skip(count) : this;\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn _._doAction((element:T, index?:number) => index<count, null, false);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn this._doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this._doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this._doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar v = this.elementAtOrDefault(index,INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"index is greater than or equal to the number of elements in source.\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> {\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> {\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean {\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.fromArray<T>(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(func);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tfunc:(element:any) => IEnumerable<any>,\r\n\t\tresultSelector?:(element:any, nestLevel?:number) => any):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tenumerator = func(enumerator.current).getEnumerator();\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\tif(Array.isArray(c))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = Enumerable.fromArray<any>(c)\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprotected _select<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(selector.length<2)\r\n\t\t\treturn new WhereSelectEnumerable(_, null, selector);\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._select(selector);\r\n\t}\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector,resultSelector);\r\n\t}\r\n\r\n\tprotected _choose<TResult>(selector:Selector<T, TResult> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tchoose<T>():Enumerable<T>\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t * @param selector\r\n\t * @returns {Enumerable<TResult>}\r\n\t */\r\n\tchoose<TResult>(selector:Selector<T, TResult> = Functions.Identity):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._choose(selector)\r\n\t}\r\n\r\n\tprotected _where(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\tif(predicate.length<2)\r\n\t\t\treturn new WhereEnumerable(_, predicate);\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn this._where(predicate);\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.where(x=>typeof x===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tforEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):Enumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged<TCompare>(compareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(compareKey===key)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerableOrArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerableOrArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from<TInner>(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _concatWith(other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator!=null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(firstEnumerator.moveNext()) return yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\t\tfirstEnumerator.dispose();\r\n\t\t\t\t\t\t\tfirstEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(secondEnumerator.moveNext()) return yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tconcatWith(other:IEnumerableOrArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn other ? this._concatWith(other) : this;\r\n\t}\r\n\r\n\tprotected _merge(enumerables:IArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerableOrArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerableOrArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tif(!enumerables || !enumerables.length)\r\n\t\t\treturn this;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn this.concatWith(enumerables[0]);\r\n\r\n\t\treturn this._merge(enumerables);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn _.concatWith(enumerables[0]);\r\n\r\n\t\treturn _.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(isNaN(index) || index<0 || !isFinite(index))\r\n\t\t\tthrow new Error(\"'index' is invalid or out of bounds.\");\r\n\r\n\t\tInteger.assert(index, \"index\");\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends InfiniteEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void,\r\n\t\tisEndless:boolean = null)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Static shortcut for creating an ArrayEnumerable.\r\n\t */\r\n\tstatic fromArray<T>(array:IArray<T>):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(array);\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Array.isArray(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable(()=>source.getEnumerator());\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\t\t}\r\n\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\tstatic toArray<T>(source:IEnumerableOrArray<T>):T[]\r\n\t{\r\n\t\tif(source instanceof FiniteEnumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn toArray(source);\r\n\t}\r\n\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(Integer.random.select(values)),\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic chooseFrom<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.choice(args);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycleThrough<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.cycle(args);\r\n\t}\r\n\r\n\tstatic empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single static instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T):InfiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\tstatic make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\r\n\tstatic range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\treturn Enumerable.toInfinity(start, -step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t(yielder:IYield<number>)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t(yielder:IYield<number>)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T):InfiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number):FiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t?\r\n\t\t\tnew FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c:number = count;\r\n\t\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t:\r\n\t\t\tnew InfiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++)),\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:Selector<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\tforEach(enumerable, action);\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn map(enumerable, selector);\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Indexing/Paging methods.\r\n\r\n\t// Added for type guarding.\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\treturn count>0 ? this._skip(count) : this;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assert(index);\r\n\t\tif(index<0) throw new ArgumentOutOfRangeException(\"index\", index, \"Must be zero or greater\");\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use forEach utility instead.\r\n\t\tforEach<T>(this, (x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t});\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach(x=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x)] = elementSelector(x);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach(x=> dict.addByKeyValue(keySelector(x), elementSelector(x)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\treturn this._where(predicate);\r\n\t}\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement)=>TResult):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\r\n\tchoose<TResult>(selector:Selector<T, TResult> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._choose(selector);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t?\r\n\t\t\t\t(x, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tvar result = true;\r\n\t\tthis.forEach(x =>\r\n\t\t{\r\n\t\t\tif(!predicate(x))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tvar result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\tx =>\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = predicate(x); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\t\treturn !result;\r\n\t\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element), compareSelector(value), true)) result\r\n\t\t\t\t\t\t= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\tconcatWith(other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn other ? this._concatWith(other) : this;\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(!enumerables || !enumerables.length)\r\n\t\t\treturn this;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn this.concatWith(enumerables[0]);\r\n\r\n\t\treturn this._merge(enumerables);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(enumerables.length==0)\r\n\t\t\treturn this;\r\n\r\n\t\tif(enumerables.length==1)\r\n\t\t\treturn this.concatWith(enumerables[0]);\r\n\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tforEach(second, key=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, keys, outs);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tenumeratorFrom(second),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerableOrArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\t// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement> = Functions.Identity,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):Enumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tvar count = 0; // No need to make integer if the result could be a float.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tfunction(x)\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(sumInfinite) // Not zero?\r\n\t\t\treturn sumInfinite*Infinity;\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite += value>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// assertIsNotDisposed(disposed);  This doesn't need an assertion since disposing the underlying enumerable disposes the enumerator.\r\n\r\n\t\t\t\t\t\tif(!sharedEnumerator)\r\n\t\t\t\t\t\t\tsharedEnumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tsharedEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(sharedEnumerator.current)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:Error) => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Could possibly be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tforEach(_._source,action);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source ? source.length : 0;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: super.elementAt(index);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn (index<source.length && index>=0)\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, len = _._source ? _._source.length : 0;\r\n\t\treturn _.take(len - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tvar len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends Enumerable<TElement>\r\n{\r\n\tkey:TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount:number;\r\n\tget(key:TKey):TElement[];\r\n\tcontains(key:TKey):boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass WhereEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<T>,\r\n\t\tprivate prevPredicate:Predicate<T>  // predicate.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null, null, prevSource && prevSource.isEndless);\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\tvar prevPredicate = this.prevPredicate;\r\n\t\tvar composedPredicate = (x:T) => prevPredicate(x) && predicate(x);\r\n\t\treturn new WhereEnumerable<T>(this.prevSource, composedPredicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\treturn new WhereSelectEnumerable<T, TSelect>(\r\n\t\t\tthis.prevSource,\r\n\t\t\tthis.prevPredicate,\r\n\t\t\tselector\r\n\t\t);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar predicate = _.prevPredicate;\r\n\t\tvar source = _.prevSource;\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(enumerator.current))\r\n\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.prevPredicate = null;\r\n\t\tthis.prevSource = null;\r\n\t}\r\n}\r\n\r\nclass WhereSelectEnumerable<TSource, T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate prevSource:IEnumerable<TSource>,\r\n\t\tprivate prevPredicate:Predicate<TSource>,  // predicate.length always <= 1\r\n\t\tprivate prevSelector:Selector<TSource, T> // selector.length always <= 1\r\n\t)\r\n\t{\r\n\t\tsuper(null, null, prevSource && prevSource.isEndless);\r\n\t}\r\n\r\n\twhere(predicate:(value:T, index?:number) => boolean):Enumerable<T>\r\n\t{\r\n\t\tif(predicate.length>1)\r\n\t\t\treturn super.where(predicate);\r\n\r\n\t\treturn new WhereEnumerable<T>(this, predicate);\r\n\t}\r\n\r\n\tselect<TSelect>(selector:Selector<T, TSelect>):Enumerable<TSelect>\r\n\t{\r\n\r\n\t\tif(selector.length>1)\r\n\t\t// if selector use index, can't compose\r\n\t\t\treturn super.select(selector);\r\n\r\n\t\tvar _ = this;\r\n\t\tvar prevSelector = _.prevSelector;\r\n\t\tvar composedSelector = (x:TSource) => selector(prevSelector(x));\r\n\t\treturn new WhereSelectEnumerable(_.prevSource, _.prevPredicate, composedSelector);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _                             = this,\r\n\t\t    predicate                     = _.prevPredicate,\r\n\t\t    source                        = _.prevSource,\r\n\t\t    selector:Selector<TSource, T> = _.prevSelector, // Type definition needed for correct inference.\r\n\t\t    enumerator:IEnumerator<TSource>;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = source.getEnumerator();\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\tif(predicate==null || predicate(c))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selector(c));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.prevPredicate = null;\r\n\t\t_.prevSource = null;\r\n\t\t_.prevSelector = null;\r\n\t}\r\n}\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n}\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends FiniteEnumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t\tthrowIfEndless(source && source.isEndless);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean, className:string = \"Enumerable\"):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(className);\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}