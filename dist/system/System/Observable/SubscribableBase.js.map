{"version":3,"sources":["System/Observable/SubscribableBase.ts"],"names":[],"mappings":"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","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {dispose} from \"../Disposable/dispose\";\r\nimport {Subscription} from \"./Subscription\";\r\nimport {ILinkedNodeWithValue} from \"../Collections/ILinkedListNode\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\nexport class SubscribableBase<TSubscriber>\r\nextends DisposableBase\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]\r\n\t{\r\n\t\tvar s = this.__subscriptions;\r\n\t\treturn s && s.map(node=>node.value && node.value.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>\r\n\t{\r\n\t\tvar s = this.__subscriptions;\r\n\t\treturn s && s.find(n=>n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar _s = _.__subscriptions;\r\n\t\tif(!_s) _.__subscriptions = _s = new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_s.addNode({value: s});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t// _.throwIfDisposed(); If it was disposed, then it's still safe to try and unsubscribe.\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\t_.__subscriptions.removeNode(n);\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]\r\n\t{\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tif(!_s) return null;\r\n\t\tvar s = _s.map(n=>n.value);\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tdispose.these(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._unsubscribeAll();\r\n\t\tvar s = this.__subscriptions;\r\n\t\tthis.__subscriptions = null;\r\n\t\tdispose(s);\r\n\t}\r\n\r\n}\r\n\r\nexport default SubscribableBase;\r\n"]}