{"version":3,"sources":["System/KeyValueExtract.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;QAQF,KAAK,EACL,GAAG,EACH,GAAG,EACH,KAAK,EACL,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,UAAU,EACV,mBAAmB,EACnB,mBAAmB;IAEpB,wBAA4C,GAAO;QAElD,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACpE,CAAC;IAHD,2CAGC,CAAA;IAED,mBAAgC,GAAQ,EAAE,IAAkB;QAAlB,oBAAkB,GAAlB,WAAkB;QAE3D,kBAAkB,CAAC,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;QAC1C,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,CAAC;YACb,MAAM,IAAI,6CAAqB,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;QAEnD,MAAM,CAAC,GAAG,CAAC;IACZ,CAAC;IAPD,iCAOC,CAAA;IAGD,qBAA4B,KAAiB,EAAE,IAAkB;QAAlB,oBAAkB,GAAlB,WAAkB;QAEhE,EAAE,CAAA,CAAC,KAAK,CAAC,MAAM,IAAE,CAAC,CAAC;YAClB,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,0CAA0C,CAAC,CAAC;QAE/E,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC3B,CAAC;IAND,qCAMC,CAAA;IAGD,4BAAsC,KAAO,EAAE,IAAW;QAEzD,EAAE,CAAA,CAAC,KAAK,KAAG,KAAK,CAAC;YAChB,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;QAExD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAND,mDAMC,CAAA;IAGD,yBACC,IAA+B,EAC/B,EAAoC;QAGpC,IAAI,CAAC,GAAG,IAAI,EAAE,GAAQ,EAAE,KAAY,CAAC;QACrC,EAAE,CAAA,CAAC,IAAI,YAAY,KAAK,CAAC,CACzB,CAAC;YACA,WAAW,CAAC,IAAI,CAAC,CAAC;YAClB,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACd,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,EAAE,CAAA,CAAC,cAAc,CAAc,IAAI,CAAC,CAAC,CAC1C,CAAC;YACA,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACpD,CAAC;QACD,IAAI,CACJ,CAAC;YACA,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACvB,CAAC;IAvBD,6CAuBC,CAAA;;;;;;;;;;YAnEA,KAAK,GAAwB,KAAK,CAAC,EACnC,GAAG,GAA0B,GAAG,EAChC,GAAG,GAA0B,KAAK,EAClC,KAAK,GAAwB,OAAO,EACpC,IAAI,GAAyB,MAAM,EACnC,MAAM,GAAuB,IAAI,GAAG,KAAK,EACzC,QAAQ,GAAqB,IAAI,GAAG,GAAG,GAAG,GAAG,EAC7C,UAAU,GAAmB,IAAI,GAAG,GAAG,GAAG,KAAK,EAC/C,mBAAmB,GAAU,6DAA6D,EAC1F,mBAAmB,GAAU,yBAAyB,CAAC;YA4DxD,oBAAe,eAAe,EAAC","file":"System/KeyValueExtract.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"./Exceptions/ArgumentNullException\";\r\nimport {KeyValuePair, IKeyValuePair} from \"./KeyValuePair\";\r\nimport {IArray} from \"./Collections/Array/IArray\";\r\n\r\nconst\r\n\tVOID0:any                  = void 0,\r\n\tDOT:string                 = '.',\r\n\tKEY:string                 = 'key',\r\n\tVALUE:string               = 'value',\r\n\tITEM:string                = 'item',\r\n\tITEM_1:string              = ITEM + '[1]',\r\n\tITEM_KEY:string            = ITEM + DOT + KEY,\r\n\tITEM_VALUE:string          = ITEM + DOT + VALUE,\r\n\tINVALID_KVP_MESSAGE:string = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.',\r\n\tCANNOT_BE_UNDEFINED:string = 'Cannot equal undefined.';\r\n\r\nexport function isKeyValuePair<TKey,TValue>(kvp:any):kvp is IKeyValuePair<TKey,TValue>\r\n{\r\n\treturn kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\r\n}\r\n\r\nexport function assertKey<TKey>(key:TKey, name:string = ITEM):TKey\r\n{\r\n\tassertNotUndefined(key, name + DOT + KEY);\r\n\tif(key===null)\r\n\t\tthrow new ArgumentNullException(name + DOT + KEY);\r\n\r\n\treturn key;\r\n}\r\n\r\n\r\nexport function assertTuple(tuple:IArray<any>, name:string = ITEM):void\r\n{\r\n\tif(tuple.length!=2)\r\n\t\tthrow new ArgumentException(name, 'KeyValuePair tuples must be of length 2.');\r\n\r\n\tassertKey(tuple[0], name);\r\n}\r\n\r\n\r\nexport function assertNotUndefined<T>(value:T, name:string):T\r\n{\r\n\tif(value===VOID0)\r\n\t\tthrow new ArgumentException(name, CANNOT_BE_UNDEFINED);\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\nexport function extractKeyValue<TKey, TValue, TResult>(\r\n\titem:KeyValuePair<TKey, TValue>,\r\n\tto:(key:TKey, value:TValue)=>TResult):TResult\r\n{\r\n\r\n\tvar _ = this, key:TKey, value:TValue;\r\n\tif(item instanceof Array)\r\n\t{\r\n\t\tassertTuple(item);\r\n\t\tkey = item[0];\r\n\t\tvalue = assertNotUndefined(item[1], ITEM_1);\r\n\t}\r\n\telse if(isKeyValuePair<TKey,TValue>(item))\r\n\t{\r\n\t\tkey = assertKey(item.key);\r\n\t\tvalue = assertNotUndefined(item.value, ITEM_VALUE);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthrow new ArgumentException(ITEM, INVALID_KVP_MESSAGE);\r\n\t}\r\n\r\n\treturn to(key, value);\r\n}\r\n\r\nexport default extractKeyValue;"]}