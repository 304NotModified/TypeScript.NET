{"version":3,"sources":["System/Time/TimeUnitValue.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;QAOG,SAAS;IAmDf,6BAA6B,CAAe,EAAE,KAAc;QAE3D,MAAM,CAAC,mBAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC;;;;;;;;;;;;;YAtDK,SAAS,GAAG,iBAAe,CAAC;YAKlC;gBAC4B,iCAAY;gBAGvC,uBAAY,KAA0B,EAAU,MAAe;oBAE9D,kBAAM,OAAM,CAAC,KAAK,CAAC,IAAE,QAAQ;0BAClB,KAAK;0BACb,mBAAmB,CAAgB,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;oBAJP,WAAM,GAAN,MAAM,CAAS;oBAK9D,mBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC9B,CAAC;gBAED,sBAAI,gCAAK;yBAAT;wBAEC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBACvB,CAAC;yBAED,UAAU,CAAQ;wBAEjB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;wBACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;oBACpB,CAAC;;;mBANA;gBAQD,4CAAoB,GAApB;oBAEC,MAAM,CAAC,mBAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC7D,CAAC;gBAGD,sBAAI,gCAAK;yBAAT;wBAEC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACpB,CAAC;;;mBAAA;gBAED,0BAAE,GAAF,UAAG,KAA2B;oBAA3B,qBAA2B,GAA3B,QAAiB,IAAI,CAAC,KAAK;oBAE7B,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAC,KAAK,CAAC,CAAC;gBACvC,CAAC;gBAEM,kBAAI,GAAX,UAAY,KAA0B,EAAE,KAAsC;oBAAtC,qBAAsC,GAAtC,QAAiB,mBAAQ,CAAC,YAAY;oBAE7E,MAAM,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACxC,CAAC;gBAEF,oBAAC;YAAD,CA5CA,AA4CC,CA3C2B,2BAAY,GA2CvC;YA5CD,mCA4CC,CAAA","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}