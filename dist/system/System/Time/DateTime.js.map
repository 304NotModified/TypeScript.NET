{"version":3,"sources":["System/Time/DateTime.ts"],"names":[],"mappings":"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","file":"System/Time/DateTime.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {ICalendarDate, ITimeStamp} from \"./ITimeStamp\";\r\nimport {TimeSpan} from \"./TimeSpan\";\r\nimport {ClockTime} from \"./ClockTime\";\r\nimport {Milliseconds} from \"./HowMany\";\r\nimport {TimeStamp} from \"./TimeStamp\";\r\nimport {IDateTime} from \"./IDateTime\";\r\nimport {Gregorian} from \"./Calendars\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\n\r\nexport class DateTime implements ICalendarDate, IDateTime\r\n{\r\n\tprivate _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate _setJsDate(value:Date)\r\n\t{\r\n\t\tthis._time = null;\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t\t_._value = value.toJsDate();\r\n\t\telse if(value instanceof Date)\r\n\t\t\t_._setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value=== void(0)\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth() + months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear() + years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp\r\n\t{\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tget toUniversalTime():DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tvar d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tvar f:Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t    l:Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(f.getTime() - l.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean\r\n\t{\r\n\t\treturn ((year%4==0) && (year%100!=0)) || (year%400==0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number\r\n\t{\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year, month + 1, 0)).getDate();\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nexport module DateTime\r\n{\r\n\texport const enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}