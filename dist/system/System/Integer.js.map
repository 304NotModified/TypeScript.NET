{"version":3,"sources":["System/Integer.ts"],"names":[],"mappings":"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","file":"System/Integer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"./Exceptions/ArgumentOutOfRangeException\";\r\nimport {IArray} from \"./Collections/Array/IArray\";\r\n\r\nexport function Integer(n:number):number\r\n{\r\n\treturn Math.floor(n);\r\n}\r\n\r\nexport module Integer\r\n{\r\n\texport const MAX_32_BIT:number = 2147483647;\r\n\r\n\tfunction r(maxExclusive:number):number\r\n\t{\r\n\t\treturn (Math.random()*maxExclusive) | 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a random integer from minInclusive to the maxExclusive.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * @param maxExclusive\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(maxExclusive:number):number\r\n\t{\r\n\t\tassert(maxExclusive, 'maxExclusive');\r\n\t\treturn r(maxExclusive);\r\n\t}\r\n\r\n\texport module random\r\n\t{\r\n\t\texport function next(\r\n\t\t\tboundary:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(boundary, 'max');\r\n\t\t\tif(boundary===0) return 0;\r\n\t\t\tif(inclusive) boundary += boundary/Math.abs(boundary);\r\n\t\t\treturn r(boundary);\r\n\t\t}\r\n\r\n\t\texport function nextInRange(\r\n\t\t\tmin:number,\r\n\t\t\tmax:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(min, 'min');\r\n\t\t\tassert(max, 'max');\r\n\t\t\tvar range = max - min;\r\n\t\t\tif(range===0) return min;\r\n\t\t\tif(inclusive) range += range/Math.abs(range);\r\n\t\t\treturn min + next(range);\r\n\t\t}\r\n\r\n\t\texport function select<T>(source:IArray<T>):T\r\n\t\t{\r\n\t\t\treturn source && source.length\r\n\t\t\t\t? source[r(source.length)]\r\n\t\t\t\t: void(0);\r\n\t\t}\r\n\r\n\t\texport module select\r\n\t\t{\r\n\t\t\texport function one<T>(source:IArray<T>):T\r\n\t\t\t{\r\n\t\t\t\treturn random.select(source);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport function as32Bit(n:number):number\r\n\t{\r\n\t\tvar result = n | 0;\r\n\t\treturn (n=== -1 || result!== -1) ? result : null;\r\n\t}\r\n\r\n\tconst NUMBER:string = \"number\";\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn typeof n===NUMBER && isFinite(n) && n===Math.floor(n);\r\n\t}\r\n\r\n\texport function is32Bit(n:number):boolean\r\n\t{\r\n\t\treturn n===(n | 0);\r\n\t}\r\n\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertPositive(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}