{"version":3,"sources":["System/Collections/List.ts"],"names":[],"mappings":"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","file":"System/Collections/List.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {remove, indexOf, contains, copyTo, removeIndex} from \"./Array/Utility\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport {ArrayEnumerator} from \"./Enumeration/ArrayEnumerator\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IList} from \"./IList\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nexport class List<T>\r\nextends CollectionBase<T> implements IList<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected _source:T[];\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tconst _ = this;\r\n\t\tif(Array.isArray(source))\r\n\t\t{\r\n\t\t\t_._source = source.slice();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._source = [];\r\n\t\t\t_._importEntries(source);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._source.length;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._source.push(entry);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\treturn remove(\r\n\t\t\tthis._source, entry, max,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar len = this._source.length;\r\n\t\tthis._source.length = 0;\r\n\t\treturn len;\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tif(Type.isArrayLike(entries))\r\n\t\t{\r\n\t\t\tvar len = entries.length;\r\n\t\t\tif(!len) return 0;\r\n\t\t\tvar s = this._source;\r\n\r\n\t\t\tvar first = s.length;\r\n\t\t\ts.length += len;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\ts[i + first] = entries[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn len;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn super._importEntries(entries);\r\n\t\t}\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\treturn this._source[index];\r\n\t}\r\n\r\n\tset(index:number, value:T):boolean\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length && areEqual(value, s[index]))\r\n\t\t\treturn false;\r\n\r\n\t\ts[index] = value;\r\n\t\tthis._onModified();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\treturn indexOf(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tinsert(index:number, value:T):void\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length)\r\n\t\t{\r\n\t\t\tthis._source.splice(index, 0, value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._source[index] = value;\r\n\t\t}\r\n\t\tthis._onModified();\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tif(removeIndex(this._source, index))\r\n\t\t{\r\n\t\t\tthis._onModified();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn contains(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<any>>(target:TTarget, index?:number):TTarget\r\n\t{\r\n\t\treturn copyTo(this._source, target, 0, index);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn new ArrayEnumerator(this._source);\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn forEach(useCopy ? s.slice() : s, action);\r\n\t}\r\n\r\n}\r\n\r\nexport default List;"]}