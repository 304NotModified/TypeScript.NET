{"version":3,"sources":["System/Collections/Enumeration/InfiniteEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;QAMG,SAAS,EAET,KAAK;;;;;;;;;;YAFL,SAAS,GAAG,iBAAe,CAAC;YAE5B,KAAK,GAAO,KAAK,CAAC,CAAC;YAczB;gBAA2C,sCAAuB;gBAMjE,4BAAoB,QAAgC;oBAEnD,iBAAO,CAAC;oBAFW,aAAQ,GAAR,QAAQ,CAAwB;gBAGpD,CAAC;gBAES,wCAAW,GAArB;oBAEC,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC;gBAC5B,CAAC;gBAED,qCAAQ,GAAR;oBAEC,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;oBACnB,EAAE,CAAA,CAAC,CAAC,CAAC;wBAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;oBACrD,MAAM,CAAC,CAAC,IAAE,KAAK,CAAC;gBACjB,CAAC;gBAED,oCAAO,GAAP;oBAEC,gBAAK,CAAC,OAAO,WAAE,CAAC;oBAChB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACvB,CAAC;gBAEF,yBAAC;YAAD,CA9BA,AA8BC,CA9B0C,2CAAoB,GA8B9D;YA9BD,mDA8BC,CAAA;YAED,oBAAe,kBAAkB,EAAC","file":"System/Collections/Enumeration/InfiniteEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * An aggregate/reduce style factory function that expects a previous value and the current index of the enumeration.\r\n */\r\nexport interface InfiniteValueFactory<T>\r\n{\r\n\t(previous?:T, index?:number):T;\r\n}\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n */\r\nexport class InfiniteEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * See InfiniteValueFactory\r\n\t * @param _factory\r\n\t */\r\n\tconstructor(private _factory:InfiniteValueFactory<T>)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._factory!=null;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar f = _._factory;\r\n\t\tif(f) _._current = f(_._current, _.incrementIndex());\r\n\t\treturn f!=VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._factory = VOID0;\r\n\t}\r\n\r\n}\r\n\r\nexport default InfiniteEnumerator;"]}