{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;QAOG,SAAS;;;;;;;;;;YAAT,SAAS,GAAG,iBAAe,CAAC;YAQlC;gBAA2C,sCAAuB;gBAMjE,4BAAoB,SAAsB,EAAU,UAAmB;oBAEtE,iBAAO,CAAC;oBAFW,cAAS,GAAT,SAAS,CAAa;oBAAU,eAAU,GAAV,UAAU,CAAS;gBAGvE,CAAC;gBAES,yCAAY,GAAtB;oBAEC,MAAM,CAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC;gBAC7B,CAAC;gBAED,qCAAQ,GAAR,UAAS,KAAU;oBAElB,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;oBACpB,EAAE,CAAA,CAAC,CAAC,CAAC,CACL,CAAC;wBACA,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;wBACpD,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC;wBACrB,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC;4BAAC,CAAC,CAAC,OAAO,EAAE,CAAC;wBACvB,IAAI;4BAAC,MAAM,CAAC,IAAI,CAAC;oBAClB,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAED,oCAAO,GAAP;oBAEC,gBAAK,CAAC,OAAO,WAAE,CAAC;oBACV,IAAK,CAAC,SAAS,GAAG,IAAI,CAAC;gBAC9B,CAAC;gBAES,yCAAY,GAAtB;oBAEC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,gBAAK,CAAC,YAAY,WAAE,CAAC;gBAClD,CAAC;gBACF,yBAAC;YAAD,CAxCA,AAwCC,CAxC0C,2CAAoB,GAwC9D;YAxCD,mDAwCC,CAAA;YAED,oBAAe,kBAAkB,EAAC","file":"IteratorEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(private _iterator:IIterator<T>, private _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tvar r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\t(<any>this)._iterator = null;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn !!this._isEndless && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}