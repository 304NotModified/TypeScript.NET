{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;QAKG,SAAS;;;;;;;;;;YAAT,SAAS,GAAG,iBAAe,CAAC;YAElC;gBAAwC,mCAAiB;gBAGxD,yBACC,aAAuG;oBAGvG,IAAI,MAA0F,CAAC;oBAC/F,kBACC;wBAEC,MAAM,GAAG,aAAa,EAAE,CAAC;wBACzB,EAAE,CAAA,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAC3B,CAAC;4BACA,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;4BACxB,EAAE,CAAA,CAAC,GAAG,GAAC,CAAC,CAAC;gCACR,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BAEnD,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gCACjB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;4BAE9C,EAAE,CAAA,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,KAAG,CAAC,CAAC;gCACzB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC5D,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;4BAC7B,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC;gCACX,OAAO,GAAG,CAAC,CAAC;4BACb,IAAI,CAAC,EAAE,CAAA,CAAC,OAAO,IAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gCACpC,MAAM,IAAI,KAAK,CAAC,yCAAyC,GAAG,OAAO,GAAG,gBAAgB,CAAC,CAAC;4BACzF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;4BAEzB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;4BACvB,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;gCACR,IAAI,GAAG,CAAC,CAAC;4BACV,IAAI,CAAC,EAAE,CAAA,CAAC,IAAI,IAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gCAC9B,MAAM,IAAI,KAAK,CAAC,sCAAsC,GAAG,IAAI,GAAG,gBAAgB,CAAC,CAAC;4BACnF,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;wBACpB,CAAC;oBACF,CAAC,EAED,UAAC,OAAO;wBAEP,IAAI,GAAG,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;wBACxD,EAAE,CAAA,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;4BACrB,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;wBAC7B,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;wBAC7B,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC;wBAC9B,MAAM,CAAC,CAAC,OAAO,GAAC,GAAG,IAAI,OAAO,IAAE,CAAC,CAAC;8BAC/B,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;8BAC3C,OAAO,CAAC,UAAU,EAAE,CAAC;oBACzB,CAAC,EAED;wBAEC,EAAE,CAAA,CAAC,MAAM,CAAC,CACV,CAAC;4BACA,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;wBACtB,CAAC;oBACF,CAAC,CACD,CAAC;oBACF,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBACzB,CAAC;gBACF,sBAAC;YAAD,CA7DA,AA6DC,CA7DuC,+BAAc,GA6DrD;YA7DD,6CA6DC,CAAA;YAED,oBAAe,eAAe,EAAC","file":"System/Collections/Enumeration/IndexEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {EnumeratorBase} from \"./EnumeratorBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport class IndexEnumerator<T> extends EnumeratorBase<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsourceFactory:() => { source: { [index: number]: T }; pointer?: number; length: number; step?: number })\r\n\t{\r\n\r\n\t\tvar source:{ source: { [index: number]: T }; pointer?: number; length: number; step?: number };\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = sourceFactory();\r\n\t\t\t\tif(source && source.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar len = source.length;\r\n\t\t\t\t\tif(len<0) // Null is allowed but will exit immediately.\r\n\t\t\t\t\t\tthrow new Error(\"length must be zero or greater\");\r\n\r\n\t\t\t\t\tif(!isFinite(len))\r\n\t\t\t\t\t\tthrow new Error(\"length must finite number\");\r\n\r\n\t\t\t\t\tif(len && source.step===0)\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (0).\");\r\n\t\t\t\t\tvar pointer = source.pointer;\r\n\t\t\t\t\tif(!pointer)\r\n\t\t\t\t\t\tpointer = 0;\r\n\t\t\t\t\telse if(pointer!=Math.floor(pointer))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n\t\t\t\t\tsource.pointer = pointer;\r\n\r\n\t\t\t\t\tvar step = source.step;\r\n\t\t\t\t\tif(!step)\r\n\t\t\t\t\t\tstep = 1;\r\n\t\t\t\t\telse if(step!=Math.floor(step))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n\t\t\t\t\tsource.step = step;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tvar len = (source && source.source) ? source.length : 0;\r\n\t\t\t\tif(!len || isNaN(len))\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\tvar current = source.pointer;\r\n\t\t\t\tsource.pointer += source.step;\r\n\t\t\t\treturn (current<len && current>=0)\r\n\t\t\t\t\t? yielder.yieldReturn(source.source[current])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(source)\r\n\t\t\t\t{\r\n\t\t\t\t\tsource.source = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis._isEndless = false;\r\n\t}\r\n}\r\n\r\nexport default IndexEnumerator;"]}