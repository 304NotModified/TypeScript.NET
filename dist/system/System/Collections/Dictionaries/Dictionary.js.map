{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.ts"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {Functions} from \"../../Functions\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {LinkedNodeList} from \"../LinkedNodeList\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {ILinkedNode} from \"../ILinkedListNode\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport DictionaryBase from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n\r\nexport interface IHashEntry<TKey, TValue>\r\nextends ILinkedNode<IHashEntry<TKey, TValue>>, IKeyValuePair<TKey,TValue>\r\n{\r\n\r\n}\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements IHashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key?:TKey,\r\n\t\tpublic value?:TValue,\r\n\t\tpublic previous?:IHashEntry<TKey, TValue>,\r\n\t\tpublic next?:IHashEntry<TKey, TValue>)\r\n\t{ }\r\n}\r\n\r\n\r\nvar linkedListPool:ObjectPool<LinkedNodeList<any>>;\r\nfunction linkedNodeList():LinkedNodeList<any>;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):void;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):LinkedNodeList<any>\r\n{\r\n\tif(!linkedListPool)\r\n\t\tlinkedListPool\r\n\t\t\t= new ObjectPool<LinkedNodeList<any>>(20, ()=>new LinkedNodeList<any>(), r=>r.clear());\r\n\tif(!recycle) return linkedListPool.take();\r\n\tlinkedListPool.add(recycle);\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nconst NULL = \"null\", GET_HASH_CODE = \"getHashCode\";\r\nfunction getHashString(obj:any):string\r\n{\r\n\tif(obj===null) return NULL;\r\n\tif(obj===VOID0) return Type.UNDEFINED;\r\n\r\n\t// See IHashable.\r\n\tif(Type.hasMemberOfType(obj, GET_HASH_CODE, Type.FUNCTION))\r\n\t{\r\n\t\treturn obj.getHashCode();\r\n\t}\r\n\r\n\treturn (typeof obj.toString==Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport class Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\t// Retains the order...\r\n\tprivate _entries:LinkedNodeList<IHashEntry<TKey, TValue>>;\r\n\tprivate _buckets:IMap<LinkedNodeList<IHashEntry<TKey, IHashEntry<TKey, TValue>>>>;\r\n\r\n\tconstructor(\r\n\t\tprivate _keyComparer:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._entries = linkedNodeList();\r\n\t\tthis._buckets = {};\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._entries.unsafeCount;\r\n\t}\r\n\r\n\r\n\tprivate _getBucket(\r\n\t\thash:string,\r\n\t\tcreateIfMissing?:boolean):LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>\r\n\t{\r\n\t\tif(hash===null || hash===VOID0 || !createIfMissing && !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar buckets = this._buckets;\r\n\t\tvar bucket = callHasOwnProperty(buckets, hash) ? buckets[hash] : VOID0;\r\n\r\n\t\tif(createIfMissing && !bucket)\r\n\t\t\tbuckets[hash]\r\n\t\t\t\t= bucket\r\n\t\t\t\t= linkedNodeList();\r\n\r\n\t\treturn bucket;\r\n\t}\r\n\r\n\tprivate _getBucketEntry(\r\n\t\tkey:TKey,\r\n\t\thash?:string,\r\n\t\tbucket?:LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>):IHashEntry<TKey,IHashEntry<TKey,TValue>>\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar _          = this,\r\n\t\t    comparer   = _._keyComparer,\r\n\t\t    compareKey = comparer(key);\r\n\r\n\t\tif(!bucket) bucket = _._getBucket(hash || getHashString(compareKey));\r\n\r\n\t\treturn bucket\r\n\t\t\t&& bucket.find(e=>comparer(e.key)===compareKey);\r\n\t}\r\n\r\n\tprotected _getEntry(key:TKey):IHashEntry<TKey,TValue>\r\n\t{\r\n\t\tvar e = this._getBucketEntry(key);\r\n\t\treturn e && e.value;\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar e = this._getEntry(key);\r\n\t\treturn e ? e.value : VOID0;\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\tvar _           = this,\r\n\t\t    buckets     = _._buckets,\r\n\t\t    entries     = _._entries,\r\n\t\t    comparer    = _._keyComparer,\r\n\t\t    compareKey  = comparer(key),\r\n\t\t    hash        = getHashString(compareKey),\r\n\t\t    bucket      = _._getBucket(hash),\r\n\t\t    bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\r\n\r\n\t\t// Entry exits? Delete or update\r\n\t\tif(bucketEntry)\r\n\t\t{\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tlet x = bucket.removeNode(bucketEntry),\r\n\t\t\t\t    y = entries.removeNode(bucketEntry.value);\r\n\r\n\t\t\t\tif(x && !bucket.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t\t\tbucket = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(x!==y) throw \"Entries and buckets are out of sync.\";\r\n\r\n\t\t\t\tif(x) return true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We don't expose the internal hash entries so replacing the value is ok.\r\n\t\t\t\tvar old = bucketEntry.value.value;\r\n\t\t\t\tbucketEntry.value.value = value;\r\n\t\t\t\treturn !areEqual(value, old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse if(value!==VOID0)\r\n\t\t{\r\n\t\t\tif(!bucket) bucket = _._getBucket(hash, true);\r\n\t\t\tlet entry = new HashEntry(key, value);\r\n\t\t\tentries.addNode(entry);\r\n\t\t\tbucket.addNode(new HashEntry(key, entry));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar buckets = _._buckets;\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t{\r\n\t\t\t\tlet bucket = buckets[key];\r\n\t\t\t\tdelete buckets[key];\r\n\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _._entries.clear();\r\n\t}\r\n\r\n\t/*\r\n\t * Note: super.getEnumerator() works perfectly well,\r\n\t * but enumerating the internal linked node list is much more efficient.\r\n\t */\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar ver:number, currentEntry:IHashEntry<TKey, TValue>;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tver = _._version;\r\n\t\t\t\tcurrentEntry = _._entries.first;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.assertVersion(ver);\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar result:TKey[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar result:TValue[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n\r\nexport default Dictionary;"]}