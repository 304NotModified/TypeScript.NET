{"version":3,"sources":["System/Collections/Dictionaries/DictionaryBase.ts"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/DictionaryBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {forEach} from \"../Enumeration/Enumerator\";\r\nimport {CollectionBase} from \"../CollectionBase\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../../Exceptions/InvalidOperationException\";\r\nimport {extractKeyValue} from \"../../KeyValueExtract\";\r\nimport {IKeyValuePair, KeyValuePair} from \"../../KeyValuePair\";\r\nimport {IDictionary} from \"./IDictionary\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"../IEnumerableOrArray\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void(0);\r\n\r\n// Design Note: Should DictionaryAbstractBase be IDisposable?\r\nexport abstract class DictionaryBase<TKey, TValue>\r\nextends CollectionBase<IKeyValuePair<TKey,TValue>> implements IDictionary<TKey, TValue>\r\n{\r\n\tconstructor(source?:IEnumerableOrArray<IKeyValuePair<TKey,TValue>>)\r\n\t{\r\n\t\tsuper(source);\r\n\t}\r\n\r\n\r\n\tprotected _onValueModified(key:TKey, value:TValue, old:TValue):void\r\n\t{\r\n\t}\r\n\r\n\tprotected _addInternal(item:KeyValuePair<TKey, TValue>):boolean\r\n\t{\r\n\t\tif(!item)\r\n\t\t\tthrow new ArgumentNullException(\r\n\t\t\t\t'item', 'Dictionaries must use a valid key/value pair. \\'' + item + '\\' is not allowed.'\r\n\t\t\t);\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>this.addByKeyValue(key, value));\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar count = 0;\r\n\r\n\t\tfor(let key of _.keys)\r\n\t\t{\r\n\t\t\tif(_.removeByKey(key)) count++;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tcontains(item:KeyValuePair<TKey, TValue>):boolean\r\n\t{\r\n\t\t// Should never have a null object in the collection.\r\n\t\tif(!item || !this.getCount()) return false;\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\t// Leave as variable for debugging...\r\n\t\t\t\tlet v = this.getValue(key);\r\n\t\t\t\treturn areEqual(value, v);\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\tprotected _removeInternal(item:IKeyValuePair<TKey, TValue>|[TKey,TValue]):number\r\n\t{\r\n\t\tif(!item) return 0;\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\t// Leave as variable for debugging...\r\n\t\t\t\tlet v = this.getValue(key);\r\n\t\t\t\treturn (areEqual(value, v) && this.removeByKey(key))\r\n\t\t\t\t\t? 1 : 0;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/////////////////////////////////////////\r\n\t// IDictionary<TKey,TValue>\r\n\t/////////////////////////////////////////\r\n\r\n\tprotected abstract getKeys():TKey[];\r\n\r\n\tget keys():TKey[] { return this.getKeys(); }\r\n\r\n\tprotected abstract getValues():TValue[];\r\n\r\n\tget values():TValue[] { return this.getValues(); }\r\n\r\n\r\n\taddByKeyValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\tif(value===VOID0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot add 'undefined' as a value.\");\r\n\r\n\t\tconst _ = this;\r\n\t\tif(_.containsKey(key))\r\n\t\t{\r\n\t\t\tvar ex = new InvalidOperationException(\"Adding a key/value when the key already exists.\");\r\n\t\t\tex.data['key'] = key;\r\n\t\t\tex.data['value'] = value;\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\r\n\t\treturn _.setValue(key, value);\r\n\t}\r\n\r\n\tprotected abstract _getEntry(key:TKey):IKeyValuePair<TKey,TValue>;\r\n\r\n\tabstract getValue(key:TKey):TValue;\r\n\r\n\tprotected abstract _setValueInternal(key:TKey, value:TValue):boolean;\r\n\r\n\tsetValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\t// setValue shouldn't need to worry about recursion...\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\tvar changed = false, old = _.getValue(key); // get the old value here and pass to internal.\r\n\t\tif(!areEqual(value, old) && _._setValueInternal(key, value))\r\n\t\t{\r\n\t\t\tchanged = true;\r\n\t\t\t_._onValueModified(key, value, old)\r\n\t\t}\r\n\r\n\t\t_._signalModification(changed);\r\n\t\treturn changed;\r\n\t}\r\n\r\n\tcontainsKey(key:TKey):boolean\r\n\t{\r\n\t\treturn !!this._getEntry(key);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tvar e                           = this.getEnumerator(), equal:(\r\n\t\t\ta:any, b:any,\r\n\t\t\tstrict?:boolean) => boolean = areEqual;\r\n\r\n\t\twhile(e.moveNext())\r\n\t\t{\r\n\t\t\tif(equal(e.current, value, true))\r\n\t\t\t{\r\n\t\t\t\te.dispose();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveByKey(key:TKey):boolean\r\n\t{\r\n\t\treturn this.setValue(key, VOID0);\r\n\t}\r\n\r\n\tremoveByValue(value:TValue):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar count = 0, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key of _.getKeys())\r\n\t\t{\r\n\t\t\tif(equal(_.getValue(key), value, true))\r\n\t\t\t{\r\n\t\t\t\t_.removeByKey(key);\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\timportEntries(pairs:IEnumerableOrArray<KeyValuePair<TKey, TValue>>):number\r\n\t{\r\n\t\t// Allow piping through to trigger onModified properly.\r\n\t\treturn super.importEntries(<any>pairs);\r\n\t}\r\n\r\n\tprotected _importEntries(pairs:IEnumerableOrArray<KeyValuePair<TKey, TValue>>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!pairs) return 0;\r\n\t\tlet changed:number = 0;\r\n\t\tforEach(pairs,\r\n\t\t\tpair=>extractKeyValue(pair, (key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_._setValueInternal(key, value))\r\n\t\t\t\t\tchanged++;\r\n\t\t\t})\r\n\t\t);\r\n\t\treturn changed;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar ver:number, keys:TKey[], len:number, i = 0;\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tver = _._version; // Track the version since getKeys is a copy.\r\n\t\t\t\tkeys = _.getKeys();\r\n\t\t\t\tlen = keys.length;\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.assertVersion(ver);\r\n\r\n\t\t\t\twhile(i<len)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar key = keys[i++], value = _.getValue(key);\r\n\t\t\t\t\tif(value!==VOID0) // Still valid?\r\n\t\t\t\t\t\treturn yielder.yieldReturn({key: key, value: value});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport default DictionaryBase;"]}