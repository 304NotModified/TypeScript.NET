{"version":3,"sources":["System/Collections/Array/Sort/quickSort.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;IAcH,mBACC,MAAU,EACV,GAAc,EACd,IAA2C;QAD3C,mBAAc,GAAd,OAAc;QACd,oBAA2C,GAA3C,OAAc,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAE3C,EAAE,CAAA,CAAC,CAAC,MAAM,CAAC;YAAC,MAAM,IAAI,6CAAqB,CAAC,QAAQ,CAAC,CAAC;QACtD,EAAE,CAAA,CAAC,GAAG,GAAC,IAAI,CAAC,CACZ,CAAC;YAEA,IAAI,IAAM,EAAE,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC;YAEpD,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1B,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAEpB,IAAI,CAAC,GAAG,GAAG,CAAC;YACZ,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAC,IAAI,EAAE,CAAC,EAAE,EAC5B,CAAC;gBACA,EAAE,CAAA,CAAC,MAAM,CAAC,CAAC,CAAC,GAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAC1B,CAAC;oBACA,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACjB,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACjB,CAAC,EAAE,CAAC;gBACL,CAAC;YACF,CAAC;YAED,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAEpB,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IApCD,iCAoCC,CAAA","file":"System/Collections/Array/Sort/quickSort.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Special thanks to: Sebastian Belmar\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Primitive} from \"../../../Primitive\";\r\nimport {ArgumentNullException} from \"../../../Exceptions/ArgumentNullException\";\r\n\r\n/**\r\n * Quick sort O (n log n)\r\n * Warning: Uses recursion.\r\n * @param target\r\n * @param low\r\n * @param high\r\n * @returns {Array}\r\n */\r\nexport function quickSort<T extends Primitive>(\r\n\ttarget:T[],\r\n\tlow:number = 0,\r\n\thigh:number = target && (target.length - 1)):T[]\r\n{\r\n\tif(!target) throw new ArgumentNullException(\"target\");\r\n\tif(low<high)\r\n\t{\r\n\t\t// Partition first...\r\n\t\tvar swap:T, pivotIndex = Math.floor((low + high)/2);\r\n\r\n\t\tswap = target[pivotIndex];\r\n\t\ttarget[pivotIndex] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tvar i = low;\r\n\t\tfor(let j = low; j<high; j++)\r\n\t\t{\r\n\t\t\tif(target[j]<target[high])\r\n\t\t\t{\r\n\t\t\t\tswap = target[i];\r\n\t\t\t\ttarget[i] = target[j];\r\n\t\t\t\ttarget[j] = swap;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswap = target[i];\r\n\t\ttarget[i] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tquickSort(target, low, i - 1);\r\n\t\tquickSort(target, i + 1, high);\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n"]}