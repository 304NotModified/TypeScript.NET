{"version":3,"sources":["System/Collections/Array/Dispatch.ts"],"names":[],"mappings":";;;IAgBA;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,gBACC,SAAiC,EACjC,OAAS,EAAE,IAAkC;QAE7C,EAAE,CAAA,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,CAAC,CACjC,CAAC;YACA,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EACjD,CAAC;gBACA,IAAI,EAAE,GAAY,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC/B,EAAE,CAAA,CAAC,CAAC,EAAE,CAAC;oBAAC,QAAQ,CAAC,CAAC,oBAAoB;gBACtC,IACA,CAAC;oBACA,EAAE,CAAC,OAAO,CAAC,CAAC;gBACb,CACA;gBAAA,KAAK,CAAA,CAAC,EAAE,CAAC,CACT,CAAC;oBACA,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;wBACR,MAAM,EAAE,CAAC;oBACV,IAAI,CAAC,EAAE,CAAA,CAAC,YAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBAC7B,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACd,CAAC;YACF,CAAC;QACF,CAAC;IACF,CAAC;;IAED;;;;;;;;OAQG;IACH,gBACC,SAAqC,EACrC,OAAS,EAAE,IAAkC;QAG7C,EAAE,CAAA,CAAC,CAAC,SAAS,CAAC;YAAC,MAAM,CAAM,SAAS,CAAC;QACrC,sCAAsC;QACtC,IAAM,MAAM,GAAS,cAAI,CAAC,SAAS,CAAC,CAAC;QACrC,EAAE,CAAA,CAAC,SAAS,CAAC,MAAM,CAAC,CACpB,CAAC;YAEA,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAC9C,CAAC;gBACA,IAAI,EAAE,GAAY,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5B,IACA,CAAC;oBACA,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,oBAAoB;0BAChC,EAAE,CAAC,OAAO,CAAC;0BACX,KAAK,CAAC;gBACV,CACA;gBAAA,KAAK,CAAA,CAAC,EAAE,CAAC,CACT,CAAC;oBACA,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;oBAClB,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;wBACR,MAAM,EAAE,CAAC;oBACV,IAAI,CAAC,EAAE,CAAA,CAAC,YAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBAC7B,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACd,CAAC;YACF,CAAC;QACF,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAEf,CAAC;;IAED;;;;;;;OAOG;IACH,kBACC,SAAiC,EACjC,OAAS,EAAE,IAAkC;QAE7C,MAAM,CAAC,cAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;;;;;;;;;;;;;YA9GK,KAAK,GAAa,KAAK,CAAC,CAAC;iCAgHhB,QAAQ;QAAC,CAAC","file":"Dispatch.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../../Types\";\r\nimport {copy} from \"./Utility\";\r\nimport {IArray} from \"./IArray\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport interface DispatchErrorHandler\r\n{\r\n\t(ex:any, index:number):void\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n *\r\n * While dispatching:\r\n * * This is an unsafe method if by chance any of the listeners modify the array.\r\n * * It cannot prevent changes to the payload.\r\n *\r\n * Improving safety:\r\n * * Only use a local array that isn't exposed to the listeners.\r\n * * Use the dispatch method instead as it makes a copy of the listeners array.\r\n * * Freeze the listeners array so it can't be modified.\r\n * * Freeze the payload.\r\n *\r\n * Specifying trap will catch any errors and pass them along if trap is a function.\r\n * A payload is used instead of arguments for easy typing.\r\n *\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n */\r\nexport function unsafe<T>(\r\n\tlisteners:IArray<Selector<T,any>>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n{\r\n\tif(listeners && listeners.length)\r\n\t{\r\n\t\tfor(let i = 0, len = listeners.length; i<len; i++)\r\n\t\t{\r\n\t\t\tlet fn:Function = listeners[i];\r\n\t\t\tif(!fn) continue; // Ignore null refs.\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tfn(payload);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tif(!trap)\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\ttrap(ex, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n * Returns the results in an array that matches the indexes of the listeners.\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n * @returns {any}\r\n */\r\nexport function mapped<T,TResult>(\r\n\tlisteners:IArray<Selector<T,TResult>>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):TResult[]\r\n{\r\n\r\n\tif(!listeners) return <any>listeners;\r\n\t// Reuse the copy as the array result.\r\n\tconst result:any[] = copy(listeners);\r\n\tif(listeners.length)\r\n\t{\r\n\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tlet fn:Function = result[i];\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tresult[i] = fn // Ignore null refs.\r\n\t\t\t\t\t? fn(payload)\r\n\t\t\t\t\t: VOID0;\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = VOID0;\r\n\t\t\t\tif(!trap)\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\ttrap(ex, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n * Makes a copy of the listeners before calling dispatchUnsafe.\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n */\r\nexport function dispatch<T>(\r\n\tlisteners:IArray<Selector<T,any>>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n{\r\n\tunsafe(copy(listeners), payload, trap);\r\n}\r\n\r\nexport default dispatch;"]}