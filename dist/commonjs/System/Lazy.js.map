{"version":3,"sources":["System/Lazy.ts"],"names":["Lazy","Lazy.constructor","Lazy.reset","Lazy.getValue","Lazy._onDispose","Lazy.equals","Lazy.valueEquals","Lazy.isValueCreated","Lazy.canReset","Lazy.value"],"mappings":";;;;;;;;;;;;;;;;;;;;wCAO2B,6BAA6B;;;;IAExD,IAAA;cAAA,IAAA;;AAOCA,aAPD,IAAA,CAOqBA,QAAgBA,EAAAA;8BAPrC,IAAA;;AASEC,mCATF,IAAA,6CASUA;AAFWA,YAAAA,CAAAA,QAAQA,GAARA,QAAQA,CAAQA;AAGnCA,YAAIA,CAACA,qBAAqBA,GAAGA,MAAMA,CAACA;KACpCA;;iBAXF,IAAA;;eAyBMD,eAACA,kBAA2BA,EAAAA;AAChCE,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AAEbA,gBAAGA,kBAAkBA,EACpBA,CAACA,CAACA,eAAeA,EAAEA,CAACA;AAErBA,gBAAGA,CAACA,CAACA,CAACA,QAAQA,EAAEA;AACfA,oBAAGA,kBAAkBA,EACpBA,MAAMA,IAAIA,KAAKA,CAACA,iEAAiEA,CAACA,CAACA;AACpFA,uBAAOA,KAAKA,CAACA;aACbA,MACIA;AACJA,iBAACA,CAACA,eAAeA,GAAGA,KAAKA,CAACA;AAC1BA,iBAACA,CAACA,MAAMA,GAAGA,IAAIA,CAACA;AAChBA,uBAAOA,IAAIA,CAACA;aACZA;SACDA;;;eAOOF,kBAACA,qBAA8BA,EAAAA;AAEtCG,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AAEbA,aAACA,CAACA,eAAeA,EAAEA,CAACA;AAEpBA,gBAAIA;AACHA,oBAAGA,CAACA,CAACA,CAACA,eAAeA,IAAIA,CAACA,CAACA,QAAQA,EAAEA;AACpCA,wBAAIA,CAACA,GAAGA,CAACA,CAACA,QAAQA,EAAEA,CAACA;AACrBA,qBAACA,CAACA,MAAMA,GAAGA,CAACA,CAACA;AACbA,qBAACA,CAACA,eAAeA,GAAGA,IAAIA,CAACA;AACzBA,2BAAOA,CAACA,CAACA;iBACTA;aACDA,SACOA;AACPA,oBAAGA,qBAAqBA,EACvBA,CAACA,CAACA,QAAQA,GAAGA,IAAIA,CAACA;aACnBA;AAEDA,mBAAOA,CAACA,CAACA,MAAMA,CAACA;SAEhBA;;;eAGmBH,sBAAAA;AACnBI,gBAAIA,CAACA,QAAQA,GAAGA,IAAIA,CAACA;AACrBA,gBAAIA,CAACA,MAAMA,GAAGA,IAAIA,CAACA;SACnBA;;;eAEKJ,gBAACA,KAAaA,EAAAA;AAEnBK,mBAAOA,IAAIA,IAAEA,KAAKA,CAACA;SACnBA;;;eAEUL,qBAACA,KAAaA,EAAAA;AAExBM,mBAAOA,IAAIA,CAACA,MAAMA,CAACA,KAAKA,CAACA,IAAIA,IAAIA,CAACA,KAAKA,KAAGA,KAAKA,CAACA,KAAKA,CAACA;SACtDA;;;aAxEiBN,eAAAA;AAEjBO,mBAAOA,IAAIA,CAACA,eAAeA,CAACA;SAC5BA;;;aAGWP,eAAAA;AAEXQ,mBAAOA,CAACA,IAAIA,CAACA,WAAWA,IAAIA,CAACA,CAAEA,IAAIA,CAACA,QAAQA,AAACA,CAACA;SAC9CA;;;aAqBQR,eAAAA;AAERS,mBAAOA,IAAIA,CAACA,QAAQA,EAAEA,CAACA;SACvBA;;;WA9CF,IAAA;;;qBAAA,IAAA","file":"System/Lazy.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ILazy.d.ts\"/>\r\n///<reference path=\"FunctionTypes.d.ts\"/>\r\nimport DisposableBase from './Disposable/DisposableBase';\r\n\r\nexport default\r\nclass Lazy<T> extends DisposableBase implements ILazy<T>\r\n{\r\n\r\n\tprivate _isValueCreated:boolean;\r\n\tprivate _value:T;\r\n\r\n\tconstructor(private _closure:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn this._isValueCreated;\r\n\t}\r\n\r\n\t// Adding a 'resettable' mechanism allows for simply resetting a lazy instead of re-instantiating a new one.\r\n\tget canReset():boolean\r\n\t{\r\n\t\treturn !this.wasDisposed && !!(this._closure);\r\n\t}\r\n\r\n\t// Returns true if successfully reset.\r\n\treset(throwIfCannotReset?:boolean):boolean {\r\n\t\tvar _ = this;\r\n\r\n\t\tif(throwIfCannotReset)\r\n\t\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!_._closure) {\r\n\t\t\tif(throwIfCannotReset)\r\n\t\t\t\tthrow new Error(\"Cannot reset.  This Lazy has already de-referenced its closure.\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_._isValueCreated = false;\r\n\t\t\t_._value = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tgetValue(clearClosureReference?:boolean):T {\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\ttry {\r\n\t\t\tif(!_._isValueCreated && _._closure) {\r\n\t\t\t\tvar v = _._closure();\r\n\t\t\t\t_._value = v;\r\n\t\t\t\t_._isValueCreated = true;\r\n\t\t\t\treturn v;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tif(clearClosureReference)\r\n\t\t\t\t_._closure = null;\r\n\t\t}\r\n\r\n\t\treturn _._value;\r\n\r\n\t}\r\n\r\n\r\n\tprotected _onDispose():void {\r\n\t\tthis._closure = null;\r\n\t\tthis._value = null;\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n}\r\n\r\n"]}