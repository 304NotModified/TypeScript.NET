{"version":3,"sources":["System/Validation/ValidationResult.ts"],"names":["ValidationResult","ValidationResult.constructor","ValidationResult.equals","ValidationResult.invalid","ValidationResult.valid"],"mappings":";;;;;;;;;;;;;;;;AAQA,IAAM,KAAK,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC;;IAKzC,gBAAA;AAOCA,aAPD,gBAAA,GAUwBA;YAFfA,OAAOA,yDAAWA,KAAKA;YACvBA,OAAOA,yDAAUA,IAAIA;YACrBA,IAAIA,yDAAOA,IAAIA;;8BAVxB,gBAAA;;AAQSC,YAAAA,CAAAA,OAAOA,GAAPA,OAAOA,CAAgBA;AACvBA,YAAAA,CAAAA,OAAOA,GAAPA,OAAOA,CAAcA;AACrBA,YAAAA,CAAAA,IAAIA,GAAJA,IAAIA,CAAWA;AAItBA,cAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;KACpBA;;iBAfF,gBAAA;;eAoBOD,gBAACA,KAAuBA,EAAAA;AAE7BE,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,mBAAOA,CAACA,CAACA,OAAOA,KAAGA,KAAKA,CAACA,OAAOA,IAC5BA,CAACA,CAACA,OAAOA,IAAEA,CAACA,CAACA,OAAOA,IACpBA,CAACA,CAACA,IAAIA,IAAEA,CAACA,CAACA,IAAIA,CAACA;SACnBA;;;eAcaF,iBACbA,OAAcA,EACCA;gBAAfA,IAAIA,yDAAOA,IAAIA;;AAEfG,mBAAOA,IAAIA,gBAAgBA,CAACA,KAAKA,EAAEA,OAAOA,EAAEA,IAAIA,CAACA,CAACA;SAClDA;;;aAZeH,eAAAA;AACfI,mBAAOA,KAAKA,CAACA;SACbA;;;WAnCF,gBAAA;;;qBAAA,gBAAA","file":"System/Validation/ValidationResult.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/// <reference path=\"IValidationResult.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n\r\nconst valid = new ValidationResult(true);\r\n\r\n/**\r\n * A class for generating responses to validation.\r\n */\r\nexport default\r\nclass ValidationResult\r\nimplements IValidationResult, IEquatable<IValidationResult>\r\n{\r\n\t/**\r\n\t * Allows for rare cases that ValidationResult.valid and ValidationResult.invalid() don't cover.\r\n\t */\r\n\tconstructor(\r\n\t\tpublic isValid:boolean = false,\r\n\t\tpublic message:string = null,\r\n\t\tpublic data:any = null)\r\n\t{\r\n\r\n\t\t// Readonly...\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Allows for comparing another IValidationResult to see if they are equal.\r\n\t */\r\n\tequals(other:IValidationResult):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.isValid===other.isValid\r\n\t\t\t&& _.message==_.message\r\n\t\t\t&& _.data==_.data;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Represents a single/shared instance of a valid result.\r\n\t * Allows for returning this instance like you would return 'true'.\r\n\t */\r\n\tstatic get valid():IValidationResult {\r\n\t\treturn valid;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for easily creating an invalid result.\r\n\t */\r\n\tstatic invalid(\r\n\t\tmessage:string,\r\n\t\tdata:any = null):IValidationResult\r\n\t{\r\n\t\treturn new ValidationResult(false, message, data);\r\n\t}\r\n}\r\n"]}