{"version":3,"sources":["System/Observable/SubscribableBase.ts","System/Observable/SubscribableBase.js"],"names":[],"mappings":";;;;;;AASA;;;;;;AAEA,IAAA,mBAAA,QAA2B,+BAA3B,CAAA;AACA,IAAY,iBAAc,QAAM,uBAAN,CAAd;AACZ,IAAA,iBAAA,QAAyB,gBAAzB,CAAA;;IAIA;AAeC,aAfD,gBAeC,GAAA;8BAfD,kBAeC;;AAEC,aAAK,eAAL,GACG,IAAI,iBAAA,OAAA,EADP,CAFD;KAAA;;iBAfD;;0CAQ0B;AAExB,mBAAO,KACL,eADK,CAEL,GAFK,CAED;uBAAM,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,UAAX;aAApB,CAFN,CAFwB;;;;uCAcxB,YAAsB;AAEtB,mBAAO,KACL,eADK,CAEL,IAFK,CAEA;uBAAG,EAAE,KAAF,CAAQ,UAAR,KAAqB,UAArB;aAAH,CAFP,CAFsB;;;;kCAQb,YAAsB;AAE/B,gBAAI,IAAI,IAAJ,CAF2B;AAG/B,gBAAI,IAAI,EAAE,cAAF,CAAiB,UAAjB,CAAJ,CAH2B;AAI/B,gBAAG,CAAH,EACC,OAAO,EAAE,KAAF,CADR;AAGA,gBAAI,IAAI,IAAI,eAAA,OAAA,CAAa,CAAjB,EAAoB,UAApB,CAAJ,CAP2B;AAQ/B,cAAE,eAAF,CAAkB,OAAlB,CAA0B;AACzB,uBAAO,CAAP;AACA,0BAAU,IAAV,EAAgB,MAAM,IAAN;aAFjB,EAR+B;AAa/B,mBAAO,CAAP,CAb+B;;;;oCAgBpB,YAAsB;AAEjC,gBAAI,IAAI,IAAJ,CAF6B;AAGjC,gBAAI,IAAI,EAAE,cAAF,CAAiB,UAAjB,CAAJ,CAH6B;AAIjC,gBAAG,CAAH,EACA;AACC,oBAAI,IAAI,EAAE,KAAF,CADT;AAEC,kBAAE,eAAF,CAAkB,UAAlB,CAA6B,CAA7B,EAFD;AAGC,kBAAE,OAAF,GAHD;aADA;;;;0CAQ0D;gBAAjC,0EAA4B,qBAAK;;AAE1D,gBAAI,IAAI,IAAJ;gBAAU,KAAK,EAAE,eAAF,CAFuC;AAG1D,gBAAI,IAAI,GAAG,GAAH,CAAO;uBAAG,EAAE,KAAF;aAAH,CAAX,CAHsD;AAI1D,gBAAI,IAAI,oBAAoB,EAAE,GAAF,CAAM;uBAAG,EAAE,UAAF;aAAH,CAA1B,GAA6C,IAA7C,CAJkD;AAK1D,eAAG,KAAH,GAL0D;AAO1D,2BAAe,YAAf,CAA4B,CAA5B,EAP0D;AAS1D,mBAAO,CAAP,CAT0D;;;;yCAY7C;AAEb,iBAAK,eAAL,GAFa;;;;kCAKP;AAEN,iBAAK,eAAL,GAFM;;;;WA3ER;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AC6CA,QAAQ,OAAR,GAAkB,gBAAlB","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport LinkedNodeList from \"../Collections/LinkedNodeList\";\r\nimport * as DisposeUtility from \"../Disposable/Utility\";\r\nimport Subscription from \"./Subscription\";\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\n\r\nexport default\r\nclass SubscribableBase<TSubscriber>\r\nimplements IDisposable\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]\r\n\t{\r\n\t\treturn this\r\n\t\t\t.__subscriptions\r\n\t\t\t.map(node=>node.value && node.value.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.__subscriptions\r\n\t\t\t= new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>\r\n\t{\r\n\t\treturn this\r\n\t\t\t.__subscriptions\r\n\t\t\t.find(n=>n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_.__subscriptions.addNode({\r\n\t\t\tvalue: s,\r\n\t\t\tprevious: null, next: null\r\n\t\t});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\t_.__subscriptions.removeNode(n);\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]\r\n\t{\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tvar s = _s.map(n=>n.value);\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tDisposeUtility.disposeThese(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tdispose()\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n'use strict';\nconst LinkedNodeList_1 = require(\"../Collections/LinkedNodeList\");\nconst DisposeUtility = require(\"../Disposable/Utility\");\nconst Subscription_1 = require(\"./Subscription\");\nclass SubscribableBase {\n    constructor() {\n        this.__subscriptions\n            = new LinkedNodeList_1.default();\n    }\n    _getSubscribers() {\n        return this\n            .__subscriptions\n            .map(node => node.value && node.value.subscriber);\n    }\n    _findEntryNode(subscriber) {\n        return this\n            .__subscriptions\n            .find(n => n.value.subscriber === subscriber);\n    }\n    subscribe(subscriber) {\n        var _ = this;\n        var n = _._findEntryNode(subscriber);\n        if (n)\n            return n.value;\n        var s = new Subscription_1.default(_, subscriber);\n        _.__subscriptions.addNode({\n            value: s,\n            previous: null, next: null\n        });\n        return s;\n    }\n    unsubscribe(subscriber) {\n        var _ = this;\n        var n = _._findEntryNode(subscriber);\n        if (n) {\n            var s = n.value;\n            _.__subscriptions.removeNode(n);\n            s.dispose();\n        }\n    }\n    _unsubscribeAll(returnSubscribers = false) {\n        var _ = this, _s = _.__subscriptions;\n        var s = _s.map(n => n.value);\n        var u = returnSubscribers ? s.map(o => o.subscriber) : null;\n        _s.clear();\n        DisposeUtility.disposeThese(s);\n        return u;\n    }\n    unsubscribeAll() {\n        this._unsubscribeAll();\n    }\n    dispose() {\n        this._unsubscribeAll();\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SubscribableBase;\n"]}