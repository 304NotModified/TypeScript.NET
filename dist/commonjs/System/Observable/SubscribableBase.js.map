{"version":3,"sources":["System/Observable/SubscribableBase.ts"],"names":["SubscribableBase","SubscribableBase.constructor","SubscribableBase._getSubscribers","SubscribableBase._findEntryNode","SubscribableBase.subscribe","SubscribableBase.unsubscribe","SubscribableBase._unsubscribeAll","SubscribableBase.unsubscribeAll","SubscribableBase.dispose"],"mappings":";;;;;;;;;;;;;;;;;;;;qCAUuB,2BAA2B;;;;iCAClB,uBAAuB;;IAA3C,cAAc;;4BACD,gBAAgB;;;;IAIzC,gBAAA;AAcCA,aAdD,gBAAA,GAcCA;8BAdD,gBAAA;;AAgBEC,YAAIA,CAACA,eAAeA,GAAGA,wCAA2CA,CAACA;KACnEA;;iBAjBF,gBAAA;;eAQ0BD,2BAAAA;AACxBE,mBAAOA,IAAIA,CAACA,eAAeA,CACzBA,OAAOA,EAAEA,CACTA,GAAGA,CAACA,UAAAA,CAACA;uBAAEA,CAACA,CAACA,UAAUA;aAAAA,CAACA,CAACA;SACvBA;;;eAOqBF,wBACrBA,UAAsBA,EAAAA;AAEtBG,gBAAIA,IAAIA,GAAGA,IAAIA,CAACA,eAAeA,CAACA,KAAKA,CAACA;AACtCA,mBAAMA,IAAIA,EACVA;AACCA,oBAAGA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,KAAGA,UAAUA,EACrCA;AACCA,0BAAMA;iBACNA,MAEDA;AACCA,wBAAIA,GAAGA,IAAIA,CAACA,IAAIA,CAACA;iBACjBA;aACDA;AAEDA,mBAAOA,IAAIA,CAACA;SACZA;;;eAGQH,mBAACA,UAAsBA,EAAAA;AAE/BI,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,gBAAIA,CAACA,GAAGA,CAACA,CAACA,cAAcA,CAACA,UAAUA,CAACA,CAACA;AACrCA,gBAAGA,CAACA,EACHA,OAAOA,CAACA,CAACA,KAAKA,CAACA;AAEhBA,gBAAIA,CAACA,GAAGA,8BAAiBA,CAACA,EAAEA,UAAUA,CAACA,CAACA;AACxCA,aAACA,CAACA,eAAeA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;AAEzBA,mBAAOA,CAACA,CAACA;SACTA;;;eAEUJ,qBAACA,UAAsBA,EAAAA;AAEjCK,gBAAIA,CAACA,GAAGA,IAAIA,CAACA,cAAcA,CAACA,UAAUA,CAACA,CAACA;AACxCA,gBAAGA,CAACA,EACJA;AACCA,oBAAIA,CAACA,GAAGA,CAACA,CAACA,KAAKA,CAACA;AAChBA,iBAACA,CAACA,MAAMA,EAAEA,CAACA;AACXA,iBAACA,CAACA,OAAOA,EAAEA,CAACA;aACZA;SACDA;;;eAEwBL,2BAAkCA;gBAAjCA,iBAAiBA,yDAAWA,KAAKA;;AAC1DM,gBAAIA,CAACA,GAAGA,IAAIA;gBAAEA,EAAEA,GAAGA,CAACA,CAACA,eAAeA,CAACA;AACrCA,gBAAIA,CAACA,GAAGA,EAAEA,CAACA,OAAOA,EAAEA,CAACA;AACrBA,gBAAIA,CAACA,GAAGA,iBAAiBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,UAAAA,CAACA;uBAAEA,CAACA,CAACA,UAAUA;aAAAA,CAACA,GAAGA,IAAIA,CAACA;AAC1DA,cAAEA,CAACA,KAAKA,EAAEA,CAACA;AAEXA,0BAAcA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA;AAE/BA,mBAAOA,CAACA,CAACA;SACTA;;;eAEaN,0BAAAA;AACbO,gBAAIA,CAACA,eAAeA,EAAEA,CAACA;SACvBA;;;eAEMP,mBAAAA;AACNQ,gBAAIA,CAACA,eAAeA,EAAEA,CAACA;SACvBA;;;WAhFF,gBAAA;;;qBAAA,gBAAA","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\n\r\nimport LinkedList from '../Collections/LinkedList';\r\nimport * as DisposeUtility from '../Disposable/Utility'\r\nimport Subscription from './Subscription';\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\n\r\nexport default\r\nclass SubscribableBase<TSubscriber>\r\nimplements IDisposable\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedList<Subscription<TSubscriber>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[] {\r\n\t\treturn this.__subscriptions\r\n\t\t\t.toArray()\r\n\t\t\t.map(s=>s.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.__subscriptions = new LinkedList<Subscription<TSubscriber>>();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedListNode<Subscription<TSubscriber>>\r\n\t{\r\n\t\tvar node = this.__subscriptions.first;\r\n\t\twhile(node)\r\n\t\t{\r\n\t\t\tif(node.value.subscriber===subscriber)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnode = node.next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_.__subscriptions.add(s);\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tvar n = this._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\tn.remove();\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[] {\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tvar s = _s.toArray();\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tDisposeUtility.disposeThese(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tdispose() {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n}\r\n"]}