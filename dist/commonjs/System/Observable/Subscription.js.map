{"version":3,"sources":["System/Observable/Subscription.ts"],"names":["Subscription","Subscription.constructor","Subscription.dispose","Subscription.subscriber","Subscription.wasDisposed"],"mappings":";;;;;;;;;;;;;;;;;;;IAeA,YAAA;AAGCA,aAHD,YAAA,CAIUA,aAA+BA,EAC/BA,WAAcA,EAAAA;8BALxB,YAAA;;AAIUC,YAAAA,CAAAA,aAAaA,GAAbA,aAAaA,CAAkBA;AAC/BA,YAAAA,CAAAA,WAAWA,GAAXA,WAAWA,CAAGA;AAEtBA,YAAIA,CAACA,aAAaA,IAAIA,CAACA,WAAWA,EACjCA,MAAMA,6CAA6CA,CAACA;KACrDA;;iBATF,YAAA;;eAmCQD,mBAAAA;AAENE,gBAAIA,UAAUA,GAAGA,IAAIA,CAACA,UAAUA,CAACA;AACjCA,gBAAIA,YAAYA,GAAGA,IAAIA,CAACA,aAAaA,CAACA;AAGtCA,gBAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA;AACxBA,gBAAIA,CAACA,aAAaA,GAAGA,IAAIA,CAACA;AAG1BA,gBAAIA,UAAUA,IAAIA,YAAYA,EAC9BA;AACCA,4BAAYA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA;aACrCA;SACDA;;;aAtCaF,eAAAA;AACbG,mBAAOA,IAAIA,CAACA,WAAWA,CAACA;SACxBA;;;aAiBcH,eAAAA;AAEdI,mBAAOA,CAACA,IAAIA,CAACA,aAAaA,IAAIA,CAACA,IAAIA,CAACA,WAAWA,CAACA;SAChDA;;;WAjCF,YAAA;;;qBAAA,YAAA","file":"System/Observable/Subscription.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n\r\n///<reference path=\"ISubscribable.d.ts\"/>\r\n///<reference path=\"IObservable.d.ts\"/>\r\n///<reference path=\"../Disposable/IDisposableAware.d.ts\"/>\r\n\r\n/**\r\n * A registration that an IObservable returns that can be disposed in order to cancel sending data to the observer.\r\n */\r\nexport default\r\nclass Subscription<T> implements IDisposableAware\r\n{\r\n\tconstructor(\r\n\t\tprivate _subscribable: ISubscribable<T>,\r\n\t\tprivate _subscriber: T)\r\n\t{\r\n\t\tif (!_subscribable || !_subscriber)\r\n\t\t\tthrow 'Subscribable and subscriber cannot be null.';\r\n\t}\r\n\r\n\tget subscriber():T {\r\n\t\treturn this._subscriber;\r\n\t}\r\n\r\n\t/*\r\n\t In the case where we could possibly have the following happen:\r\n\r\n\t var u = observable.subscribe(observer);\r\n\r\n\t ...\r\n\r\n\t u.dispose(); // Should only be allowed to unsubscribe once and then it's useless.\r\n\r\n\t // Resubscribing creates a new instance.\r\n\t var x = observable.subscribe(observer);\r\n\r\n\t u.dispose(); // Calling this again should do nothing and 'x' should still work.\r\n\t */\r\n\r\n\tget wasDisposed(): boolean\r\n\t{\r\n\t\treturn !this._subscribable || !this._subscriber;\r\n\t}\r\n\r\n\tdispose(): void\r\n\t{\r\n\t\tvar subscriber = this.subscriber;\r\n\t\tvar subscribable = this._subscribable;\r\n\r\n\t\t// Release the references.  Will prevent potential unwanted recursion.\r\n\t\tthis._subscriber = null;\r\n\t\tthis._subscribable = null;\r\n\r\n\r\n\t\tif (subscriber && subscribable)\r\n\t\t{\r\n\t\t\tsubscribable.unsubscribe(subscriber);\r\n\t\t}\r\n\t}\r\n}\r\n"]}