{"version":3,"sources":["System/Diagnostics/Stopwatch.ts"],"names":["Stopwatch","Stopwatch.constructor","Stopwatch.record","Stopwatch.start","Stopwatch.stop","Stopwatch.reset","Stopwatch.lap","Stopwatch.isRunning","Stopwatch.currentLapMilliseconds","Stopwatch.currentLap","Stopwatch.elapsedMilliseconds","Stopwatch.elapsed","Stopwatch.getTimestampMilliseconds","Stopwatch.startNew","Stopwatch.measure"],"mappings":";;;;;;;;;;;;;;;;4BAKqB,kBAAkB;;;;IAGvC,SAAA;AAkBCA,aAlBD,SAAA,GAkBCA;8BAlBD,SAAA;;AAoBEC,YAAIA,CAACA,KAAKA,EAAEA,CAACA;KACbA;;iBArBF,SAAA;;eAqCOD,gBAACA,OAAkBA,EAAAA;AAGxBE,gBAAIA,CAACA,GAAGA,SAASA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;AACnCA,gBAAIA,CAACA,QAAQA,IAAIA,CAACA,CAACA,YAAYA,CAACA;AAChCA,mBAAOA,CAACA,CAACA;SACTA;;;eAEIF,iBAAAA;AAEJG,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,gBAAGA,CAACA,CAACA,CAACA,UAAUA,EAAEA;AACjBA,iBAACA,CAACA,eAAeA,GAAGA,SAASA,CAACA,wBAAwBA,EAAEA,CAACA;AACzDA,iBAACA,CAACA,UAAUA,GAAGA,IAAIA,CAACA;aACpBA;SACDA;;;eAEGH,gBAAAA;AAEHI,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,gBAAGA,CAACA,CAACA,UAAUA,EAAEA;AAChBA,iBAACA,CAACA,QAAQA,IAAIA,CAACA,CAACA,sBAAsBA,CAACA;AACvCA,iBAACA,CAACA,UAAUA,GAAGA,KAAKA,CAACA;aACrBA;SACDA;;;eAEIJ,iBAAAA;AAEJK,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,aAACA,CAACA,QAAQA,GAAGA,CAACA,CAACA;AACfA,aAACA,CAACA,UAAUA,GAAGA,KAAKA,CAACA;AACrBA,aAACA,CAACA,eAAeA,GAAGA,GAAGA,CAACA;SACxBA;;;eAIEL,eAAAA;AAEFM,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,gBAAGA,CAACA,CAACA,UAAUA,EAAEA;AAChBA,oBAAIA,CAACA,GAAGA,SAASA,CAACA,wBAAwBA,EAAEA,CAACA;AAC7CA,oBAAIA,CAACA,GAAGA,CAACA,CAACA,eAAeA,CAACA;AAC1BA,oBAAIA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA;AACdA,iBAACA,CAACA,eAAeA,GAAGA,CAACA,CAACA;AACtBA,iBAACA,CAACA,QAAQA,IAAIA,CAACA,CAACA;AAChBA,uBAAOA,8BAAaA,CAACA,CAACA,CAACA;aACvBA,MAEAA,OAAOA,0BAASA,IAAIA,CAACA;SACtBA;;;aAzEYN,eAAAA;AAEZO,mBAAOA,IAAIA,CAACA,UAAUA,CAACA;SACvBA;;;aAwEyBP,eAAAA;AAEzBQ,mBAAOA,IAAIA,CAACA,UAAUA,GAClBA,SAASA,CAACA,wBAAwBA,EAAEA,GAAGA,IAAIA,CAACA,eAAeA,GAC5DA,CAACA,CAACA;SACLA;;;aAEaR,eAAAA;AAEbS,mBAAOA,IAAIA,CAACA,UAAUA,GACnBA,8BAAaA,IAAIA,CAACA,sBAAsBA,CAACA,GACzCA,0BAASA,IAAIA,CAACA;SACjBA;;;aAEsBT,eAAAA;AAEtBU,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,gBAAIA,WAAWA,GAAGA,CAACA,CAACA,QAAQA,CAACA;AAE7BA,gBAAGA,CAACA,CAACA,UAAUA,EACdA,WAAWA,IAAIA,CAACA,CAACA,sBAAsBA,CAACA;AAEzCA,mBAAOA,WAAWA,CAACA;SACnBA;;;aAEUV,eAAAA;AAEVW,mBAAOA,8BAAaA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA;SAC9CA;;;eAhH8BX,oCAAAA;AAE9BY,mBAAOA,AAACA,IAAIA,IAAIA,EAAEA,CAAEA,OAAOA,EAAEA,CAACA;SAC9BA;;;eAgBcZ,oBAAAA;AAEda,gBAAIA,CAACA,GAAGA,IAAIA,SAASA,EAAEA,CAACA;AACxBA,aAACA,CAACA,KAAKA,EAAEA,CAACA;AACVA,mBAAOA,CAACA,CAACA;SACTA;;;eAEab,iBAACA,OAAgBA,EAAAA;AAE9Bc,gBAAIA,KAAKA,GAAGA,SAASA,CAACA,wBAAwBA,EAAEA,CAACA;AACjDA,mBAAOA,EAAEA,CAACA;AACVA,mBAAOA,8BAAaA,SAASA,CAACA,wBAAwBA,EAAEA,GAAGA,KAAKA,CAACA,CAACA;SAClEA;;;WAnCF,SAAA;;;qBAAA,SAAA","file":"System/Diagnostics/Stopwatch.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport TimeSpan from '../Time/TimeSpan';\r\n\r\n\r\nexport default\r\nclass Stopwatch\r\n{\r\n\r\n\tstatic getTimestampMilliseconds():number\r\n\t{\r\n\t\treturn (new Date()).getTime();\r\n\t}\r\n\r\n\tprivate _elapsed:number;\r\n\tprivate _startTimeStamp:number;\r\n\r\n\tprivate _isRunning:boolean;\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn this._isRunning;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tstatic startNew():Stopwatch\r\n\t{\r\n\t\tvar s = new Stopwatch();\r\n\t\ts.start();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tstatic measure(closure:()=>void):TimeSpan\r\n\t{\r\n\t\tvar start = Stopwatch.getTimestampMilliseconds();\r\n\t\tclosure();\r\n\t\treturn new TimeSpan(Stopwatch.getTimestampMilliseconds() - start);\r\n\t}\r\n\r\n\trecord(closure:() => void):TimeSpan\r\n\t{\r\n\t\t// Although a reasonably thread safe way to record, it may not correctly represent time in an async scenario.\r\n\t\tvar e = Stopwatch.measure(closure);\r\n\t\tthis._elapsed += e.milliseconds;\r\n\t\treturn e;\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._isRunning) {\r\n\t\t\t_._startTimeStamp = Stopwatch.getTimestampMilliseconds();\r\n\t\t\t_._isRunning = true;\r\n\t\t}\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning) {\r\n\t\t\t_._elapsed += _.currentLapMilliseconds;\r\n\t\t\t_._isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._elapsed = 0;\r\n\t\t_._isRunning = false;\r\n\t\t_._startTimeStamp = NaN;\r\n\t}\r\n\r\n\t// Effectively calls a stop start and continues timing...\r\n\t// Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\r\n\tlap():TimeSpan\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning) {\r\n\t\t\tvar t = Stopwatch.getTimestampMilliseconds();\r\n\t\t\tvar s = _._startTimeStamp;\r\n\t\t\tvar e = t - s;\r\n\t\t\t_._startTimeStamp = t;\r\n\t\t\t_._elapsed += e;\r\n\t\t\treturn new TimeSpan(e);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn TimeSpan.zero;\r\n\t}\r\n\r\n\tget currentLapMilliseconds():number\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? (Stopwatch.getTimestampMilliseconds() - this._startTimeStamp)\r\n\t\t\t: 0;\r\n\t}\r\n\r\n\tget currentLap():TimeSpan\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? new TimeSpan(this.currentLapMilliseconds)\r\n\t\t\t: TimeSpan.zero;\r\n\t}\r\n\r\n\tget elapsedMilliseconds():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar timeElapsed = _._elapsed;\r\n\r\n\t\tif(_._isRunning)\r\n\t\t\ttimeElapsed += _.currentLapMilliseconds;\r\n\r\n\t\treturn timeElapsed;\r\n\t}\r\n\r\n\tget elapsed():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.elapsedMilliseconds);\r\n\t}\r\n\r\n}\r\n"]}