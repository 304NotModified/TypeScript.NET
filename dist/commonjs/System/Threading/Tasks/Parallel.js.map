{"version":3,"sources":["System/Threading/Tasks/Parallel.ts"],"names":[],"mappings":"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","file":"System/Threading/Tasks/Parallel.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Originally based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/parallel.js\r\n */\r\n\r\nimport {Promise, PromiseBase, ArrayPromise, PromiseCollection} from \"../../Promises/Promise\";\r\nimport {Type} from \"../../Types\";\r\nimport Worker from \"../Worker\";\r\nimport {WorkerLike} from \"../WorkerType\";\r\nimport {deferImmediate} from \"../deferImmediate\";\r\nimport {isNodeJS} from \"../../Environment\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"../../Collections/Dictionaries/IDictionary\";\r\n\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\ndeclare const navigator:any;\r\ndeclare const require:any;\r\ndeclare const self:any;\r\ndeclare const __dirname:string;\r\n\r\n//noinspection JSUnusedAssignment\r\nconst\r\n\tMAX_WORKERS:number = 16,\r\n\tVOID0:any          = void 0,\r\n\tURL                = typeof self!==Type.UNDEFINED\r\n\t\t? (self.URL ? self.URL : self.webkitURL)\r\n\t\t: null,\r\n\t_supports          = (isNodeJS || self.Worker) ? true : false; // node always supports parallel\r\n\r\nexport interface ParallelOptions\r\n{\r\n\t/**\r\n\t * This is the path to the file eval.js.  This is required when running in node, and required for some browsers (IE 10) in order to work around cross-domain restrictions for web workers.  Defaults to the same location as parallel.js in node environments, and null in the browser.\r\n\t **/\r\n\tevalPath?:string;\r\n\r\n\t/**\r\n\t * The maximum number of permitted worker threads.  This will default to 4, or the number of CPUs on your computer if you're running node.\r\n\t **/\r\n\tmaxConcurrency?:number;\r\n\r\n\t/**\r\n\t * If WebWorkers are not available, whether or not to fall back to synchronous processing using setTimeout.  Defaults to true.\r\n\t **/\r\n\tallowSynchronous?:boolean;\r\n\r\n\tenv?:any\r\n\tenvNamespace?:string\r\n}\r\n\r\n//noinspection JSUnusedAssignment\r\nconst defaults:ParallelOptions = {\r\n\tevalPath: isNodeJS ? __dirname + '/eval.js' : null,\r\n\tmaxConcurrency: isNodeJS ? require('os').cpus().length : (navigator.hardwareConcurrency || 4),\r\n\tallowSynchronous: true,\r\n\tenv: {},\r\n\tenvNamespace: 'env'\r\n};\r\n\r\nfunction extend<T extends any>(from:T, to:T):T\r\n{\r\n\tif(!to) to = <any>{};\r\n\tfor(var i of Object.keys(from))\r\n\t{\r\n\t\tif(to[i]=== void 0) to[i] = from[i];\r\n\t}\r\n\treturn to;\r\n}\r\n\r\nfunction interact(\r\n\tw:WorkerLike,\r\n\tonMessage:(msg:{data:any})=>void,\r\n\tonError:(e:any)=>void,\r\n\tmessage?:any):void\r\n{\r\n\tif(onMessage) w.onmessage = onMessage;\r\n\tif(onError) w.onerror = onError;\r\n\tif(message!==VOID0) w.postMessage(message);\r\n}\r\n\r\nclass WorkerPromise<T> extends Promise<T>\r\n{\r\n\tconstructor(worker:WorkerLike, data:any)\r\n\t{\r\n\t\tsuper((resolve, reject)=>\r\n\t\t{\r\n\t\t\tinteract(\r\n\t\t\t\tworker,\r\n\t\t\t\t(response:{data:any})=>\r\n\t\t\t\t{\r\n\t\t\t\t\tresolve(response.data);\r\n\t\t\t\t},\r\n\t\t\t\t(e:any)=>\r\n\t\t\t\t{\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t},\r\n\t\t\t\tdata)\r\n\t\t}, true);\r\n\t}\r\n}\r\n\r\nexport type RequireType = string | Function | {name?:string,fn:Function};\r\n\r\nmodule workers\r\n{\r\n\r\n\t/*\r\n\t * Note:\r\n\t * Currently there is nothing preventing excessive numbers of workers from being generated.\r\n\t * Eventually there will be a master pool count which will regulate these workers.\r\n\t */\r\n\r\n\tfunction getPool(key:string):ObjectPool<WorkerLike>\r\n\t{\r\n\t\tvar pool = workerPools[key];\r\n\t\tif(!pool)\r\n\t\t{\r\n\t\t\tworkerPools[key] = pool = new ObjectPool<WorkerLike>(8);\r\n\t\t\tpool.autoClearTimeout = 3000; // Fast cleanup... 1s.\r\n\t\t}\r\n\t\treturn pool;\r\n\t}\r\n\r\n\tvar workerPools:IMap<ObjectPool<WorkerLike>> = {};\r\n\r\n\texport function recycle(w:WorkerLike):WorkerLike\r\n\t{ // always returns null.\r\n\t\tif(w)\r\n\t\t{\r\n\t\t\tw.onerror = null;\r\n\t\t\tw.onmessage = null;\r\n\t\t\tvar k = (<any>w).__key;\r\n\t\t\tif(k)\r\n\t\t\t{\r\n\t\t\t\tgetPool(k).add(w);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdeferImmediate(()=>w.terminate());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\texport function tryGet(key:string):WorkerLike\r\n\t{\r\n\t\treturn getPool(key).tryTake();\r\n\t}\r\n\r\n\texport function getNew(key:string, url:string):WorkerLike\r\n\t{\r\n\t\tvar worker:any = new Worker(url);\r\n\t\tworker.__key = key;\r\n\t\tworker.dispose = ()=>\r\n\t\t{\r\n\t\t\tworker.onmessage = null;\r\n\t\t\tworker.onerror = null;\r\n\t\t\tworker.dispose = null;\r\n\t\t\tworker.terminate();\r\n\t\t};\r\n\t\treturn worker;\r\n\t}\r\n}\r\n\r\n\r\nexport class Parallel\r\n{\r\n\r\n\toptions:ParallelOptions;\r\n\t_requiredScripts:string[];\r\n\t_requiredFunctions:{name?:string,fn:Function}[];\r\n\r\n\tconstructor(options?:ParallelOptions)\r\n\t{\r\n\t\tthis.options = extend(defaults, options);\r\n\t\tthis._requiredScripts = [];\r\n\t\tthis._requiredFunctions = [];\r\n\r\n\t\tthis.ensureClampedMaxConcurrency();\r\n\t}\r\n\r\n\tstatic maxConcurrency(max:number):Parallel\r\n\t{\r\n\t\treturn new Parallel({maxConcurrency: max});\r\n\t}\r\n\r\n\tprotected _getWorkerSource(task:Function|string, env?:any):string\r\n\t{\r\n\t\tvar scripts = this._requiredScripts, functions = this._requiredFunctions;\r\n\t\tvar preStr = '';\r\n\r\n\t\tif(!isNodeJS && scripts.length)\r\n\t\t{\r\n\t\t\tpreStr += 'importScripts(\"' + scripts.join('\",\"') + '\");\\r\\n';\r\n\t\t}\r\n\r\n\t\tfor(let {name, fn} of functions)\r\n\t\t{\r\n\t\t\tvar source = fn.toString();\r\n\t\t\tpreStr += name\r\n\t\t\t\t? `var ${name} = ${source};`\r\n\t\t\t\t: source;\r\n\t\t}\r\n\r\n\r\n\t\tenv = JSON.stringify(env || {});\r\n\r\n\t\tconst ns = this.options.envNamespace;\r\n\r\n\t\treturn preStr + (\r\n\t\t\t\tisNodeJS\r\n\t\t\t\t\t? `process.on(\"message\", function(e) {global.${ns} = ${env};process.send(JSON.stringify((${task.toString()})(JSON.parse(e).data)))})`\r\n\t\t\t\t\t: `self.onmessage = function(e) {var global = {}; global.${ns} = ${env}';self.postMessage((${task.toString()})(e.data))}`\r\n\t\t\t);\r\n\t}\r\n\r\n\trequire(...required:RequireType[]):this\r\n\t{\r\n\t\treturn this.requireThese(required);\r\n\t}\r\n\r\n\trequireThese(required:RequireType[]):this\r\n\t{\r\n\t\tfor(let a of required)\r\n\t\t{\r\n\t\t\tswitch(typeof a)\r\n\t\t\t{\r\n\t\t\t\tcase Type.STRING:\r\n\t\t\t\t\tthis._requiredScripts.push(<string>a);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\tthis._requiredFunctions.push({fn: <Function>a});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\t\tthis._requiredFunctions.push(<{name?:string,fn:Function}>a);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new TypeError(\"Invalid type.\");\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _spawnWorker(task:Function|string, env?:any):WorkerLike\r\n\t{\r\n\t\tvar src = this._getWorkerSource(task, env);\r\n\r\n\t\tif(Worker===VOID0) return VOID0;\r\n\t\tvar worker = workers.tryGet(src);\r\n\t\tif(worker) return worker;\r\n\r\n\t\tvar scripts = this._requiredScripts, evalPath = this.options.evalPath;\r\n\r\n\t\tif(!evalPath)\r\n\t\t{\r\n\t\t\tif(isNodeJS)\r\n\t\t\t\tthrow new Error(\"Can't use NodeJD without eval.js!\");\r\n\t\t\tif(scripts.length)\r\n\t\t\t\tthrow new Error(\"Can't use required scripts without eval.js!\");\r\n\t\t\tif(!URL)\r\n\t\t\t\tthrow new Error(\"Can't create a blob URL in this browser!\");\r\n\t\t}\r\n\r\n\t\tif(isNodeJS || scripts.length || !URL)\r\n\t\t{\r\n\t\t\tworker = workers.getNew(src, evalPath);\r\n\t\t\tworker.postMessage(src);\r\n\t\t}\r\n\t\telse if(URL)\r\n\t\t{\r\n\t\t\tvar blob = new Blob([src], {type: 'text/javascript'});\r\n\t\t\tvar url = URL.createObjectURL(blob);\r\n\r\n\t\t\tworker = workers.getNew(src, url);\r\n\t\t}\r\n\r\n\t\treturn worker;\r\n\t}\r\n\r\n\tstartNew<T,U>(data:T, task:(data:T) => U, env?:any):Promise<U>\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tlet worker = _._spawnWorker(task, extend(_.options.env, env || {}));\r\n\t\tif(worker)\r\n\t\t\treturn new WorkerPromise<U>(worker, data)\r\n\t\t\t\t.finallyThis(()=>workers.recycle(worker));\r\n\r\n\t\tif(_.options.allowSynchronous)\r\n\t\t\treturn new Promise<U>(\r\n\t\t\t\t(resolve, reject)=>\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresolve(task(data));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of promises that each resolve after their task completes.\r\n\t * Provides a potential performance benefit by not waiting for all promises to resolve before proceeding to next step.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {PromiseCollection}\r\n\t */\r\n\tpipe<T,U>(data:T[], task:(data:T) => U, env?:any):PromiseCollection<U>\r\n\t{\r\n\t\tlet maxConcurrency = this.ensureClampedMaxConcurrency();\r\n\r\n\t\t// The resultant promise collection will make an internal copy...\r\n\t\tvar result:Promise<U>[];\r\n\r\n\t\tif(data && data.length)\r\n\t\t{\r\n\t\t\tconst len = data.length;\r\n\t\t\tconst taskString = task.toString();\r\n\t\t\tlet maxConcurrency = this.ensureClampedMaxConcurrency(), error:any;\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(let w = 0; !error && i<Math.min(len, maxConcurrency); w++)\r\n\t\t\t{\r\n\t\t\t\tlet worker = this._spawnWorker(taskString, env);\r\n\r\n\t\t\t\tif(!worker)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!this.options.allowSynchronous)\r\n\t\t\t\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n\r\n\t\t\t\t\t// Concurrency doesn't matter in a single thread... Just queue it all up.\r\n\t\t\t\t\treturn Promise.map(data, task);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(!result)\r\n\t\t\t\t{\r\n\t\t\t\t\t// There is a small risk that the consumer could call .resolve() which would result in a double resolution.\r\n\t\t\t\t\t// But it's important to minimize the number of objects created.\r\n\t\t\t\t\tresult = data.map(d=>new Promise<U>());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet next = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(error)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(worker)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i<len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//noinspection JSReferencingMutableVariableFromClosure\r\n\t\t\t\t\t\t\tlet ii = i++, p = result[ii];\r\n\t\t\t\t\t\t\tlet wp = new WorkerPromise<U>(worker, data[ii]);\r\n\t\t\t\t\t\t\twp\r\n\t\t\t\t\t\t\t\t.thenSynchronous(r=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tp.resolve(r);\r\n\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t}, e=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(!error)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t\t\t\t\tp.reject(e);\r\n\t\t\t\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.finallyThis(()=>\r\n\t\t\t\t\t\t\t\t\twp.dispose());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn new PromiseCollection(result);\r\n\t}\r\n\r\n\tprivate ensureClampedMaxConcurrency():number\r\n\t{\r\n\t\tlet {maxConcurrency} = this.options;\r\n\t\tif(maxConcurrency>MAX_WORKERS)\r\n\t\t{\r\n\t\t\tthis.options.maxConcurrency = maxConcurrency = MAX_WORKERS;\r\n\t\t\tconsole.warn(`More than ${MAX_WORKERS} workers can reach worker limits and cause unexpected results.  maxConcurrency reduced to ${MAX_WORKERS}.`);\r\n\t\t}\r\n\t\treturn maxConcurrency;\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for all tasks to resolve and returns a promise with the results.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {ArrayPromise}\r\n\t */\r\n\tmap<T,U>(data:T[], task:(data:T) => U, env?:any):ArrayPromise<U>\r\n\t{\r\n\t\tif(!data || !data.length)\r\n\t\t\treturn ArrayPromise.fulfilled(data && []);\r\n\r\n\t\t// Would return the same result, but has extra overhead.\r\n\t\t// return this.pipe(data,task).all();\r\n\r\n\t\tdata = data.slice(); // Never use the original.\r\n\t\treturn new ArrayPromise<U>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tconst result:U[] = [], len = data.length;\r\n\t\t\tresult.length = len;\r\n\r\n\t\t\tconst taskString = task.toString();\r\n\t\t\tlet maxConcurrency = this.ensureClampedMaxConcurrency(), error:any;\r\n\t\t\tlet i = 0, resolved = 0;\r\n\t\t\tfor(let w = 0; !error && i<Math.min(len, maxConcurrency); w++)\r\n\t\t\t{\r\n\t\t\t\tlet worker = this._spawnWorker(taskString, env);\r\n\r\n\t\t\t\tif(!worker)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!this.options.allowSynchronous)\r\n\t\t\t\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n\r\n\t\t\t\t\t// Concurrency doesn't matter in a single thread... Just queue it all up.\r\n\t\t\t\t\tresolve(Promise.map(data, task).all());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet next = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(error)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(worker)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i<len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet ii = i++;\r\n\t\t\t\t\t\t\tlet wp = new WorkerPromise<U>(worker, data[ii]);\r\n\t\t\t\t\t\t\twp\r\n\t\t\t\t\t\t\t\t.thenSynchronous(r=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresult[ii] = r;\r\n\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t}, e=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(!error)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.thenThis(()=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresolved++;\r\n\t\t\t\t\t\t\t\t\tif(resolved>len) throw Error(\"Resolved count exceeds data length.\");\r\n\t\t\t\t\t\t\t\t\tif(resolved===len) resolve(result);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.finallyThis(()=>\r\n\t\t\t\t\t\t\t\t\twp.dispose());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tstatic get isSupported() { return _supports; }\r\n\r\n\tstatic options(options?:ParallelOptions):Parallel\r\n\t{\r\n\t\treturn new Parallel(options);\r\n\t}\r\n\r\n\tstatic require(...required:RequireType[]):Parallel\r\n\t{\r\n\t\treturn (new Parallel()).requireThese(required)\r\n\t}\r\n\r\n\tstatic requireThese(required:RequireType[]):Parallel\r\n\t{\r\n\t\treturn (new Parallel()).requireThese(required)\r\n\t}\r\n\r\n\tstatic startNew<T,U>(data:T, task:(data:T) => U, env?:any):PromiseBase<U>\r\n\t{\r\n\t\treturn (new Parallel()).startNew(data, task, env);\r\n\t}\r\n\r\n\t//\r\n\t// forEach<T>(data:T[], task:(data:T) => void, env?:any):PromiseBase<void>\r\n\t// {}\r\n\r\n\tstatic map<T,U>(data:T[], task:(data:T) => U, env?:any):ArrayPromise<U>\r\n\t{\r\n\t\treturn (new Parallel()).map(data, task, env);\r\n\t}\r\n}\r\n\r\n//\r\n//\r\n// \tprivate _spawnReduceWorker<N>(\r\n// \t\tdata:any,\r\n// \t\tcb:(data:N) => N,\r\n// \t\tdone:(err?:any, wrk?:WorkerLike)=>void,\r\n// \t\tenv?:any,\r\n// \t\twrk?:WorkerLike)\r\n// \t{\r\n// \t\tconst _ = this;\r\n// \t\tif(!wrk) wrk = _._spawnWorker(cb, env);\r\n//\r\n// \t\tif(wrk!==VOID0)\r\n// \t\t{\r\n// \t\t\tinteract(wrk,\r\n// \t\t\t\tmsg=>\r\n// \t\t\t\t{\r\n// \t\t\t\t\t_.data[_.data.length] = msg.data;\r\n// \t\t\t\t\tdone(null, wrk);\r\n// \t\t\t\t},\r\n// \t\t\t\te=>\r\n// \t\t\t\t{\r\n// \t\t\t\t\twrk.terminate();\r\n// \t\t\t\t\tdone(e, null);\r\n// \t\t\t\t},\r\n// \t\t\t\tdata);\r\n// \t\t}\r\n// \t\telse if(_.options.allowSynchronous)\r\n// \t\t{\r\n// \t\t\tdeferImmediate(()=>\r\n// \t\t\t{\r\n// \t\t\t\t_.data[_.data.length] = cb(data);\r\n// \t\t\t\tdone();\r\n// \t\t\t});\r\n// \t\t}\r\n// \t\telse\r\n// \t\t{\r\n// \t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n// \t\t}\r\n// \t}\r\n//\r\n//\r\n//\r\n//\r\n// \treduce<N>(cb:(data:N[]) => N, env?:any):Parallel<T>\r\n// \t{\r\n// \t\tenv = extend(this.options.env, env || {});\r\n//\r\n// \t\tvar runningWorkers = 0;\r\n// \t\tconst _ = this;\r\n//\r\n//\r\n// \t\t_._operation = new Promise<any>((resolve, reject)=>\r\n// \t\t{\r\n//\r\n// \t\t\tconst done = (err?:any, wrk?:WorkerLike)=>\r\n// \t\t\t{\r\n// \t\t\t\t--runningWorkers;\r\n// \t\t\t\tif(err)\r\n// \t\t\t\t{\r\n// \t\t\t\t\treject(err);\r\n// \t\t\t\t}\r\n// \t\t\t\telse if(_.data.length===1 && runningWorkers===0)\r\n// \t\t\t\t{\r\n// \t\t\t\t\tresolve(_.data = _.data[0]);\r\n// \t\t\t\t\tif(wrk) wrk.terminate();\r\n// \t\t\t\t}\r\n// \t\t\t\telse if(_.data.length>1)\r\n// \t\t\t\t{\r\n// \t\t\t\t\t++runningWorkers;\r\n// \t\t\t\t\t_._spawnReduceWorker([_.data[0], _.data[1]], cb, done, env, wrk);\r\n// \t\t\t\t\t_.data.splice(0, 2);\r\n// \t\t\t\t}\r\n// \t\t\t\telse\r\n// \t\t\t\t{\r\n// \t\t\t\t\tif(wrk) wrk.terminate();\r\n// \t\t\t\t}\r\n// \t\t\t};\r\n//\r\n// \t\t\tif(_.data.length===1)\r\n// \t\t\t{\r\n// \t\t\t\tresolve(_.data[0]);\r\n// \t\t\t}\r\n// \t\t\telse\r\n// \t\t\t{\r\n// \t\t\t\tfor(var i = 0; i<_.options.maxConcurrency && i<Math.floor(_.data.length/2); ++i)\r\n// \t\t\t\t{\r\n// \t\t\t\t\t++runningWorkers;\r\n// \t\t\t\t\t_._spawnReduceWorker([_.data[i*2], _.data[i*2 + 1]], cb, done, env);\r\n// \t\t\t\t}\r\n//\r\n// \t\t\t\t_.data.splice(0, i*2);\r\n// \t\t\t}\r\n// \t\t}, true);\r\n// \t\treturn this;\r\n//\r\n// \t}\r\n\r\n\r\nexport default Parallel;\r\n"]}