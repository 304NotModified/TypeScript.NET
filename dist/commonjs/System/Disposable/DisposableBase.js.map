{"version":3,"sources":["System/Disposable/DisposableBase.ts"],"names":["DisposableBase","DisposableBase.constructor","DisposableBase.throwIfDisposed","DisposableBase.dispose","DisposableBase._onDispose","DisposableBase.wasDisposed"],"mappings":";;;;;;;;;;;;;;;;uCAQoC,2BAA2B;;;;IAE/D,cAAA;AAICA,aAJD,cAAA,CAIqBA,UAAsBA,EAAAA;8BAJ3C,cAAA;;AAIqBC,YAAAA,CAAAA,UAAUA,GAAVA,UAAUA,CAAYA;AAIlCA,YAAAA,CAAAA,YAAYA,GAAWA,KAAKA,CAACA;KAFpCA;;iBANF,cAAA;;eAiB0BD,yBACxBA,OAAeA,EAC+BA;gBAA9CA,UAAUA,yDAAUA,IAAIA,CAACA,qBAAqBA;;AAE9CE,gBAAGA,IAAIA,CAACA,YAAYA,EACnBA,MAAMA,yCAA4BA,UAAUA,EAAEA,OAAOA,CAACA,CAACA;AACxDA,mBAAOA,IAAIA,CAACA;SACZA;;;eAGMF,mBAAAA;AAENG,gBAAIA,CAACA,GAAGA,IAAIA,CAACA;AACbA,gBAAGA,CAACA,CAACA,CAACA,YAAYA,EAClBA;AAGCA,iBAACA,CAACA,YAAYA,GAAGA,IAAIA,CAACA;AACtBA,oBACAA;AACCA,qBAACA,CAACA,UAAUA,EAAEA,CAACA;iBACfA,SAEDA;AACCA,wBAAGA,CAACA,CAACA,UAAUA,EACdA,CAACA,CAACA,UAAUA,EAAEA,CAACA;iBAChBA;aACDA;SACDA;;;eAImBH,sBAAAA,EAGnBI;;;aA3CcJ,eAAAA;AAEdK,mBAAOA,IAAIA,CAACA,YAAYA,CAACA;SACzBA;;;WAZF,cAAA;;;qBAAA,cAAA","file":"System/Disposable/DisposableBase.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\n///<reference path=\"IDisposableAware.d.ts\"/>\r\n\r\nimport ObjectDisposedException from './ObjectDisposedException';\r\n\r\nexport default\r\nclass DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tconstructor(private _finalizer?:() => void)\r\n\t{\r\n\t}\r\n\r\n\tprivate _wasDisposed:boolean = false;\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this._wasDisposed;\r\n\t}\r\n\r\n\t// Allow for simple override of name.\r\n\tprotected _disposableObjectName:string;\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):boolean\r\n\t{\r\n\t\tif(this._wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_._wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_._finalizer) // Private finalizer...\r\n\t\t\t\t\t_._finalizer();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Override this to handle destruction...\r\n\t// Be sure to call super._onDestroy() in deeper sub classes...\r\n\tprotected _onDispose():void\r\n\t{\r\n\r\n\t}\r\n\r\n}\r\n"]}