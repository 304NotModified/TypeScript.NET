{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":[],"mappings":";;;;AAIA;;ACCA,IAAA,UAAA,QAAiB,SAAjB,CAAA;AACA,IAAA,sBAAA,QAA8B,gCAA9B,CAAA;AACA,IAAA,gCAAA,QAAwC,0CAAxC,CAAA;AAEA,SAAA,OAAA,CAAiB,CAAjB,EAAyB;AAExB,WAAO,IAAI,CAAJ,CAFiB;CAAzB;AAKA,IAAO,OAAP;AAAA,CAAA,UAAO,OAAP,EACA;AAEC,aAAA,CAAA,CAAW,GAAX,EAAqB;AAEpB,eAAO,IAAC,CAAK,MAAL,KAAc,GAAd,GAAqB,CAAtB,CAFa;KAArB;AAgBA,aAAA,MAAA,CAAuB,GAAvB,EAAiC;AAEhC,eAAO,GAAP,EAAY,KAAZ,EAFgC;AAGhC,YAAG,OAAK,CAAL,EAAQ,OAAO,CAAP,CAAX;AACA,eAAO,MAAI,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAAD,CAJa;AAKhC,eAAO,EAAE,GAAF,CAAP,CALgC;KAAjC;AAAgB,YAAA,MAAA,GAAM,MAAN,CAlBjB;AA0BC,QAAc,MAAd,CA1BD;AA0BC,KAAA,UAAc,MAAd,EACA;AAaC,iBAAA,KAAA,CAAsB,QAAtB,EAAqC;AAEpC,mBAAO,EAAE,QAAF,CAAP,CAFoC;SAArC;AAAgB,eAAA,KAAA,GAAK,KAAL,CAbjB;AAkBC,iBAAA,MAAA,CAA0B,MAA1B,EAAoC;AAEnC,mBAAO,UAAU,OAAO,MAAP,GACd,OAAO,EAAE,OAAO,MAAP,CAAT,CADI,GAEJ,KAAK,CAAL,CAJgC;SAApC;AAAgB,eAAA,MAAA,GAAM,MAAN,CAlBjB;KADA,CAAA,CAAc,SAAA,QAAA,MAAA,KAAA,QAAA,MAAA,GAAM,EAAN,CAAA,CAAd,CA1BD;AAsDC,aAAA,EAAA,CAAmB,CAAnB,EAA2B;AAE1B,eAAO,QAAA,OAAA,CAAK,QAAL,CAAc,CAAd,EAAiB,KAAjB,KAA2B,SAAS,CAAT,CAA3B,IAA0C,MAAI,IAAI,CAAJ,CAAJ,CAFvB;KAA3B;AAAgB,YAAA,EAAA,GAAE,EAAF,CAtDjB;AA2DC,aAAA,MAAA,CAAuB,CAAvB,EAAiC,YAAjC,EAAqD;AAEpD,YAAI,IAAI,GAAG,CAAH,CAAJ,CAFgD;AAGpD,YAAG,CAAC,CAAD,EACF,MAAM,IAAI,oBAAA,OAAA,CAAkB,gBAAgB,GAAhB,EAAqB,oBAA3C,CAAN,CADD;AAEA,eAAO,CAAP,CALoD;KAArD;AAAgB,YAAA,MAAA,GAAM,MAAN,CA3DjB;AAmEC,aAAA,mBAAA,CAAoC,CAApC,EAA8C,YAA9C,EAAkE;AAEjE,YAAI,IAAI,OAAO,CAAP,EAAU,YAAV,KAA2B,KAAG,CAAH,CAF8B;AAGjE,YAAG,CAAC,CAAD,EACF,MAAM,IAAI,8BAAA,OAAA,CAA4B,gBAAgB,GAAhB,EAAqB,CAArD,EAAwD,2BAAxD,CAAN,CADD;AAEA,eAAO,CAAP,CALiE;KAAlE;AAAgB,YAAA,mBAAA,GAAmB,mBAAnB,CAnEjB;AA2EC,aAAA,cAAA,CAA+B,CAA/B,EAAyC,YAAzC,EAA6D;AAE5D,YAAI,IAAI,OAAO,CAAP,EAAU,YAAV,KAA2B,IAAE,CAAF,CAFyB;AAG5D,YAAG,CAAC,CAAD,EACF,MAAM,IAAI,8BAAA,OAAA,CAA4B,gBAAgB,GAAhB,EAAqB,CAArD,EAAwD,4BAAxD,CAAN,CADD;AAEA,eAAO,CAAP,CAL4D;KAA7D;AAAgB,YAAA,cAAA,GAAc,cAAd,CA3EjB;CADA,CAAA,CAAO,YAAA,UAAO,EAAP,CAAA,CAAP;AAsFA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADpCA,QAAQ,OAAR,GCoCe,ODpCf","file":"System/Integer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require(\"./Types\");\nconst ArgumentException_1 = require(\"./Exceptions/ArgumentException\");\nconst ArgumentOutOfRangeException_1 = require(\"./Exceptions/ArgumentOutOfRangeException\");\nfunction Integer(n) {\n    return n | 0;\n}\nvar Integer;\n(function (Integer) {\n    function r(max) {\n        return (Math.random() * max) | 0;\n    }\n    function random(max) {\n        assert(max, 'max');\n        if (max == 0)\n            return 0;\n        max += max > 0 ? 1 : -1;\n        return r(max);\n    }\n    Integer.random = random;\n    var random;\n    (function (random) {\n        function under(boundary) {\n            return r(boundary);\n        }\n        random.under = under;\n        function select(source) {\n            return source && source.length\n                ? source[r(source.length)]\n                : void (0);\n        }\n        random.select = select;\n    })(random = Integer.random || (Integer.random = {}));\n    function is(n) {\n        return Types_1.default.isNumber(n, false) && isFinite(n) && n == (n | 0);\n    }\n    Integer.is = is;\n    function assert(n, argumentName) {\n        var i = is(n);\n        if (!i)\n            throw new ArgumentException_1.default(argumentName || 'n', \"Must be a integer.\");\n        return i;\n    }\n    Integer.assert = assert;\n    function assertZeroOrGreater(n, argumentName) {\n        var i = assert(n, argumentName) && n >= 0;\n        if (!i)\n            throw new ArgumentOutOfRangeException_1.default(argumentName || 'n', n, \"Cannot be less than zero.\");\n        return i;\n    }\n    Integer.assertZeroOrGreater = assertZeroOrGreater;\n    function assertPositive(n, argumentName) {\n        var i = assert(n, argumentName) && n > 0;\n        if (!i)\n            throw new ArgumentOutOfRangeException_1.default(argumentName || 'n', n, \"Must be greater than zero.\");\n        return i;\n    }\n    Integer.assertPositive = assertPositive;\n})(Integer || (Integer = {}));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Integer;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from \"./Types\";\r\nimport ArgumentException from \"./Exceptions/ArgumentException\";\r\nimport ArgumentOutOfRangeException from \"./Exceptions/ArgumentOutOfRangeException\";\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\tfunction r(max:number):number\r\n\t{\r\n\t\treturn (Math.random()*max) | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a random integer from zero to the max.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * Examples:<br/>\r\n\t * ```Integer.random(1)``` will return 0 or 1.<br/>\r\n\t * ```Integer.random(-2)``` will return 0, -1, or -2.<br/>\r\n\t *\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(max:number):number\r\n\t{\r\n\t\tassert(max, 'max');\r\n\t\tif(max==0) return 0;\r\n\t\tmax += max>0 ? 1 : -1;\r\n\t\treturn r(max);\r\n\t}\r\n\r\n\texport module random\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * Returns a random integer from zero up to the boundary value.\r\n\t\t * Negative and fractional numbers are allowed.\r\n\t\t *\r\n\t\t * Example:<br/>\r\n\t\t * ```Integer.random(-2)``` will return 0, or -1.<br/>\r\n\t\t * ```Integer.random(5)``` will return 0, 1, 2, 3 or 4.<br/>\r\n\t\t *\r\n\t\t * @param boundary\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\texport function under(boundary:number):number\r\n\t\t{\r\n\t\t\treturn r(boundary)\r\n\t\t}\r\n\r\n\t\texport function select<T>(source:T[]):T\r\n\t\t{\r\n\t\t\treturn source && source.length\r\n\t\t\t\t? source[r(source.length)]\r\n\t\t\t\t: void(0);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && isFinite(n) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Cannot be less than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertPositive(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}