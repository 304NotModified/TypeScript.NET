{"version":3,"sources":["System/Integer.ts"],"names":[],"mappings":"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","file":"Integer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"./Exceptions/ArgumentOutOfRangeException\";\r\nimport {IArray} from \"./Collections/Array/IArray\";\r\nimport {TypeValue} from \"./TypeValue\";\r\n\r\nexport function Integer(n:number):number\r\n{\r\n\treturn Math.floor(n);\r\n}\r\n\r\nexport module Integer\r\n{\r\n\texport const MAX_32_BIT:number = 2147483647;\r\n\r\n\tfunction r(maxExclusive:number):number\r\n\t{\r\n\t\treturn (Math.random()*maxExclusive) | 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a random integer from minInclusive to the maxExclusive.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * @param maxExclusive\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(maxExclusive:number):number\r\n\t{\r\n\t\tassert(maxExclusive, 'maxExclusive');\r\n\t\treturn r(maxExclusive);\r\n\t}\r\n\r\n\texport module random\r\n\t{\r\n\t\texport function next(\r\n\t\t\tboundary:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(boundary, 'max');\r\n\t\t\tif(boundary===0) return 0;\r\n\t\t\tif(inclusive) boundary += boundary/Math.abs(boundary);\r\n\t\t\treturn r(boundary);\r\n\t\t}\r\n\r\n\t\texport function set(\r\n\t\t\tcount:number,\r\n\t\t\tboundary:number,\r\n\t\t\tinclusive?:boolean):number[]\r\n\t\t{\r\n\t\t\tconst s:number[] = [];\r\n\t\t\ts.length = count;\r\n\t\t\tfor(let i=0;i<count;i++) {\r\n\t\t\t\ts[i] = next(boundary,inclusive);\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t}\r\n\r\n\t\texport function nextInRange(\r\n\t\t\tmin:number,\r\n\t\t\tmax:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(min, 'min');\r\n\t\t\tassert(max, 'max');\r\n\t\t\tlet range = max - min;\r\n\t\t\tif(range===0) return min;\r\n\t\t\tif(inclusive) range += range/Math.abs(range);\r\n\t\t\treturn min + next(range);\r\n\t\t}\r\n\r\n\t\texport function select<T>(source:IArray<T>):T|undefined\r\n\t\t{\r\n\t\t\treturn source && source.length\r\n\t\t\t\t? source[r(source.length)]\r\n\t\t\t\t: void(0);\r\n\t\t}\r\n\r\n\t\texport module select\r\n\t\t{\r\n\t\t\texport function one<T>(source:IArray<T>):T|undefined\r\n\t\t\t{\r\n\t\t\t\treturn random.select(source);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any number to its 32bit counterpart.\r\n\t * Returns null if conversion is not possible.\r\n\t * @param n\r\n\t * @returns {number}\r\n\t */\r\n\texport function as32Bit(n:number):number|null\r\n\t{\r\n\t\tconst result = n | 0;\r\n\t\treturn (n=== -1 || result!== -1) ? result : null;\r\n\t}\r\n\r\n\tconst NUMBER:TypeValue.Number = \"number\";\r\n\r\n\t/**\r\n\t * Returns true if the value is an integer.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn typeof n===NUMBER && isFinite(n) && n===Math.floor(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value is within a 32 bit range.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is32Bit(n:number):boolean\r\n\t{\r\n\t\treturn n===(n | 0);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Throws if not an integer.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assert(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if less than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if not greater than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertPositive(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}