{"version":3,"sources":["System/Integer.ts"],"names":["Integer","Integer.r","Integer.random","Integer.random.under","Integer.is","Integer.assert"],"mappings":";;;;;;;;;;;;qBAKiB,SAAS;;;;2CACI,gCAAgC;;;;AAE9D,SAAA,OAAA,CAAiB,CAAQ,EAAA;AAExBA,WAAOA,CAACA,GAAGA,CAACA,CAACA;CACbA;AAED,IAAO,OAAO,CA8Db;AA9DD,CAAA,UAAO,OAAO,EACd;AAECA,aAAAA,CAAAA,CAAWA,GAAUA,EAAAA;AACpBC,eAAOA,AAACA,IAAIA,CAACA,MAAMA,EAAEA,GAACA,GAAGA,GAAIA,CAACA,CAACA;KAC/BA;AAaDD,aAAAA,MAAAA,CAAuBA,GAAUA,EAAAA;AAEhCE,cAAMA,CAACA,GAAGA,EAACA,KAAKA,CAACA,CAACA;AAClBA,YAAGA,GAAGA,IAAEA,CAACA,EAAEA,OAAOA,CAACA,CAACA;AACpBA,WAAGA,IAAIA,GAAGA,GAAGA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA;AACxBA,eAAOA,CAACA,CAACA,GAAGA,CAACA,CAACA;KACdA;AANeF,WAAAA,CAAAA,MAAMA,GAAAA,MAMrBA,CAAAA;AAEDA,QAAcA,MAAMA,CAmBnBA;AAnBDA,KAAAA,UAAcA,MAAMA,EAACA;AAapBE,iBAAAA,KAAAA,CAAsBA,QAAeA,EAAAA;AAEpCC,mBAAOA,CAACA,CAACA,QAAQA,CAACA,CAAAA;SAClBA;AAHeD,cAAAA,CAAAA,KAAKA,GAAAA,KAGpBA,CAAAA;KAGDA,CAAAA,CAnBaF,MAAMA,GAANA,OAAAA,CAAAA,MAAMA,KAANA,OAAAA,CAAAA,MAAMA,GAAAA,EAAAA,CAAAA,CAAAA,CAmBnBA;AAEDA,aAAAA,EAAAA,CAAmBA,CAAQA,EAAAA;AAE1BI,eAAOA,mBAAKA,QAAQA,CAACA,CAACA,EAAEA,KAAKA,CAACA,IAAIA,CAACA,KAAGA,CAACA,GAAGA,CAACA,CAAAA,AAACA,CAACA;KAC7CA;AAHeJ,WAAAA,CAAAA,EAAEA,GAAAA,EAGjBA,CAAAA;AAEDA,aAAAA,MAAAA,CAAuBA,CAAQA,EAAEA,YAAoBA,EAAAA;AAEpDK,YAAIA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA;AACdA,YAAGA,CAACA,CAACA,EACLA;AACCA,kBAAMA,6CAAsBA,YAAYA,IAAIA,GAAGA,EAAEA,qBAAqBA,CAACA,CAACA;SACxEA;AACDA,eAAOA,CAACA,CAACA;KACTA;AAReL,WAAAA,CAAAA,MAAMA,GAAAA,MAQrBA,CAAAA;CAEDA,CAAAA,CA9DM,OAAO,KAAP,OAAO,GAAA,EAAA,CAAA,CAAA,CA8Db;qBAEc,OAAO","file":"System/Integer.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from './Types';\r\nimport ArgumentException from './Exceptions/ArgumentException';\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\tfunction r(max:number):number {\r\n\t\treturn (Math.random()*max) | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a random integer from zero to the max.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * Examples:<br/>\r\n\t * ```Integer.random(1)``` will return 0 or 1.<br/>\r\n\t * ```Integer.random(-2)``` will return 0, -1, or -2.<br/>\r\n\t *\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(max:number):number\r\n\t{\r\n\t\tassert(max,'max');\r\n\t\tif(max==0) return 0;\r\n\t\tmax += max > 0 ? 1 : -1;\r\n\t\treturn r(max);\r\n\t}\r\n\r\n\texport module random {\r\n\r\n\t\t/**\r\n\t\t * Returns a random integer from zero up to the boundary value.\r\n\t\t * Negative and fractional numbers are allowed.\r\n\t\t *\r\n\t\t * Example:<br/>\r\n\t\t * ```Integer.random(-2)``` will return 0, or -1.<br/>\r\n\t\t * ```Integer.random(5)``` will return 0, 1, 2, 3 or 4.<br/>\r\n\t\t *\r\n\t\t * @param boundary\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\texport function under(boundary:number):number\r\n\t\t{\r\n\t\t\treturn r(boundary)\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be an integer.\");\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}