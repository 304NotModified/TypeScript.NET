{"version":3,"sources":["System/Time/TimeSpan.ts"],"names":["TimeSpan","TimeSpan.constructor","TimeSpan.equals","TimeSpan.compareTo","TimeSpan.toTimeUnitValue","TimeSpan.getTotal","TimeSpan.add","TimeSpan.addUnit","TimeSpan.ticks","TimeSpan.milliseconds","TimeSpan.seconds","TimeSpan.minutes","TimeSpan.hours","TimeSpan.days","TimeSpan.total","TimeSpan.time","TimeSpan.convertToMilliseconds","TimeSpan.from","TimeSpan.fromDays","TimeSpan.fromHours","TimeSpan.fromMinutes","TimeSpan.fromSeconds","TimeSpan.fromMilliseconds","TimeSpan.fromTicks","TimeSpan.fromTime","TimeSpan.millisecondsFromTime","TimeSpan.between","TimeSpan.zero","assertComparisonType","getMilliseconds"],"mappings":"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","file":"System/Time/TimeSpan.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\nimport {areEqual,compare} from '../Compare';\r\nimport Type from '../Types';\r\nimport * as HowMany from './HowMany';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeUnitValue from './TimeUnitValue';\r\nimport ClockTime from './ClockTime';\r\n\r\n\r\nexport default\r\nclass TimeSpan implements ITimeMeasurement, IEquatable<TimeSpan>, IComparable<TimeSpan>, ITimeTotal\r\n{\r\n\r\n\tprivate _milliseconds:number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tthis._milliseconds = TimeSpan.convertToMilliseconds(value, units);\r\n\t}\r\n\r\n\tequals(other:TimeUnitValue):boolean;\r\n\tequals(other:TimeSpan):boolean;\r\n\tequals(other:any):boolean\r\n\t{\r\n\t\tvar otherMS:number = getMilliseconds(other);\r\n\r\n\t\tif(other===undefined) // undefined is used instead of NaN since NaN could be a valid value.\r\n\t\t\treturn false;\r\n\r\n\t\treturn areEqual(this._milliseconds, otherMS);\r\n\t}\r\n\r\n\r\n\tcompareTo(other:TimeUnitValue):number;\r\n\tcompareTo(other:TimeSpan):number;\r\n\tcompareTo(other:any):number\r\n\t{\r\n\t\tif(other==null) return 1 | 0;\r\n\r\n\t\tassertComparisonType(other);\r\n\r\n\t\treturn compare(this._milliseconds, getMilliseconds(other));\r\n\r\n\t}\r\n\r\n\ttoTimeUnitValue(units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(this.getTotal(units), units);\r\n\t}\r\n\r\n\tstatic convertToMilliseconds(value:number, units:TimeUnit = TimeUnit.Milliseconds):number\r\n\t{\r\n\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\tvalue *= HowMany.Hours.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn value;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn value/HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\tgetTotal(units:TimeUnit):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\treturn _.days;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\treturn _.hours;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\treturn _.minutes;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\treturn _.seconds;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn _._milliseconds;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn _._milliseconds*HowMany.Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\tget ticks():number\r\n\t{\r\n\t\treturn this._milliseconds\r\n\t\t\t*HowMany.Ticks.Per.Millisecond;\r\n\t}\r\n\r\n\tget milliseconds():number\r\n\t{\r\n\t\treturn this._milliseconds;\r\n\t}\r\n\r\n\tget seconds():number\r\n\t{\r\n\t\treturn this._milliseconds\r\n\t\t\t/HowMany.Milliseconds.Per.Second;\r\n\t}\r\n\r\n\tget minutes():number\r\n\t{\r\n\t\treturn this.seconds\r\n\t\t\t/HowMany.Seconds.Per.Minute;\r\n\t}\r\n\r\n\tget hours():number\r\n\t{\r\n\t\treturn this.minutes\r\n\t\t\t/HowMany.Minutes.Per.Hour;\r\n\t}\r\n\r\n\tget days():number\r\n\t{\r\n\t\treturn this.hours\r\n\t\t\t/HowMany.Hours.Per.Day;\r\n\t}\r\n\r\n\t// Provides an interface only way of acquiring the getTotal time.\r\n\tget total():ITimeMeasurement\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\treturn new ClockTime(this._milliseconds);\r\n\t}\r\n\r\n\tadd(other:ClockTime):TimeSpan;\r\n\tadd(other:TimeUnitValue):TimeSpan;\r\n\tadd(other:TimeSpan):TimeSpan;\r\n\tadd(other:any):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit to add a numerical value amount.  \" +\r\n\t\t\t\t\".add only supports ClockTime, TimeSpan, and TimeUnitValue.\"\r\n\t\t\t);\r\n\r\n\t\tif(other instanceof TimeUnitValue || other instanceof ClockTime)\r\n\t\t\tother = other.toTimeSpan();\r\n\r\n\t\treturn new TimeSpan(this._milliseconds + other.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this._milliseconds + TimeSpan.convertToMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\tstatic fromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(\r\n\t\t\tTimeSpan.millisecondsFromTime(\r\n\t\t\t\thours, minutes, seconds, milliseconds\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic millisecondsFromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):number\r\n\t{\r\n\t\tvar value = hours;\r\n\t\tvalue *= HowMany.Minutes.Per.Hour;\r\n\t\tvalue += minutes;\r\n\t\tvalue *= HowMany.Seconds.Per.Minute;\r\n\t\tvalue += seconds;\r\n\t\tvalue *= HowMany.Milliseconds.Per.Second;\r\n\t\tvalue += milliseconds;\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic between(first:Date, last:Date):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(last.getTime() - first.getTime());\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nfunction assertComparisonType(other:any):void\r\n{\r\n\tif(!(other instanceof TimeUnitValue || other instanceof TimeSpan))\r\n\t\tthrow new Error(\"Invalid comparison type.  Must be of type TimeUnitValue or TimeSpan.\");\r\n}\r\n\r\n\r\nfunction getMilliseconds(other:any):number\r\n{\r\n\tif(other instanceof TimeUnitValue)\r\n\t{\r\n\t\tvar o:TimeUnitValue = other;\r\n\t\treturn o.type===TimeUnit.Milliseconds\r\n\t\t\t? o.value\r\n\t\t\t: o.toTimeSpan().milliseconds;\r\n\t}\r\n\telse if(other instanceof TimeSpan)\r\n\t{\r\n\t\treturn other._milliseconds;\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n\r\nvar timeSpanZero:TimeSpan;\r\n"]}