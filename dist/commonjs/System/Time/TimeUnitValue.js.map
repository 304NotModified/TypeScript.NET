{"version":3,"sources":["System/Time/TimeUnitValue.ts"],"names":["TimeUnitValue","TimeUnitValue.constructor","TimeUnitValue.getTotalMilliseconds","TimeUnitValue.to","TimeUnitValue.value","TimeUnitValue.units","TimeUnitValue.from","getUnitQuantityFrom"],"mappings":";;;;;;;;;;;;;;;;;;;;wBAUqB,YAAY;;;;6BACR,gBAAgB;;;;IAKzC,aAAA;cAAA,aAAA;;AAICA,aAJD,aAAA,CAIaA,KAA0BA,EAAUA,MAAeA,EAAAA;8BAJhE,aAAA;;AAMEC,mCANF,aAAA,6CAMQA,OAAOA,KAAKA,AAACA,IAAEA,QAAQA,GAClBA,KAAKA,GACbA,mBAAmBA,CAAgBA,KAAKA,EAAEA,MAAMA,CAACA,EAAEA;AAJPA,YAAAA,CAAAA,MAAMA,GAANA,MAAMA,CAASA;AAK9DA,8BAASA,WAAWA,CAACA,MAAMA,CAACA,CAACA;KAC7BA;;iBAVF,aAAA;;eAuBqBD,gCAAAA;AAEnBE,mBAAOA,sBAASA,cAAcA,CAACA,IAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,MAAMA,CAACA,CAACA;SAC5DA;;;eAQCF,cAA4BA;gBAA3BA,KAAKA,yDAAYA,IAAIA,CAACA,KAAKA;;AAE7BG,mBAAOA,aAAaA,CAACA,IAAIA,CAACA,IAAIA,EAACA,KAAKA,CAACA,CAACA;SACtCA;;;aAzBQH,eAAAA;AAERI,mBAAOA,IAAIA,CAACA,SAASA,CAACA;SACtBA;aAEQJ,aAACA,CAAQA,EAAAA;AAEjBI,gBAAIA,CAACA,MAAMA,GAAGA,IAAIA,CAACA;AACnBA,gBAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA;SACnBA;;;aAQQJ,eAAAA;AAERK,mBAAOA,IAAIA,CAACA,MAAMA,CAACA;SACnBA;;;eAOUL,cAACA,KAA0BA,EAAwCA;gBAAtCA,KAAKA,yDAAYA,sBAASA,YAAYA;;AAE7EM,mBAAOA,IAAIA,aAAaA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;SACvCA;;;WA1CF,aAAA;;;qBAAA,aAAA;;AA8CA,SAAA,mBAAA,CAA6B,CAAe,EAAE,KAAc,EAAA;AAE3DC,WAAOA,sBAASA,gBAAgBA,CAACA,CAACA,CAACA,oBAAoBA,EAAEA,EAAEA,KAAKA,CAACA,CAACA;CAClEA","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\nimport {areEqual, compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}