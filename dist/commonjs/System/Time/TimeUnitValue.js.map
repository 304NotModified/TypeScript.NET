{"version":3,"sources":["System/Time/TimeUnitValue.ts"],"names":["TimeUnitValue","TimeUnitValue.constructor","TimeUnitValue.coerce","TimeUnitValue.equals","TimeUnitValue.compareTo","TimeUnitValue.toTimeSpan","TimeUnitValue.to","TimeUnitValue.type","TimeUnitValue.total","assertComparisonType","assertValidUnit"],"mappings":";;;;;;;;;;;;;;;;uBASgC,YAAY;;wBACvB,YAAY;;;;wBACZ,YAAY;;;;IAGjC,aAAA;AAICA,aAJD,aAAA,CAIoBA,KAAYA,EAAUA,KAAcA,EAAAA;8BAJxD,aAAA;;AAIoBC,YAAAA,CAAAA,KAAKA,GAALA,KAAKA,CAAOA;AAAUA,YAAAA,CAAAA,KAAKA,GAALA,KAAKA,CAASA;AAEtDA,uBAAeA,CAACA,KAAKA,CAACA,CAACA;KACvBA;;iBAPF,aAAA;;eAcOD,gBAACA,KAASA,EAAAA;AAEfE,gBAAIA,IAAIA,GAAGA,IAAIA,CAACA,KAAKA,CAACA;AACtBA,2BAAeA,CAACA,IAAIA,CAACA,CAACA;AAEtBA,gBAAGA,KAAKA,iCAAoBA,EAAEA;AAC7BA,qBAAKA,GAAGA,KAAKA,CAACA,eAAeA,CAACA,IAAIA,CAACA,CAACA;aACpCA,MACIA,IAAGA,KAAKA,YAAYA,aAAaA,EAAEA;AACvCA,oBAAGA,IAAIA,KAAGA,KAAKA,CAACA,IAAIA,EACnBA,KAAKA,GAAGA,KAAKA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA;aACxBA,MAEAA,OAAOA,IAAIA,CAACA;AAEbA,mBAAOA,KAAKA,CAACA;SACbA;;;eAIKF,gBAACA,KAASA,EAAAA;AAEfG,gBAAIA,CAACA,GAAiBA,IAAIA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA;AACzCA,gBAAGA,CAACA,IAAEA,IAAIA,EACTA,OAAOA,KAAKA,CAACA;AAEdA,mBAAOA,uBAASA,IAAIA,CAACA,KAAKA,EAAEA,CAACA,CAACA,KAAKA,CAACA,CAACA;SACrCA;;;eAKQH,mBAACA,KAASA,EAAAA;AAElBI,gBAAGA,KAAKA,IAAEA,IAAIA,EAAEA,OAAOA,CAACA,GAAGA,CAACA,CAACA;AAE7BA,gCAAoBA,CAACA,KAAKA,CAACA,CAACA;AAE5BA,mBAAOA,sBAAQA,IAAIA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,KAAKA,CAACA,CAACA;SAErDA;;;eAQSJ,sBAAAA;AAETK,mBAAOA,0BAAaA,IAAIA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,CAACA;SAC3CA;;;eAMCL,cAA2BA;gBAA1BA,KAAKA,yDAAYA,IAAIA,CAACA,IAAIA;;AAE5BM,mBAAOA,IAAIA,CAACA,UAAUA,EAAEA,CAACA,eAAeA,CAACA,KAAKA,CAACA,CAACA;SAChDA;;;aAjBON,eAAAA;AAEPO,mBAAOA,IAAIA,CAACA,KAAKA,CAACA;SAClBA;;;aAOQP,eAAAA;AACRQ,mBAAOA,IAAIA,CAACA,UAAUA,EAAEA,CAACA;SACzBA;;;WArEF,aAAA;;;qBAAA,aAAA;;AA8EA,SAAA,oBAAA,CAA8B,KAAS,EAAA;AAEtCC,QAAGA,EAAEA,KAAKA,YAAYA,aAAaA,IAAIA,KAAKA,iCAAoBA,CAAAA,AAACA,EAChEA,MAAMA,IAAIA,KAAKA,CAACA,sEAAsEA,CAACA,CAACA;CACzFA;AAGD,SAAA,eAAA,CAAyB,IAAa,EAAA;AAErCC,QAAGA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,IAAIA,GAACA,sBAASA,IAAIA,IAAIA,IAAIA,GAACA,sBAASA,KAAKA,IAAIA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,KAAGA,IAAIA,EACrFA,MAAMA,IAAIA,KAAKA,CAACA,mBAAmBA,CAACA,CAACA;AAEtCA,WAAOA,IAAIA,CAACA;CACZA","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\nimport {areEqual, compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeSpan from './TimeSpan';\r\n\r\n// This class allows for passing around a specific measure of time coerced by its unit type.\r\nexport default\r\nclass TimeUnitValue implements IEquatable<TimeUnitValue>, IComparable<TimeUnitValue>, ITimeTotal\r\n{\r\n\r\n\tconstructor(public value:number, private _type:TimeUnit)\r\n\t{\r\n\t\tassertValidUnit(_type);\r\n\t}\r\n\r\n\r\n\t// Attempts to convert value to current unit type.\r\n\t// If not coercible, it returns null.\r\n\tcoerce(other:TimeSpan):TimeUnitValue;\r\n\tcoerce(other:TimeUnitValue):TimeUnitValue;\r\n\tcoerce(other:any):TimeUnitValue\r\n\t{\r\n\t\tvar type = this._type;\r\n\t\tassertValidUnit(type);\r\n\r\n\t\tif(other instanceof TimeSpan) {\r\n\t\t\tother = other.toTimeUnitValue(type);\r\n\t\t}\r\n\t\telse if(other instanceof TimeUnitValue) {\r\n\t\t\tif(type!==other.type)\r\n\t\t\t\tother = other.to(type);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn null;\r\n\r\n\t\treturn other;\r\n\t}\r\n\r\n\tequals(other:TimeSpan):boolean;\r\n\tequals(other:TimeUnitValue):boolean;\r\n\tequals(other:any):boolean\r\n\t{\r\n\t\tvar o:TimeUnitValue = this.coerce(other);\r\n\t\tif(o==null)\r\n\t\t\treturn false;\r\n\r\n\t\treturn areEqual(this.value, o.value);\r\n\t}\r\n\r\n\r\n\tcompareTo(other:TimeSpan):number;\r\n\tcompareTo(other:TimeUnitValue):number;\r\n\tcompareTo(other:any):number\r\n\t{\r\n\t\tif(other==null) return 1 | 0;\r\n\r\n\t\tassertComparisonType(other);\r\n\r\n\t\treturn compare(this.value, this.coerce(other).value);\r\n\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget type():TimeUnit\r\n\t{\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\ttoTimeSpan():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.value, this.type);\r\n\t}\r\n\r\n\tget total():ITimeMeasurement {\r\n\t\treturn this.toTimeSpan();\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.type):TimeUnitValue\r\n\t{\r\n\t\treturn this.toTimeSpan().toTimeUnitValue(units);\r\n\t}\r\n\r\n}\r\n\r\nfunction assertComparisonType(other:any):void\r\n{\r\n\tif(!(other instanceof TimeUnitValue || other instanceof TimeSpan))\r\n\t\tthrow new Error(\"Invalid comparison type.  Must be of type TimeUnitValue or TimeSpan.\");\r\n}\r\n\r\n\r\nfunction assertValidUnit(unit:TimeUnit):boolean\r\n{\r\n\tif(isNaN(unit) || unit>TimeUnit.Days || unit<TimeUnit.Ticks || Math.floor(unit)!==unit)\r\n\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\r\n\treturn true;\r\n}\r\n"]}