{"version":3,"sources":["System/Uri/Uri.ts"],"names":["Uri","Uri.constructor","Uri.equals","Uri.copyTo","Uri.getAbsoluteUri","Uri.getAuthority","Uri.getPathAndQuery","Uri.toMap","Uri.toString","Uri.pathSegments","Uri.from","Uri.parse","Uri.tryParse","Uri.copyOf","Uri.Fields","copyUri","getScheme","getAuthority","formatQuery","formatFragment","getPathAndQuery","uriToString","tryParse"],"mappings":"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A,GAAGA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;KAC1BA;AAGDA,KAACA,GAAGA,GAAGA,CAACA,OAAOA,CAACA,EAAEA,CAACA,CAACA;AACpBA,QAAGA,CAACA,IAAGA,CAACA,CAACA,EACTA;AACCA,cAAMA,CAACA,KAAKA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;AAChCA,WAAGA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;KAC1BA;AAGDA,KAACA,GAAGA,GAAGA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA;AACxBA,QAAGA,CAACA,IAAGA,CAACA,CAACA,EACTA;AACCA,YAAIA,MAAMA,GAAGA,uBAAKA,GAAGA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAAEA,CAACA,GAAGA,IAAIA,CAACA;AACjDA,YAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,EACjBA,OAAOA,6CAAsBA,KAAKA,EAACA,iCAAiCA,CAACA,CAACA;AAEvEA,cAAMA,GAAGA,uBAAKA,MAAMA,CAACA,OAAOA,CAACA,CAACA,EAACA,KAAKA,CAACA,CAACA,CAACA;AACvCA,cAAMA,CAACA,MAAMA,GAAGA,MAAMA,IAAIA,SAASA,CAACA;AAEpCA,WAAGA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;KAC3BA;AAGDA,KAACA,GAAGA,GAAGA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;AACvBA,QAAGA,CAACA,IAAGA,CAACA,CAACA,EACTA;AACCA,cAAMA,CAACA,IAAIA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,CAACA,IAAIA,SAASA,CAACA;AAC5CA,WAAGA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;KAC1BA;AAGDA,KAACA,GAAGA,GAAGA,CAACA,OAAOA,CAACA,EAAEA,CAACA,CAACA;AACpBA,QAAGA,CAACA,IAAGA,CAACA,CAACA,EACTA;AACCA,cAAMA,CAACA,QAAQA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,IAAIA,SAASA,CAACA;AACnDA,WAAGA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;KAC3BA;AAGDA,KAACA,GAAGA,GAAGA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;AACrBA,QAAGA,CAACA,IAAGA,CAACA,CAACA,EACTA;AACCA,YAAIA,IAAIA,GAAGA,QAAQA,CAACA,uBAAKA,GAAGA,CAACA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;AAChDA,YAAGA,KAAKA,CAACA,IAAIA,CAACA,EACbA,OAAOA,6CAAsBA,KAAKA,EAACA,mBAAmBA,CAACA,CAACA;AAEzDA,cAAMA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;AACnBA,WAAGA,GAAGA,GAAGA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;KAC1BA;AAEDA,OAAGA,GAAGA,uBAAKA,GAAGA,CAACA,CAACA;AAChBA,QAAGA,GAAGA,EACLA,MAAMA,CAACA,IAAIA,GAAGA,GAAGA,CAACA;AAEnBA,OAAGA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA,CAACA;AAGrBA,WAAOA,IAAIA,CAACA;CAEZA;qBAEc,GAAG","file":"System/Uri/Uri.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\r\n */\r\n\r\n///<reference path=\"IUri.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\nimport Type from '../Types';\r\nimport * as QueryParams from '../Uri/QueryParams';\r\nimport {trim} from '../Text/Utility';\r\nimport UriScheme from '../Uri/Scheme';\r\nimport Exception from '../Exception';\r\nimport ArgumentException from '../Exceptions/ArgumentException';\r\nimport ArgumentNullException from '../Exceptions/ArgumentNullException';\r\nimport ArgumentOutOfRangeException from '../Exceptions/ArgumentOutOfRangeException';\r\n\r\n/**\r\n * Provides an read-only model representation of a uniform resource identifier (URI) and easy access to the parts of the URI.\r\n *\r\n * The read-only model (frozen) is easier for debugging than exposing accessors for each property.\r\n */\r\nclass Uri implements IUri, IEquatable<IUri>\r\n{\r\n\r\n\tscheme:string;\r\n\tuserInfo:string;\r\n\thost:string;\r\n\tport:number;\r\n\tpath:string;\r\n\tquery:string;\r\n\tfragment:string;\r\n\r\n\tqueryParams:IMap<Primitive|Primitive[]>;\r\n\r\n\t/**\r\n\t * @param scheme The user name, password, or other user-specific information associated with the specified URI.\r\n\t * @param userInfo The host component of this instance.\r\n\t * @param host The port number of this URI.\r\n\t * @param port The absolute path of the URI.\r\n\t * @param path The absolute path of the URI.\r\n\t * @param query Any query information included in the specified URI.\r\n\t * @param fragment The escaped URI fragment.\r\n\t */\r\n\tconstructor(\r\n\t\tscheme:UriScheme|string,\r\n\t\tuserInfo:string,\r\n\t\thost:string,\r\n\t\tport:number,\r\n\t\tpath:string,\r\n\t\tquery:string|IUriComponentMap|IKeyValuePair<string,Primitive>[],\r\n\t\tfragment:string)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.scheme = getScheme(scheme) || null;\r\n\t\t_.userInfo = userInfo || null;\r\n\t\t_.host = host || null;\r\n\t\t_.port = port || null;\r\n\r\n\t\t_.authority = _.getAuthority() || null;\r\n\r\n\t\t_.path = path || null;\r\n\r\n\r\n\t\tif(!Type.isString(query))\r\n\t\t\tquery = QueryParams.encode(<IUriComponentMap|IKeyValuePair<string,Primitive>[]>query);\r\n\r\n\t\t_.query = formatQuery(<string>query) || null;\r\n\t\tObject.freeze(_.queryParams\r\n\t\t\t= _.query\r\n\t\t\t? QueryParams.parseToMap(_.query)\r\n\t\t\t: {});\r\n\r\n\t\t_.pathAndQuery = _.getPathAndQuery() || null;\r\n\r\n\t\t_.fragment = formatFragment(fragment) || null;\r\n\r\n\t\t// This should validate the uri...\r\n\t\t_.absoluteUri = _.getAbsoluteUri();\r\n\r\n\t\t// Intended to be read-only.  Call .toMap() to get a writable copy.\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\t/**\r\n\t *  Compares the values of another IUri via toString comparison.\r\n \t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:IUri):boolean\r\n\t{\r\n\t\treturn this===other || this.absoluteUri==Uri.toString(other);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Parses or clones values from existing Uri values.\r\n\t * @param url\r\n\t * @returns {Uri} An validated Uri object with the values.\r\n\t */\r\n\tstatic from(url:string|IUri):Uri\r\n\t{\r\n\t\tvar uri = (!url || Type.isString(url))\r\n\t\t\t? Uri.parse(<string>url) : <IUri>url;\r\n\r\n\t\treturn new Uri(\r\n\t\t\turi.scheme,\r\n\t\t\turi.userInfo,\r\n\t\t\turi.host,\r\n\t\t\turi.port,\r\n\t\t\turi.path,\r\n\t\t\turi.query,\r\n\t\t\turi.fragment\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param throwIfInvalid\r\n\t * @returns {IUri} Returns a map of the values or *null* if invalid and *throwIfInvalid* is <b>false</b>.\r\n\t */\r\n\tstatic parse(url:string, throwIfInvalid:boolean = true):IUri\r\n\t{\r\n\t\tvar result:IUri = null;\r\n\t\tvar ex = tryParse(url,(out)=>{result = out;});\r\n\t\tif(throwIfInvalid && ex) throw ex;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param out A delegate to capture the value.\r\n\t * @returns {boolean} True if valid.  False if invalid.\r\n\t */\r\n\tstatic tryParse(url:string,out:(result:IUri)=>void):boolean {\r\n\t\treturn !tryParse(url,out); // return type is Exception.\r\n\t}\r\n\r\n\tstatic copyOf(map:IUri):IUri {\r\n\t\treturn copyUri(map);\r\n\t}\r\n\r\n\tcopyTo(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(this,map);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAbsoluteUri():string\r\n\t{\r\n\t\treturn uriToString(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAuthority():string\r\n\t{\r\n\t\treturn getAuthority(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getPathAndQuery():string\r\n\t{\r\n\t\treturn getPathAndQuery(this);\r\n\t}\r\n\r\n\t/**\r\n\t * The absolute URI.\r\n\t */\r\n\tabsoluteUri:string;\r\n\r\n\t/**\r\n\t * Gets the Domain Name System (DNS) host name or IP address and the port number for a server.\r\n\t */\r\n\tauthority:string;\r\n\r\n\t/**\r\n\t * Gets the path and Query properties separated by a question mark (?).\r\n\t */\r\n\tpathAndQuery:string;\r\n\r\n\t/**\r\n\t * The segments that represent a path.<br/>\r\n\t * https://msdn.microsoft.com/en-us/library/system.uri.segments%28v=vs.110%29.aspx\r\n\t *\r\n\t * <h5><b>Example:</b></h5>\r\n\t * If the path value equals: ```/tree/node/index.html```<br/>\r\n\t * The result will be: ```['/','tree/','node/','index.html']```\r\n\t * @returns {string[]}\r\n\t */\r\n\tget pathSegments():string[]\r\n\t{\r\n\t\treturn this.path.match(/^[/]|[^/]*[/]|[^/]+$/g);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a writable copy.\r\n\t * @returns {IUri}\r\n\t */\r\n\ttoMap():IUri\r\n\t{\r\n\t\treturn this.copyTo({});\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} The full absolute uri.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.absoluteUri;\r\n\t}\r\n\r\n\t/**\r\n\t * Properly converts an existing URI to a string.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic toString(uri:IUri):string\r\n\t{\r\n\t\treturn uri instanceof Uri\r\n\t\t\t? (<Uri>uri).absoluteUri\r\n\t\t\t: uriToString(uri);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the authority segment of an URI.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getAuthority(uri:IUri):string\r\n\t{\r\n\t\treturn getAuthority(uri);\r\n\t}\r\n\r\n\r\n}\r\n\r\nmodule Uri {\r\n\texport enum Fields {\r\n\t\tscheme,\r\n\t\tuserInfo,\r\n\t\thost,\r\n\t\tport,\r\n\t\tpath,\r\n\t\tquery,\r\n\t\tfragment\r\n\t}\r\n\tObject.freeze(Fields);\r\n}\r\n\r\nfunction copyUri(from:IUri, to:IUri = {}) {\r\n\tvar i = 0, field:string;\r\n\twhile(field = Uri.Fields[i++]) {\r\n\t\tvar value = (<any>from)[field];\r\n\t\tif(value) (<any>to)[field] = value;\r\n\t}\r\n\treturn to;\r\n}\r\n\r\nconst SLASH = '/', SLASH2 = '//', QM = '?', HASH = '#', EMPTY = '', AT = '@';\r\n\r\nfunction getScheme(scheme:UriScheme|string):string\r\n{\r\n\tvar s:any = scheme;\r\n\tif(Type.isString(s))\r\n\t{\r\n\t\tif(!s) return undefined;\r\n\r\n\t\ts = UriScheme[<any>trim(s).toLowerCase().replace(/[^a-z0-9+.-]+$/g, EMPTY)];\r\n\r\n\t\tif(isNaN(s))\r\n\t\t\tthrow new ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\r\n\t}\r\n\r\n\tif(Type.isNumber(s, false))\r\n\t{\r\n\t\ts = UriScheme[<number>s];\r\n\t\tif(!s)\r\n\t\t\tthrow new ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n\r\nfunction getAuthority(uri:IUri):string\r\n{\r\n\r\n\tif(!uri.host)\r\n\t{\r\n\t\tif(uri.userInfo)\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include user info when there is no host.');\r\n\r\n\t\tif(Type.isNumber(uri.port,false))\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include a port when there is no host.');\r\n\t}\r\n\r\n\t/*\r\n\t * [//[user:password@]host[:port]]\r\n\t */\r\n\r\n\tvar result = uri.host || EMPTY;\r\n\r\n\tif(result)\r\n\t{\r\n\t\tif(uri.userInfo) result = uri.userInfo + AT + result;\r\n\t\tif(!isNaN(uri.port)) result += ':' + uri.port;\r\n\t\tresult = SLASH2 + result;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction formatQuery(query:string):string\r\n{\r\n\treturn query && ((query.indexOf(QM)== -1 ? QM : EMPTY) + query);\r\n}\r\n\r\nfunction formatFragment(fragment:string):string\r\n{\r\n\treturn fragment && ((fragment.indexOf(HASH)== -1 ? HASH : EMPTY) + fragment);\r\n}\r\n\r\nfunction getPathAndQuery(uri:IUri):string\r\n{\r\n\r\n\tvar path  = uri.path,\r\n\t    query = uri.query;\r\n\r\n\treturn EMPTY\r\n\t\t+ (path && ((path.indexOf(SLASH)== -1 ? SLASH : EMPTY) + path) || EMPTY)\r\n\t\t+ (formatQuery(query) || EMPTY);\r\n\r\n}\r\n\r\nfunction uriToString(uri:IUri):string\r\n{\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\t// {scheme}{authority}{path}{query}{fragment}\r\n\r\n\tvar scheme       = getScheme(uri.scheme),\r\n\t    authority    = getAuthority(uri),\r\n\t    pathAndQuery = getPathAndQuery(uri),\r\n\t    fragment     = formatFragment(uri.fragment);\r\n\r\n\treturn EMPTY\r\n\t\t+ ((scheme && (scheme + ':')) || EMPTY)\r\n\t\t+ (authority || EMPTY)\r\n\t\t+ (pathAndQuery || EMPTY)\r\n\t\t+ (fragment || EMPTY)\r\n\r\n}\r\n\r\n\r\n\r\nfunction tryParse(url:string, out:(result:IUri)=>void):Exception\r\n{\r\n\tif(!url)\r\n\t\treturn new ArgumentException('url', 'Nothing to parse.');\r\n\r\n\r\n\t// Could use a regex here, but well follow some rules instead.\r\n\t// The intention is to 'gather' the pieces.  This isn't validation (yet).\r\n\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\tvar i:number, result:IUri = {};\r\n\r\n\t// Anything after the first # is the fragment.\r\n\ti = url.indexOf(HASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.fragment = url.substring(i);\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Anything after the first ? is the query.\r\n\ti = url.indexOf(QM);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.query = url.substring(i);\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Guarantees a separation.\r\n\ti = url.indexOf(SLASH2);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar scheme = trim(url.substring(0, i)), c = /:$/;\r\n\t\tif(!c.test(scheme))\r\n\t\t\treturn new ArgumentException('url','Scheme was improperly formatted');\r\n\r\n\t\tscheme = trim(scheme.replace(c,EMPTY));\r\n\t\tresult.scheme = scheme || undefined;\r\n\r\n\t\turl = url.substring(i + 2);\r\n\t}\r\n\r\n\t// Find any path information.\r\n\ti = url.indexOf(SLASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.path = url.substring(i) || undefined;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Separate user info.\r\n\ti = url.indexOf(AT);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.userInfo = url.substring(0, i) || undefined;\r\n\t\turl = url.substring(i + 1);\r\n\t}\r\n\r\n\t// Remaining is host and port.\r\n\ti = url.indexOf(':');\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar port = parseInt(trim(url.substring(i + 1)));\r\n\t\tif(isNaN(port))\r\n\t\t\treturn new ArgumentException('url','Port was invalid.');\r\n\r\n\t\tresult.port = port;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\turl = trim(url);\r\n\tif(url)\r\n\t\tresult.host = url;\r\n\r\n\tout(copyUri(result));\r\n\r\n\t// null is good! (here)\r\n\treturn null;\r\n\r\n}\r\n\r\nexport default Uri;\r\n"]}