{"version":3,"sources":["System/Serialization/Utility.ts"],"names":["toString","isSerializable","toPrimitive"],"mappings":";;;;;;;;;;;;;;;qBAQiB,UAAU;;;;mDACW,yCAAyC;;;;AAG/E,IAAM,KAAK,GAAG,EAAE;IAAE,IAAI,GAAG,MAAM;IAAE,KAAK,GAAG,OAAO,CAAC;;AAEjD,SAAA,QAAA,CACC,KAA6B,EAC7B,iBAAyB,EAAA;AAGzBA,QAAIA,CAACA,GAAQA,KAAKA,CAACA;AACnBA,YAAOA,OAAOA,CAACA;AAEdA,aAAKA,mBAAKA,SAASA,CAACA;AACpBA,aAAKA,mBAAKA,MAAMA;AACfA,mBAAOA,CAACA,CAACA;AAAAA,AACVA,aAAKA,mBAAKA,OAAOA;AAChBA,mBAAOA,CAACA,GAAGA,IAAIA,GAAGA,KAAKA,CAACA;AAAAA,AACzBA,aAAKA,mBAAKA,MAAMA;AACfA,mBAAOA,KAAKA,GAAGA,CAACA,CAACA;AAAAA,AAClBA;AAECA,gBAAGA,CAACA,KAAGA,IAAIA,EACVA,OAAOA,CAACA,CAACA;AAEVA,gBAAGA,cAAcA,CAACA,CAACA,CAACA,EACnBA,OAAOA,CAACA,CAACA,SAASA,EAAEA,CAACA,KACjBA,IAAGA,SAASA,CAACA,MAAMA,GAACA,CAACA,EACzBA,OAAOA,iBAAiBA,CAACA;AAE1BA,gBAAIA,EAAEA,GAAGA,qDAA8BA,8CAA8CA,CAACA,CAACA;AACvFA,cAAEA,CAACA,IAAIA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;AACrBA,kBAAMA,EAAEA,CAACA;AAAAA,KAEVA;CAEDA;;AAED,SAAA,cAAA,CAA+B,QAAY,EAAA;AAC1CC,WAAOA,mBAAKA,eAAeA,CAAgBA,QAAQA,EAACA,WAAWA,EAACA,mBAAKA,QAAQA,CAACA,CAACA;CAC/EA;;AAED,SAAA,WAAA,CACC,KAAY,EACZ,eAAwB,EACxB,cAAkC,EAAA;AAIlCC,QAAGA,KAAKA,EACRA;AACCA,YAAGA,eAAeA,EAAEA,KAAKA,GAAGA,KAAKA,CAACA,WAAWA,EAAEA,CAACA;AAEhDA,gBAAOA,KAAKA;AAEXA,iBAAKA,MAAMA;AACVA,uBAAOA,IAAIA,CAACA;AAAAA,AACbA,iBAAKA,mBAAKA,SAASA;AAClBA,uBAAOA,SAASA,CAACA;AAAAA,AAClBA,iBAAKA,IAAIA;AACRA,uBAAOA,IAAIA,CAACA;AAAAA,AACbA,iBAAKA,KAAKA;AACTA,uBAAOA,KAAKA,CAACA;AAAAA,AACdA;AAECA,oBAAIA,OAAOA,GAAGA,KAAKA,CAACA,OAAOA,CAACA,cAAcA,EAACA,KAAKA,CAACA,CAACA;AAClDA,oBAAGA,OAAOA,EAAEA;AAEXA,wBAAGA,QAAQA,CAACA,IAAIA,CAACA,OAAOA,CAACA,EAAEA;AAC1BA,4BAAIA,GAAGA,GAAGA,QAAQA,CAACA,OAAOA,CAACA,CAACA;AAC5BA,4BAAGA,CAACA,KAAKA,CAACA,GAAGA,CAACA,EAAEA,OAAOA,GAAGA,CAACA;qBAC3BA,MAAMA;AACNA,4BAAIA,MAAMA,GAAGA,UAAUA,CAACA,KAAKA,CAACA,CAACA;AAC/BA,4BAAGA,CAACA,KAAKA,CAACA,MAAMA,CAACA,EAAEA,OAAOA,MAAMA,CAACA;qBACjCA;iBAEDA;AAKDA,oBAAGA,cAAcA,EAAEA,KAAKA,GAAGA,cAAcA,CAACA,KAAKA,CAACA,CAACA;AAEjDA,sBAAMA;AAAAA,SACPA;KAEDA;AAEDA,WAAOA,KAAKA,CAACA;CAEbA","file":"System/Serialization/Utility.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ISerializable.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n\r\nimport Type from '../Types';\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tvar v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.UNDEFINED:\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v===null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(arguments.length>1)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tvar ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable {\r\n\treturn Type.hasMemberOfType<ISerializable>(instance,'serialize',Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn undefined;\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tvar cleaned = value.replace(/^\\s+|,|\\s+$/g,EMPTY);\r\n\t\t\t\tif(cleaned) {\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned)) {\r\n\t\t\t\t\t\tvar int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}