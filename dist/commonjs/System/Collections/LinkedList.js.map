{"version":3,"sources":["System/Collections/LinkedList.ts"],"names":[],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {ILinkedListNode, ILinkedNode, INodeWithValue} from \"./ILinkedListNode\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {ILinkedList} from \"./ILinkedList\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>|null,\r\n\t\tpublic next?:InternalNode<T>|null)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:InternalNode<T>|null|undefined, list:LinkedList<T>):ILinkedListNode<T>|null\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nfunction detachExternal(node:InternalNode<any>):void\r\n{\r\n\tif(node)\r\n\t{\r\n\t\tvar e:any = node.external;\r\n\t\tif(e)\r\n\t\t{\r\n\t\t\te._list = VOID0;\r\n\t\t\te._nodeInternal = VOID0;\r\n\t\t}\r\n\t\tnode.external = VOID0;\r\n\t}\r\n}\r\n\r\nexport class LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(VOID0, equalityComparer);\r\n\t\tconst _ = this;\r\n\t\t_._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\t_._importEntries(source);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar l = this._listInternal;\r\n\t\tthis._listInternal = <any>null;\r\n\t\tl.dispose();\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li ? li.unsafeCount : 0;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _            = this,\r\n\t\t    equals       = _._equalityComparer,\r\n\t\t    list         = _._listInternal,\r\n\t\t    removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(node && equals(entry, node.value) && _._removeNodeInternal(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t});\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar list = this._listInternal;\r\n\t\tlist.forEach(node=>detachExternal(node));\r\n\t\treturn list.clear();\r\n\t}\r\n\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._listInternal.forEach((node, i)=>action(<any>node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>|null\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tconst\r\n\t\t\t_      = this,\r\n\t\t\tequals = _._equalityComparer;\r\n\r\n\t\tvar next:any = _._listInternal && _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>|null\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tconst\r\n\t\t\t_      = this,\r\n\t\t\tequals = _._equalityComparer;\r\n\r\n\t\tvar prev:any = _._listInternal && _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>|null\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.first, this);\r\n\t}\r\n\r\n\tget firstValue():T\r\n\t{\r\n\t\tvar li = this._listInternal, node = li && li.first;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>|null\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn ensureExternal(li.last, this);\r\n\t}\r\n\r\n\tget lastValue():T\r\n\t{\r\n\t\tvar li = this._listInternal, node = li && li.last;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\tvar li = this._listInternal, node = li && li.getNodeAt(index);\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>|null\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>|null\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>|null\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis.assertModifiable();\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tprivate _removeNodeInternal(node:InternalNode<T>|null|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(node && _._listInternal.removeNode(node))\r\n\t\t{\r\n\t\t\tdetachExternal(node);\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.last);\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.getNodeAt(index));\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(getInternal(node, _));\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>, IDisposable\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tprivate throwIfDetached():void\r\n\t{\r\n\t\tif(!this._list)\r\n\t\t\tthrow new Error(\"This node has been detached from its list and is no longer valid.\");\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>|null\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>|null\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn <any>this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\r\n\tremove():void\r\n\t{\r\n\t\tvar list = this._list;\r\n\t\tif(list) list.removeNode(this);\r\n\t\tthis._list = VOID0;\r\n\t\tthis._nodeInternal = VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.remove();\r\n\t}\r\n\r\n}\r\n\r\nexport default LinkedList;\r\n"]}