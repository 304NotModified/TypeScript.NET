{"version":3,"sources":["System/Collections/LinkedList.ts"],"names":["Node","Node.constructor","Node.assertDetached","ensureExternal","getInternal","LinkedList","LinkedList.constructor","LinkedList._addFirst","LinkedList._addLast","LinkedList._addNodeBefore","LinkedList._addNodeAfter","LinkedList._findFirst","LinkedList._findLast","LinkedList.forEach","LinkedList.getEnumerator","LinkedList.add","LinkedList.clear","LinkedList.contains","LinkedList.copyTo","LinkedList.toArray","LinkedList.removeOnce","LinkedList.remove","LinkedList._getNodeAt","LinkedList.getValueAt","LinkedList.getNodeAt","LinkedList.find","LinkedList.findLast","LinkedList.addFirst","LinkedList.addLast","LinkedList.removeFirst","LinkedList.removeLast","LinkedList.removeNode","LinkedList.addBefore","LinkedList.addAfter","LinkedList.addNodeBefore","LinkedList.addNodeAfter","LinkedList.count","LinkedList.isReadOnly","LinkedList.first","LinkedList.last","LinkedListNode","LinkedListNode.constructor","LinkedListNode.addBefore","LinkedListNode.addAfter","LinkedListNode.addNodeBefore","LinkedListNode.addNodeAfter","LinkedListNode.remove","LinkedListNode.list","LinkedListNode.previous","LinkedListNode.next","LinkedListNode.value"],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\n///<reference path=\"ILinkedListNode.d.ts\"/>\r\n///<reference path=\"ILinkedList.d.ts\"/>\r\nimport * as Values from '../Compare';\r\nimport * as TextUtility from '../Text/Utility';\r\nimport * as ArrayUtility from '../Collections/Array/Utility';\r\nimport * as Enumerator from './Enumeration/Enumerator';\r\nimport EnumeratorBase from './Enumeration/EnumeratorBase';\r\n\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\n\r\nimport ArgumentException from '../Exceptions/ArgumentException';\r\nimport ArgumentNullException from '../Exceptions/ArgumentNullException';\r\nimport ArgumentOutOfRangeException from '../Exceptions/ArgumentOutOfRangeException';\r\n\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n\r\nclass Node<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic prev?:Node<T>,\r\n\t\tpublic next?:Node<T>)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.prev)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:Node<T>, list:LinkedList<T>):ILinkedListNode<T>\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):Node<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\r\n\t\t\t\"Cannot be null.\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:Node<T> = (<any>node)._node;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nexport default\r\nclass LinkedList<T>\r\nimplements ILinkedList<T>\r\n{\r\n\tprivate _first:Node<T>;\r\n\tprivate _last:Node<T>;\r\n\tprivate _count:number;\r\n\r\n\tconstructor(source?:IEnumerable<T>);\r\n\tconstructor(source?:IArray<T>);\r\n\tconstructor(source:any)\r\n\t{\r\n\t\tvar _ = this, c = 0, first:Node<T> = null, last:Node<T> = null;\r\n\t\tvar e = Enumerator.from<T>(source);\r\n\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tfirst = last = new Node<T>(e.current);\r\n\t\t\t++c;\r\n\t\t}\r\n\r\n\t\twhile(e.moveNext())\r\n\t\t{\r\n\t\t\tlast = last.next = new Node<T>(e.current, last);\r\n\t\t\t++c;\r\n\t\t}\r\n\r\n\t\t_._first = first;\r\n\t\t_._last = last;\r\n\t\t_._count = c;\r\n\t}\r\n\r\n\t// #region Internals.\r\n\r\n\tprivate _addFirst(entry:T):Node<T>\r\n\t{\r\n\t\tvar _ = this, first = _._first;\r\n\t\tvar prev = new Node(entry, null, first);\r\n\t\tif(first)\r\n\t\t\tfirst.prev = prev;\r\n\t\telse\r\n\t\t\t_._last = prev;\r\n\r\n\t\t_._first = prev;\r\n\r\n\t\t_._count += 1;\r\n\r\n\t\treturn prev;\r\n\t}\r\n\r\n\tprivate _addLast(entry:T):Node<T>\r\n\t{\r\n\t\tvar _ = this, last = _._last;\r\n\t\tvar next = new Node(entry, last);\r\n\t\tif(last)\r\n\t\t\tlast.next = next;\r\n\t\telse\r\n\t\t\t_._first = next;\r\n\r\n\t\t_._last = next;\r\n\t\t_._count += 1;\r\n\r\n\t\treturn next;\r\n\t}\r\n\r\n\tprivate _addNodeBefore(n:Node<T>, inserting:Node<T>):void\r\n\t{\r\n\t\tinserting.assertDetached();\r\n\r\n\t\tinserting.next = n;\r\n\t\tinserting.prev = n.prev;\r\n\r\n\t\tn.prev.next = inserting;\r\n\t\tn.prev = inserting;\r\n\r\n\t\tthis._count += 1;\r\n\t}\r\n\r\n\r\n\tprivate _addNodeAfter(n:Node<T>, inserting:Node<T>):void\r\n\t{\r\n\t\tinserting.assertDetached();\r\n\r\n\t\tinserting.prev = n;\r\n\t\tinserting.next = n.next;\r\n\r\n\t\tn.next.prev = inserting;\r\n\t\tn.next = inserting;\r\n\r\n\t\tthis._count += 1;\r\n\t}\r\n\r\n\tprivate _findFirst(entry:T):Node<T>\r\n\t{\r\n\t\tvar equals = Values.areEqual,\r\n\t\t    next   = this._first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):Node<T>\r\n\t{\r\n\t\tvar equals = Values.areEqual,\r\n\t\t    prev   = this._last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.prev;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region IEnumerateEach<T>\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):void\r\n\t{\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tvar array = this.toArray();\r\n\t\t\tArrayUtility.forEach(array, action);\r\n\t\t\tarray.length = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar next = this._first, index:number = 0;\r\n\t\t\twhile(next && <any>action(next.value, index++)!==false)\r\n\t\t\t{\r\n\t\t\t\tnext = next.next;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this, current:Node<T>;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tcurrent = new Node(null, null, _._first);\r\n\t\t\t}, // Initialize anchor...\r\n\t\t\t(yielder)=>\r\n\t\t\t\t(current = current.next)\r\n\t\t\t\t\t? yielder.yieldReturn(current.value)\r\n\t\t\t\t\t: yielder.yieldBreak()\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region ICollection<T>\r\n\tget count():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tadd(entry:T):void\r\n\t{\r\n\t\tthis._addLast(entry);\r\n\t}\r\n\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._first = null;\r\n\t\t_._last = null;\r\n\t\tvar count = _._count;\r\n\t\t_._count = 0;\r\n\t\treturn count;\r\n\t}\r\n\r\n\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tvar found:boolean = false, equals = Values.areEqual;\r\n\t\tthis.forEach(e => !(found = equals(entry, e)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\tcopyTo(array:T[], index:number = 0):T[]\r\n\t{\r\n\t\tthis.forEach(\r\n\t\t\t(entry, i) =>\r\n\t\t\t{\r\n\t\t\t\tarray[index + i] = entry;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn array;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar array = ArrayUtility.initialize<T>(this._count);\r\n\t\treturn this.copyTo(array);\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar node:Node<T> = _._findFirst(entry);\r\n\t\tif(node)\r\n\t\t{\r\n\t\t\tvar prev = node.prev, next = node.next;\r\n\t\t\tif(prev) prev.next = next;\r\n\t\t\telse _._first = next;\r\n\t\t\tif(next) next.prev = prev;\r\n\t\t\telse _._last = prev;\r\n\r\n\t\t\t_._count -= 1;\r\n\t\t}\r\n\r\n\t\treturn node!=null;\r\n\r\n\t}\r\n\r\n\tremove(entry:T):number\r\n\t{\r\n\t\tvar _ = this, removedCount:number = 0;\r\n\t\twhile(_.removeOnce(entry))\r\n\t\t{\r\n\t\t\t++removedCount;\r\n\t\t}\r\n\t\treturn removedCount;\r\n\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\tget first():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._first, this);\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._last, this);\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\tprivate _getNodeAt(index:number):Node<T>\r\n\t{\r\n\t\tif(index<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\r\n\t\t\t\t'index', index, 'Is less than zero.');\r\n\r\n\t\tif(index>=this._count)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\r\n\t\t\t\t'index', index, 'Is greater than count.');\r\n\r\n\t\tvar next = this._first, i:number = 0;\r\n\t\twhile(next && index<i++)\r\n\t\t{\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\r\n\t\treturn next;\r\n\r\n\t}\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\treturn this._getNodeAt(index).value;\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis._addFirst(entry);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis._addLast(entry);\r\n\t}\r\n\r\n\tremoveFirst():void\r\n\t{\r\n\t\tvar _ = this, first = _._first;\r\n\t\tif(first)\r\n\t\t{\r\n\t\t\tvar next = first.next;\r\n\t\t\t_._first = next;\r\n\t\t\tif(next) // Might have been the last.\r\n\t\t\t\tnext.prev = null;\r\n\r\n\t\t\t_._count -= 1;\r\n\t\t}\r\n\t}\r\n\r\n\tremoveLast():void\r\n\t{\r\n\t\tvar _ = this, last = _._last;\r\n\t\tif(last)\r\n\t\t{\r\n\t\t\tvar prev = last.prev;\r\n\t\t\t_._last = prev;\r\n\t\t\tif(prev) // Might have been the first.\r\n\t\t\t\tprev.next = null;\r\n\r\n\t\t\t_._count -= 1;\r\n\t\t}\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n:Node<T> = getInternal(node, _);\r\n\t\tvar prev = n.prev, next = n.next, a:boolean = false, b:boolean = false;\r\n\r\n\r\n\t\tif(prev) prev.next = next;\r\n\t\telse if(_._first==n) _._first = next;\r\n\t\telse a = true;\r\n\r\n\t\tif(next) next.prev = prev;\r\n\t\telse if(_._last==n) _._last = prev;\r\n\t\telse b = true;\r\n\r\n\t\tif(a!==b)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(\r\n\t\t\t\t'node', TextUtility.format(\r\n\t\t\t\t\t\"Provided node is has no {0} reference but is not the {1} node!\",\r\n\t\t\t\t\ta ? \"previous\" : \"next\", a ? \"first\" : \"last\"\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn !a && !b;\r\n\r\n\t}\r\n\r\n\taddBefore(node:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tthis._addNodeBefore(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tnew Node(entry)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\taddAfter(node:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tthis._addNodeAfter(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tnew Node(entry)\r\n\t\t);\r\n\t}\r\n\r\n\taddNodeBefore(node:ILinkedListNode<T>, before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._addNodeBefore(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tgetInternal(before, this)\r\n\t\t);\r\n\t}\r\n\r\n\taddNodeAfter(node:ILinkedListNode<T>, after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._addNodeAfter(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tgetInternal(after, this)\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _node:Node<T>)\r\n\t{\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._node.prev, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._node.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this._node.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis._node.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\taddNodeBefore(before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeBefore(this, before);\r\n\t}\r\n\r\n\taddNodeAfter(after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeAfter(this, after);\r\n\t}\r\n\r\n\tremove():void\r\n\t{\r\n\t\tthis._list.removeNode(this);\r\n\t}\r\n\r\n}\r\n\r\n"]}