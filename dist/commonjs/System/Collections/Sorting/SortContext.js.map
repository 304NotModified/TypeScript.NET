{"version":3,"sources":["System/Collections/Sorting/SortContext.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAGH,IAAY,MAAM,WAAM,eAAe,CAAC,CAAA;AAKxC;IAUC,qBACW,KAAkB,EAClB,SAAwC,EACxC,MAA8B;QADxC,yBAAkD,GAAlD,YAAoC,MAAM,CAAC,OAAO;QAClD,sBAAwC,GAAxC,UAAwC;QAF9B,UAAK,GAAL,KAAK,CAAa;QAClB,cAAS,GAAT,SAAS,CAA+B;QACxC,WAAM,GAAN,MAAM,CAAwB;IAEzC,CAAC;IARD,sBAAI,8BAAK;aAAT,cACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAevB,2CAAqB,GAArB,UAAsB,MAAU;QAAhC,iBAMC;QAJA,EAAE,CAAA,CAAC,MAAM,IAAE,IAAI,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAC3B,IAAI,MAAM,GAAY,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAG,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;QAC1D,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAQD,6BAAO,GAAP,UAAQ,CAAG,EAAE,CAAG;QAEf,IAAM,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,EAAE,CAAA,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,CAAC,CAAC,MAAM,GAAC,CAAC,CAAC;IACnB,CAAC;IACF,kBAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,mBAAW,cA4CvB,CAAA;AAED;kBAAe,WAAW,CAAC","file":"System/Collections/Sorting/SortContext.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport * as Values from \"../../Compare\";\r\nimport {Comparison} from \"../../FunctionTypes\";\r\nimport {IComparer} from \"../../IComparer\";\r\nimport {Order} from \"./Order\";\r\n\r\nexport class SortContext<T> implements IComparer<T>\r\n{\r\n\r\n\t/**\r\n\t * Direction of the comparison.\r\n\t * @type {Order}\r\n\t */\r\n\tget order():Order\r\n\t{ return this._order; }\r\n\r\n\tconstructor(\r\n\t\tprotected _next:IComparer<T>,\r\n\t\tprotected _comparer:Comparison<T> = Values.compare,\r\n\t\tprotected _order:Order = Order.Ascending)\r\n\t{\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Generates an array of indexes from the source in order of their expected sort without modifying the source.\r\n\t * @param source\r\n\t * @returns {number[]}\r\n\t */\r\n\tgenerateSortedIndexes(source:T[]):number[]\r\n\t{\r\n\t\tif(source==null) return [];\r\n\t\tvar result:number[] = source.map((s, i)=>i);\r\n\t\tresult.sort((a, b) => this.compare(source[a], source[b]));\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares two values based upon SortContext parameters.\r\n\t * @param a\r\n\t * @param b\r\n\t * @returns {any}\r\n\t */\r\n\tcompare(a:T, b:T):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar d = _._comparer(a, b);\r\n\t\tif(d==0 && _._next) return _._next.compare(a, b);\r\n\t\treturn _._order*d;\r\n\t}\r\n}\r\n\r\nexport default SortContext;"]}