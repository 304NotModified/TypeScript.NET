{"version":3,"sources":["System/Collections/SetBase.js","System/Collections/SetBase.ts"],"names":[],"mappings":"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","file":"System/Collections/SetBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst LinkedNodeList_1 = require(\"./LinkedNodeList\");\nconst ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\nconst Enumerator_1 = require(\"./Enumeration/Enumerator\");\nconst dispose_1 = require(\"../Disposable/dispose\");\nconst Compare_1 = require(\"../Compare\");\nconst CollectionBase_1 = require(\"./CollectionBase\");\nconst OTHER = 'other';\nclass SetBase extends CollectionBase_1.default {\n    constructor(source) {\n        super(null, Compare_1.areEqual);\n        this._importEntries(source);\n    }\n    _getSet() {\n        var s = this._set;\n        if (!s)\n            this._set = s = new LinkedNodeList_1.default();\n        return s;\n    }\n    getCount() {\n        return this._set ? this._set.unsafeCount : 0;\n    }\n    exceptWith(other) {\n        var _ = this;\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        Enumerator_1.forEach(other, v => {\n            if (_._removeInternal(v))\n                _._incrementModified();\n        });\n        _._signalModification();\n    }\n    intersectWith(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        var _ = this;\n        if (other instanceof SetBase) {\n            let s = _._set;\n            if (s)\n                s.forEach(n => {\n                    if (!other.contains(n.value) && _._removeInternal(n.value))\n                        _._incrementModified();\n                });\n            _._signalModification();\n        }\n        else {\n            dispose_1.using(_.newUsing(other), o => _.intersectWith(o));\n        }\n    }\n    isProperSubsetOf(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        return other instanceof SetBase\n            ? other.isProperSupersetOf(this)\n            : dispose_1.using(this.newUsing(other), o => o.isProperSupersetOf(this));\n    }\n    isProperSupersetOf(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        var result = true, count;\n        if (other instanceof SetBase) {\n            result = this.isSupersetOf(other);\n            count = other.getCount();\n        }\n        else {\n            dispose_1.using(this.newUsing(), o => {\n                Enumerator_1.forEach(other, v => {\n                    o.add(v);\n                    return result = this.contains(v);\n                });\n                count = o.getCount();\n            });\n        }\n        return result && this.getCount() > count;\n    }\n    isSubsetOf(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        return other instanceof SetBase\n            ? other.isSupersetOf(this)\n            : dispose_1.using(this.newUsing(other), o => o.isSupersetOf(this));\n    }\n    isSupersetOf(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        var result = true;\n        Enumerator_1.forEach(other, v => {\n            return result = this.contains(v);\n        });\n        return result;\n    }\n    overlaps(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        var result = false;\n        Enumerator_1.forEach(other, v => !(result = this.contains(v)));\n        return result;\n    }\n    setEquals(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        return this.getCount() == (other instanceof SetBase\n            ? other.getCount()\n            : dispose_1.using(this.newUsing(other), o => o.getCount()))\n            && this.isSubsetOf(other);\n    }\n    symmetricExceptWith(other) {\n        if (!other)\n            throw new ArgumentNullException_1.default(OTHER);\n        var _ = this;\n        if (other instanceof SetBase) {\n            Enumerator_1.forEach(other, v => {\n                if (_.contains(v)) {\n                    if (_._removeInternal(v))\n                        _._incrementModified();\n                }\n                else {\n                    if (_._addInternal(v))\n                        _._incrementModified();\n                }\n            });\n            _._signalModification();\n        }\n        else {\n            dispose_1.using(this.newUsing(other), o => _.symmetricExceptWith(o));\n        }\n    }\n    unionWith(other) {\n        this.importEntries(other);\n    }\n    _clearInternal() {\n        var s = this._set;\n        return s ? s.clear() : 0;\n    }\n    _onDispose() {\n        super._onDispose();\n        this._set = null;\n    }\n    contains(item) {\n        return !(!this.getCount() || !this._getNode(item));\n    }\n    getEnumerator() {\n        var s = this._set;\n        return s && this.getCount()\n            ? LinkedNodeList_1.default.valueEnumeratorFrom(s)\n            : Enumerator_1.empty;\n    }\n    forEach(action, useCopy = false) {\n        if (useCopy)\n            super.forEach(action, useCopy);\n        else\n            this._set.forEach((node, i) => action(node.value, i));\n    }\n    _removeNode(node) {\n        if (!node)\n            return false;\n        return this.remove(node.value) != 0;\n    }\n    removeFirst() {\n        return this._removeNode(this._set && this._set.first);\n    }\n    removeLast() {\n        return this._removeNode(this._set && this._set.last);\n    }\n}\nfunction wipe(map, depth = 1) {\n    if (map && depth) {\n        for (var key of Object.keys(map)) {\n            var v = map[key];\n            delete map[key];\n            wipe(v, depth - 1);\n        }\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SetBase;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n///<reference path=\"ISet.d.ts\"/>\r\n///<reference path=\"IEnumerableOrArray.d.ts\"/>\r\nimport LinkedNodeList from \"./LinkedNodeList\";\r\nimport ArgumentNullException from \"../Exceptions/ArgumentNullException\";\r\nimport {forEach, empty as emptyEnumerator} from \"./Enumeration/Enumerator\";\r\nimport {using} from \"../Disposable/dispose\";\r\nimport {areEqual} from \"../Compare\";\r\nimport CollectionBase from \"./CollectionBase\";\r\n\r\nconst OTHER = 'other';\r\n\r\nabstract class SetBase<T>\r\nextends CollectionBase<T>\r\nimplements ISet<T>, IDisposable\r\n{\r\n\r\n\tconstructor(source?:IEnumerableOrArray<T>)\r\n\t{\r\n\t\tsuper(null,areEqual);\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tprotected abstract newUsing(source?:IEnumerableOrArray<T>):SetBase<T>;\r\n\r\n\tprotected _set:LinkedNodeList<ILinkedNodeWithValue<T>>;\r\n\r\n\tprotected _getSet():LinkedNodeList<ILinkedNodeWithValue<T>>\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\tif(!s) this._set = s = new LinkedNodeList<ILinkedNodeWithValue<T>>();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._set ? this._set.unsafeCount : 0;\r\n\t}\r\n\r\n\texceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t_._incrementModified();\r\n\t\t});\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tintersectWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tlet s = _._set;\r\n\t\t\tif(s) s.forEach(n=>\r\n\t\t\t{\r\n\t\t\t\tif(!other.contains(n.value) && _._removeInternal(n.value))\r\n\t\t\t\t\t_._incrementModified();\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(_.newUsing(other), o=>_.intersectWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tisProperSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isProperSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isProperSupersetOf(this));\r\n\t}\r\n\r\n\tisProperSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = true, count:number;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tresult = this.isSupersetOf(other);\r\n\t\t\tcount = other.getCount();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(), o=>\r\n\t\t\t{\r\n\t\t\t\tforEach(other, v=>\r\n\t\t\t\t{\r\n\t\t\t\t\to.add(v); // We have to add to another set in order to filter out duplicates.\r\n\t\t\t\t\treturn result = this.contains(v);\r\n\t\t\t\t});\r\n\t\t\t\tcount = o.getCount();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result && this.getCount()>count;\r\n\t}\r\n\r\n\tisSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isSupersetOf(this));\r\n\t}\r\n\r\n\tisSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = true;\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\treturn result = this.contains(v);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\toverlaps(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = false;\r\n\t\tforEach(other, v => !(result = this.contains(v)));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsetEquals(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn this.getCount()==(\r\n\t\t\t\tother instanceof SetBase\r\n\t\t\t\t\t? other.getCount()\r\n\t\t\t\t\t: using(this.newUsing(other), o=> o.getCount()))\r\n\t\t\t&& this.isSubsetOf(other);\r\n\t}\r\n\r\n\tsymmetricExceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tforEach(other, v=>\r\n\t\t\t{\r\n\t\t\t\tif(_.contains(v)) {\r\n\t\t\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._addInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(other), o=>_.symmetricExceptWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tunionWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tthis.importEntries(other);\r\n\t}\r\n\r\n\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn s ? s.clear() : 0;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._set = null;\r\n\t}\r\n\r\n\tprotected abstract _getNode(item:T):ILinkedNodeWithValue<T>;\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn !(!this.getCount() || !this._getNode(item));\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn s && this.getCount()\r\n\t\t\t? LinkedNodeList.valueEnumeratorFrom<T>(s)\r\n\t\t\t: emptyEnumerator;\r\n\t}\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):void\r\n\t{\r\n\t\tif(useCopy) super.forEach(action, useCopy);\r\n\t\telse this._set.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\tprotected _removeNode(node:ILinkedNodeWithValue<T>):boolean\r\n\t{\r\n\t\tif(!node) return false;\r\n\t\treturn this.remove(node.value)!=0;\r\n\t}\r\n\r\n\tremoveFirst():boolean {\r\n\r\n\t\treturn this._removeNode(this._set && this._set.first);\r\n\t}\r\n\r\n\tremoveLast():boolean {\r\n\t\treturn this._removeNode(this._set && this._set.last);\r\n\t}\r\n\r\n\r\n}\r\n\r\nfunction wipe(map:IMap<any>, depth:number = 1):void\r\n{\r\n\tif(map && depth)\r\n\t{\r\n\t\tfor(var key of Object.keys(map))\r\n\t\t{\r\n\t\t\tvar v = map[key];\r\n\t\t\tdelete map[key];\r\n\t\t\twipe(v, depth - 1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default SetBase;"]}