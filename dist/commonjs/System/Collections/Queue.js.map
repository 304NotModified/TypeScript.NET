{"version":3,"sources":["System/Collections/Queue.ts"],"names":[],"mappings":"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","file":"Queue.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport * as AU from \"./Array/Utility\";\r\nimport {Type} from \"../Types\";\r\nimport {Integer} from \"../Integer\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\nimport {NotImplementedException} from \"../Exceptions/NotImplementedException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\nconst MINIMUM_GROW:number = 4;\r\nconst SHRINK_THRESHOLD:number = 32; // Unused?\r\n// var GROW_FACTOR: number = 200;  // double each time\r\nconst GROW_FACTOR_HALF:number = 100;\r\nconst DEFAULT_CAPACITY:number = MINIMUM_GROW;\r\nvar emptyArray:any[] = [];\r\n\r\nexport class Queue<T>\r\nextends CollectionBase<T>\r\n{\r\n\r\n\tprivate _array:T[];\r\n\tprivate _head:number;       // First valid element in the queue\r\n\tprivate _tail:number;       // Last valid element in the queue\r\n\tprivate _size:number;       // Number of elements.\r\n\tprivate _capacity:number;   // Maps to _array.length;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T> | number,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(VOID0, equalityComparer);\r\n\t\tconst _ = this;\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\tif(!source)\r\n\t\t\t_._array = emptyArray;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(Type.isNumber(source))\r\n\t\t\t{\r\n\t\t\t\tvar capacity = <number>source;\r\n\t\t\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\t\t\t_._array = capacity\r\n\t\t\t\t\t? AU.initialize<T>(capacity)\r\n\t\t\t\t\t: emptyArray;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvar se = <IEnumerableOrArray<T>> source;\r\n\t\t\t\t_._array = AU.initialize<T>(\r\n\t\t\t\t\tType.isArrayLike(se)\r\n\t\t\t\t\t\t? se.length\r\n\t\t\t\t\t\t: DEFAULT_CAPACITY\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_._importEntries(se);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._capacity = _._array.length;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tprotected _addInternal(item:T):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar size = _._size, len = _._capacity;\r\n\t\tif(size==len)\r\n\t\t{\r\n\t\t\tvar newCapacity = len*GROW_FACTOR_HALF;\r\n\t\t\tif(newCapacity<len + MINIMUM_GROW)\r\n\t\t\t\tnewCapacity = len + MINIMUM_GROW;\r\n\r\n\t\t\t_.setCapacity(newCapacity);\r\n\t\t\tlen = _._capacity;\r\n\t\t}\r\n\r\n\t\tvar tail = _._tail;\r\n\t\t_._array[tail] = item;\r\n\t\t_._tail = (tail + 1)%len;\r\n\t\t_._size = size + 1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(item:T, max?:number):number\r\n\t{\r\n\t\tthrow new NotImplementedException(\r\n\t\t\t\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\r\n\t\t\t\" since it would require destroying the underlying array to remove the item.\"\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar array = _._array, head = _._head, tail = _._tail, size = _._size;\r\n\t\tif(head<tail)\r\n\t\t\tAU.clear(array, head, tail);\r\n\t\telse\r\n\t\t{\r\n\t\t\tAU.clear(array, head);\r\n\t\t\tAU.clear(array, 0, tail);\r\n\t\t}\r\n\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\t_.trimExcess();\r\n\r\n\t\treturn size;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst _ = this;\r\n\t\tif(_._array!=emptyArray)\r\n\t\t{\r\n\t\t\t_._array.length = _._capacity = 0;\r\n\t\t\t_._array = emptyArray;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Dequeues entries into an array.\r\n\t */\r\n\tdump(max:number = Infinity):T[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar result:T[] = [];\r\n\r\n\t\tif(isFinite(max))\r\n\t\t{\r\n\t\t\tInteger.assertZeroOrGreater(max);\r\n\t\t\tif(max!==0)\r\n\t\t\t{\r\n\t\t\t\twhile(max-- && _._size)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\twhile(_._size)\r\n\t\t\t{\r\n\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.trimExcess();\r\n\t\t_._signalModification();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):number\r\n\t{\r\n\t\treturn super.forEach(action, true);\r\n\t}\r\n\r\n\tsetCapacity(capacity:number):void\r\n\t{\r\n\r\n\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\tconst _ = this;\r\n\t\tvar array = _._array, len = _._capacity;\r\n\r\n\t\tif(capacity==len)\r\n\t\t\treturn;\r\n\r\n\t\tvar head = _._head, tail = _._tail, size = _._size;\r\n\r\n\t\t// Special case where we can simply extend the length of the array. (JavaScript only)\r\n\t\tif(array!=emptyArray && capacity>len && head<tail)\r\n\t\t{\r\n\t\t\tarray.length = _._capacity = capacity;\r\n\t\t\t_._version++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We create a new array because modifying an existing one could be slow.\r\n\t\tvar newArray:T[] = AU.initialize<T>(capacity);\r\n\t\tif(size>0)\r\n\t\t{\r\n\t\t\tif(head<tail)\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, size);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, len - head);\r\n\t\t\t\tAU.copyTo(array, newArray, 0, len - head, tail);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._array = newArray;\r\n\t\t_._capacity = capacity;\r\n\t\t_._head = 0;\r\n\t\t_._tail = (size==capacity) ? 0 : size;\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tenqueue(item:T):void\r\n\t{\r\n\t\tthis.add(item);\r\n\t}\r\n\r\n\r\n\tprotected _dequeueInternal(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._size==0)\r\n\t\t{\r\n\t\t\tif(throwIfEmpty)\r\n\t\t\t\tthrow new InvalidOperationException(\"Cannot dequeue an empty queue.\");\r\n\t\t\treturn <any>VOID0;\r\n\t\t}\r\n\r\n\t\tvar array = _._array, head = _._head;\r\n\r\n\t\tvar removed = _._array[head];\r\n\t\tarray[head] = <any>null;\r\n\t\t_._head = (head + 1)%_._capacity;\r\n\r\n\t\t_._size--;\r\n\r\n\t\t_._incrementModified();\r\n\r\n\t\treturn removed;\r\n\t}\r\n\r\n\tdequeue(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\t// A single dequeue shouldn't need update recursion tracking...\r\n\t\tvar modified = !!_._size;\r\n\t\tvar v = this._dequeueInternal(throwIfEmpty);\r\n\r\n\t\t// This may preemptively trigger the _onModified.\r\n\t\tif(modified && _._size<_._capacity/2)\r\n\t\t\t_.trimExcess(SHRINK_THRESHOLD);\r\n\r\n\t\t_._signalModification();\r\n\t\treturn v;\r\n\t}\r\n\r\n\r\n\ttryDequeue(out:(value:T)=>void):boolean\r\n\t{\r\n\t\tif(!this._size) return false;\r\n\t\tvar d = this.dequeue();\r\n\t\tif(out) out(d);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate _getElement(index:number):T\r\n\t{\r\n\t\tassertIntegerZeroOrGreater(index, \"index\");\r\n\r\n\t\tconst _ = this;\r\n\t\treturn _._array[(_._head + index)%_._capacity];\r\n\t}\r\n\r\n\tpeek():T\r\n\t{\r\n\t\tif(this._size==0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot call peek on an empty queue.\");\r\n\r\n\t\treturn this._array[this._head];\r\n\t}\r\n\r\n\ttrimExcess(threshold?:number):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar size = _._size;\r\n\t\tif(size<Math.floor(_._capacity*0.9) && (!threshold && threshold!==0 || isNaN(threshold) || threshold<size))\r\n\t\t\t_.setCapacity(size);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar index:number, version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index==_._size)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(_._getElement(index++));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction assertZeroOrGreater(value:number, property:string):void\r\n{\r\n\tif(value<0)\r\n\t\tthrow new ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\r\n\r\n}\r\n\r\nfunction assertIntegerZeroOrGreater(value:number, property:string):void\r\n{\r\n\tInteger.assert(value, property);\r\n\tassertZeroOrGreater(value, property);\r\n}\r\n\r\nexport default Queue;\r\n"]}