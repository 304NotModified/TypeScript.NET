{"version":3,"sources":["System/Collections/Queue.ts"],"names":["Queue","Queue.constructor","Queue.add","Queue.clear","Queue.contains","Queue.copyTo","Queue.toArray","Queue.remove","Queue.dispose","Queue.forEach","Queue.setCapacity","Queue.enqueue","Queue.dequeue","Queue._getElement","Queue.peek","Queue.trimExcess","Queue.getEnumerator","Queue.count","Queue.isReadOnly","assertZeroOrGreater","assertIntegerZeroOrGreater"],"mappings":"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","file":"System/Collections/Queue.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\n///<reference path=\"ICollection.d.ts\"/>\r\n///<reference path=\"IList.d.ts\"/>\r\n///<reference path=\"Enumeration/IEnumerateEach.d.ts\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\nimport * as Values from '../Compare';\r\nimport * as AU from './Array/Utility';\r\nimport Type from '../Types';\r\nimport Integer from '../Integer';\r\nimport EnumeratorBase from './Enumeration/EnumeratorBase';\r\nimport forEach from './Enumeration/forEach';\r\nimport NotImplementedException from '../Exceptions/NotImplementedException';\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\nimport ArgumentOutOfRangeException from '../Exceptions/ArgumentOutOfRangeException';\r\n\r\nconst MINIMUM_GROW:number = 4;\r\n// var SHRINK_THRESHOLD: number = 32; // Unused?\r\n// var GROW_FACTOR: number = 200;  // double each time\r\nconst GROW_FACTOR_HALF:number = 100;\r\nconst DEFAULT_CAPACITY:number = MINIMUM_GROW;\r\nvar emptyArray:any[] = [];\r\n\r\nexport default\r\nclass Queue<T> implements ICollection<T>, IEnumerateEach<T>, IDisposable\r\n{\r\n\r\n\tprivate _array:T[];\r\n\tprivate _head:number;       // First valid element in the queue\r\n\tprivate _tail:number;       // Last valid element in the queue\r\n\tprivate _size:number;       // Number of elements.\r\n\tprivate _capacity:number;   // Maps to _array.length;\r\n\tprivate _version:number;\r\n\r\n\r\n\tconstructor(source?:IEnumerable<T> | IArray<T> | number)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\t\t_._version = 0;\r\n\r\n\t\tif(!source)\r\n\t\t\t_._array = emptyArray;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(Type.isNumber(source))\r\n\t\t\t{\r\n\t\t\t\tvar capacity = <number>source;\r\n\t\t\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\t\t\t_._array = capacity\r\n\t\t\t\t\t? AU.initialize<T>(capacity)\r\n\t\t\t\t\t: emptyArray;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvar se = <IEnumerable<T> | IArray<T>> source;\r\n\t\t\t\t_._array = AU.initialize<T>(\r\n\t\t\t\t\t(se instanceof Array || Type.hasMember(se, \"length\"))\r\n\t\t\t\t\t\t? (<IArray<T>>se).length\r\n\t\t\t\t\t\t: DEFAULT_CAPACITY\r\n\t\t\t\t);\r\n\r\n\t\t\t\tforEach<T>(se, (e:T)=> _.enqueue(e));\r\n\r\n\t\t\t\t_._version = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._capacity = _._array.length;\r\n\t}\r\n\r\n\t// #region ICollection<T> implementation\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tadd(item:T):void\r\n\t{\r\n\t\tthis.enqueue(item);\r\n\t}\r\n\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\r\n\t\tif(head<tail)\r\n\t\t\tAU.clear(array, head, size);\r\n\t\telse\r\n\t\t{\r\n\t\t\tAU.clear(array, head, array.length - head);\r\n\t\t\tAU.clear(array, 0, tail);\r\n\t\t}\r\n\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\t\t_._version++;\r\n\r\n\t\treturn size;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar array = _._array, index = _._head, count = _._size, len = _._capacity;\r\n\r\n\t\twhile(count-->0)\r\n\t\t{\r\n\t\t\tif(Values.areEqual(array[index], item)) // May need a equality compare here.\r\n\t\t\t\treturn true;\r\n\r\n\t\t\tindex = (index + 1)%len;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tcopyTo(target:T[], arrayIndex:number = 0):T[]\r\n\t{\r\n\t\tif(target==null)\r\n\t\t\tthrow new Error(\"ArgumentNullException: array cannot be null.\");\r\n\r\n\t\tassertIntegerZeroOrGreater(arrayIndex, \"arrayIndex\");\r\n\r\n\t\tvar _ = this, size = _._size;\r\n\r\n\t\tif(!size) return;\r\n\r\n\t\tvar numToCopy = size,\r\n\t\t    source    = _._array,\r\n\t\t    len       = _._capacity,\r\n\t\t    head      = _._head,\r\n\t\t    lh        = len - head,\r\n\t\t    firstPart\r\n\t\t              = (lh<size)\r\n\t\t\t    ? lh\r\n\t\t\t    : size;\r\n\r\n\t\tAU.copyTo(source, target, head, arrayIndex, firstPart);\r\n\t\tnumToCopy -= firstPart;\r\n\r\n\t\tif(numToCopy>0)\r\n\t\t\tAU.copyTo(source, target, 0, arrayIndex + len - head, numToCopy);\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar _ = this, size = _._size;\r\n\t\tvar arr:T[] = AU.initialize<T>(size);\r\n\t\treturn size ? _.copyTo(arr) : arr;\r\n\t}\r\n\r\n\tremove(item:T):number\r\n\t{\r\n\t\tthrow new NotImplementedException(\r\n\t\t\t\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\r\n\t\t\t\" since it would require destroying the underlying array to remove the item.\"\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #endregion\r\n\r\n\t// Results in a complete reset.  Allows for easy cleanup elsewhere.\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.clear();\r\n\t\tif(_._array!=emptyArray)\r\n\t\t{\r\n\t\t\t_._array.length = _._capacity = 0;\r\n\t\t\t_._array = emptyArray;\r\n\t\t}\r\n\t\t_._version = 0;\r\n\t}\r\n\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\t// Until implementing a changed enumeration mechanism, a copy needs to be used.\r\n\t\tvar _ = this, copy = _.toArray(), len = _._size;\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif(<any>action(copy[i], i)===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tsetCapacity(capacity:number):void\r\n\t{\r\n\r\n\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\tvar _ = this, array = _._array, len = _._capacity;\r\n\r\n\t\tif(capacity==len)\r\n\t\t\treturn;\r\n\r\n\t\tvar head = _._head, tail = _._tail, size = _._size;\r\n\r\n\t\t// Special case where we can simply extend the length of the array. (JavaScript only)\r\n\t\tif(array!=emptyArray && capacity>len && head<tail)\r\n\t\t{\r\n\t\t\tarray.length = _._capacity = capacity;\r\n\t\t\t_._version++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We create a new array because modifying an existing one could be slow.\r\n\t\tvar newArray:T[] = AU.initialize<T>(capacity);\r\n\t\tif(size>0)\r\n\t\t{\r\n\t\t\tif(head<tail)\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, size);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, len - head);\r\n\t\t\t\tAU.copyTo(array, newArray, 0, len - head, tail);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._array = newArray;\r\n\t\t_._capacity = capacity;\r\n\t\t_._head = 0;\r\n\t\t_._tail = (size==capacity) ? 0 : size;\r\n\t\t_._version++;\r\n\t}\r\n\r\n\tenqueue(item:T):void\r\n\t{\r\n\t\tvar _ = this, array = _._array, size = _._size, len = _._capacity;\r\n\t\tif(size==len)\r\n\t\t{\r\n\t\t\tvar newCapacity = len*GROW_FACTOR_HALF;\r\n\t\t\tif(newCapacity<len + MINIMUM_GROW)\r\n\t\t\t\tnewCapacity = len + MINIMUM_GROW;\r\n\r\n\t\t\t_.setCapacity(newCapacity);\r\n\t\t\tarray = _._array;\r\n\t\t\tlen = _._capacity;\r\n\t\t}\r\n\r\n\t\tvar tail = _._tail;\r\n\t\tarray[tail] = item;\r\n\t\t_._tail = (tail + 1)%len;\r\n\t\t_._size = size + 1;\r\n\t\t_._version++;\r\n\t}\r\n\r\n\tdequeue():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._size==0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot dequeue an empty queue.\");\r\n\r\n\t\tvar array = _._array, head = _._head;\r\n\r\n\t\tvar removed = _._array[head];\r\n\t\tarray[head] = null;\r\n\t\t_._head = (head + 1)%_._capacity;\r\n\r\n\t\t_._size--;\r\n\r\n\r\n\t\t/* Need a scheme for shrinking\r\n\t\t if (_._size < _._capacity / 2)\r\n\t\t {\r\n\t\t }*/\r\n\r\n\t\t_._version++;\r\n\t\treturn removed;\r\n\t}\r\n\r\n\tprivate _getElement(index:number):T\r\n\t{\r\n\t\tassertIntegerZeroOrGreater(index, \"index\");\r\n\r\n\t\tvar _ = this;\r\n\t\treturn _._array[(_._head + index)%_._capacity];\r\n\t}\r\n\r\n\tpeek():T\r\n\t{\r\n\t\tif(this._size==0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot call peek on an empty queue.\");\r\n\r\n\t\treturn this._array[this._head];\r\n\t}\r\n\r\n\ttrimExcess():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar size = _._size;\r\n\t\tif(size<Math.floor(_._capacity*0.9))\r\n\t\t\t_.setCapacity(size);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar index:number;\r\n\t\tvar version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tif(version!=_._version)\r\n\t\t\t\t\tthrow new InvalidOperationException(\"Collection was changed during enumeration.\");\r\n\r\n\t\t\t\tif(index==_._size)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(_._getElement(index++));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction assertZeroOrGreater(value:number, property:string):void\r\n{\r\n\tif(value<0)\r\n\t\tthrow new ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\r\n\r\n}\r\n\r\nfunction assertIntegerZeroOrGreater(value:number, property:string):void\r\n{\r\n\tInteger.assert(value, property);\r\n\tassertZeroOrGreater(value, property);\r\n}\r\n"]}