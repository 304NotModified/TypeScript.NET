{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.ts"],"names":[],"mappings":"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","file":"Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {Functions} from \"../../Functions\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {LinkedNodeList} from \"../LinkedNodeList\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {ILinkedNode} from \"../ILinkedListNode\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport DictionaryBase from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n\r\nexport interface IHashEntry<TKey, TValue>\r\nextends ILinkedNode<IHashEntry<TKey, TValue>>, IKeyValuePair<TKey,TValue>\r\n{\r\n\r\n}\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements IHashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key:TKey,\r\n\t\tpublic value:TValue,\r\n\t\tpublic previous?:IHashEntry<TKey, TValue>|null,\r\n\t\tpublic next?:IHashEntry<TKey, TValue>|null)\r\n\t{\r\n\r\n\t}\r\n}\r\n\r\ntype HashEntryLinkedList<TKey,TValue> = LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>;\r\n\r\nvar linkedListPool:ObjectPool<LinkedNodeList<any>>;\r\nfunction linkedNodeList():LinkedNodeList<any>;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):void;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):LinkedNodeList<any>|void\r\n{\r\n\tif(!linkedListPool)\r\n\t\tlinkedListPool\r\n\t\t\t= new ObjectPool<LinkedNodeList<any>>(20, ()=>new LinkedNodeList<any>(), r=>r.clear());\r\n\tif(!recycle) return linkedListPool.take();\r\n\tlinkedListPool.add(recycle);\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nconst NULL = \"null\", GET_HASH_CODE = \"getHashCode\";\r\nfunction getHashString(obj:any):string\r\n{\r\n\tif(obj===null) return NULL;\r\n\tif(obj===VOID0) return Type.UNDEFINED;\r\n\r\n\t// See IHashable.\r\n\tif(Type.hasMemberOfType(obj, GET_HASH_CODE, Type.FUNCTION))\r\n\t{\r\n\t\treturn (<any>obj).getHashCode();\r\n\t}\r\n\r\n\treturn (typeof obj.toString==Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport class Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\t// Retains the order...\r\n\tprivate readonly _entries:LinkedNodeList<IHashEntry<TKey, TValue>>;\r\n\tprivate readonly _buckets:IMap<LinkedNodeList<IHashEntry<TKey, IHashEntry<TKey, TValue>>>>;\r\n\r\n\tconstructor(\r\n\t\tprivate _keyComparer:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._entries = linkedNodeList();\r\n\t\tthis._buckets = {};\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\t(<any>this)._entries = null;\r\n\t\t(<any>this)._buckets = null;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._entries && this._entries.unsafeCount || 0;\r\n\t}\r\n\r\n\tprivate _getBucket(\r\n\t\thash:string,\r\n\t\tcreateIfMissing?:boolean):HashEntryLinkedList<TKey,TValue>|null\r\n\t{\r\n\t\tif(hash===null || hash===VOID0 || !createIfMissing && !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar buckets = this._buckets;\r\n\t\tvar bucket = callHasOwnProperty(buckets, hash) ? buckets[hash] : VOID0;\r\n\r\n\t\tif(createIfMissing && !bucket)\r\n\t\t\tbuckets[hash]\r\n\t\t\t\t= bucket\r\n\t\t\t\t= linkedNodeList();\r\n\r\n\t\treturn bucket || null;\r\n\t}\r\n\r\n\tprivate _getBucketEntry(\r\n\t\tkey:TKey,\r\n\t\thash?:string,\r\n\t\tbucket?:HashEntryLinkedList<TKey,TValue>|null):IHashEntry<TKey,IHashEntry<TKey,TValue>>|null\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar _          = this,\r\n\t\t    comparer   = _._keyComparer,\r\n\t\t    compareKey = comparer(key);\r\n\r\n\t\tif(!bucket) bucket = _._getBucket(hash || getHashString(compareKey));\r\n\r\n\t\treturn bucket\r\n\t\t\t&& bucket.find(e=>comparer(e.key)===compareKey);\r\n\t}\r\n\r\n\tprotected _getEntry(key:TKey):IHashEntry<TKey,TValue>|null\r\n\t{\r\n\t\tvar e = this._getBucketEntry(key);\r\n\t\treturn e && e.value;\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue|undefined\r\n\t{\r\n\t\tvar e = this._getEntry(key);\r\n\t\treturn e ? e.value : VOID0;\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:TKey, value:TValue|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar buckets     = _._buckets,\r\n\t\t    entries     = _._entries,\r\n\t\t    comparer    = _._keyComparer,\r\n\t\t    compareKey  = comparer(key),\r\n\t\t    hash        = getHashString(compareKey),\r\n\t\t    bucket      = _._getBucket(hash),\r\n\t\t    bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\r\n\r\n\t\t// Entry exits? Delete or update\r\n\t\tif(bucketEntry)\r\n\t\t{\r\n\t\t\tvar b = <HashEntryLinkedList<TKey,TValue>>bucket;\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tlet x = b.removeNode(bucketEntry),\r\n\t\t\t\t    y = entries.removeNode(bucketEntry.value);\r\n\r\n\t\t\t\tif(x && !b.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\tlinkedNodeList(b);\r\n\t\t\t\t\tbucket = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(x!==y) throw \"Entries and buckets are out of sync.\";\r\n\r\n\t\t\t\tif(x) return true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We don't expose the internal hash entries so replacing the value is ok.\r\n\t\t\t\tvar old = bucketEntry.value.value;\r\n\t\t\t\tbucketEntry.value.value = value;\r\n\t\t\t\treturn !areEqual(value, old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse if(value!==VOID0)\r\n\t\t{\r\n\t\t\tif(!bucket) bucket = _._getBucket(hash, true);\r\n\t\t\tif(!bucket) throw new Error(`\"${hash}\" cannot be added to lookup table.`);\r\n\t\t\tlet entry = new HashEntry(key, value);\r\n\t\t\tentries.addNode(entry);\r\n\t\t\tbucket.addNode(new HashEntry(key, entry));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar buckets = _._buckets;\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t{\r\n\t\t\t\tlet bucket = buckets[key];\r\n\t\t\t\tdelete buckets[key];\r\n\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _._entries.clear();\r\n\t}\r\n\r\n\t/*\r\n\t * Note: super.getEnumerator() works perfectly well,\r\n\t * but enumerating the internal linked node list is much more efficient.\r\n\t */\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar ver:number, currentEntry:IHashEntry<TKey, TValue>|null;\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\tver = _._version;\r\n\t\t\t\tcurrentEntry = _._entries.first;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t\t_.assertVersion(ver);\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next || null;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar result:TKey[] = [];\r\n\t\tvar e:any = _._entries && _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar result:TValue[] = [];\r\n\t\tvar e:any = _._entries && _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n\r\nexport default Dictionary;"]}