{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.ts"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {Functions} from \"../../Functions\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {LinkedNodeList} from \"../LinkedNodeList\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {ILinkedNode} from \"../ILinkedListNode\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport DictionaryBase from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n\r\nexport interface IHashEntry<TKey, TValue>\r\nextends ILinkedNode<IHashEntry<TKey, TValue>>, IKeyValuePair<TKey,TValue>\r\n{\r\n\r\n}\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements IHashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key:TKey,\r\n\t\tpublic value:TValue,\r\n\t\tpublic previous?:IHashEntry<TKey, TValue>|null,\r\n\t\tpublic next?:IHashEntry<TKey, TValue>|null)\r\n\t{\r\n\r\n\t}\r\n}\r\n\r\ntype HashEntryLinkedList<TKey,TValue> = LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>;\r\n\r\nvar linkedListPool:ObjectPool<LinkedNodeList<any>>;\r\nfunction linkedNodeList():LinkedNodeList<any>;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):void;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):LinkedNodeList<any>|void\r\n{\r\n\tif(!linkedListPool)\r\n\t\tlinkedListPool\r\n\t\t\t= new ObjectPool<LinkedNodeList<any>>(20, ()=>new LinkedNodeList<any>(), r=>r.clear());\r\n\tif(!recycle) return linkedListPool.take();\r\n\tlinkedListPool.add(recycle);\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nconst NULL = \"null\", GET_HASH_CODE = \"getHashCode\";\r\nfunction getHashString(obj:any):string\r\n{\r\n\tif(obj===null) return NULL;\r\n\tif(obj===VOID0) return Type.UNDEFINED;\r\n\r\n\t// See IHashable.\r\n\tif(Type.hasMemberOfType(obj, GET_HASH_CODE, Type.FUNCTION))\r\n\t{\r\n\t\treturn (<any>obj).getHashCode();\r\n\t}\r\n\r\n\treturn (typeof obj.toString==Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport class Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\t// Retains the order...\r\n\tprivate _entries:LinkedNodeList<IHashEntry<TKey, TValue>>;\r\n\tprivate _buckets:IMap<LinkedNodeList<IHashEntry<TKey, IHashEntry<TKey, TValue>>>>;\r\n\r\n\tconstructor(\r\n\t\tprivate _keyComparer:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._entries = linkedNodeList();\r\n\t\tthis._buckets = {};\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._entries.unsafeCount;\r\n\t}\r\n\r\n\r\n\tprivate _getBucket(\r\n\t\thash:string,\r\n\t\tcreateIfMissing?:boolean):HashEntryLinkedList<TKey,TValue>|null\r\n\t{\r\n\t\tif(hash===null || hash===VOID0 || !createIfMissing && !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar buckets = this._buckets;\r\n\t\tvar bucket = callHasOwnProperty(buckets, hash) ? buckets[hash] : VOID0;\r\n\r\n\t\tif(createIfMissing && !bucket)\r\n\t\t\tbuckets[hash]\r\n\t\t\t\t= bucket\r\n\t\t\t\t= linkedNodeList();\r\n\r\n\t\treturn bucket;\r\n\t}\r\n\r\n\tprivate _getBucketEntry(\r\n\t\tkey:TKey,\r\n\t\thash?:string,\r\n\t\tbucket?:HashEntryLinkedList<TKey,TValue>|null):IHashEntry<TKey,IHashEntry<TKey,TValue>>|null\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar _          = this,\r\n\t\t    comparer   = _._keyComparer,\r\n\t\t    compareKey = comparer(key);\r\n\r\n\t\tif(!bucket) bucket = _._getBucket(hash || getHashString(compareKey));\r\n\r\n\t\treturn bucket\r\n\t\t\t&& bucket.find(e=>comparer(e.key)===compareKey);\r\n\t}\r\n\r\n\tprotected _getEntry(key:TKey):IHashEntry<TKey,TValue>|null\r\n\t{\r\n\t\tvar e = this._getBucketEntry(key);\r\n\t\treturn e && e.value;\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar e = this._getEntry(key);\r\n\t\treturn e ? e.value : VOID0;\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\tvar _           = this,\r\n\t\t    buckets     = _._buckets,\r\n\t\t    entries     = _._entries,\r\n\t\t    comparer    = _._keyComparer,\r\n\t\t    compareKey  = comparer(key),\r\n\t\t    hash        = getHashString(compareKey),\r\n\t\t    bucket      = _._getBucket(hash),\r\n\t\t    bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\r\n\r\n\t\t// Entry exits? Delete or update\r\n\t\tif(bucketEntry)\r\n\t\t{\r\n\t\t\tvar b = <HashEntryLinkedList<TKey,TValue>>bucket;\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tlet x = b.removeNode(bucketEntry),\r\n\t\t\t\t    y = entries.removeNode(bucketEntry.value);\r\n\r\n\t\t\t\tif(x && !b.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\tlinkedNodeList(b);\r\n\t\t\t\t\tbucket = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(x!==y) throw \"Entries and buckets are out of sync.\";\r\n\r\n\t\t\t\tif(x) return true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We don't expose the internal hash entries so replacing the value is ok.\r\n\t\t\t\tvar old = bucketEntry.value.value;\r\n\t\t\t\tbucketEntry.value.value = value;\r\n\t\t\t\treturn !areEqual(value, old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse if(value!==VOID0)\r\n\t\t{\r\n\t\t\tif(!bucket) bucket = _._getBucket(hash, true);\r\n\t\t\tif(!bucket) throw new Error(`\"${hash}\" cannot be added to lookup table.`);\r\n\t\t\tlet entry = new HashEntry(key, value);\r\n\t\t\tentries.addNode(entry);\r\n\t\t\tbucket.addNode(new HashEntry(key, entry));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar buckets = _._buckets;\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t{\r\n\t\t\t\tlet bucket = buckets[key];\r\n\t\t\t\tdelete buckets[key];\r\n\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _._entries.clear();\r\n\t}\r\n\r\n\t/*\r\n\t * Note: super.getEnumerator() works perfectly well,\r\n\t * but enumerating the internal linked node list is much more efficient.\r\n\t */\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar ver:number, currentEntry:IHashEntry<TKey, TValue>|null;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tver = _._version;\r\n\t\t\t\tcurrentEntry = _._entries.first;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.assertVersion(ver);\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next || null;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar result:TKey[] = [];\r\n\t\tvar e:any = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar result:TValue[] = [];\r\n\t\tvar e:any = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n\r\nexport default Dictionary;"]}