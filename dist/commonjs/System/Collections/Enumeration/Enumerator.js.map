{"version":3,"sources":["System/Collections/Enumeration/Enumerator.ts"],"names":[],"mappings":"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","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\n///<reference path=\"../IEnumerableOrArray.d.ts\"/>\r\n///<reference path=\"IIterator.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {using} from \"../../Disposable/dispose\";\r\nimport Type from \"../../Types\";\r\nimport ArrayEnumerator from \"./ArrayEnumerator\";\r\nimport IndexEnumerator from \"./IndexEnumerator\";\r\nimport UnsupportedEnumerableException from \"./UnsupportedEnumerableException\";\r\n\r\nconst\r\n\tVOID0:any = void(0),\r\n\tSTRING_EMPTY:string = \"\",\r\n\tENDLESS_EXCEPTION_MESSAGE =\r\n\t\t'Cannot call forEach on an endless enumerable. '+\r\n\t\t'Would result in an infinite loop that could hang the current process.';\r\n\r\nexport function throwIfEndless(isEndless:boolean):void {\r\n\tif(isEndless) throw new UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\r\n}\r\n\r\nfunction initArrayFrom(source:IEnumerableOrArray<any>|IEnumerator<any>):any[] {\r\n\tif(Array.isArray(source) || Type.isString(source)) {\r\n\t\tvar len = source.length;\r\n\t\tif(isFinite(len))\r\n\t\t{\r\n\t\t\tif(len>65535) return new Array(len);\r\n\t\t\tvar result:any[] = [];\r\n\t\t\tresult.length = len;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n}\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn VOID0;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tnextValue():any\r\n\t{\r\n\t\treturn VOID0;\r\n\t}\r\n\r\n\tnext():IIteratorResult<any>\r\n\t{\r\n\t\treturn {\r\n\t\t\tvalue: VOID0,\r\n\t\t\tdone: true\r\n\t\t}\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n\r\n\tget isEndless():boolean {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\nObject.freeze(Empty);\r\n\r\nexport const empty:IEnumerator<any> = Empty;\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerableOrArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\tif(Type.isArrayLike<T>(source))\r\n\t{\r\n\t\treturn new IndexEnumerator<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsource: source,\r\n\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\tstep: 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerableOrArrayLike<T>(instance:any):instance is IEnumerableOrArray<T>\r\n{\r\n\treturn Type.isArrayLike(instance) || isEnumerable(instance);\r\n}\r\n\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\n/**\r\n * Flexible method for iterating any enumerable, enumerable, array, or array-like object.\r\n * @param e\r\n * @param action\r\n * @returns true if enumerated, false if null or unrecognized enumerable, void if nothing done\r\n */\r\nexport function forEach<T>(\r\n\te:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\taction:(element:T, index?:number) => any):boolean|void\r\n{\r\n\tif(e!==VOID0 && e!==null) // Allow for empty string.\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(e))\r\n\t\t{\r\n\t\t\t// Assume e.length is constant or at least doesn't deviate to infinite or NaN.\r\n\t\t\tthrowIfEndless(!isFinite(e.length));\r\n\r\n\t\t\tfor(let i = 0; i<e.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(action(e[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\tvar index = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\t// For enumerators that aren't EnumerableBase, ensure dispose is called.\r\n\t\t\tusing(\r\n\t\t\t\t(<IEnumerable<T>>e).getEnumerator(),\r\n\t\t\t\tf=>forEach(f, action)\r\n\t\t\t);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array.\r\n * @param source\r\n * @returns {any}\r\n */\r\nexport function toArray<T>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>):T[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn source.slice();\r\n\r\n\tvar result:T[] = initArrayFrom(source);\r\n\tif(!forEach(source,(e, i) => { result[i] = e; }))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array of selected values.\r\n * @param source\r\n * @param selector\r\n * @returns {TResult[]}\r\n */\r\nexport function map<T,TResult>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\tselector:Selector<T,TResult>):TResult[]\r\n{\r\n\tvar result:TResult[] = initArrayFrom(source);\r\n\tif(!forEach(source,(e, i) => { result[i] = selector(e); }))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}"]}