{"version":3,"sources":["System/Collections/Enumeration/Enumerator.ts"],"names":["EmptyEnumerator","EmptyEnumerator.moveNext","EmptyEnumerator.reset","EmptyEnumerator.dispose","EmptyEnumerator.current","from","forEach"],"mappings":";;;;;;;;;;;;;;;;;;;qBASiB,aAAa;;;;+BAEF,mBAAmB;;;;+BACnB,mBAAmB;;;;IAG/C,eAAA;aAAA,eAAA;8BAAA,eAAA;;;iBAAA,eAAA;;eAOSA,oBAAAA;AAEPC,mBAAOA,KAAKA,CAACA;SACbA;;;eAEID,iBAAAA,EAAWE;;;eAETF,mBAAAA,EAAWG;;;aAZPH,eAAAA;AAEVI,mBAAOA,SAASA,CAACA;SACjBA;;;WALF,eAAA;;;AAiBA,IAAM,KAAK,GAAG,IAAI,eAAe,EAAE,CAAC;;AAGpC,SAAA,IAAA,CAAwB,MAAiC,EAAA;AAGxDC,QAAGA,CAACA,MAAMA,EACTA,OAAOA,KAAKA,CAACA;AAEdA,QAAGA,MAAMA,YAAYA,KAAKA,EACzBA,OAAOA,iCAA4BA,MAAMA,CAACA,CAACA;AAG5CA,QAAGA,CAACA,mBAAKA,WAAWA,CAACA,MAAMA,CAACA,EAC5BA;AACCA,YAAGA,QAAQA,IAAIA,MAAMA,EACrBA;AACCA,gBAAIA,CAACA,GAAcA,MAAMA,CAACA;AAC1BA,mBAAOA,iCACNA,YAAAA;AAECA,uBAAOA;AACNA,0BAAMA,EAAwBA,CAACA;AAC/BA,0BAAMA,EAAEA,CAACA,CAACA,MAAMA;AAChBA,2BAAOA,EAAEA,CAACA;AACVA,wBAAIA,EAAEA,CAACA;iBACPA,CAAAA;aACDA,CACDA,CAACA;SACFA;AACDA,YAAGA,eAAeA,IAAIA,MAAMA,EAC3BA,OAAaA,MAAOA,CAACA,aAAaA,EAAEA,CAACA;KAEtCA;AAEDA,UAAMA,IAAIA,KAAKA,CAACA,qBAAqBA,CAACA,CAACA;CACvCA;;AAED,SAAA,OAAA,CACC,CAAgB,EAChB,MAAwC,EAAA;AAExCC,QAAGA,CAACA,EACJA;AACCA,YAAIA,KAAKA,GAAGA,CAACA,CAACA;AAEdA,eAAMA,CAACA,CAACA,QAAQA,EAAEA,EAClBA;AACCA,gBAAGA,MAAMA,CAACA,CAACA,CAACA,OAAOA,EAAEA,KAAKA,EAAEA,CAACA,KAAGA,KAAKA,EACpCA,MAAMA;SACPA;KACDA;CACDA","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\nimport Type from '../../Types';\r\nimport DisposableBase from '../../Disposable/DisposableBase';\r\nimport ArrayEnumerator from './ArrayEnumerator';\r\nimport IndexEnumerator from './IndexEnumerator';\r\n\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerable<T> | IArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(source instanceof Array)\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(\"length\" in source)\r\n\t\t{\r\n\t\t\tvar a = <IArray<T>>source;\r\n\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsource: <{[index: number]: T}>a,\r\n\t\t\t\t\t\tlength: a.length,\r\n\t\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\t\tstep: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\tif(\"getEnumerator\" in source)\r\n\t\t\treturn (<any>source).getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function forEach<T>(\r\n\te:IEnumerator<T>,\r\n\taction:(element:T, index?:number) => any):void\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tvar index = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\twhile(e.moveNext())\r\n\t\t{\r\n\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n"]}