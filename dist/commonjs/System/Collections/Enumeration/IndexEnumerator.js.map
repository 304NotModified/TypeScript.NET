{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.ts"],"names":["IndexEnumerator","IndexEnumerator.constructor"],"mappings":";;;;;;;;;;;;;;+BAA2B,kBAAkB;;;;IAE7C,eAAA;cAAA,eAAA;;AAICA,aAJD,eAAA,CAKEA,aAAqGA,EAAAA;8BALvG,eAAA;;AAQEC,YAAIA,MAAwFA,CAACA;AAC7FA,mCATF,eAAA,6CAUGA,YAAAA;AAECA,kBAAMA,GAAGA,aAAaA,EAAEA,CAACA;AACzBA,gBAAGA,MAAMA,IAAIA,MAAMA,CAACA,MAAMA,EAC1BA;AACCA,oBAAGA,MAAMA,CAACA,MAAMA,IAAIA,MAAMA,CAACA,IAAIA,KAAGA,CAACA,EAClCA,MAAMA,IAAIA,KAAKA,CAACA,yCAAyCA,CAACA,CAACA;AAE5DA,oBAAIA,OAAOA,GAAGA,MAAMA,CAACA,OAAOA,CAACA;AAC7BA,oBAAGA,CAACA,OAAOA,EACVA,MAAMA,CAACA,OAAOA,GAAGA,CAACA,CAACA,KACfA,IAAGA,OAAOA,IAAEA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,EACnCA,MAAMA,IAAIA,KAAKA,CAACA,yCAAyCA,GAAGA,OAAOA,GAAGA,gBAAgBA,CAACA,CAACA;AACzFA,sBAAMA,CAACA,OAAOA,GAAGA,OAAOA,CAACA;AAEzBA,oBAAIA,IAAIA,GAAGA,MAAMA,CAACA,IAAIA,CAACA;AACvBA,oBAAGA,CAACA,IAAIA,EACPA,MAAMA,CAACA,IAAIA,GAAGA,CAACA,CAACA,KACZA,IAAGA,IAAIA,IAAEA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,EAC7BA,MAAMA,IAAIA,KAAKA,CAACA,sCAAsCA,GAAGA,IAAIA,GAAGA,gBAAgBA,CAACA,CAACA;AACnFA,sBAAMA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;aACnBA;SACDA,EAEDA,UAACA,OAAOA,EAAAA;AAEPA,gBAAIA,GAAGA,GAAGA,AAACA,MAAMA,IAAIA,MAAMA,CAACA,MAAMA,GAAIA,MAAMA,CAACA,MAAMA,GAAGA,CAACA,CAACA;AACxDA,gBAAGA,CAACA,GAAGA,EACNA,OAAOA,OAAOA,CAACA,UAAUA,EAAEA,CAACA;AAC7BA,gBAAIA,OAAOA,GAAGA,MAAMA,CAACA,OAAOA,CAACA;AAC7BA,kBAAMA,CAACA,OAAOA,IAAIA,MAAMA,CAACA,IAAIA,CAACA;AAC9BA,mBAAOA,AAACA,OAAOA,GAACA,GAAGA,IAAIA,OAAOA,IAAEA,CAACA,GAC9BA,OAAOA,CAACA,WAAWA,CAACA,MAAMA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,GAC3CA,OAAOA,CAACA,UAAUA,EAAEA,CAACA;SACxBA,EAEDA,YAAAA;AAECA,gBAAGA,MAAMA,EACTA;AACCA,sBAAMA,CAACA,MAAMA,GAAGA,IAAIA,CAACA;aACrBA;SACDA,EACAA;KACFA;;WAtDF,eAAA;;;qBAAA,eAAA","file":"System/Collections/Enumeration/IndexEnumerator.js","sourcesContent":["import EnumeratorBase from './EnumeratorBase';\r\n\r\nexport default\r\nclass IndexEnumerator<T> extends EnumeratorBase<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsourceFactory:() => { source: { [index: number]: T }; pointer: number; length: number; step: number })\r\n\t{\r\n\r\n\t\tvar source:{ source: { [index: number]: T }; pointer: number; length: number; step: number };\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = sourceFactory();\r\n\t\t\t\tif(source && source.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(source.length && source.step===0)\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (0).\");\r\n\r\n\t\t\t\t\tvar pointer = source.pointer;\r\n\t\t\t\t\tif(!pointer)\r\n\t\t\t\t\t\tsource.pointer = 0;\r\n\t\t\t\t\telse if(pointer!=Math.floor(pointer))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n\t\t\t\t\tsource.pointer = pointer;\r\n\r\n\t\t\t\t\tvar step = source.step;\r\n\t\t\t\t\tif(!step)\r\n\t\t\t\t\t\tsource.step = 1;\r\n\t\t\t\t\telse if(step!=Math.floor(step))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n\t\t\t\t\tsource.step = step;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tvar len = (source && source.source) ? source.length : 0;\r\n\t\t\t\tif(!len)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\tvar current = source.pointer;\r\n\t\t\t\tsource.pointer += source.step;\r\n\t\t\t\treturn (current<len && current>=0)\r\n\t\t\t\t\t? yielder.yieldReturn(source.source[current])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(source)\r\n\t\t\t\t{\r\n\t\t\t\t\tsource.source = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n"]}