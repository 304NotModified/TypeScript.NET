{"version":3,"sources":["System/Collections/Enumeration/EnumeratorBase.ts","System/Collections/Enumeration/EnumeratorBase.js"],"names":[],"mappings":"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","file":"System/Collections/Enumeration/EnumeratorBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\n///<reference path=\"IIterator.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport DisposableBase from \"../../Disposable/DisposableBase\";\r\nimport ObjectPool from \"../../Disposable/ObjectPool\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\nvar yielderPool:ObjectPool<Yielder<any>>;\r\nfunction yielder():Yielder<any>;\r\nfunction yielder(recycle?:Yielder<any>):void;\r\nfunction yielder(recycle?:Yielder<any>):Yielder<any>\r\n{\r\n\tif(!yielderPool)\r\n\t\tyielderPool\r\n\t\t\t= new ObjectPool<Yielder<any>>(40, ()=>new Yielder<any>());\r\n\tif(!recycle) return yielderPool.take();\r\n\trecycle.yieldBreak();\r\n\tyielderPool.add(recycle);\r\n}\r\n\r\nclass Yielder<T> implements IYield<T>, IDisposable\r\n{\r\n\tprivate _current:T = VOID0;\r\n\tget current():T { return this._current; }\r\n\r\n\tyieldReturn(value:T):boolean\r\n\t{\r\n\t\tthis._current = value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tyieldBreak():boolean\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.yieldBreak();\r\n\t}\r\n}\r\n\r\n\r\n// IEnumerator State\r\nenum EnumeratorState { Before, Running, After }\r\n\r\n// Naming this class EnumeratorBase to avoid collision with IE.\r\nexport default\r\nclass EnumeratorBase<T> extends DisposableBase implements IEnumerator<T>\r\n{\r\n\r\n\tprivate _yielder:Yielder<T>;\r\n\tprivate _state:EnumeratorState;\r\n\r\n\tget current():T\r\n\t{\r\n\t\treturn this._yielder.current;\r\n\t}\r\n\r\n\t// \"Enumerator\" is conflict JScript's \"Enumerator\"\r\n\tconstructor(\r\n\t\tprivate initializer:() => void,\r\n\t\tprivate tryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tprivate disposer?:() => void)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\r\n\treset():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tvar y = _._yielder;\r\n\t\tif(y) y.yieldBreak(); // Already exists? Reset.\r\n\t\telse _._yielder = yielder(); // New? Get one from the object pool.\r\n\t\t_._state = EnumeratorState.Before;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(_._state)\r\n\t\t\t{\r\n\t\t\t\tcase EnumeratorState.Before:\r\n\t\t\t\t\t_._state = EnumeratorState.Running;\r\n\t\t\t\t\tvar initializer = _.initializer;\r\n\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\tinitializer();\r\n\t\t\t\t// fall through\r\n\t\t\t\tcase EnumeratorState.Running:\r\n\t\t\t\t\tif(_.tryGetNext(_._yielder))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.dispose();\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnumeratorState.After:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\tnextValue():T\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? this._yielder.current\r\n\t\t\t: VOID0;\r\n\t}\r\n\r\n\t/**\r\n\t * Exposed for compatibility with generators.\r\n\t */\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext() ?\r\n\t\t{\r\n\t\t\tvalue: this._yielder.current,\r\n\t\t\tdone: false\r\n\t\t} : {\r\n\t\t\tvalue: VOID0,\r\n\t\t\tdone: true\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this, disposer = _.disposer;\r\n\r\n\t\t_.initializer = null;\r\n\t\t_.disposer = null;\r\n\r\n\r\n\t\tvar y = _._yielder;\r\n\t\t_._yielder = null;\r\n\t\tyielder(y);\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(disposer)\r\n\t\t\t\tdisposer();\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t//if(this._state==EnumeratorState.Running)\r\n\t\t\tthis._state = EnumeratorState.After;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n'use strict';\nconst DisposableBase_1 = require(\"../../Disposable/DisposableBase\");\nconst ObjectPool_1 = require(\"../../Disposable/ObjectPool\");\nconst VOID0 = void (0);\nvar yielderPool;\nfunction yielder(recycle) {\n    if (!yielderPool)\n        yielderPool\n            = new ObjectPool_1.default(40, () => new Yielder());\n    if (!recycle)\n        return yielderPool.take();\n    recycle.yieldBreak();\n    yielderPool.add(recycle);\n}\nclass Yielder {\n    constructor() {\n        this._current = VOID0;\n    }\n    get current() { return this._current; }\n    yieldReturn(value) {\n        this._current = value;\n        return true;\n    }\n    yieldBreak() {\n        this._current = VOID0;\n        return false;\n    }\n    dispose() {\n        this.yieldBreak();\n    }\n}\nvar EnumeratorState;\n(function (EnumeratorState) {\n    EnumeratorState[EnumeratorState[\"Before\"] = 0] = \"Before\";\n    EnumeratorState[EnumeratorState[\"Running\"] = 1] = \"Running\";\n    EnumeratorState[EnumeratorState[\"After\"] = 2] = \"After\";\n})(EnumeratorState || (EnumeratorState = {}));\nclass EnumeratorBase extends DisposableBase_1.default {\n    constructor(initializer, tryGetNext, disposer) {\n        super();\n        this.initializer = initializer;\n        this.tryGetNext = tryGetNext;\n        this.disposer = disposer;\n        this.reset();\n    }\n    get current() {\n        return this._yielder.current;\n    }\n    reset() {\n        var _ = this;\n        _.throwIfDisposed();\n        var y = _._yielder;\n        if (y)\n            y.yieldBreak();\n        else\n            _._yielder = yielder();\n        _._state = EnumeratorState.Before;\n    }\n    moveNext() {\n        var _ = this;\n        try {\n            switch (_._state) {\n                case EnumeratorState.Before:\n                    _._state = EnumeratorState.Running;\n                    var initializer = _.initializer;\n                    if (initializer)\n                        initializer();\n                case EnumeratorState.Running:\n                    if (_.tryGetNext(_._yielder)) {\n                        return true;\n                    }\n                    else {\n                        this.dispose();\n                        return false;\n                    }\n                case EnumeratorState.After:\n                    return false;\n            }\n        }\n        catch (e) {\n            this.dispose();\n            throw e;\n        }\n    }\n    nextValue() {\n        return this.moveNext()\n            ? this._yielder.current\n            : VOID0;\n    }\n    next() {\n        return this.moveNext() ?\n            {\n                value: this._yielder.current,\n                done: false\n            } : {\n            value: VOID0,\n            done: true\n        };\n    }\n    _onDispose() {\n        var _ = this, disposer = _.disposer;\n        _.initializer = null;\n        _.disposer = null;\n        var y = _._yielder;\n        _._yielder = null;\n        yielder(y);\n        try {\n            if (disposer)\n                disposer();\n        }\n        finally {\n            this._state = EnumeratorState.After;\n        }\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = EnumeratorBase;\n"]}