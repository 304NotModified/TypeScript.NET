{"version":3,"sources":["System/Collections/Array/ReadOnlyArrayWrapper.js","System/Collections/Array/ReadOnlyArrayWrapper.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;ACCA,IAAA,0BAAA,QAAkC,wCAAlC,CAAA;AACA,IAAA,eAAA,QAAqC,2BAArC,CAAA;AACA,IAAA,2BAAA,QAAmC,2BAAnC,CAAA;;IAEA;;;AAGC,aAHD,oBAGC,CAAY,KAAZ,EAA2B;8BAH5B,sBAG4B;;2EAH5B,kCAG4B;;AAG1B,YAAG,CAAC,KAAD,EACF,MAAM,IAAI,wBAAA,OAAA,CAAsB,OAA1B,CAAN,CADD;AAGA,YAAI,SAAJ,CAN0B;AAO1B,UAAE,SAAF,GAAc;mBAAM,MAAM,MAAN;SAAN,CAPY;AAQ1B,UAAE,aAAF,GAAkB;mBAAM,aAAA,IAAA,CAAe,KAAf;SAAN,CARQ;AAS1B,UAAE,UAAF,GAAe;mBAAK,MAAM,CAAN;SAAL,CATW;;KAA3B;;WAHD;EAAqD,yBAAA,OAAA;;AAArD,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADWA,QAAQ,OAAR,GAAkB,oBAAlB","file":"System/Collections/Array/ReadOnlyArrayWrapper.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\nconst Enumerator_1 = require(\"../Enumeration/Enumerator\");\nconst ReadOnlyCollectionBase_1 = require(\"../ReadOnlyCollectionBase\");\nclass ReadOnlyArrayWrapper extends ReadOnlyCollectionBase_1.default {\n    constructor(array) {\n        super();\n        if (!array)\n            throw new ArgumentNullException_1.default('array');\n        var _ = this;\n        _._getCount = () => array.length;\n        _.getEnumerator = () => Enumerator_1.from(array);\n        _.getValueAt = i => array[i];\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ReadOnlyArrayWrapper;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport ArgumentNullException from \"../../Exceptions/ArgumentNullException\";\r\nimport {from as enumeratorFrom} from \"../Enumeration/Enumerator\";\r\nimport ReadOnlyCollectionBase from \"../ReadOnlyCollectionBase\";\r\n\r\nexport default class ReadOnlyArrayWrapper<T> extends ReadOnlyCollectionBase<T>\r\n{\r\n\r\n\tconstructor(array:IArray<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!array)\r\n\t\t\tthrow new ArgumentNullException('array');\r\n\r\n\t\tvar _ = this;\r\n\t\t_._getCount = () => array.length;\r\n\t\t_.getEnumerator = () => enumeratorFrom(array);\r\n\t\t_.getValueAt = i => array[i];\r\n\t}\r\n\r\n\tgetValueAt:(index:number)=>T;\r\n}\r\n"]}