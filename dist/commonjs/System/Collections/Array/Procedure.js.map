{"version":3,"sources":["System/Collections/Array/Procedure.ts"],"names":["sum","average","product","ifSet","min","max"],"mappings":"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","file":"System/Collections/Array/Procedure.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nexport function sum(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn 0;\r\n\r\n\tvar result = 0;\r\n\tif(ignoreNaN)\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n)) result += n;\r\n\t\t});\r\n\telse\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tresult += n;\r\n\t\t\treturn !isNaN(result);\r\n\t\t});\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function average(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = 0, count:number;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tcount = 0;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult += n;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\telse\r\n\t{\r\n\t\tcount = source.length;\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tresult += n;\r\n\t\t\treturn !isNaN(result);\r\n\t\t});\r\n\r\n\t}\r\n\r\n\treturn (!count || isNaN(result)) ? NaN : (result/count);\r\n}\r\n\r\nexport function product(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = 1;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tvar found = false;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult *= n;\r\n\t\t\t\tif(!found) found = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(!found)\r\n\t\t\tresult = NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tif(isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult = NaN;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tresult *= n;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction ifSet(\r\n\tsource:number[],\r\n\tstart:number,\r\n\tignoreNaN:boolean,\r\n\tpredicate:(n:number, result:number) => boolean)\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = start;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tvar found = false;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tif(predicate(n, result))\r\n\t\t\t\t\tresult = n;\r\n\t\t\t\tif(!found) found = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(!found)\r\n\t\t\tresult = NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tif(isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult = NaN;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif(predicate(n, result))\r\n\t\t\t\tresult = n;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\treturn result;\r\n\r\n}\r\n\r\nexport function min(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, +Infinity, ignoreNaN, (n, result) => n<result);\r\n}\r\n\r\nexport function max(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, -Infinity, ignoreNaN, (n, result) => n>result);\r\n}\r\n"]}