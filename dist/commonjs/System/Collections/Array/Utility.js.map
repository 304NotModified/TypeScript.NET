{"version":3,"sources":["System/Collections/Array/Utility.ts"],"names":[],"mappings":"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","file":"Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {Integer} from \"../../Integer\";\r\nimport {areEqual} from \"../../Compare\";\r\nimport {ArgumentException} from \"../../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../../Exceptions/ArgumentOutOfRangeException\";\r\nimport {\r\n\tEqualityComparison,\r\n\tPredicate,\r\n\tAction,\r\n\tPredicateWithIndex,\r\n\tSelectorWithIndex,\r\n\tActionWithIndex\r\n} from \"../../FunctionTypes\";\r\nimport {IArray} from \"./IArray\";\r\n\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tvar array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n/**\r\n *\r\n * @param source\r\n * @param sourceIndex\r\n * @param length\r\n * @returns {any}\r\n */\r\nexport function copy<T>(\r\n\tsource:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tlength:number = Infinity):T[]\r\n{\r\n\tif(!source) return <any>source; // may have passed zero? undefined? or null?\r\n\treturn copyTo(\r\n\t\tsource,\r\n\t\tinitialize<T>(Math.min(length, Math.max(source.length - sourceIndex, 0))),\r\n\t\tsourceIndex, 0, length);\r\n}\r\n\r\nconst\r\n\tCBN  = 'Cannot be null.',\r\n\tCB0  = 'Cannot be zero.',\r\n\tCBL0 = 'Cannot be less than zero.',\r\n\tVFN  = 'Must be a valid finite number';\r\n\r\n/**\r\n * Copies one array to another.\r\n * @param source\r\n * @param destination\r\n * @param sourceIndex\r\n * @param destinationIndex\r\n * @param length An optional limit to stop copying.\r\n * @returns The destination array.\r\n */\r\nexport function copyTo<T,TDestination extends IArray<T>>(\r\n\tsource:ArrayLike<T>,\r\n\tdestination:TDestination,\r\n\tsourceIndex:number = 0,\r\n\tdestinationIndex:number = 0,\r\n\tlength:number = Infinity):TDestination\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(!destination)\r\n\t\tthrow new ArgumentNullException('destination', CBN);\r\n\r\n\tif(sourceIndex<0)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\r\n\r\n\tvar sourceLength = source.length;\r\n\tif(!sourceLength)\r\n\t\treturn destination;\r\n\tif(sourceIndex>=sourceLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n\r\n\tif(destination.length<0)\r\n\t\tthrow new ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\r\n\r\n\tvar maxLength = source.length - sourceIndex;\r\n\tif(isFinite(length) && length>maxLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n\r\n\tlength = Math.min(length, maxLength);\r\n\tvar newLength = destinationIndex + length;\r\n\tif(newLength>destination.length) destination.length = newLength;\r\n\r\n\tfor(let i = 0; i<length; i++)\r\n\t{\r\n\t\tdestination[destinationIndex + i] = source[sourceIndex + i];\r\n\t}\r\n\r\n\treturn destination;\r\n}\r\n\r\n\r\n/**\r\n * Checks to see where the provided array contains an item/value.\r\n * If the array value is null, then -1 is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {number}\r\n */\r\nexport function indexOf<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\r\n\tvar len = array && array.length;\r\n\tif(len)\r\n\t{\r\n\t\t// NaN NEVER evaluates its equality so be careful.\r\n\t\tif(Array.isArray(array) && !Type.isTrueNaN(item))\r\n\t\t\treturn array.indexOf(item);\r\n\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(equalityComparer(array[i], item))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\treturn indexOf(array, item, equalityComparer)!= -1;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:IArray<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax?:number):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\tif(!max) max = Infinity;\r\n\r\n\tvar count = 0;\r\n\r\n\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t{\r\n\t\tif(array[i]===old)\r\n\t\t{\r\n\t\t\t(<any>array)[i] = newValue;\r\n\t\t\t++count;\r\n\t\t\tif(count==max) break;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param start\r\n * @param stop\r\n */\r\nexport function updateRange<T>(\r\n\tarray:ArrayLike<T>,\r\n\tvalue:T,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tif(!array) return;\r\n\tInteger.assertZeroOrGreater(start, 'start');\r\n\tif(!stop && stop!==0) stop = array.length;\r\n\tInteger.assert(stop, 'stop');\r\n\tif(stop<start) throw new ArgumentOutOfRangeException(\"stop\", stop, \"is less than start\");\r\n\r\n\tfor(let i:number = start; i<stop; i++)\r\n\t{\r\n\t\t(<any>array)[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param start\r\n * @param stop\r\n */\r\nexport function clear(\r\n\tarray:IArray<any>,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tupdateRange(array, null, start, stop);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tvar len = array.length; // avoid querying .length more than once. *\r\n\tvar ok = !len || !contains(array, item, equalityComparer);\r\n\tif(ok) (<any>array)[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:IArray<T>, predicate:PredicateWithIndex<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\r\n\tvar len = array.length;\r\n\tif(Array.isArray(array))\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif(predicate(array[i],i))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif((i) in (array) && predicate(array[i],i))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param action\r\n */\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\taction:ActionWithIndex<T>):void\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\taction:PredicateWithIndex<T>):void\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\taction:ActionWithIndex<T> | PredicateWithIndex<T>):void\r\n{\r\n\tif(source && action)\r\n\t{\r\n\t\t// Don't cache the length since it is possible that the underlying array changed.\r\n\t\tfor(let i = 0; i<source.length; i++)\r\n\t\t{\r\n\t\t\tif(action(source[i], i)===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n */\r\nexport function applyTo<T>(target:IArray<T>, fn:SelectorWithIndex<T,T>):void\r\n{\r\n\tif(target && fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; i++)\r\n\t\t{\r\n\t\t\t(<any>target)[i] = fn(target[i],i);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tInteger.assert(index, 'index');\r\n\tif(index<0) throw new ArgumentOutOfRangeException('index', index, CBL0);\r\n\r\n\r\n\tvar exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @param {function?} equalityComparer\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(\r\n\tarray:T[], value:T, max?:number,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\tvar count = 0;\r\n\tif(!max || !isFinite(max))\r\n\t{\r\n\t\t// Don't track the indexes and remove in reverse.\r\n\t\tfor(let i = (array.length - 1); i>=0; i--)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// Since the user will expect it to happen in forward order...\r\n\t\tvar found:number[] = []; // indexes;\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tfound.push(i);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(count==max) break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(let i = found.length - 1; i>=0; i--)\r\n\t\t{\r\n\t\t\tarray.splice(found[i], 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tInteger.assert(count, 'count');\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result = initialize<T>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = element;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value.\r\n * @param first\r\n * @param count\r\n * @param step\r\n * @returns {number[]}\r\n */\r\n\r\nexport function range(\r\n\tfirst:number,\r\n\tcount:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(isNaN(first) || !isFinite(first)) throw new ArgumentOutOfRangeException('first', first, VFN);\r\n\tif(isNaN(count) || !isFinite(count)) throw new ArgumentOutOfRangeException('count', count, VFN);\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result = initialize<number>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = first;\r\n\t\tfirst += step;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value excluding any numbers at or beyond the until value.\r\n * @param first\r\n * @param until\r\n * @param step\r\n * @returns {number[]}\r\n */\r\nexport function rangeUntil(\r\n\tfirst:number,\r\n\tuntil:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(step==0) throw new ArgumentOutOfRangeException('step', step, CB0);\r\n\treturn range(first, (until - first)/step, step);\r\n}\r\n\r\n/**\r\n * Returns a unique reduced set of values.\r\n * @param source\r\n */\r\nexport function distinct(source:string[]):string[];\r\nexport function distinct(source:number[]):number[];\r\nexport function distinct(source:any[]):any[]\r\n{\r\n\tvar seen:any = {};\r\n\treturn source.filter(e=> !(e in seen) && (seen[e] = true));\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tvar result:any[] = [];\r\n\tfor(var i = 0; i<a.length; i++)\r\n\t{\r\n\t\tvar x = a[i];\r\n\t\tif(Array.isArray(x))\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth - 1);\r\n\t\t\tfor(var n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n"]}