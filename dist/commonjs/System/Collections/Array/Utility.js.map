{"version":3,"sources":["System/Collections/Array/Utility.ts"],"names":["initialize","copy","copyTo","contains","replace","updateRange","clear","register","findIndex","forEach","applyTo","removeIndex","remove","repeat","flatten"],"mappings":"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","file":"System/Collections/Array/Utility.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IArray.d.ts\"/>\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\nimport Type from '../../Types';\r\nimport {areEqual} from '../../Compare';\r\nimport ArgumentException from '../../Exceptions/ArgumentException';\r\nimport ArgumentNullException from '../../Exceptions/ArgumentNullException';\r\nimport ArgumentOutOfRangeException from '../../Exceptions/ArgumentOutOfRangeException';\r\n\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tvar array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n/**\r\n *\r\n * @param source\r\n * @param sourceIndex\r\n * @param length\r\n * @returns {any}\r\n */\r\nexport function copy<T>(\r\n\tsource:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tlength:number = Infinity):IArray<T>\r\n{\r\n\tif(!source) return source; // may have passed zero? undefined? or null?\r\n\treturn copyTo<T>(\r\n\t\tsource,\r\n\t\tinitialize<T>(Math.min(length, Math.max(source.length - sourceIndex, 0))),\r\n\t\tsourceIndex, 0, length);\r\n}\r\n\r\nconst\r\nCBN  = 'Cannot be null.',\r\nCBL0 = 'Cannot be less than zero.';\r\n\r\n/**\r\n * Copies one array to another.\r\n * @param source\r\n * @param destination\r\n * @param sourceIndex\r\n * @param destinationIndex\r\n * @param length An optional limit to stop copying.\r\n * @returns The destination array.\r\n */\r\nexport function copyTo<T>(\r\n\tsource:IArray<T>,\r\n\tdestination:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tdestinationIndex:number = 0,\r\n\tlength:number = Infinity):IArray<T>\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(!destination)\r\n\t\tthrow new ArgumentNullException('destination', CBN);\r\n\r\n\tif(sourceIndex<0)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\r\n\r\n\tvar sourceLength = source.length;\r\n\tif(sourceIndex>=sourceLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n\r\n\tif(destination.length<0)\r\n\t\tthrow new ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\r\n\r\n\tvar maxLength = source.length - sourceIndex;\r\n\tif(isFinite(length) && length>maxLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n\r\n\tlength = Math.min(length, maxLength);\r\n\r\n\tfor(let i = 0; i<length; ++i)\r\n\t{\r\n\t\tdestination[destinationIndex + i] = source[sourceIndex + i];\r\n\t}\r\n\r\n\treturn destination;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(array:IArray<T>, item:T):boolean\r\n{\r\n\tif(array && array.length)\r\n\t{\r\n\r\n\t\tif(array instanceof Array) return array.indexOf(item)!= -1;\r\n\r\n\t\tfor(let i = 0; i<array.length; ++i)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(areEqual(array[i], item))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:IArray<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax?:number):number\r\n{\r\n\r\n\tvar count = 0;\r\n\tif(max!==0)\r\n\t{\r\n\t\tif(!max)\r\n\t\t\tmax = Infinity;\r\n\r\n\t\tfor(let i = (array.length - 1); i>=0; --i)\r\n\t\t{\r\n\t\t\tif(array[i]===old)\r\n\t\t\t{\r\n\t\t\t\tarray[i] = newValue;\r\n\t\t\t\t++count;\r\n\t\t\t\tif(!--max)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param index\r\n * @param length\r\n */\r\nexport function updateRange<T>(\r\n\tarray:T[],\r\n\tvalue:T,\r\n\tindex:number,\r\n\tlength:number):void\r\n{\r\n\tvar end = index + length;\r\n\tfor(let i:number = index; i<end; ++i)\r\n\t{\r\n\t\tarray[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param index\r\n * @param length\r\n */\r\nexport function clear(\r\n\tarray:any[],\r\n\tindex:number,\r\n\tlength:number):void\r\n{\r\n\tupdateRange(array, null, index, length);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(array:IArray<T>, item:T):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tvar len = array.length; // avoid querying .length more than once. *\r\n\tvar ok = !len || !contains(array, item);\r\n\tif(ok) array[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:IArray<T>, predicate:Predicate<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\tvar len = array.length;\r\n\tfor(let i = 0; i<len; ++i)\r\n\t{\r\n\t\tif(i in array && predicate(array[i]))\r\n\t\t\treturn i;\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param fn\r\n * @returns {IArray<T>}\r\n */\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\tfn:(value:T, index?:number) => (void|boolean)):IArray<T>\r\n{\r\n\tif(!source)\r\n\t\tthrow new Error(\"ArgumentNullException: 'source' cannot be null.\");\r\n\r\n\tif(fn)\r\n\t{\r\n\t\tfor(let i = 0; i<source.length; ++i)\r\n\t\t{\r\n\t\t\tif(fn(source[i])===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn source;\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n * @returns {IArray<T>}\r\n */\r\nexport function applyTo<T>(target:IArray<T>, fn:(a:T) => T):IArray<T>\r\n{\r\n\tif(!target)\r\n\t\tthrow new Error(\"ArgumentNullException: 'target' cannot be null.\");\r\n\r\n\tif(fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; ++i)\r\n\t\t{\r\n\t\t\ttarget[i] = fn(target[i]);\r\n\t\t}\r\n\t}\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new Error(\"ArgumentNullException: 'array' cannot be null.\");\r\n\r\n\tvar exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(array:T[], value:T, max?:number):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new Error(\"ArgumentNullException: 'array' cannot be null.\");\r\n\r\n\tvar count = 0;\r\n\tif(array && array.length && max!==0)\r\n\t{\r\n\t\tif(!max)\r\n\t\t\tmax = Infinity;\r\n\r\n\t\tfor(let i = (array.length - 1); i>=0; --i)\r\n\t\t{\r\n\t\t\tif(array[i]===value)\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(!--max)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tvar result:T[] = [];\r\n\twhile(count--)\r\n\t{\r\n\t\tresult.push(element);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tvar result:any[] = [];\r\n\tfor(var i = 0; i<a.length; i++)\r\n\t{\r\n\t\tvar x = a[i];\r\n\t\tif(x instanceof Array)\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth-1);\r\n\t\t\tfor(var n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n"]}