{"version":3,"sources":["System/Collections/Array/Compare.ts"],"names":["validateSize","areAllEqual","areEqual","copyAndSort","areEquivalent"],"mappings":"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","file":"System/Collections/Array/Compare.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IArray.d.ts\"/>\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\nimport * as Values from '../../Compare';\r\nimport Type from '../../Types';\r\n\r\n/*  validateSize: Utility for quick validation/invalidation of array equality.\r\n\tWhy this way?  Why not pass a closure for the last return?\r\n\tReason: Performance and avoiding the creation of new functions/closures. */\r\nfunction validateSize(a:IArray<any>, b:IArray<any>):any\r\n{\r\n\t// Both valid and are same object, or both are null/undefined.\r\n\tif(a && b && a===b || !a && !b)\r\n\t\treturn true;\r\n\r\n\t// At this point, at least one has to be non-null.\r\n\tif(!a || !b)\r\n\t\treturn false;\r\n\r\n\tvar len = a.length;\r\n\tif(len!==b.length)\r\n\t\treturn false;\r\n\r\n\t// If both are arrays and have zero length, they are equal.\r\n\tif(len===0)\r\n\t\treturn true;\r\n\r\n\t// Return the length for downstream processing.\r\n\treturn len;\r\n}\r\n\r\nexport function areAllEqual(\r\n\tarrays:any[][],\r\n\tstrict?:boolean,\r\n\tequalityComparer:EqualityComparison<any> = Values.areEqual):boolean\r\n{\r\n\tif(!arrays)\r\n\t\tthrow new Error(\"ArgumentNullException: 'arrays' cannot be null.\");\r\n\tif(arrays.length<2)\r\n\t\tthrow new Error(\"Cannot compare a set of arrays less than 2.\");\r\n\tvar first = arrays[0];\r\n\tfor(let i = 0, l = arrays.length; i<l; ++i)\r\n\t{\r\n\t\tif(!areEqual(first, arrays[i], strict, equalityComparer))\r\n\t\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nexport function areEqual<T>(\r\n\ta:IArray<T>, b:IArray<T>,\r\n\tstrict?:boolean,\r\n\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n{\r\n\tvar len = validateSize(a, b);\r\n\tif(Type.isBoolean(len)) return <boolean>len;\r\n\r\n\tfor(let i = 0; i<len; ++i)\r\n\t{\r\n\t\tif(!equalityComparer(a[i], b[i], strict))\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction copyAndSort<T>(a:IArray<T>, comparer:Comparison<T>):T[]\r\n{\r\n\tif(!a) return null;\r\n\tif(a instanceof Array) return (<Array<T>>a).slice();\r\n\tvar len = a.length, b:T[];\r\n\tif(len>65536) b = new Array(len);\r\n\telse\r\n\t{\r\n\t\tb = [];\r\n\t\tb.length = len;\r\n\t}\r\n\tfor(let i = 0; i<len; i++) b[i] = a[i];\r\n\tb.sort(comparer);\r\n\treturn b;\r\n}\r\n\r\nexport function areEquivalent<T>(\r\n\ta:IArray<T>, b:IArray<T>,\r\n\tcomparer:Comparison<T> = Values.compare):boolean\r\n{\r\n\tvar len = validateSize(a, b);\r\n\tif(Type.isBoolean(len)) return <boolean>len;\r\n\r\n\t// There might be a better more performant way to do this, but for the moment, this\r\n\t// works quite well.\r\n\ta = copyAndSort(a, comparer);\r\n\tb = copyAndSort(b, comparer);\r\n\r\n\tfor(let i = 0; i<len; ++i)\r\n\t{\r\n\t\tif(comparer(a[i], b[i])!==0)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n"]}