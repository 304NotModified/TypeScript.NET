{"version":3,"sources":["System/Functions.ts"],"names":["Functions","Functions.Identity","Functions.True","Functions.False","Functions.Blank"],"mappings":";;;;;;;;;;;;;;IASA,SAAA;aAAA,SAAA;8BAAA,SAAA;;;iBAAA,SAAA;;eAOSA,kBAAIA,CAAGA,EAAAA;AACbC,mBAAOA,CAACA,CAACA;SAAEA;;;eAMTD,gBAAAA;AACFE,mBAAOA,IAAIA,CAACA;SAAEA;;;eAMXF,iBAAAA;AACHG,mBAAOA,KAAKA,CAACA;SAAEA;;;eAKZH,iBAAAA,EACFI;;;WA5BJ,SAAA;;;AA+BA,IAAM,aAAa,GAAa,IAAI,SAAS,EAAE,CAAC;AAIhD,CAAA,UAAO,SAAS,EAChB;AAKYJ,aAAAA,CAAAA,QAAQA,GAChBA,aAAaA,CAACA,QAAQA,CAACA;AAMfA,aAAAA,CAAAA,IAAIA,GACZA,aAAaA,CAACA,IAAIA,CAACA;AAMXA,aAAAA,CAAAA,KAAKA,GACbA,aAAaA,CAACA,KAAKA,CAACA;AAKZA,aAAAA,CAAAA,KAAKA,GACbA,aAAaA,CAACA,KAAKA,CAACA;CACvBA,CAAAA,CA5BM,SAAS,KAAT,SAAS,GAAA,EAAA,CAAA,CAAA,CA4Bf;AAGD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;qBAEV,SAAS","file":"System/Functions.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\n/**\r\n * Can be used statically or extended for varying different reusable function signatures.\r\n */\r\nclass Functions\r\n{\r\n\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {T}\r\n\t */\r\n\tIdentity<T>(x:T):T\r\n\t{ return x; }\r\n\r\n\t/**\r\n\t * Returns true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tTrue():boolean\r\n\t{ return true; }\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\tFalse():boolean\r\n\t{ return false; }\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\tBlank():void\r\n\t{ }\r\n}\r\n\r\nconst rootFunctions:Functions = new Functions();\r\n\r\n// Expose static versions.\r\n\r\nmodule Functions\r\n{\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport var Identity:<T>(x:T) => T\r\n\t\t= rootFunctions.Identity;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport var True:() => boolean\r\n\t\t= rootFunctions.True;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport var False:() => boolean\r\n\t\t= rootFunctions.False;\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\texport var Blank:() => void\r\n\t\t= rootFunctions.Blank;\r\n}\r\n\r\n// Make this read only.  Should still allow for sub-classing since extra methods are added to prototype.\r\nObject.freeze(Functions);\r\n\r\nexport default Functions;\r\n\r\n"]}