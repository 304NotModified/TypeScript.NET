{"version":3,"sources":["System/Functions.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAKH;IAAA;IAgCA,CAAC;IAxBA,4BAAQ,GAAR,UAAY,CAAG,IACb,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAOb,wBAAI,GAAJ,cACE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAOhB,yBAAK,GAAL,cACE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAKjB,yBAAK,GAAL,cACE,CAAC;IACJ,gBAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,iBAAS,YAgCrB,CAAA;AAED,IAAM,aAAa,GAAa,IAAI,SAAS,EAAE,CAAC;AAIhD,IAAc,SAAS,CA4BtB;AA5BD,WAAc,SAAS,EACvB,CAAC;IAKa,kBAAQ,GAClB,aAAa,CAAC,QAAQ,CAAC;IAMb,cAAI,GACd,aAAa,CAAC,IAAI,CAAC;IAMT,eAAK,GACf,aAAa,CAAC,KAAK,CAAC;IAKV,eAAK,GACf,aAAa,CAAC,KAAK,CAAC;AACxB,CAAC,EA5Ba,SAAS,GAAT,iBAAS,KAAT,iBAAS,QA4BtB;AAGD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAEzB;kBAAe,SAAS,CAAC","file":"System/Functions.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/**\r\n * Can be used statically or extended for varying different reusable function signatures.\r\n */\r\nexport class Functions\r\n{\r\n\r\n\t//noinspection JSMethodCanBeStatic\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {T}\r\n\t */\r\n\tIdentity<T>(x:T):T\r\n\t{ return x; }\r\n\r\n\t//noinspection JSMethodCanBeStatic\r\n\t/**\r\n\t * Returns true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tTrue():boolean\r\n\t{ return true; }\r\n\r\n\t//noinspection JSMethodCanBeStatic\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\tFalse():boolean\r\n\t{ return false; }\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\tBlank():void\r\n\t{ }\r\n}\r\n\r\nconst rootFunctions:Functions = new Functions();\r\n\r\n// Expose static versions.\r\n\r\nexport module Functions\r\n{\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const Identity:<T>(x:T) => T\r\n\t\t= rootFunctions.Identity;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const True:() => boolean\r\n\t\t= rootFunctions.True;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const False:() => boolean\r\n\t\t= rootFunctions.False;\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\texport const Blank:() => void\r\n\t\t= rootFunctions.Blank;\r\n}\r\n\r\n// Make this read only.  Should still allow for sub-classing since extra methods are added to prototype.\r\nObject.freeze(Functions);\r\n\r\nexport default Functions;\r\n\r\n"]}