{"version":3,"sources":["System.Linq/Linq.ts"],"names":[],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport * as Values from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {\r\n\tfrom as enumeratorFrom,\r\n\tforEach,\r\n\ttoArray,\r\n\tmap,\r\n\tisEnumerable,\r\n\tthrowIfEndless\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"../System/Collections/Enumeration/EmptyEnumerator\";\r\nimport {Type} from \"../System/Types\";\r\nimport {Integer} from \"../System/Integer\";\r\nimport {Functions as BaseFunctions} from \"../System/Functions\";\r\nimport {ArrayEnumerator} from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport {EnumeratorBase} from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport {Dictionary} from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport {Queue} from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport {DisposableBase} from \"../System/Disposable/DisposableBase\";\r\nimport {UnsupportedEnumerableException} from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport {ObjectDisposedException} from \"../System/Disposable/ObjectDisposedException\";\r\nimport {KeySortedContext} from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport {ArgumentNullException} from \"../System/Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\nimport {IEnumerator} from \"../System/Collections/Enumeration/IEnumerator\";\r\nimport {IEnumerable} from \"../System/Collections/Enumeration/IEnumerable\";\r\nimport {\r\n\tAction,\r\n\tPredicate,\r\n\tSelector,\r\n\tEqualityComparison,\r\n\tComparison,\r\n\tClosure\r\n} from \"../System/FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"../System/Collections/IEnumerableOrArray\";\r\nimport {IArray} from \"../System/Collections/Array/IArray\";\r\nimport {IMap, IDictionary} from \"../System/Collections/Dictionaries/IDictionary\";\r\nimport {Comparable} from \"../System/IComparable\";\r\nimport {IComparer} from \"../System/IComparer\";\r\nimport {IKeyValuePair} from \"../System/KeyValuePair\";\r\nimport {Order} from \"../System/Collections/Sorting/Order\";\r\nimport {\r\n\tIInfiniteEnumerable,\r\n\tILinqEnumerable,\r\n\tIFiniteEnumerable,\r\n\tILookup,\r\n\tIOrderedEnumerable,\r\n\tIGrouping,\r\n\tEnumerableAction\r\n} from \"./Enumerable\";\r\nimport __extendsImport from \"../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:undefined = void 0;\r\nconst NULL:any = null;\r\nconst BREAK:(e:any)=>EnumerableAction = element => EnumerableAction.Break;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\t// noinspection JSMethodCanBeStatic\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\r\n\t// noinspection JSMethodCanBeStatic\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n\r\n/*\r\n * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\r\n * There may seem like there's extra overrides here and they may seem unnecessary.\r\n * But after closer inspection you'll see the type chain is retained and\r\n * infinite enumerables are prevented from having features that finite ones have.\r\n *\r\n * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\r\n */\r\n\r\nexport class InfiniteEnumerable<T>\r\nextends DisposableBase implements IInfiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure|null)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t\tthis._isEndless = true;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean|undefined;\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\t(<any>this)._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new InfiniteEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t * @param action\r\n\t * @param initializer\r\n\t * @param isEndless Special case where isEndless can be null in order to negate inheritance.\r\n\t * @returns {any}\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>,\r\n\t\tinitializer?:Closure|null,\r\n\t\tisEndless:boolean|null|undefined = this.isEndless):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tconst isE:boolean|undefined = isEndless || undefined; // In case it's null.\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet actionResult = <any>action(<T>enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisE\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisE\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforce():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.doAction(BREAK)\r\n\t\t\t.getEnumerator()\r\n\t\t\t.moveNext();\r\n\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> new InfiniteEnumerable<T>(getEmptyEnumerator);\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<count\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn <any> _.doAction((element:T, index?:number) => index<count, null, false);\r\n\t}\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar v = this.elementAtOrDefault(index, INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <T>using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>):Enumerable<T>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>):Enumerable<TNode>;\r\n\r\n\ttraverseBreadthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>,\r\n\t\tresultSelector?:(element:T, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector?:(element:TNode, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel?:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet nestLevel:number = 0;\r\n\t\t\t\tlet buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tlet next = Enumerable\r\n\t\t\t\t\t\t\t\t.from(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(childrenSelector);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>):Enumerable<T>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>):Enumerable<TNode>;\r\n\r\n\ttraverseDepthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>,\r\n\t\tresultSelector?:(element:T, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector?:(element:TNode, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel?:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tlet enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet value = resultSelector(<TNode>enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tlet e = Enumerable.fromAny(childrenSelector(<T|TNode>enumerator.current));\r\n\t\t\t\t\t\t\t\tenumerator = e ? e.getEnumerator() : EmptyEnumerator;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet middleEnumerator:IEnumerator<any>|null = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = enumerator.current;\r\n\t\t\t\t\t\t\t\t// Because strings are enumerable, we can get stuck in an infinite loop.\r\n\t\t\t\t\t\t\t\t// Treat strings as primitives here.\r\n\t\t\t\t\t\t\t\tlet e = !Type.isString(c) && Enumerable.fromAny(c);\r\n\t\t\t\t\t\t\t\tif(e)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = e\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(c);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet prev = <T>enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, <T>enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet value:T;\r\n\t\t\t\tlet isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = <T>seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(value = <T>enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, <T>enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(<T>enumerator.current, index++))\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n\tpublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\r\n\t\tthis IEnumerable<TSource> source,\r\n\t\tFunc<TSource, IEnumerable<TCollection>> collectionSelector,\r\n\t\tFunc<TSource, TCollection, TResult> resultSelector)\r\n\t */\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet middleEnumerator:IEnumerator<any>|null|undefined;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = VOID0;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet middleSeq = collectionSelector(<T>enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector!(\r\n\t\t\t\t\t\t\t\t\t\t<T>enumerator.current, <TElement>middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector:(collection:T, element:TElement) => TResult):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<any>>,\r\n\t\tresultSelector?:(collection:T, element:any) => TResult):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tprotected _choose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result = selector(<T>enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t */\r\n\tchoose():InfiniteEnumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):InfiniteEnumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector)\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet v = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(predicate(v, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(v);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):InfiniteEnumerable<TType>;\r\n\tofType<TType>(type:any):InfiniteEnumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <any> this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.choose()\r\n\t\t\t.where(x=>(typeof x)===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tforEach(second, key => { keys.addByKeyValue(key, true) });\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):this\r\n\t{\r\n\t\treturn this.except(NULL, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged<TCompare>(compareSelector:Selector<T, TCompare> = Functions.Identity):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet compareKey:TCompare;\r\n\t\t\t\tlet initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet key = compareSelector(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(Values.areEqual(compareKey, key))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue?:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed:boolean = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerableOrArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerableOrArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet secondTemp:Queue<any>;\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tlet next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tlet innerElements:TInner[]|null;\r\n\t\t\t\tlet innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(<T>outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet key = outerKeySelector(<T>outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\touterEnumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:ILookup<TKey, TInner>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t<T>enumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(<T>enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\tif(!enumerables || enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet queue:Queue<IEnumerableOrArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerableOrArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):this\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = <T>firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = <T>secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:IEnumerableOrArray<T>):this\r\n\t{\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tlet count:number = 0;\r\n\t\t\t\tlet isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerableOrArray<T>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tlet hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tlet another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):this\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):this\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:any) => void):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:Closure):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tbuffer(size:number):InfiniteEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\t\tvar len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = <T>enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn !!len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tshare():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet sharedEnumerator:IEnumerator<T>;\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn sharedEnumerator || (sharedEnumerator = _.getEnumerator());\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends InfiniteEnumerable<T> implements ILinqEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure|null,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar e = Enumerable.fromAny(source);\r\n\t\tif(!e) throw new UnsupportedEnumerableException();\r\n\t\treturn e;\r\n\t}\r\n\r\n\tstatic fromAny<T>(\r\n\t\tsource:IEnumerableOrArray<T>):Enumerable<T>\r\n\r\n\tstatic fromAny(\r\n\t\tsource:any):Enumerable<any>\r\n\r\n\tstatic fromAny<T>(\r\n\t\tsource:IEnumerableOrArray<T>,\r\n\t\tdefaultEnumerable:Enumerable<T>):Enumerable<T>\r\n\r\n\tstatic fromAny<T>(\r\n\t\tsource:any,\r\n\t\tdefaultEnumerable?:Enumerable<T>):Enumerable<T>|undefined\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable<T>(\r\n\t\t\t\t\t()=>source.getEnumerator(),\r\n\t\t\t\t\tnull, source.isEndless);\r\n\t\t}\r\n\r\n\t\treturn defaultEnumerable;\r\n\t}\r\n\r\n\tstatic fromOrEmpty<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.fromAny(source) || Enumerable.empty<T>();\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\tstatic toArray<T>(source:IEnumerableOrArray<T>):T[]\r\n\t{\r\n\t\tif(source instanceof Enumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn toArray(source);\r\n\t}\r\n\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(Integer.random.select(values)),\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic chooseFrom<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.choice(args);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycleThrough<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.cycle(args);\r\n\t}\r\n\r\n\tstatic empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single static instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T):InfiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet c:number = count;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\tstatic make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\r\n\tstatic range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\t\t\t\tlet c:number = count; // Force integer evaluation.\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\treturn Enumerable.toInfinity(start, -step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(\r\n\t\tinput:string, pattern:any,\r\n\t\tflags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\t\tif(input===null || input===VOID0)\r\n\t\t\tthrow new ArgumentNullException(\"input\");\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tlet match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T):InfiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number):FiniteEnumerable<T>;\r\n\tstatic generate<T>(\r\n\t\tfactory:(index?:number) => T,\r\n\t\tcount:number = Infinity):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t?\r\n\t\t\tnew FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet c:number = count;\r\n\t\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t:\r\n\t\t\tnew InfiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++)),\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:Selector<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\tlet value:T;\r\n\t\t\t\tlet isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\taction:(element:T, index?:number) => any,\r\n\t\tmax:number = Infinity):number\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn forEach(enumerable, action, max);\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn map(enumerable, selector);\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tvar v = values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\tstatic min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tvar v = values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Takes any set of collections of the same type and weaves them together.\r\n\t * @param enumerables\r\n\t * @returns {Enumerable<T>}\r\n\t */\r\n\tstatic weave<T>(\r\n\t\tenumerables:IEnumerableOrArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(!enumerables)\r\n\t\t\tthrow new ArgumentNullException('enumerables');\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet queue:Queue<IEnumerator<T>>;\r\n\t\t\t\tlet mainEnumerator:IEnumerator<IEnumerableOrArray<T>>|null;\r\n\t\t\t\tlet index:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerator<T>>();\r\n\t\t\t\t\t\tmainEnumerator = enumeratorFrom(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet e:IEnumerator<T>|null = null;\r\n\r\n\t\t\t\t\t\t// First pass...\r\n\t\t\t\t\t\tif(mainEnumerator)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(!e && mainEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = mainEnumerator.current;\r\n\t\t\t\t\t\t\t\te = nextEnumerator(queue, c ? enumeratorFrom(c) : NULL);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!e)\r\n\t\t\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile(!e && queue.count)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te = nextEnumerator(queue, queue.dequeue());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn e\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(e.current)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose.these(queue.dump());\r\n\t\t\t\t\t\tdispose(mainEnumerator, queue);\r\n\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\tqueue = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n// #region Indexing/Paging methods.\r\n\r\n\tskipWhile(predicate:Predicate<T>):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tlet found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(<T>e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0, count:number = Infinity):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assertZeroOrGreater(index);\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use forEach utility instead.\r\n\t\tforEach<T>(this, (x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t}, count);\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tlet key = keySelector(x);\r\n\t\t\t\tlet element = elementSelector(x);\r\n\r\n\t\t\t\tlet array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x, i)] = elementSelector(x, i);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):IDictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach((x, i)=> dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this\r\n\t\t\t.select(selector)\r\n\t\t\t.toArray()\r\n\t\t\t.join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn <any> _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\treturn <Enumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):Enumerable<TResult>;\r\n\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector:(collection:T, element:TElement)=>TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<any>>,\r\n\t\tresultSelector?:(collection:T, element:any)=>TResult):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tchoose():Enumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):Enumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> !!index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet capacity:number;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tlet selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = NULL; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t?\r\n\t\t\t\t(x, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tvar result = true;\r\n\t\tthis.forEach((x, i) =>\r\n\t\t{\r\n\t\t\tif(!predicate(x, i))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tvar result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x, i); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element, i), compareSelector(value, i), true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element, i), compareSelector(value, i), true)) result\r\n\t\t\t\t\t\t= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _.isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T,boolean>;\r\n\t\t\t\tlet outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tforEach(second, key=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, keys, outs);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tenumeratorFrom(second),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(<T>e1.current, <T>e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerableOrArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\treturn <Enumerable<TType>>super.ofType(type);\r\n\t}\r\n\r\n// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):Enumerable<T[]>\r\n\t{\r\n\t\treturn <Enumerable<T[]>>super.buffer(size);\r\n\t}\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, T>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this\r\n\t\t\t\t.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet key:TKey;\r\n\t\t\t\tlet compareKey:TCompare;\r\n\t\t\t\tlet group:TElement[]|null;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet v = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(v);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(v)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector!(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T|undefined\r\n\t{\r\n\t\treturn this\r\n\t\t\t.scan(func, seed)\r\n\t\t\t.lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar sum = this.sum((e, i)=>\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\treturn selector(e, i);\r\n\t\t});\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T|undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T|undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T|undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T|undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite +=\r\n\t\t\t\t\t\tvalue>0 ?\r\n\t\t\t\t\t\t\t(+1) :\r\n\t\t\t\t\t\t\t(-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T|undefined = VOID0;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn <any>value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T|undefined = VOID0;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tmemoize():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tlet i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = <T>enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = NULL;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\nextends Enumerable<T> implements IFiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Should never be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = NULL;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():this\r\n\t{\r\n\t\treturn <any> new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn forEach(_._source, action, max);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn !!len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn index<source.length\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn <any> _.take(_._source.length - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tvar len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn <any> _.skip(len - count);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():this\r\n\t{\r\n\t\treturn this.asEnumerable();\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:IDictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tlet current = <IKeyValuePair<TKey, TElement[]>>enumerator.current;\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends FiniteEnumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:Selector<T,TOrderBy>|null,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>|null,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(NULL);\r\n\t\tthrowIfEndless(!!source && !!source.isEndless);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:Selector<T,TOrderBy>,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_)\r\n\t\t\t\t\t.generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = NULL;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tconst _:this = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.source = NULL;\r\n\t\t_.keySelector = NULL;\r\n\t\t_.order = NULL;\r\n\t\t_.parent = NULL;\r\n\t}\r\n\r\n}\r\n\r\n// A private static helper for the weave function.\r\nfunction nextEnumerator<T>(queue:Queue<IEnumerator<T>>, e:IEnumerator<T>):IEnumerator<T>|null\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tqueue.enqueue(e);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdispose(e);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn e;\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T>|null = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(\"Enumerable\");\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}