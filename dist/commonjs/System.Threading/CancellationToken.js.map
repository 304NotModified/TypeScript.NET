{"version":3,"sources":["System.Threading/CancellationToken.ts"],"names":["CancellationToken","CancellationToken.none"],"mappings":";;;;;;;;;;;;;;;AAMA,IAAM,SAAS,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAC1C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;IAGzB,iBAAA;aAAA,iBAAA;8BAAA,iBAAA;;;iBAAA,iBAAA;;aAMgBA,eAAAA;AAEdC,mBAAOA,SAASA,CAACA;SACjBA;;;WATF,iBAAA;;;qBAAA,iBAAA","file":"System.Threading/CancellationToken.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nconst noneToken = new CancellationToken();\r\nObject.freeze(noneToken);\r\n\r\n\r\nexport default class CancellationToken\r\n{\r\n\tcanBeCancelled:boolean;\r\n\tisCancellationRequested:boolean;\r\n\tthrowIfCancellationRequested:boolean;\r\n\r\n\tstatic get none():CancellationToken\r\n\t{\r\n\t\treturn noneToken;\r\n\t}\r\n\r\n\t//waitHandle: WaitHandle;\r\n\r\n\t/*\r\n\t // many overloads...\r\n\t register(action: System.Action<any>, useSynchronizationContext): CancellationTokenRegistration\r\n\t {\r\n\t }*/\r\n}"]}