{"version":3,"sources":["awaiter.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAOH,iBACC,OAAW,EACX,UAAgB,EAChB,CAAwB,EACxB,SAAkB;IAElB,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC;QAAC,MAAM,yGAAyG,CAAC;IACvH,MAAM,CAAC,IAAI,CAAC,CAAC,UAAC,OAAO,EAAE,MAAM;QAE5B,IAAM,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAC3D,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAEf,mBAAmB,KAAS;YAE3B,IACA,CAAC;gBAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAAC,CACvB;YAAA,KAAK,CAAA,CAAC,CAAC,CAAC,CACR,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAAC,CAAC;QACf,CAAC;QAED,kBAAkB,KAAS;YAE1B,IACA,CAAC;gBAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAAC,CAC3B;YAAA,KAAK,CAAA,CAAC,CAAC,CAAC,CACR,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAAC,CAAC;QACf,CAAC;QAED,cAAc,MAAU;YAEvB,MAAM,CAAC,IAAI;kBACR,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;kBACrB,IAAI,CAAC,CAAC,UAAA,OAAO,IAAM,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC3E,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC;AAnCD,0BAmCC;AAED,WAAc,OAAO;IAEpB,iBAAwB,OAA8B;QAErD,MAAM,CAAC,UAAC,OAAW,EAAE,UAAgB,EAAE,CAAwB,EAAE,SAAkB;YAElF,OAAO,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,SAAS,CAAC,CAAC;QACvD,CAAC,CAAC;IACH,CAAC;IANe,eAAO,UAMtB,CAAA;AACF,CAAC,EATa,OAAO,GAAP,eAAO,KAAP,eAAO,QASpB","file":"awaiter.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nexport interface Awaiter\r\n{\r\n\t(thisArg:any, _arguments:any[], P:PromiseConstructorLike, generator:Function):void;\r\n}\r\n\r\nexport function awaiter(\r\n\tthisArg:any,\r\n\t_arguments:any[],\r\n\tP:PromiseConstructorLike,\r\n\tgenerator:Function)\r\n{\r\n\tif(!P) throw \"Must provide Promise constructor.  Try injecting Promise using awaiter.factory(PromiseConstructorLike).\";\r\n\treturn new P((resolve, reject) =>\r\n\t{\r\n\t\tconst g = generator = generator.apply(thisArg, _arguments);\r\n\t\tstep(g.next());\r\n\r\n\t\tfunction fulfilled(value:any)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{ step(g.next(value)); }\r\n\t\t\tcatch(e)\r\n\t\t\t{ reject(e); }\r\n\t\t}\r\n\r\n\t\tfunction rejected(value:any)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{ step(g[\"throw\"](value)); }\r\n\t\t\tcatch(e)\r\n\t\t\t{ reject(e); }\r\n\t\t}\r\n\r\n\t\tfunction step(result:any)\r\n\t\t{\r\n\t\t\tresult.done\r\n\t\t\t\t? resolve(result.value)\r\n\t\t\t\t: new P(resolve => { resolve(result.value); }).then(fulfilled, rejected);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport module awaiter\r\n{\r\n\texport function factory(Promise:PromiseConstructorLike):Awaiter\r\n\t{\r\n\t\treturn (thisArg:any, _arguments:any[], P:PromiseConstructorLike, generator:Function) =>\r\n\t\t{\r\n\t\t\tawaiter(thisArg, _arguments, P || Promise, generator);\r\n\t\t};\r\n\t}\r\n}\r\n"]}