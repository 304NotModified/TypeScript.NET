{"version":3,"sources":["System/Lazy.js","System/Lazy.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","DisposableBase_1","ArgumentNullException_1","Lazy","_super","_closure","call","ArgumentNullException","_disposableObjectName","defineProperty","get","_isValueCreated","enumerable","configurable","getValue","_error","_","throwIfDisposed","_value","ex","_onValueRequested","_onDispose","equals","other","valueEquals","value","DisposableBase","ResettableLazy","apply","arguments","clearClosureReference","wasDisposed","reset","throwIfCannotReset","Error"],"mappings":"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","file":"System/Lazy.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./Disposable/DisposableBase\", \"./Exceptions/ArgumentNullException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var DisposableBase_1 = require(\"./Disposable/DisposableBase\");\n    var ArgumentNullException_1 = require(\"./Exceptions/ArgumentNullException\");\n    var Lazy = (function (_super) {\n        __extends(Lazy, _super);\n        function Lazy(_closure) {\n            _super.call(this);\n            this._closure = _closure;\n            if (!_closure)\n                throw new ArgumentNullException_1.ArgumentNullException(\"_closure\");\n            this._disposableObjectName = 'Lazy';\n        }\n        Object.defineProperty(Lazy.prototype, \"isValueCreated\", {\n            get: function () {\n                return this._isValueCreated;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Lazy.prototype, \"value\", {\n            get: function () {\n                return this.getValue();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Lazy.prototype, \"error\", {\n            get: function () {\n                return this._error;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lazy.prototype.getValue = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            try {\n                if (!_._isValueCreated && _._closure) {\n                    var v = _._closure();\n                    _._value = v;\n                    _._error = void 0;\n                    return v;\n                }\n            }\n            catch (ex) {\n                _._error = ex;\n                throw ex;\n            }\n            finally {\n                _._onValueRequested();\n                _._isValueCreated = true;\n            }\n            return _._value;\n        };\n        Lazy.prototype._onValueRequested = function () {\n            this._closure = null;\n        };\n        Lazy.prototype._onDispose = function () {\n            this._closure = null;\n            this._value = null;\n        };\n        Lazy.prototype.equals = function (other) {\n            return this == other;\n        };\n        Lazy.prototype.valueEquals = function (other) {\n            return this.equals(other) || this.value === other.value;\n        };\n        return Lazy;\n    }(DisposableBase_1.DisposableBase));\n    exports.Lazy = Lazy;\n    var ResettableLazy = (function (_super) {\n        __extends(ResettableLazy, _super);\n        function ResettableLazy() {\n            _super.apply(this, arguments);\n        }\n        ResettableLazy.prototype.getValue = function (clearClosureReference) {\n            var v = _super.prototype.getValue.call(this);\n            if (clearClosureReference)\n                _super.prototype._onValueRequested.call(this);\n            return v;\n        };\n        ResettableLazy.prototype._onValueRequested = function () {\n        };\n        Object.defineProperty(ResettableLazy.prototype, \"canReset\", {\n            get: function () {\n                return !this.wasDisposed && !!(this._closure);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ResettableLazy.prototype.reset = function (throwIfCannotReset) {\n            var _ = this;\n            if (throwIfCannotReset)\n                _.throwIfDisposed();\n            if (!_._closure) {\n                if (throwIfCannotReset)\n                    throw new Error(\"Cannot reset.  This Lazy has already de-referenced its closure.\");\n                return false;\n            }\n            else {\n                _._isValueCreated = false;\n                _._value = null;\n                _._error = void 0;\n                return true;\n            }\n        };\n        return ResettableLazy;\n    }(Lazy));\n    exports.ResettableLazy = ResettableLazy;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Lazy;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {DisposableBase} from \"./Disposable/DisposableBase\";\r\nimport {ILazy} from \"./ILazy\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ArgumentNullException} from \"./Exceptions/ArgumentNullException\";\r\n\r\n// We need a non-resettable lazy to ensure it can be passed safely around.\r\nexport class Lazy<T> extends DisposableBase implements ILazy<T>\r\n{\r\n\r\n\tprotected _isValueCreated:boolean;\r\n\tprotected _value:T;\r\n\r\n\tconstructor(protected _closure:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_closure) throw new ArgumentNullException(\"_closure\");\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn this._isValueCreated;\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tprotected _error:any;\r\n\tget error():any {\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tgetValue():T {\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\ttry {\r\n\t\t\tif(!_._isValueCreated && _._closure) {\r\n\t\t\t\tvar v = _._closure();\r\n\t\t\t\t_._value = v;\r\n\t\t\t\t_._error = void 0;\r\n\t\t\t\treturn v;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex) {\r\n\t\t\t_._error = ex;\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\t_._onValueRequested();\r\n\t\t\t_._isValueCreated = true;\r\n\t\t}\r\n\r\n\t\treturn _._value;\r\n\r\n\t}\r\n\r\n\tprotected _onValueRequested() {\r\n\t\tthis._closure = null;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose():void {\r\n\t\tthis._closure = null;\r\n\t\tthis._value = null;\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n}\r\n\r\nexport class ResettableLazy<T> extends Lazy<T> {\r\n\r\n\r\n\r\n\tgetValue(clearClosureReference?:boolean):T {\r\n\r\n\t\tvar v = super.getValue();\r\n\t\tif(clearClosureReference) super._onValueRequested();\r\n\t\treturn v;\r\n\t}\r\n\r\n\tprotected _onValueRequested() {\r\n\t\t// Do nothing special...\r\n\t}\r\n\r\n\t// Adding a 'resettable' mechanism allows for simply resetting a lazy instead of re-instantiating a new one.\r\n\tget canReset():boolean\r\n\t{\r\n\t\treturn !this.wasDisposed && !!(this._closure);\r\n\t}\r\n\r\n\t// Returns true if successfully reset.\r\n\treset(throwIfCannotReset?:boolean):boolean {\r\n\t\tvar _ = this;\r\n\r\n\t\tif(throwIfCannotReset)\r\n\t\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!_._closure) {\r\n\t\t\tif(throwIfCannotReset)\r\n\t\t\t\tthrow new Error(\"Cannot reset.  This Lazy has already de-referenced its closure.\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_._isValueCreated = false;\r\n\t\t\t_._value = null;\r\n\t\t\t_._error = void 0;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Lazy;"]}