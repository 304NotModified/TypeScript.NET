{"version":3,"sources":["System/Threading/Tasks/Task.js","System/Threading/Tasks/Task.ts"],"names":["dependencies","factory","module","exports","v","require","undefined","define","amd","TaskHandlerBase_1","ArgumentNullException_1","Lazy_1","extends_1","__extends","Task","_super","valueFactory","_this","call","this","ArgumentNullException","_result","Lazy","prototype","_onExecute","getValue","getResult","value","getState","r","status","getStatus","result","isValueCreated","error","start","defer","runSynchronously","Object","defineProperty","get","enumerable","configurable","throwIfDisposed","_onDispose","dispose","TaskHandlerBase"],"mappings":"CAAA,SAAWA,EAAcC,GACrB,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAcC,KAEzB,UAAW,UAAW,oBAAqB,yCAA0C,aAAc,oBAAqB,SAAUI,EAASF,GAC3I,YCJJ,IAAAM,GAAAJ,EAAA,qBACAK,EAAAL,EAAA,0CAEAM,EAAAN,EAAA,cAGAO,EAAAP,EAAA,oBAEMQ,EAAYD,EAAAA,WAMlBE,EAAA,SAAAC,GAIC,QAAAD,GAAYE,GAAZ,GAAAC,GAECF,EAAAG,KAAAC,OAAOA,IACP,KAAIH,EAAc,KAAM,IAAIN,GAAAU,sBAAsB,eDJxC,OCKVH,GAAKI,QAAU,GAAIV,GAAAW,KAAKN,IAAc,IDLrBC,EC0EnB,MA7E6BJ,GAAAC,EAAAC,GAWlBD,EAAAS,UAAAC,WAAV,WAECL,KAAKE,QAAQI,YAGJX,EAAAS,UAAAG,UAAV,WAEC,MAAOP,MAAKE,QAAQM,OAGXb,EAAAS,UAAAK,SAAV,WAEC,GAAMC,GAAIV,KAAKE,OACf,OAAOQ,KACLC,OAAQX,KAAKY,YACbC,OAAQH,EAAEI,eAAiBJ,EAAEF,MAAQ,OACrCO,MAAOL,EAAEK,QAKZpB,EAAAS,UAAAY,MAAA,SAAMC,GAEgB,GAAlBjB,KAAKY,aAEPhB,EAAAQ,UAAMY,MAAKjB,KAAAC,KAACiB,IAIdtB,EAAAS,UAAAc,iBAAA,WAEsB,GAAlBlB,KAAKY,aAEPhB,EAAAQ,UAAMc,iBAAgBnB,KAAAC,OAIxBmB,OAAAC,eAAIzB,EAAAS,UAAA,SDlBOiB,ICkBX,WAEC,MAAOrB,MAAKS,YDjBFa,YAAY,EACZC,cAAc,ICmBzBJ,OAAAC,eAAIzB,EAAAS,UAAA,UDhBOiB,ICgBX,WAIC,MAFArB,MAAKwB,kBACLxB,KAAKkB,mBACElB,KAAKO,aDfFe,YAAY,EACZC,cAAc,ICiBzBJ,OAAAC,eAAIzB,EAAAS,UAAA,SDdOiB,ICcX,WAGC,MADArB,MAAKwB,kBACExB,KAAKE,QAAQa,ODbVO,YAAY,EACZC,cAAc,ICef5B,EAAAS,UAAAqB,WAAV,WAEC7B,EAAAQ,UAAMqB,WAAU1B,KAAAC,KAChB,IAAMU,GAAIV,KAAKE,OAEZQ,KAEIV,KAAME,QAAU,KACtBQ,EAAEgB,YAGL/B,GA7E6BL,EAAAqC,gBAA7B3C,GAAAW,KAAAA,EDgEIwB,OAAOC,eAAepC,EAAS,cAAgBwB,OAAO,ICe1DxB,EAAAA,WAAeW","file":"Task.js","sourcesContent":["(function (dependencies, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(dependencies, factory);\n    }\n})([\"require\", \"exports\", \"./TaskHandlerBase\", \"../../Exceptions/ArgumentNullException\", \"../../Lazy\", \"../../../extends\"], function (require, exports) {\n    \"use strict\";\n    var TaskHandlerBase_1 = require(\"./TaskHandlerBase\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var Lazy_1 = require(\"../../Lazy\");\n    var extends_1 = require(\"../../../extends\");\n    var __extends = extends_1.default;\n    var Task = (function (_super) {\n        __extends(Task, _super);\n        function Task(valueFactory) {\n            var _this = _super.call(this) || this;\n            if (!valueFactory)\n                throw new ArgumentNullException_1.ArgumentNullException('valueFactory');\n            _this._result = new Lazy_1.Lazy(valueFactory, false);\n            return _this;\n        }\n        Task.prototype._onExecute = function () {\n            this._result.getValue();\n        };\n        Task.prototype.getResult = function () {\n            return this._result.value;\n        };\n        Task.prototype.getState = function () {\n            var r = this._result;\n            return r && {\n                status: this.getStatus(),\n                result: r.isValueCreated ? r.value : void 0,\n                error: r.error\n            };\n        };\n        Task.prototype.start = function (defer) {\n            if (this.getStatus() == 0) {\n                _super.prototype.start.call(this, defer);\n            }\n        };\n        Task.prototype.runSynchronously = function () {\n            if (this.getStatus() == 0) {\n                _super.prototype.runSynchronously.call(this);\n            }\n        };\n        Object.defineProperty(Task.prototype, \"state\", {\n            get: function () {\n                return this.getState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                this.runSynchronously();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this._result.error;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Task.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var r = this._result;\n            if (r) {\n                this._result = null;\n                r.dispose();\n            }\n        };\n        return Task;\n    }(TaskHandlerBase_1.TaskHandlerBase));\n    exports.Task = Task;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Task;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Func} from \"../../FunctionTypes\";\r\nimport {Lazy} from \"../../Lazy\";\r\nimport {ITaskState} from \"./ITaskState\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified synchronous (but deferrable) version of Task<T>\r\n * Asynchronous operations should use Promise<T>.\r\n */\r\nexport class Task<T> extends TaskHandlerBase\r\n{\r\n\tprivate readonly _result:Lazy<T>;\r\n\r\n\tconstructor(valueFactory:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!valueFactory) throw new ArgumentNullException('valueFactory');\r\n\t\tthis._result = new Lazy(valueFactory, false);\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._result.getValue();\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result.value; // This will detect any potential recursion.\r\n\t}\r\n\r\n\tprotected getState():ITaskState<T>\r\n\t{\r\n\t\tconst r = this._result;\r\n\t\treturn r && {\r\n\t\t\t\tstatus: this.getStatus(),\r\n\t\t\t\tresult: r.isValueCreated ? r.value : void 0,\r\n\t\t\t\terror: r.error\r\n\t\t\t};\r\n\t}\r\n\r\n\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.start(defer);\r\n\t\t}\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.runSynchronously();\r\n\t\t}\r\n\t}\r\n\r\n\tget state():ITaskState<T>\r\n\t{\r\n\t\treturn this.getState();\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.runSynchronously();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._result.error;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst r = this._result;\r\n\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\t(<any>this)._result = null;\r\n\t\t\tr.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Task;"]}