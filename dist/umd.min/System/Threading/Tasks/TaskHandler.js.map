{"version":3,"sources":["System/Threading/Tasks/TaskHandler.js","System/Threading/Tasks/TaskHandler.ts"],"names":["dependencies","factory","module","exports","v","require","undefined","define","amd","TaskHandlerBase_1","ArgumentNullException_1","extends_1","__extends","TaskHandler","_super","_action","_this","call","this","ArgumentNullException","prototype","_onExecute","_onDispose","TaskHandlerBase","Object","defineProperty","value"],"mappings":"CAAA,SAAWA,EAAcC,GACrB,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAcC,KAEzB,UAAW,UAAW,oBAAqB,yCAA0C,oBAAqB,SAAUI,EAASF,GAC7H;;;;ACJJ,GAAAM,GAAAJ,EAAA,qBACAK,EAAAL,EAAA,0CAEAM,EAAAN,EAAA,oBAEMO,EAAYD,EAAAA,WAElBE,EAAA,SAAAC,GAGC,QAAAD,GAA6BE,GAA7B,GAAAC,GAECF,EAAAG,KAAAC,OAAOA,IACP,IAH4BF,EAAAD,QAAAA,GAGxBA,EAAS,KAAM,IAAIL,GAAAS,sBAAsB,SDQnC,OAAOH,GCKnB,MAnBiCJ,GAAAC,EAAAC,GAStBD,EAAAO,UAAAC,WAAV,WAECH,KAAKH,WAGIF,EAAAO,UAAAE,WAAV,WAECR,EAAAM,UAAME,WAAUL,KAAAC,MACVA,KAAMH,QAAU,MAExBF,GAnBiCJ,EAAAc,gBAApBpB,GAAAU,YAAAA,ED0BTW,OAAOC,eAAetB,EAAS,cAAgBuB,OAAO,ICL1DvB,EAAAA,WAAeU","file":"TaskHandler.js","sourcesContent":["(function (dependencies, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(dependencies, factory);\n    }\n})([\"require\", \"exports\", \"./TaskHandlerBase\", \"../../Exceptions/ArgumentNullException\", \"../../../extends\"], function (require, exports) {\n    \"use strict\";\n    /*!\n     * @author electricessence / https://github.com/electricessence/\n     * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n     */\n    var TaskHandlerBase_1 = require(\"./TaskHandlerBase\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var extends_1 = require(\"../../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var TaskHandler = (function (_super) {\n        __extends(TaskHandler, _super);\n        function TaskHandler(_action) {\n            var _this = _super.call(this) || this;\n            _this._action = _action;\n            if (!_action)\n                throw new ArgumentNullException_1.ArgumentNullException('action');\n            return _this;\n        }\n        TaskHandler.prototype._onExecute = function () {\n            this._action();\n        };\n        TaskHandler.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._action = null;\n        };\n        return TaskHandler;\n    }(TaskHandlerBase_1.TaskHandlerBase));\n    exports.TaskHandler = TaskHandler;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TaskHandler;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Closure} from \"../../FunctionTypes\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport class TaskHandler extends TaskHandlerBase\r\n{\r\n\r\n\tconstructor(private readonly _action:Closure)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_action) throw new ArgumentNullException('action');\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._action();\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\t(<any>this)._action = null;\r\n\t}\r\n}\r\n\r\nexport default TaskHandler;"]}