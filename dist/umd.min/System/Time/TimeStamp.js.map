{"version":3,"sources":["System/Time/TimeStamp.js","System/Time/TimeStamp.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Types_1","TimeStamp","TimeStamp.constructor","TimeStamp.toJsDate","TimeStamp.from","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,YAAaN,IAEhD,SAAUI,EAASF,GCFtB,YAEA,IAAAM,GAAAJ,EAAiB,YAKjBK,EAAA,WAICA,QAAAA,GACQA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GALPC,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,GAPOA,KAAAA,KAAAA,EACAA,KAAAA,MAAAA,EACAA,KAAAA,IAAAA,EACAA,KAAAA,KAAAA,EACAA,KAAAA,OAAAA,EACAA,KAAAA,OAAAA,EACAA,KAAAA,YAAAA,EACAA,KAAAA,KAAAA,EAKPA,OAAOA,OAAOA,MA8BhBD,MA3BCA,GAAAA,UAAAA,SAAAA,WAECE,GAAIA,GAAIA,IACRA,OAAOA,IAAIA,MAAKA,EAAEA,KAAMA,EAAEA,MAAOA,EAAEA,IAAKA,EAAEA,KAAMA,EAAEA,OAAQA,EAAEA,OAAQA,EAAEA,YAAcA,EAAEA,KAAKA,MAGrFF,EAAAA,KAAPA,SAAYA,GAIXG,GAFMA,YAAaA,QAASA,EAAAA,WAAKA,UAAUA,EAAEA,cAC5CA,EAAgBA,EAAGA,YACjBA,YAAaA,MAEfA,MAAOA,IAAIA,GACVA,EAAEA,cACFA,EAAEA,WACFA,EAAEA,UACFA,EAAEA,WACFA,EAAEA,aACFA,EAAEA,aACFA,EAAEA,kBAKHA,MAAMA,OAAMA,uBAGfH,IA/CAI,QAAAC,eAAAZ,EAAA,cAAAa,OAAA,IDiCIb,EAAAA,WAAkBO","file":"System/Time/TimeStamp.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Types'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Types_1 = require('../Types');\n    var TimeStamp = (function () {\n        function TimeStamp(year, month, day, hour, minute, second, millisecond, tick) {\n            if (day === void 0) { day = 1; }\n            if (hour === void 0) { hour = 0; }\n            if (minute === void 0) { minute = 0; }\n            if (second === void 0) { second = 0; }\n            if (millisecond === void 0) { millisecond = 0; }\n            if (tick === void 0) { tick = 0; }\n            this.year = year;\n            this.month = month;\n            this.day = day;\n            this.hour = hour;\n            this.minute = minute;\n            this.second = second;\n            this.millisecond = millisecond;\n            this.tick = tick;\n            Object.freeze(this);\n        }\n        TimeStamp.prototype.toJsDate = function () {\n            var _ = this;\n            return new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick / 10000);\n        };\n        TimeStamp.from = function (d) {\n            if (!(d instanceof Date) && Types_1.default.hasMember(d, 'toJsDate'))\n                d = d.toJsDate();\n            if (d instanceof Date) {\n                return new TimeStamp(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n            }\n            else {\n                throw Error('Invalid date type.');\n            }\n        };\n        return TimeStamp;\n    })();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeStamp;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\n\r\n/**\r\n * An alternative to Date or DateTime.  Is a model representing the exact date and time.\r\n */\r\nexport default\r\nclass TimeStamp implements ITimeStamp, IDateTime\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic year:number,\r\n\t\tpublic month:Gregorian.Month,\r\n\t\tpublic day:number = 1,\r\n\t\tpublic hour:number = 0,\r\n\t\tpublic minute:number = 0,\r\n\t\tpublic second:number = 0,\r\n\t\tpublic millisecond:number = 0,\r\n\t\tpublic tick:number = 0)\r\n\t{\r\n\r\n\t\t// TODO: Add validation or properly carry out of range values...\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick/HowMany.Ticks.Per.Millisecond);\r\n\t}\r\n\r\n\tstatic from(d:Date|IDateTime):TimeStamp\r\n\t{\r\n\t\tif (!(d instanceof Date) && Type.hasMember(d,'toJsDate'))\r\n\t\t\td = (<IDateTime>d).toJsDate();\r\n\t\tif(d instanceof Date)\r\n\t\t{\r\n\t\t\treturn new TimeStamp(\r\n\t\t\t\td.getFullYear(),\r\n\t\t\t\td.getMonth(),\r\n\t\t\t\td.getDate(),\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds()\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow Error('Invalid date type.');\r\n\t\t}\r\n\t}\r\n}\r\n"]}