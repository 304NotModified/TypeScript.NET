{"version":3,"sources":["System/Time/DateTime.js","System/Time/DateTime.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","ClockTime_1","TimeSpan_1","TimeStamp_1","DateTime","DateTime.constructor","DateTime.toJsDate","DateTime._setJsDate","get","DateTime.kind","enumerable","configurable","DateTime.year","DateTime.month","DateTime.day","DateTime.dayOfWeek","DateTime.addMilliseconds","DateTime.addSeconds","DateTime.addMinutes","DateTime.addHours","DateTime.addDays","DateTime.addMonths","DateTime.addYears","DateTime.add","DateTime.subtract","DateTime.timePassedSince","DateTime.date","DateTime.timeOfDay","DateTime.toTimeStamp","DateTime.now","DateTime.toUniversalTime","DateTime.today","DateTime.tomorrow","DateTime.between","DateTime.isLeapYear","DateTime.daysInMonth","Object","freeze","defineProperty","value"],"mappings":"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","file":"System/Time/DateTime.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based on .NET DateTime's interface.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './ClockTime', './TimeSpan', './TimeStamp'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var ClockTime_1 = require('./ClockTime');\n    var TimeSpan_1 = require('./TimeSpan');\n    var TimeStamp_1 = require('./TimeStamp');\n    var DateTime = (function () {\n        function DateTime(value, kind) {\n            if (value === void 0) { value = new Date(); }\n            if (kind === void 0) { kind = 1; }\n            var _ = this;\n            _._kind = kind;\n            if (value instanceof DateTime)\n                _._value = value.toJsDate();\n            else if (value instanceof Date)\n                _._setJsDate(value);\n            else\n                _._value = value === void (0)\n                    ? new Date()\n                    : new Date(value);\n        }\n        DateTime.prototype.toJsDate = function () {\n            return new Date(this._value.getTime());\n        };\n        DateTime.prototype._setJsDate = function (value) {\n            this._time = null;\n            this._value = new Date(value.getTime());\n        };\n        Object.defineProperty(DateTime.prototype, \"kind\", {\n            get: function () {\n                return this._kind;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"year\", {\n            get: function () {\n                return this._value.getFullYear();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"month\", {\n            get: function () {\n                return this._value.getMonth();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"day\", {\n            get: function () {\n                return this._value.getDate();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"dayOfWeek\", {\n            get: function () {\n                return this._value.getDay();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.prototype.addMilliseconds = function (ms) {\n            ms = ms || 0;\n            return new DateTime(this._value.getTime() + ms, this._kind);\n        };\n        DateTime.prototype.addSeconds = function (seconds) {\n            seconds = seconds || 0;\n            return this.addMilliseconds(seconds * 1000);\n        };\n        DateTime.prototype.addMinutes = function (minutes) {\n            minutes = minutes || 0;\n            return this.addMilliseconds(minutes * 60000);\n        };\n        DateTime.prototype.addHours = function (hours) {\n            hours = hours || 0;\n            return this.addMilliseconds(hours * 3600000);\n        };\n        DateTime.prototype.addDays = function (days) {\n            days = days || 0;\n            return this.addMilliseconds(days * 86400000);\n        };\n        DateTime.prototype.addMonths = function (months) {\n            months = months || 0;\n            var d = this.toJsDate();\n            d.setMonth(d.getMonth() + months);\n            return new DateTime(d, this._kind);\n        };\n        DateTime.prototype.addYears = function (years) {\n            years = years || 0;\n            var d = this.toJsDate();\n            d.setFullYear(d.getFullYear() + years);\n            return new DateTime(d, this._kind);\n        };\n        DateTime.prototype.add = function (time) {\n            return this.addMilliseconds(time.getTotalMilliseconds());\n        };\n        DateTime.prototype.subtract = function (time) {\n            return this.addMilliseconds(-time.getTotalMilliseconds());\n        };\n        DateTime.prototype.timePassedSince = function (previous) {\n            return DateTime.between(previous, this);\n        };\n        Object.defineProperty(DateTime.prototype, \"date\", {\n            get: function () {\n                var _ = this;\n                return new DateTime(new Date(_.year, _.month, _.day), _._kind);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"timeOfDay\", {\n            get: function () {\n                var _ = this, t = _._time;\n                if (!t) {\n                    var d = this._value;\n                    _._time = t = new ClockTime_1.default(d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                }\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.prototype.toTimeStamp = function () {\n            return TimeStamp_1.default.from(this);\n        };\n        Object.defineProperty(DateTime, \"now\", {\n            get: function () {\n                return new DateTime();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"toUniversalTime\", {\n            get: function () {\n                var _ = this;\n                if (_._kind != 1)\n                    return new DateTime(_, _._kind);\n                var d = _._value;\n                return new DateTime(new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()), 2);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime, \"today\", {\n            get: function () {\n                return DateTime.now.date;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime, \"tomorrow\", {\n            get: function () {\n                var today = DateTime.today;\n                return today.addDays(1);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.between = function (first, last) {\n            var f = first instanceof DateTime ? first._value : first, l = last instanceof DateTime ? last._value : last;\n            return new TimeSpan_1.default(f.getTime() - l.getTime());\n        };\n        DateTime.isLeapYear = function (year) {\n            return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n        };\n        DateTime.daysInMonth = function (year, month) {\n            return (new Date(year, month + 1, 0)).getDate();\n        };\n        return DateTime;\n    })();\n    Object.freeze(DateTime);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = DateTime;\n});\n","///<reference path='ITimeQuantity.d.ts'/>\r\n///<reference path=\"ITimeStamp.d.ts\"/>\r\n///<reference path=\"IDateTime.d.ts\"/>\r\n///<reference path=\"Calendars.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport ClockTime from './ClockTime';\r\nimport TimeSpan from './TimeSpan';\r\nimport TimeStamp from './TimeStamp';\r\n\r\n\r\nclass DateTime implements ICalendarDate, IDateTime\r\n{\r\n\tprivate _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate _setJsDate(value:Date)\r\n\t{\r\n\t\tthis._time = null;\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t\t_._value = value.toJsDate();\r\n\t\telse if(value instanceof Date)\r\n\t\t\t_._setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value===void(0)\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*HowMany.Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*HowMany.Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*HowMany.Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*HowMany.Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth()+months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear()+years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp {\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tget toUniversalTime():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tvar d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tvar f:Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t    l:Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(f.getTime() - l.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean {\r\n\t\treturn ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number {\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year,month+1,0)).getDate();\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nmodule DateTime\r\n{\r\n\texport const enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}