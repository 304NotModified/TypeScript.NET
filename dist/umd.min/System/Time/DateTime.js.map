{"version":3,"sources":["System/Time/DateTime.js","System/Time/DateTime.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","DateTime","DateTime.constructor","get","DateTime.jsDate","enumerable","configurable","DateTime.setJsDate","DateTime.addMilliseconds","DateTime.addDays","DateTime.add","DateTime.now","DateTime.today","DateTime.tomorrow","DateTime.daysAgo","Object","defineProperty","value","freeze"],"mappings":";;;;CAIA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,aAAc,SAAUI,EAASF,GCL3D,GAEAM,IAFmBJ,EAAM,aAEzB,WAqBCI,QAAAA,GAAYA,GAAAC,SAAAA,IAAAA,EAAAA,GAAgBA,MAE3BA,IAAIA,GAAIA,IACLA,aAAiBA,GACnBA,EAAEA,OAASA,EAAMA,OACVA,YAAiBA,MACxBA,EAAEA,UAAUA,GAEZA,EAAEA,OAAgBA,QAAPA,EACRA,GAAIA,MACJA,GAAIA,MAAKA,GAiDfD,MA1ECA,QAAAA,eAAIA,EAAAA,UAAAA,UDcOE,ICdXF,WAECG,MAAOA,IAAIA,MAAKA,KAAKA,OAAOA,YDelBC,YAAY,EACZC,cAAc,ICbjBL,EAAAA,UAAAA,UAARA,SAAkBA,GAEjBM,KAAKA,OAASA,GAAIA,MAAKA,EAAMA,YAsB9BN,EAAAA,UAAAA,gBAAAA,SAAgBA,GAGfO,MADAA,GAAKA,GAAMA,EACJA,GAAIA,GAASA,KAAKA,OAAOA,UAAYA,IAG7CP,EAAAA,UAAAA,QAAAA,SAAQA,GAGPQ,MADAA,GAAOA,GAAQA,EACRA,KAAKA,gBAAqBA,MAALA,IAG7BR,EAAAA,UAAAA,IAAAA,SAAIA,GACHS,MAAOA,MAAKA,gBAAgBA,EAAKA,MAAMA,eAGjCT,EAAAA,IAAPA,WAECU,MAAOA,IAAIA,IAGLV,EAAAA,MAAPA,WAECW,GAAIA,GAAWA,GAAIA,KACnBA,OAAOA,IAAIA,GACVA,GAAIA,MACHA,EAAIA,cACJA,EAAIA,WACJA,EAAIA,aAKAX,EAAAA,SAAPA,WAECY,GAAIA,GAAiBA,EAASA,OAC9BA,OAAOA,GAAMA,QAAQA,IAGfZ,EAAAA,QAAPA,SAAeA,GAEda,GAAIA,GAAiBA,EAASA,OAC9BA,OAAOA,GAAMA,SAASA,IAGxBb,KAhFAc,QAAAC,eAAArB,EAAA,cAAAsB,OAAA,ID0DItB,EAAAA,WAAkBM,ECwBtBc,OAAOG,OAAOjB","file":"System/Time/DateTime.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", './HowMany'], function (require, exports) {\r\n    ///<reference path='ITimeTotal.d.ts'/>\r\n    var HowMany = require('./HowMany');\r\n    var DateTime = (function () {\r\n        function DateTime(value) {\r\n            if (value === void 0) { value = new Date(); }\r\n            var _ = this;\r\n            if (value instanceof DateTime)\r\n                _._value = value.jsDate;\r\n            else if (value instanceof Date)\r\n                _.setJsDate(value);\r\n            else\r\n                _._value = value == undefined\r\n                    ? new Date()\r\n                    : new Date(value);\r\n        }\r\n        Object.defineProperty(DateTime.prototype, \"jsDate\", {\r\n            get: function () {\r\n                return new Date(this._value.getTime());\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DateTime.prototype.setJsDate = function (value) {\r\n            this._value = new Date(value.getTime());\r\n        };\r\n        DateTime.prototype.addMilliseconds = function (ms) {\r\n            ms = ms || 0;\r\n            return new DateTime(this._value.getTime() + ms);\r\n        };\r\n        DateTime.prototype.addDays = function (days) {\r\n            days = days || 0;\r\n            return this.addMilliseconds(days * 86400000);\r\n        };\r\n        DateTime.prototype.add = function (time) {\r\n            return this.addMilliseconds(time.total.milliseconds);\r\n        };\r\n        DateTime.now = function () {\r\n            return new DateTime();\r\n        };\r\n        DateTime.today = function () {\r\n            var now = new Date();\r\n            return new DateTime(new Date(now.getFullYear(), now.getMonth(), now.getDate()));\r\n        };\r\n        DateTime.tomorrow = function () {\r\n            var today = DateTime.today();\r\n            return today.addDays(1);\r\n        };\r\n        DateTime.daysAgo = function (days) {\r\n            var today = DateTime.today();\r\n            return today.addDays(-days);\r\n        };\r\n        return DateTime;\r\n    })();\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = DateTime;\r\n    Object.freeze(DateTime);\r\n});\r\n//# sourceMappingURL=DateTime.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path='ITimeTotal.d.ts'/>\r\nimport * as HowMany from './HowMany';\r\n\r\nexport default\r\nclass DateTime\r\n{\r\n\r\n\tprivate _value:Date;\r\n\r\n\tget jsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate setJsDate(value:Date)\r\n\t{\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string);\r\n\tconstructor(milliseconds:number);\r\n\tconstructor(source:Date);\r\n\tconstructor(source:DateTime);\r\n\tconstructor(value:any = new Date())\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(value instanceof DateTime)\r\n\t\t\t_._value = value.jsDate;\r\n\t\telse if(value instanceof Date)\r\n\t\t\t_.setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value==undefined\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*HowMany.Milliseconds.Per.Day);\r\n\t}\r\n\r\n\tadd(time:ITimeTotal):DateTime {\r\n\t\treturn this.addMilliseconds(time.total.milliseconds);\r\n\t}\r\n\r\n\tstatic now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\tstatic today():DateTime\r\n\t{\r\n\t\tvar now:Date = new Date();\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\tnow.getFullYear(),\r\n\t\t\t\tnow.getMonth(),\r\n\t\t\t\tnow.getDate()\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic tomorrow():DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today();\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\tstatic daysAgo(days:number):DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today();\r\n\t\treturn today.addDays(-days);\r\n\t}\r\n\r\n}\r\n\r\nObject.freeze(DateTime);\r\n"]}