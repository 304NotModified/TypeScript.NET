{"version":3,"sources":["System/Time/TimeSpan.js","System/Time/TimeSpan.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","Types_1","TimeUnit_1","ClockTime_1","TimeQuantity_1","TimeSpan","_super","value","units","Milliseconds","ms","toMilliseconds","call","_","ticks","milliseconds","seconds","minutes","hours","days","defineProperty","get","enumerable","configurable","t","_time","getTotalMilliseconds","add","other","isNumber","Error","total","addUnit","from","fromDays","Days","fromHours","Hours","fromMinutes","Minutes","fromSeconds","Seconds","fromMilliseconds","fromTicks","Ticks","timeSpanZero"],"mappings":"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","file":"System/Time/TimeSpan.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../Types', './TimeUnit', './ClockTime', './TimeQuantity'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Types_1 = require('../Types');\r\n    var TimeUnit_1 = require('./TimeUnit');\r\n    var ClockTime_1 = require('./ClockTime');\r\n    var TimeQuantity_1 = require('./TimeQuantity');\r\n    var TimeSpan = (function (_super) {\r\n        __extends(TimeSpan, _super);\r\n        function TimeSpan(value, units) {\r\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\r\n            var ms = TimeUnit_1.default.toMilliseconds(value, units);\r\n            _super.call(this, ms);\r\n            var _ = this;\r\n            _.ticks = ms * 10000;\r\n            _.milliseconds = ms;\r\n            _.seconds = ms / 1000;\r\n            _.minutes = ms / 60000;\r\n            _.hours = ms / 3600000;\r\n            _.days = ms / 86400000;\r\n        }\r\n        Object.defineProperty(TimeSpan.prototype, \"total\", {\r\n            get: function () {\r\n                return this;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TimeSpan.prototype, \"time\", {\r\n            get: function () {\r\n                var _ = this, t = _._time;\r\n                if (!t)\r\n                    _._time = t = new ClockTime_1.default(_.getTotalMilliseconds());\r\n                return t;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        TimeSpan.prototype.add = function (other) {\r\n            if (Types_1.default.isNumber(other))\r\n                throw new Error(\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n                    \".add only supports quantifiable time values (ITimeTotal).\");\r\n            return new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n        };\r\n        TimeSpan.prototype.addUnit = function (value, units) {\r\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\r\n            return new TimeSpan(this.getTotalMilliseconds() + TimeUnit_1.default.toMilliseconds(value, units));\r\n        };\r\n        TimeSpan.from = function (value, units) {\r\n            return new TimeSpan(value, units);\r\n        };\r\n        TimeSpan.fromDays = function (value) {\r\n            return new TimeSpan(value, TimeUnit_1.default.Days);\r\n        };\r\n        TimeSpan.fromHours = function (value) {\r\n            return new TimeSpan(value, TimeUnit_1.default.Hours);\r\n        };\r\n        TimeSpan.fromMinutes = function (value) {\r\n            return new TimeSpan(value, TimeUnit_1.default.Minutes);\r\n        };\r\n        TimeSpan.fromSeconds = function (value) {\r\n            return new TimeSpan(value, TimeUnit_1.default.Seconds);\r\n        };\r\n        TimeSpan.fromMilliseconds = function (value) {\r\n            return new TimeSpan(value, TimeUnit_1.default.Milliseconds);\r\n        };\r\n        TimeSpan.fromTicks = function (value) {\r\n            return new TimeSpan(value, TimeUnit_1.default.Ticks);\r\n        };\r\n        Object.defineProperty(TimeSpan, \"zero\", {\r\n            get: function () {\r\n                return timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        return TimeSpan;\r\n    }(TimeQuantity_1.default));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = TimeSpan;\r\n    var timeSpanZero;\r\n});\r\n//# sourceMappingURL=TimeSpan.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport Type from '../Types';\r\nimport TimeUnit from './TimeUnit';\r\nimport ClockTime from './ClockTime';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\r\n */\r\nexport default\r\nclass TimeSpan extends TimeQuantity implements ITimeMeasurement\r\n{\r\n\r\n\tticks: number;\r\n\tmilliseconds: number;\r\n\tseconds: number;\r\n\tminutes: number;\r\n\thours: number;\r\n\tdays: number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tvar ms = TimeUnit.toMilliseconds(value, units);\r\n\t\tsuper(ms);\r\n\r\n\t\tvar _ = this;\r\n\t\t_.ticks = ms*HowMany.Ticks.Per.Millisecond;\r\n\t\t_.milliseconds = ms;\r\n\t\t_.seconds = ms/HowMany.Milliseconds.Per.Second;\r\n\t\t_.minutes = ms/HowMany.Milliseconds.Per.Minute;\r\n\t\t_.hours = ms/HowMany.Milliseconds.Per.Hour;\r\n\t\t_.days = ms/HowMany.Milliseconds.Per.Day;\r\n\t}\r\n\r\n\t/**\r\n\t * Provides an standard interface for acquiring the total time.\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\tget total():TimeSpan\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t) _._time = t = new ClockTime(_.getTotalMilliseconds());\r\n\t\treturn t;\r\n\t}\r\n\r\n\tadd(other:ITimeQuantity):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n\t\t\t\t\".add only supports quantifiable time values (ITimeTotal).\"\r\n\t\t\t);\r\n\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + TimeUnit.toMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nvar timeSpanZero:TimeSpan;\r\n"]}