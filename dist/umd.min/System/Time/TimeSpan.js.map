{"version":3,"sources":["System/Time/TimeSpan.js","System/Time/TimeSpan.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","Types_1","TimeUnit_1","ClockTime_1","TimeQuantity_1","TimeSpan","_super","TimeSpan.constructor","get","TimeSpan.total","enumerable","configurable","TimeSpan.time","TimeSpan.add","TimeSpan.addUnit","TimeSpan.from","TimeSpan.fromDays","TimeSpan.fromHours","TimeSpan.fromMinutes","TimeSpan.fromSeconds","TimeSpan.fromMilliseconds","TimeSpan.fromTicks","TimeSpan.zero","defineProperty","value","timeSpanZero"],"mappings":"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","file":"System/Time/TimeSpan.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Types', './TimeUnit', './ClockTime', './TimeQuantity'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Types_1 = require('../Types');\n    var TimeUnit_1 = require('./TimeUnit');\n    var ClockTime_1 = require('./ClockTime');\n    var TimeQuantity_1 = require('./TimeQuantity');\n    var TimeSpan = (function (_super) {\n        __extends(TimeSpan, _super);\n        function TimeSpan(value, units) {\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\n            var ms = TimeUnit_1.default.toMilliseconds(value, units);\n            _super.call(this, ms);\n            var _ = this;\n            _.ticks = ms * 10000;\n            _.milliseconds = ms;\n            _.seconds = ms / 1000;\n            _.minutes = ms / 60000;\n            _.hours = ms / 3600000;\n            _.days = ms / 86400000;\n        }\n        Object.defineProperty(TimeSpan.prototype, \"total\", {\n            get: function () {\n                return this;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TimeSpan.prototype, \"time\", {\n            get: function () {\n                var _ = this, t = _._time;\n                if (!t)\n                    _._time = t = new ClockTime_1.default(_.getTotalMilliseconds());\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeSpan.prototype.add = function (other) {\n            if (Types_1.default.isNumber(other))\n                throw new Error(\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\n                    \".add only supports quantifiable time values (ITimeTotal).\");\n            return new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\n        };\n        TimeSpan.prototype.addUnit = function (value, units) {\n            if (units === void 0) { units = TimeUnit_1.default.Milliseconds; }\n            return new TimeSpan(this.getTotalMilliseconds() + TimeUnit_1.default.toMilliseconds(value, units));\n        };\n        TimeSpan.from = function (value, units) {\n            return new TimeSpan(value, units);\n        };\n        TimeSpan.fromDays = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Days);\n        };\n        TimeSpan.fromHours = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Hours);\n        };\n        TimeSpan.fromMinutes = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Minutes);\n        };\n        TimeSpan.fromSeconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Seconds);\n        };\n        TimeSpan.fromMilliseconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Milliseconds);\n        };\n        TimeSpan.fromTicks = function (value) {\n            return new TimeSpan(value, TimeUnit_1.default.Ticks);\n        };\n        Object.defineProperty(TimeSpan, \"zero\", {\n            get: function () {\n                return timeSpanZero || (timeSpanZero = new TimeSpan(0));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TimeSpan;\n    })(TimeQuantity_1.default);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeSpan;\n    var timeSpanZero;\n});\n","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"HowMany.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual,compare} from '../Compare';\r\nimport Type from '../Types';\r\nimport TimeUnit from './TimeUnit';\r\nimport ClockTime from './ClockTime';\r\nimport TimeQuantity from './TimeQuantity';\r\n\r\n/**\r\n * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\r\n */\r\nexport default\r\nclass TimeSpan extends TimeQuantity implements ITimeMeasurement\r\n{\r\n\r\n\tticks: number;\r\n\tmilliseconds: number;\r\n\tseconds: number;\r\n\tminutes: number;\r\n\thours: number;\r\n\tdays: number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tvar ms = TimeUnit.toMilliseconds(value, units);\r\n\t\tsuper(ms);\r\n\r\n\t\tvar _ = this;\r\n\t\t_.ticks = ms*HowMany.Ticks.Per.Millisecond;\r\n\t\t_.milliseconds = ms;\r\n\t\t_.seconds = ms/HowMany.Milliseconds.Per.Second;\r\n\t\t_.minutes = ms/HowMany.Milliseconds.Per.Minute;\r\n\t\t_.hours = ms/HowMany.Milliseconds.Per.Hour;\r\n\t\t_.days = ms/HowMany.Milliseconds.Per.Day;\r\n\t}\r\n\r\n\t/**\r\n\t * Provides an standard interface for acquiring the total time.\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\tget total():TimeSpan\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t) _._time = t = new ClockTime(_.getTotalMilliseconds());\r\n\t\treturn t;\r\n\t}\r\n\r\n\tadd(other:ITimeQuantity):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n\t\t\t\t\".add only supports quantifiable time values (ITimeTotal).\"\r\n\t\t\t);\r\n\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + TimeUnit.toMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nvar timeSpanZero:TimeSpan;\r\n"]}