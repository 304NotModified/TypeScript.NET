{"version":3,"sources":["System/Time/TimeUnitValue.js","System/Time/TimeUnitValue.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","assertComparisonType","other","assertValidUnit","unit","Compare_1","TimeUnit_1","TimeSpan_1","TimeUnitValue","TimeUnitValue.constructor","TimeUnitValue.coerce","TimeUnitValue.equals","TimeUnitValue.compareTo","get","TimeUnitValue.type","enumerable","configurable","TimeUnitValue.toTimeSpan","TimeUnitValue.total","TimeUnitValue.to","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,aAAc,aAAc,cAAe,SAAUI,EAASF,GCiFxF,QAAAM,GAA8BC,GAE7BD,KAAKA,YAAiBA,IAAiBA,YAAiBA,GAAAA,YACvDA,KAAMA,IAAIA,OAAMA,wEAIlB,QAAAE,GAAyBC,GAExBD,GAAGA,MAAMA,IAASA,EAAKA,EAAAA,WAASA,MAAQA,EAAKA,EAAAA,WAASA,OAASA,KAAKA,MAAMA,KAAQA,EACjFA,KAAMA,IAAIA,OAAMA,oBAEjBA,QAAOA,EA/FR,GAAAE,GAAAR,EAAgC,cAChCS,EAAAT,EAAqB,cACrBU,EAAAV,EAAqB,cAGrBW,EAAA,WAICA,QAAAA,GAAmBA,EAAsBA,GAAtBC,KAAAA,MAAAA,EAAsBA,KAAAA,MAAAA,EAExCA,EAAgBA,GAsElBD,MA9DCA,GAAAA,UAAAA,OAAAA,SAAOA,GAENE,GAAIA,GAAOA,KAAKA,KAGhBA,IAFAA,EAAgBA,GAEbA,YAAiBA,GAAAA,WACnBA,EAAQA,EAAMA,gBAAgBA,OAE1BA,CAAAA,KAAGA,YAAiBA,IAKxBA,MAAOA,KAJJA,KAAOA,EAAMA,OACfA,EAAQA,EAAMA,GAAGA,IAKnBA,MAAOA,IAKRF,EAAAA,UAAAA,OAAAA,SAAOA,GAENG,GAAIA,GAAkBA,KAAKA,OAAOA,EAClCA,OAAMA,OAAHA,GACKA,EAEDA,EAAAA,SAASA,KAAKA,MAAOA,EAAEA,QAM/BH,EAAAA,UAAAA,UAAAA,SAAUA,GAETI,MAAUA,OAAPA,EAAoBA,GAEvBA,EAAqBA,GAEdA,EAAAA,QAAQA,KAAKA,MAAOA,KAAKA,OAAOA,GAAOA,SAK/CJ,OAAAA,eAAIA,EAAAA,UAAAA,QDnBOK,ICmBXL,WAECM,MAAOA,MAAKA,ODlBFC,YAAY,EACZC,cAAc,ICoBzBR,EAAAA,UAAAA,WAAAA,WAECS,MAAOA,IAAIA,GAAAA,WAASA,KAAKA,MAAOA,KAAKA,OAGtCT,OAAAA,eAAIA,EAAAA,UAAAA,SDnBOK,ICmBXL,WACCU,MAAOA,MAAKA,cDjBFH,YAAY,EACZC,cAAc,ICmBzBR,EAAAA,UAAAA,GAAAA,SAAGA,GAEFW,MAFEA,UAAAA,IAAAA,EAAiBA,KAAKA,MAEjBA,KAAKA,aAAaA,gBAAgBA,IAG3CX,IA5EAY,QAAAC,eAAA1B,EAAA,cAAA2B,OAAA,ID6DI3B,EAAAA,WAAkBa","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../Compare', './TimeUnit', './TimeSpan'], function (require, exports) {\r\n    ///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n    ///<reference path=\"../IEquatable.d.ts\"/>\r\n    ///<reference path=\"../IComparable.d.ts\"/>\r\n    ///<reference path=\"../IFormattable.d.ts\"/>\r\n    var Compare_1 = require('../Compare');\r\n    var TimeUnit_1 = require('./TimeUnit');\r\n    var TimeSpan_1 = require('./TimeSpan');\r\n    var TimeUnitValue = (function () {\r\n        function TimeUnitValue(value, _type) {\r\n            this.value = value;\r\n            this._type = _type;\r\n            assertValidUnit(_type);\r\n        }\r\n        TimeUnitValue.prototype.coerce = function (other) {\r\n            var type = this._type;\r\n            assertValidUnit(type);\r\n            if (other instanceof TimeSpan_1.default) {\r\n                other = other.toTimeUnitValue(type);\r\n            }\r\n            else if (other instanceof TimeUnitValue) {\r\n                if (type !== other.type)\r\n                    other = other.to(type);\r\n            }\r\n            else\r\n                return null;\r\n            return other;\r\n        };\r\n        TimeUnitValue.prototype.equals = function (other) {\r\n            var o = this.coerce(other);\r\n            if (o == null)\r\n                return false;\r\n            return Compare_1.areEqual(this.value, o.value);\r\n        };\r\n        TimeUnitValue.prototype.compareTo = function (other) {\r\n            if (other == null)\r\n                return 1 | 0;\r\n            assertComparisonType(other);\r\n            return Compare_1.compare(this.value, this.coerce(other).value);\r\n        };\r\n        Object.defineProperty(TimeUnitValue.prototype, \"type\", {\r\n            get: function () {\r\n                return this._type;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        TimeUnitValue.prototype.toTimeSpan = function () {\r\n            return new TimeSpan_1.default(this.value, this.type);\r\n        };\r\n        Object.defineProperty(TimeUnitValue.prototype, \"total\", {\r\n            get: function () {\r\n                return this.toTimeSpan();\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        TimeUnitValue.prototype.to = function (units) {\r\n            if (units === void 0) { units = this.type; }\r\n            return this.toTimeSpan().toTimeUnitValue(units);\r\n        };\r\n        return TimeUnitValue;\r\n    })();\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = TimeUnitValue;\r\n    function assertComparisonType(other) {\r\n        if (!(other instanceof TimeUnitValue || other instanceof TimeSpan_1.default))\r\n            throw new Error(\"Invalid comparison type.  Must be of type TimeUnitValue or TimeSpan.\");\r\n    }\r\n    function assertValidUnit(unit) {\r\n        if (isNaN(unit) || unit > TimeUnit_1.default.Days || unit < TimeUnit_1.default.Ticks || Math.floor(unit) !== unit)\r\n            throw new Error(\"Invalid TimeUnit.\");\r\n        return true;\r\n    }\r\n});\r\n//# sourceMappingURL=TimeUnitValue.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ITimeMeasurement.d.ts\"/>\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n///<reference path=\"../IComparable.d.ts\"/>\r\n///<reference path=\"../IFormattable.d.ts\"/>\r\nimport {areEqual, compare} from '../Compare';\r\nimport TimeUnit from './TimeUnit';\r\nimport TimeSpan from './TimeSpan';\r\n\r\n// This class allows for passing around a specific measure of time coerced by its unit type.\r\nexport default\r\nclass TimeUnitValue implements IEquatable<TimeUnitValue>, IComparable<TimeUnitValue>, ITimeTotal\r\n{\r\n\r\n\tconstructor(public value:number, private _type:TimeUnit)\r\n\t{\r\n\t\tassertValidUnit(_type);\r\n\t}\r\n\r\n\r\n\t// Attempts to convert value to current unit type.\r\n\t// If not coercible, it returns null.\r\n\tcoerce(other:TimeSpan):TimeUnitValue;\r\n\tcoerce(other:TimeUnitValue):TimeUnitValue;\r\n\tcoerce(other:any):TimeUnitValue\r\n\t{\r\n\t\tvar type = this._type;\r\n\t\tassertValidUnit(type);\r\n\r\n\t\tif(other instanceof TimeSpan) {\r\n\t\t\tother = other.toTimeUnitValue(type);\r\n\t\t}\r\n\t\telse if(other instanceof TimeUnitValue) {\r\n\t\t\tif(type!==other.type)\r\n\t\t\t\tother = other.to(type);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn null;\r\n\r\n\t\treturn other;\r\n\t}\r\n\r\n\tequals(other:TimeSpan):boolean;\r\n\tequals(other:TimeUnitValue):boolean;\r\n\tequals(other:any):boolean\r\n\t{\r\n\t\tvar o:TimeUnitValue = this.coerce(other);\r\n\t\tif(o==null)\r\n\t\t\treturn false;\r\n\r\n\t\treturn areEqual(this.value, o.value);\r\n\t}\r\n\r\n\r\n\tcompareTo(other:TimeSpan):number;\r\n\tcompareTo(other:TimeUnitValue):number;\r\n\tcompareTo(other:any):number\r\n\t{\r\n\t\tif(other==null) return 1 | 0;\r\n\r\n\t\tassertComparisonType(other);\r\n\r\n\t\treturn compare(this.value, this.coerce(other).value);\r\n\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget type():TimeUnit\r\n\t{\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\ttoTimeSpan():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.value, this.type);\r\n\t}\r\n\r\n\tget total():ITimeMeasurement {\r\n\t\treturn this.toTimeSpan();\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.type):TimeUnitValue\r\n\t{\r\n\t\treturn this.toTimeSpan().toTimeUnitValue(units);\r\n\t}\r\n\r\n}\r\n\r\nfunction assertComparisonType(other:any):void\r\n{\r\n\tif(!(other instanceof TimeUnitValue || other instanceof TimeSpan))\r\n\t\tthrow new Error(\"Invalid comparison type.  Must be of type TimeUnitValue or TimeSpan.\");\r\n}\r\n\r\n\r\nfunction assertValidUnit(unit:TimeUnit):boolean\r\n{\r\n\tif(isNaN(unit) || unit>TimeUnit.Days || unit<TimeUnit.Ticks || Math.floor(unit)!==unit)\r\n\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\r\n\treturn true;\r\n}\r\n"]}