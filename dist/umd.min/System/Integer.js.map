{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Integer","n","Types_1","ArgumentException_1","ArgumentOutOfRangeException_1","r","maxExclusive","Math","random","assert","is","isNumber","isFinite","argumentName","i","assertZeroOrGreater","assertPositive","next","boundary","inclusive","abs","nextInRange","min","max","range","select","source","length","one","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,UAAW,iCAAkC,4CAA6CN,IAE7H,SAAUI,EAASF,GAClB,YCFJ,SAAAM,GAAiBC,GAEhB,MAAW,GAAJA,EANR,GASOD,GATPE,EAAAN,EAAiB,WACjBO,EAAAP,EAA8B,kCAC9BQ,EAAAR,EAAwC,6CAOxC,SAAOI,GAGN,QAAAK,GAAWC,GAEV,MAAQC,MAAKC,SAASF,EAAgB,EAWvC,QAAAE,GAAuBF,GAGtB,MADAG,GAAOH,EAAc,gBACdD,EAAEC,GA4CV,QAAAI,GAAmBT,GAElB,MAAOC,GAAAA,WAAKS,SAASV,GAAG,IAAUW,SAASX,IAAMA,IAAQ,EAAJA,GAGtD,QAAAQ,GAAuBR,EAAUY,GAEhC,GAAIC,GAAIJ,EAAGT,EACX,KAAIa,EACH,KAAM,IAAIX,GAAAA,WAAkBU,GAAgB,IAAK,qBAClD,OAAOC,GAGR,QAAAC,GAAoCd,EAAUY,GAE7C,GAAIC,GAAIL,EAAOR,EAAGY,IAAiBZ,GAAG,CACtC,KAAIa,EACH,KAAM,IAAIV,GAAAA,WAA4BS,GAAgB,IAAKZ,EAAG,yDAC/D,OAAOa,GAGR,QAAAE,GAA+Bf,EAAUY,GAExC,GAAIC,GAAIL,EAAOR,EAAGY,IAAiBZ,EAAE,CACrC,KAAIa,EACH,KAAM,IAAIV,GAAAA,WAA4BS,GAAgB,IAAKZ,EAAG,6BAC/D,OAAOa,GAzEQd,EAAAQ,OAAMA,CAMtB,IAAcA,IAAd,SAAcA,GAEb,QAAAS,GACCC,EACAC,GAGA,MADAV,GAAOS,EAAU,OACH,IAAXA,EAAqB,GACrBC,IAAWD,GAAYA,EAASX,KAAKa,IAAIF,IACrCb,EAAEa,IAGV,QAAAG,GACCC,EACAC,EACAJ,GAEAV,EAAOa,EAAK,OACZb,EAAOc,EAAK,MACZ,IAAIC,GAAQD,EAAMD,CAClB,OAAW,KAARE,EAAkBF,GAClBH,IAAWK,GAASA,EAAMjB,KAAKa,IAAII,IAC/BF,EAAML,EAAKO,IAGnB,QAAAC,GAA0BC,GAEzB,MAAOA,IAAUA,EAAOC,OACrBD,EAAOrB,EAAEqB,EAAOC,SAChB,OA3BYnB,EAAAS,KAAIA,EAUJT,EAAAa,YAAWA,EAaXb,EAAAiB,OAAMA,CAOtB,IAAcA,IAAd,SAAcA,GACb,QAAAG,GAAuBF,GAEtB,MAAOlB,GAAOiB,OAAOC,GAFND,EAAAG,IAAGA,GADNH,EAAAjB,EAAAiB,SAAAjB,EAAAiB,aAhCDjB,EAAAR,EAAAQ,SAAAR,EAAAQ,YAyCER,EAAAU,GAAEA,EAKFV,EAAAS,OAAMA,EAQNT,EAAAe,oBAAmBA,EAQnBf,EAAAgB,eAAcA,GApFxBhB,IAAAA,OA8FP6B,OAAAC,eAAApC,EAAA,cAAAqC,OAAA,IDjBIrC,EAAAA,WCiBWM","file":"System/Integer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./Types\", \"./Exceptions/ArgumentException\", \"./Exceptions/ArgumentOutOfRangeException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"./Types\");\n    var ArgumentException_1 = require(\"./Exceptions/ArgumentException\");\n    var ArgumentOutOfRangeException_1 = require(\"./Exceptions/ArgumentOutOfRangeException\");\n    function Integer(n) {\n        return n | 0;\n    }\n    var Integer;\n    (function (Integer) {\n        function r(maxExclusive) {\n            return (Math.random() * maxExclusive) | 0;\n        }\n        function random(maxExclusive) {\n            assert(maxExclusive, 'maxExclusive');\n            return r(maxExclusive);\n        }\n        Integer.random = random;\n        var random;\n        (function (random) {\n            function next(boundary, inclusive) {\n                assert(boundary, 'max');\n                if (boundary === 0)\n                    return 0;\n                if (inclusive)\n                    boundary += boundary / Math.abs(boundary);\n                return r(boundary);\n            }\n            random.next = next;\n            function nextInRange(min, max, inclusive) {\n                assert(min, 'min');\n                assert(max, 'max');\n                var range = max - min;\n                if (range === 0)\n                    return min;\n                if (inclusive)\n                    range += range / Math.abs(range);\n                return min + next(range);\n            }\n            random.nextInRange = nextInRange;\n            function select(source) {\n                return source && source.length\n                    ? source[r(source.length)]\n                    : void (0);\n            }\n            random.select = select;\n            var select;\n            (function (select) {\n                function one(source) {\n                    return random.select(source);\n                }\n                select.one = one;\n            })(select = random.select || (random.select = {}));\n        })(random = Integer.random || (Integer.random = {}));\n        function is(n) {\n            return Types_1.default.isNumber(n, false) && isFinite(n) && n == (n | 0);\n        }\n        Integer.is = is;\n        function assert(n, argumentName) {\n            var i = is(n);\n            if (!i)\n                throw new ArgumentException_1.default(argumentName || 'n', \"Must be a integer.\");\n            return i;\n        }\n        Integer.assert = assert;\n        function assertZeroOrGreater(n, argumentName) {\n            var i = assert(n, argumentName) && n >= 0;\n            if (!i)\n                throw new ArgumentOutOfRangeException_1.default(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\n            return i;\n        }\n        Integer.assertZeroOrGreater = assertZeroOrGreater;\n        function assertPositive(n, argumentName) {\n            var i = assert(n, argumentName) && n > 0;\n            if (!i)\n                throw new ArgumentOutOfRangeException_1.default(argumentName || 'n', n, \"Must be greater than zero.\");\n            return i;\n        }\n        Integer.assertPositive = assertPositive;\n    })(Integer || (Integer = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Integer;\n});\n","///<reference path=\"Collections/Array/IArray.d.ts\"/>\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from \"./Types\";\r\nimport ArgumentException from \"./Exceptions/ArgumentException\";\r\nimport ArgumentOutOfRangeException from \"./Exceptions/ArgumentOutOfRangeException\";\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\tfunction r(maxExclusive:number):number\r\n\t{\r\n\t\treturn (Math.random()*maxExclusive) | 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a random integer from minInclusive to the maxExclusive.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * @param maxExclusive\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(maxExclusive:number):number\r\n\t{\r\n\t\tassert(maxExclusive, 'maxExclusive');\r\n\t\treturn r(maxExclusive);\r\n\t}\r\n\r\n\texport module random\r\n\t{\r\n\t\texport function next(\r\n\t\t\tboundary:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(boundary, 'max');\r\n\t\t\tif(boundary===0) return 0;\r\n\t\t\tif(inclusive) boundary += boundary/Math.abs(boundary);\r\n\t\t\treturn r(boundary);\r\n\t\t}\r\n\r\n\t\texport function nextInRange(\r\n\t\t\tmin:number,\r\n\t\t\tmax:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(min, 'min');\r\n\t\t\tassert(max, 'max');\r\n\t\t\tvar range = max - min;\r\n\t\t\tif(range===0) return min;\r\n\t\t\tif(inclusive) range += range/Math.abs(range);\r\n\t\t\treturn min + next(range);\r\n\t\t}\r\n\r\n\t\texport function select<T>(source:IArray<T>):T\r\n\t\t{\r\n\t\t\treturn source && source.length\r\n\t\t\t\t? source[r(source.length)]\r\n\t\t\t\t: void(0);\r\n\t\t}\r\n\r\n\t\texport module select {\r\n\t\t\texport function one<T>(source:IArray<T>):T\r\n\t\t\t{\r\n\t\t\t\treturn random.select(source);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && isFinite(n) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertPositive(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}