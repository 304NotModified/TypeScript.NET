{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","Integer","n","Types_1","ArgumentException_1","Integer.random","Integer.is","Integer.assert","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,UAAW,kCAAmC,SAAUI,EAASF,GCH3F,QAAAM,GAAiBC,GAEhBD,MAAWA,GAAJA,EALR,GAQOA,GARPE,EAAAN,EAAiB,WACjBO,EAAAP,EAA8B,mCAO9B,SAAOI,GAINA,QAAAA,GAAuBA,GAEtBI,MAAQA,MAAKA,SAASA,EAAOA,EAG9BJ,QAAAA,GAAmBA,GAElBK,MAAOA,GAAAA,WAAKA,SAASA,GAAGA,IAAUA,IAAQA,EAAJA,GAGvCL,QAAAA,GAAuBA,EAAUA,GAEhCM,GAAIA,GAAIA,EAAGA,EACXA,KAAIA,EAEHA,KAAMA,IAAIA,GAAAA,WAAkBA,GAAgBA,IAAKA,sBAElDA,OAAOA,GAjBQN,EAAAA,OAAMA,EAKNA,EAAAA,GAAEA,EAKFA,EAAAA,OAAMA,GAdhBA,IAAAA,OA0BPO,OAAAC,eAAAd,EAAA,cAAAe,OAAA,IDFIf,EAAAA,WCEWM","file":"System/Integer.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", './Types', './Exceptions/ArgumentException'], function (require, exports) {\r\n    var Types_1 = require('./Types');\r\n    var ArgumentException_1 = require('./Exceptions/ArgumentException');\r\n    function Integer(n) {\r\n        return n | 0;\r\n    }\r\n    var Integer;\r\n    (function (Integer) {\r\n        function random(max) {\r\n            return (Math.random() * max) | 0;\r\n        }\r\n        Integer.random = random;\r\n        function is(n) {\r\n            return Types_1.default.isNumber(n, false) && n == (n | 0);\r\n        }\r\n        Integer.is = is;\r\n        function assert(n, argumentName) {\r\n            var i = is(n);\r\n            if (!i) {\r\n                throw new ArgumentException_1.default(argumentName || 'n', \"Must be an integer.\");\r\n            }\r\n            return i;\r\n        }\r\n        Integer.assert = assert;\r\n    })(Integer || (Integer = {}));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Integer;\r\n});\r\n//# sourceMappingURL=Integer.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from './Types';\r\nimport ArgumentException from './Exceptions/ArgumentException';\r\n\r\nfunction Integer(n:number):number\r\n{\r\n\treturn n | 0;\r\n}\r\n\r\nmodule Integer\r\n{\r\n\r\n\r\n\texport function random(max:number):number\r\n\t{\r\n\t\treturn (Math.random()*max) | 0;\r\n\t}\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn Type.isNumber(n, false) && n==(n | 0);\r\n\t}\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be an integer.\");\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}