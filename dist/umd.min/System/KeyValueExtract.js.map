{"version":3,"sources":["System/KeyValueExtract.js","System/KeyValueExtract.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","isKeyValuePair","kvp","hasOwnProperty","KEY","VALUE","assertKey","key","name","ITEM","assertNotUndefined","DOT","ArgumentNullException_1","assertTuple","tuple","length","ArgumentException_1","value","VOID0","CANNOT_BE_UNDEFINED","extractKeyValue","item","to","Array","ITEM_1","INVALID_KVP_MESSAGE","ITEM_VALUE","Object","defineProperty"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,iCAAkC,sCAAuCN,IAE5G,SAAUI,EAASF,GAClB,YCQJ,SAAAM,GAA4CC,GAE3C,MAAOA,IAAOA,EAAIC,eAAeC,IAAQF,EAAIC,eAAeE,GAG7D,QAAAC,GAAgCC,EAAUC,GAGzC,GAHyC,SAAAA,IAAAA,EAAAC,GAEzCC,EAAmBH,EAAKC,EAAOG,EAAMP,GAC5B,OAANG,EACF,KAAM,IAAIK,GAAAA,WAAsBJ,EAAOG,EAAMP,EAE9C,OAAOG,GAIR,QAAAM,GAA4BC,EAAmBN,GAE9C,GAF8C,SAAAA,IAAAA,EAAAC,GAE7B,GAAdK,EAAMC,OACR,KAAM,IAAIC,GAAAA,WAAkBR,EAAM,2CAEnCF,GAAUQ,EAAM,GAAIN,GAIrB,QAAAE,GAAsCO,EAAST,GAE9C,GAAGS,IAAQC,EACV,KAAM,IAAIF,GAAAA,WAAkBR,EAAMW,EAEnC,OAAOF,GAIR,QAAAG,GACCC,EACAC,GAGA,GAAcf,GAAUU,CACxB,IAAGI,YAAgBE,OAElBV,EAAYQ,GACZd,EAAMc,EAAK,GACXJ,EAAQP,EAAmBW,EAAK,GAAIG,OAEhC,CAAA,IAAGvB,EAA4BoB,GAOnC,KAAM,IAAIL,GAAAA,WAAkBP,EAAMgB,EALlClB,GAAMD,EAAUe,EAAKd,KACrBU,EAAQP,EAAmBW,EAAKJ,MAAOS,GAOxC,MAAOJ,GAAGf,EAAKU,GAtEhB,GAAAD,GAAAnB,EAA8B,kCAC9Be,EAAAf,EAAkC,sCAGjCqB,EAA6B,OAC7BP,EAA6B,IAC7BP,EAA6B,MAC7BC,EAA6B,QAC7BI,EAA6B,OAC7Be,EAA6Bf,EAAO,MAEpCiB,EAA6BjB,EAAOE,EAAMN,EAC1CoB,EAA6B,8DAC7BN,EAA6B,yBAEdxB,GAAAM,eAAcA,EAKdN,EAAAW,UAASA,EAUTX,EAAAkB,YAAWA,EASXlB,EAAAe,mBAAkBA,EASlCiB,OAAAC,eAAAjC,EAAA,cAAAsB,OAAA,IDKItB,EAAAA,WAAkByB","file":"System/KeyValueExtract.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", \"./Exceptions/ArgumentException\", \"./Exceptions/ArgumentNullException\"], factory);\r\n    }\r\n})(function (require, exports) {\r\n    \"use strict\";\r\n    var ArgumentException_1 = require(\"./Exceptions/ArgumentException\");\r\n    var ArgumentNullException_1 = require(\"./Exceptions/ArgumentNullException\");\r\n    var VOID0 = void 0, DOT = '.', KEY = 'key', VALUE = 'value', ITEM = 'item', ITEM_1 = ITEM + '[1]', ITEM_KEY = ITEM + DOT + KEY, ITEM_VALUE = ITEM + DOT + VALUE, INVALID_KVP_MESSAGE = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.', CANNOT_BE_UNDEFINED = 'Cannot equal undefined.';\r\n    function isKeyValuePair(kvp) {\r\n        return kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\r\n    }\r\n    exports.isKeyValuePair = isKeyValuePair;\r\n    function assertKey(key, name) {\r\n        if (name === void 0) { name = ITEM; }\r\n        assertNotUndefined(key, name + DOT + KEY);\r\n        if (key === null)\r\n            throw new ArgumentNullException_1.default(name + DOT + KEY);\r\n        return key;\r\n    }\r\n    exports.assertKey = assertKey;\r\n    function assertTuple(tuple, name) {\r\n        if (name === void 0) { name = ITEM; }\r\n        if (tuple.length != 2)\r\n            throw new ArgumentException_1.default(name, 'KeyValuePair tuples must be of length 2.');\r\n        assertKey(tuple[0], name);\r\n    }\r\n    exports.assertTuple = assertTuple;\r\n    function assertNotUndefined(value, name) {\r\n        if (value === VOID0)\r\n            throw new ArgumentException_1.default(name, CANNOT_BE_UNDEFINED);\r\n        return value;\r\n    }\r\n    exports.assertNotUndefined = assertNotUndefined;\r\n    function extractKeyValue(item, to) {\r\n        var _ = this, key, value;\r\n        if (item instanceof Array) {\r\n            assertTuple(item);\r\n            key = item[0];\r\n            value = assertNotUndefined(item[1], ITEM_1);\r\n        }\r\n        else if (isKeyValuePair(item)) {\r\n            key = assertKey(item.key);\r\n            value = assertNotUndefined(item.value, ITEM_VALUE);\r\n        }\r\n        else {\r\n            throw new ArgumentException_1.default(ITEM, INVALID_KVP_MESSAGE);\r\n        }\r\n        return to(key, value);\r\n    }\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = extractKeyValue;\r\n});\r\n//# sourceMappingURL=KeyValueExtract.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport ArgumentException from \"./Exceptions/ArgumentException\";\r\nimport ArgumentNullException from \"./Exceptions/ArgumentNullException\";\r\n\r\nconst\r\n\tVOID0:any                  = void 0,\r\n\tDOT:string                 = '.',\r\n\tKEY:string                 = 'key',\r\n\tVALUE:string               = 'value',\r\n\tITEM:string                = 'item',\r\n\tITEM_1:string              = ITEM + '[1]',\r\n\tITEM_KEY:string            = ITEM + DOT + KEY,\r\n\tITEM_VALUE:string          = ITEM + DOT + VALUE,\r\n\tINVALID_KVP_MESSAGE:string = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.',\r\n\tCANNOT_BE_UNDEFINED:string = 'Cannot equal undefined.';\r\n\r\nexport function isKeyValuePair<TKey,TValue>(kvp:any):kvp is IKeyValuePair<TKey,TValue>\r\n{\r\n\treturn kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\r\n}\r\n\r\nexport function assertKey<TKey>(key:TKey, name:string = ITEM):TKey\r\n{\r\n\tassertNotUndefined(key, name + DOT + KEY);\r\n\tif(key===null)\r\n\t\tthrow new ArgumentNullException(name + DOT + KEY);\r\n\r\n\treturn key;\r\n}\r\n\r\n\r\nexport function assertTuple(tuple:IArray<any>, name:string = ITEM):void\r\n{\r\n\tif(tuple.length!=2)\r\n\t\tthrow new ArgumentException(name, 'KeyValuePair tuples must be of length 2.');\r\n\r\n\tassertKey(tuple[0], name);\r\n}\r\n\r\n\r\nexport function assertNotUndefined<T>(value:T, name:string):T\r\n{\r\n\tif(value===VOID0)\r\n\t\tthrow new ArgumentException(name, CANNOT_BE_UNDEFINED);\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\nexport default function extractKeyValue<TKey, TValue, TResult>(\r\n\titem:KeyValuePair<TKey, TValue>,\r\n\tto:(key:TKey, value:TValue)=>TResult):TResult\r\n{\r\n\r\n\tvar _ = this, key:TKey, value:TValue;\r\n\tif(item instanceof Array)\r\n\t{\r\n\t\tassertTuple(item);\r\n\t\tkey = item[0];\r\n\t\tvalue = assertNotUndefined(item[1], ITEM_1);\r\n\t}\r\n\telse if(isKeyValuePair<TKey,TValue>(item))\r\n\t{\r\n\t\tkey = assertKey(item.key);\r\n\t\tvalue = assertNotUndefined(item.value, ITEM_VALUE);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthrow new ArgumentException(ITEM, INVALID_KVP_MESSAGE);\r\n\t}\r\n\r\n\treturn to(key, value);\r\n}\r\n"]}