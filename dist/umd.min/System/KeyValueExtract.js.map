{"version":3,"sources":["System/KeyValueExtract.js","System/KeyValueExtract.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","isKeyValuePair","kvp","assertKey","key","name","assertTuple","tuple","assertNotUndefined","value","extractKeyValue","item","to","ArgumentException_1","ArgumentNullException_1","VOID0","DOT","KEY","VALUE","ITEM","ITEM_1","ITEM_VALUE","INVALID_KVP_MESSAGE","CANNOT_BE_UNDEFINED","Object","defineProperty"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,iCAAkC,sCAAuCN,IAE5G,SAAUI,EAASF,GCStB,QAAAM,GAA4CC,GAE3CD,MAAOA,IAAOA,EAAIA,eAAeA,IAAQA,EAAIA,eAAeA,GAG7D,QAAAE,GAAgCC,EAAUC,GAGzCF,GAHyCA,SAAAA,IAAAA,EAAAA,GAEzCA,EAAmBA,EAAKA,EAAOA,EAAMA,GAC5BA,OAANA,EACFA,KAAMA,IAAIA,GAAAA,WAAsBA,EAAOA,EAAMA,EAE9CA,OAAOA,GAIR,QAAAG,GAA4BC,EAAmBF,GAE9CC,GAF8CA,SAAAA,IAAAA,EAAAA,GAE7BA,GAAdA,EAAMA,OACRA,KAAMA,IAAIA,GAAAA,WAAkBA,EAAMA,2CAEnCA,GAAUA,EAAMA,GAAIA,GAIrB,QAAAE,GAAsCC,EAASJ,GAE9CG,GAAGA,IAAQA,EACVA,KAAMA,IAAIA,GAAAA,WAAkBA,EAAMA,EAEnCA,OAAOA,GAIR,QAAAE,GACCC,EACAC,GAGAF,GAAcA,GAAUA,CACxBA,IAAGA,YAAgBA,OAElBA,EAAYA,GACZA,EAAMA,EAAKA,GACXA,EAAQA,EAAmBA,EAAKA,GAAIA,OAEhCA,CAAAA,IAAGA,EAA4BA,GAOnCA,KAAMA,IAAIA,GAAAA,WAAkBA,EAAMA,EALlCA,GAAMA,EAAUA,EAAKA,KACrBA,EAAQA,EAAmBA,EAAKA,MAAOA,GAOxCA,MAAOA,GAAGA,EAAKA,GAtEhB,GAAAG,GAAAhB,EAA8B,kCAC9BiB,EAAAjB,EAAkC,sCAGjCkB,EAA6B,OAC7BC,EAA6B,IAC7BC,EAA6B,MAC7BC,EAA6B,QAC7BC,EAA6B,OAC7BC,EAA6BD,EAAO,MAEpCE,EAA6BF,EAAOH,EAAME,EAC1CI,EAA6B,8DAC7BC,EAA6B,yBAEd5B,GAAAM,eAAcA,EAKdN,EAAAQ,UAASA,EAUTR,EAAAW,YAAWA,EASXX,EAAAa,mBAAkBA,EASlCgB,OAAAC,eAAA9B,EAAA,cAAAc,OAAA,IDIId,EAAAA,WAAkBe","file":"System/KeyValueExtract.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./Exceptions/ArgumentException\", \"./Exceptions/ArgumentNullException\"], factory);\n    }\n})(function (require, exports) {\n    var ArgumentException_1 = require(\"./Exceptions/ArgumentException\");\n    var ArgumentNullException_1 = require(\"./Exceptions/ArgumentNullException\");\n    var VOID0 = void 0, DOT = '.', KEY = 'key', VALUE = 'value', ITEM = 'item', ITEM_1 = ITEM + '[1]', ITEM_KEY = ITEM + DOT + KEY, ITEM_VALUE = ITEM + DOT + VALUE, INVALID_KVP_MESSAGE = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.', CANNOT_BE_UNDEFINED = 'Cannot equal undefined.';\n    function isKeyValuePair(kvp) {\n        return kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\n    }\n    exports.isKeyValuePair = isKeyValuePair;\n    function assertKey(key, name) {\n        if (name === void 0) { name = ITEM; }\n        assertNotUndefined(key, name + DOT + KEY);\n        if (key === null)\n            throw new ArgumentNullException_1.default(name + DOT + KEY);\n        return key;\n    }\n    exports.assertKey = assertKey;\n    function assertTuple(tuple, name) {\n        if (name === void 0) { name = ITEM; }\n        if (tuple.length != 2)\n            throw new ArgumentException_1.default(name, 'KeyValuePair tuples must be of length 2.');\n        assertKey(tuple[0], name);\n    }\n    exports.assertTuple = assertTuple;\n    function assertNotUndefined(value, name) {\n        if (value === VOID0)\n            throw new ArgumentException_1.default(name, CANNOT_BE_UNDEFINED);\n        return value;\n    }\n    exports.assertNotUndefined = assertNotUndefined;\n    function extractKeyValue(item, to) {\n        var _ = this, key, value;\n        if (item instanceof Array) {\n            assertTuple(item);\n            key = item[0];\n            value = assertNotUndefined(item[1], ITEM_1);\n        }\n        else if (isKeyValuePair(item)) {\n            key = assertKey(item.key);\n            value = assertNotUndefined(item.value, ITEM_VALUE);\n        }\n        else {\n            throw new ArgumentException_1.default(ITEM, INVALID_KVP_MESSAGE);\n        }\n        return to(key, value);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = extractKeyValue;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport ArgumentException from \"./Exceptions/ArgumentException\";\r\nimport ArgumentNullException from \"./Exceptions/ArgumentNullException\";\r\n\r\nconst\r\n\tVOID0:any                  = void 0,\r\n\tDOT:string                 = '.',\r\n\tKEY:string                 = 'key',\r\n\tVALUE:string               = 'value',\r\n\tITEM:string                = 'item',\r\n\tITEM_1:string              = ITEM + '[1]',\r\n\tITEM_KEY:string            = ITEM + DOT + KEY,\r\n\tITEM_VALUE:string          = ITEM + DOT + VALUE,\r\n\tINVALID_KVP_MESSAGE:string = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.',\r\n\tCANNOT_BE_UNDEFINED:string = 'Cannot equal undefined.';\r\n\r\nexport function isKeyValuePair<TKey,TValue>(kvp:any):kvp is IKeyValuePair<TKey,TValue>\r\n{\r\n\treturn kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\r\n}\r\n\r\nexport function assertKey<TKey>(key:TKey, name:string = ITEM):TKey\r\n{\r\n\tassertNotUndefined(key, name + DOT + KEY);\r\n\tif(key===null)\r\n\t\tthrow new ArgumentNullException(name + DOT + KEY);\r\n\r\n\treturn key;\r\n}\r\n\r\n\r\nexport function assertTuple(tuple:IArray<any>, name:string = ITEM):void\r\n{\r\n\tif(tuple.length!=2)\r\n\t\tthrow new ArgumentException(name, 'KeyValuePair tuples must be of length 2.');\r\n\r\n\tassertKey(tuple[0], name);\r\n}\r\n\r\n\r\nexport function assertNotUndefined<T>(value:T, name:string):T\r\n{\r\n\tif(value===VOID0)\r\n\t\tthrow new ArgumentException(name, CANNOT_BE_UNDEFINED);\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\nexport default function extractKeyValue<TKey, TValue, TResult>(\r\n\titem:KeyValuePair<TKey, TValue>,\r\n\tto:(key:TKey, value:TValue)=>TResult):TResult\r\n{\r\n\r\n\tvar _ = this, key:TKey, value:TValue;\r\n\tif(item instanceof Array)\r\n\t{\r\n\t\tassertTuple(item);\r\n\t\tkey = item[0];\r\n\t\tvalue = assertNotUndefined(item[1], ITEM_1);\r\n\t}\r\n\telse if(isKeyValuePair<TKey,TValue>(item))\r\n\t{\r\n\t\tkey = assertKey(item.key);\r\n\t\tvalue = assertNotUndefined(item.value, ITEM_VALUE);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthrow new ArgumentException(ITEM, INVALID_KVP_MESSAGE);\r\n\t}\r\n\r\n\treturn to(key, value);\r\n}\r\n"]}