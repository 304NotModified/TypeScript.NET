{"version":3,"sources":["System/Text/RegularExpressions.js","System/Text/RegularExpressions.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","RegexOptions","EMPTY","UNDEFINED","IGNORE_CASE","GLOBAL","MULTI_LINE","UNICODE","STICKY","Regex","pattern","options","Error","patternString","flags","join","RegExp","ignoreCase","indexOf","multiline","source","replace","keys","k","match","i","len","length","_keys","_re","freeze","input","startIndex","r","_","exec","substring","Match","Empty","first","index","loc","groups","groupMap","text","String","g","Group","push","m","matches","end","success","count","Infinity","result","isEvaluator","length_1","isMatch","test","e","Capture","value","defineProperty","get","enumerable","configurable","_super","call","EmptyGroup","namedGroups","slice","EmptyMatch"],"mappings":"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","file":"System/Text/RegularExpressions.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Named groups based on: http://trentrichardson.com/2011/08/02/javascript-regexp-match-named-captures/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var EMPTY = \"\";\n    var UNDEFINED = \"undefined\";\n    var RegexOptions;\n    (function (RegexOptions) {\n        RegexOptions.IGNORE_CASE = 'i';\n        RegexOptions.GLOBAL = 'g';\n        RegexOptions.MULTI_LINE = 'm';\n        RegexOptions.UNICODE = 'u';\n        RegexOptions.STICKY = 'y';\n    })(RegexOptions = exports.RegexOptions || (exports.RegexOptions = {}));\n    var Regex = (function () {\n        function Regex(pattern, options) {\n            if (!pattern)\n                throw new Error(\"'pattern' cannot be null or empty.\");\n            var patternString, flags = options && options.join(EMPTY) || EMPTY;\n            if (pattern instanceof RegExp) {\n                var p = pattern;\n                if (p.ignoreCase && flags.indexOf(RegexOptions.IGNORE_CASE) === -1)\n                    flags\n                        += RegexOptions.IGNORE_CASE;\n                if (p.multiline && flags.indexOf(RegexOptions.MULTI_LINE) === -1)\n                    flags\n                        += RegexOptions.MULTI_LINE;\n                patternString = p.source;\n            }\n            else {\n                patternString = pattern;\n            }\n            flags = flags.replace(RegexOptions.GLOBAL, EMPTY);\n            var keys = [];\n            {\n                var k = patternString.match(/(?!\\(\\?<)(\\w+)(?=>)/g);\n                if (k) {\n                    for (var i = 0, len = k.length; i < len; i++) {\n                        keys[i + 1] = k[i];\n                    }\n                    patternString = patternString.replace(/\\?<\\w+>/g, EMPTY);\n                    this._keys = keys;\n                }\n                this._re = new RegExp(patternString, flags);\n            }\n            Object.freeze(this);\n        }\n        Regex.prototype.match = function (input, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            var _ = this;\n            var r;\n            if (!input\n                || startIndex >= input.length\n                || !(r = this._re.exec(input.substring(startIndex))))\n                return Match.Empty;\n            if (!(startIndex > 0))\n                startIndex = 0;\n            var first = startIndex + r.index, loc = first, groups = [], groupMap = {};\n            for (var i = 0, len = r.length; i < len; ++i) {\n                var text = typeof r[i] !== UNDEFINED && r[i].constructor === String ? r[i] : EMPTY;\n                var g = new Group(text, loc);\n                g.freeze();\n                if (i && _._keys && i < _._keys.length)\n                    groupMap[_._keys[i]] = g;\n                groups.push(g);\n                if (i !== 0)\n                    loc += text.length;\n            }\n            var m = new Match(r[0], first, groups, groupMap);\n            m.freeze();\n            return m;\n        };\n        Regex.prototype.matches = function (input) {\n            var matches = [], m, p = 0, end = input && input.length || 0;\n            while (p < end && (m = this.match(input, p)) && m.success) {\n                matches.push(m);\n                p = m.index + m.length;\n            }\n            return Object.freeze(matches);\n        };\n        Regex.prototype.replace = function (input, r, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!input || r === null || r === void 0 || !(count > 0))\n                return input;\n            var result = [];\n            var p = 0, end = input.length, isEvaluator = typeof r == \"function\";\n            var m, i = 0;\n            while (i < count && p < end && (m = this.match(input, p)) && m.success) {\n                var index = m.index, length_1 = m.length;\n                if (p !== index)\n                    result.push(input.substring(p, index));\n                result.push(isEvaluator ? r(m, i++) : r);\n                p = index + length_1;\n            }\n            if (p < end)\n                result.push(input.substring(p));\n            return result.join(EMPTY);\n        };\n        Regex.prototype.isMatch = function (input) {\n            return this._re.test(input);\n        };\n        Regex.isMatch = function (input, pattern, options) {\n            var r = new Regex(pattern, options);\n            return r.isMatch(input);\n        };\n        Regex.replace = function (input, pattern, e, options) {\n            var r = new Regex(pattern, options);\n            return r.replace(input, e);\n        };\n        return Regex;\n    }());\n    exports.Regex = Regex;\n    var Capture = (function () {\n        function Capture(value, index) {\n            if (value === void 0) { value = EMPTY; }\n            if (index === void 0) { index = -1; }\n            this.value = value;\n            this.index = index;\n        }\n        Object.defineProperty(Capture.prototype, \"length\", {\n            get: function () {\n                var v = this.value;\n                return v && v.length || 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Capture.prototype.freeze = function () {\n            Object.freeze(this);\n        };\n        return Capture;\n    }());\n    exports.Capture = Capture;\n    var Group = (function (_super) {\n        __extends(Group, _super);\n        function Group(value, index) {\n            if (value === void 0) { value = EMPTY; }\n            if (index === void 0) { index = -1; }\n            _super.call(this, value, index);\n        }\n        Object.defineProperty(Group.prototype, \"success\", {\n            get: function () {\n                return this.index != -1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Group, \"Empty\", {\n            get: function () {\n                return EmptyGroup;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Group;\n    }(Capture));\n    exports.Group = Group;\n    var EmptyGroup = new Group();\n    var Match = (function (_super) {\n        __extends(Match, _super);\n        function Match(value, index, groups, namedGroups) {\n            if (value === void 0) { value = EMPTY; }\n            if (index === void 0) { index = -1; }\n            if (groups === void 0) { groups = []; }\n            if (namedGroups === void 0) { namedGroups = {}; }\n            _super.call(this, value, index);\n            this.groups = groups;\n            this.namedGroups = namedGroups;\n        }\n        Match.prototype.freeze = function () {\n            if (!this.groups)\n                throw new Error(\"'groups' cannot be null.\");\n            if (!this.namedGroups)\n                throw new Error(\"'groupMap' cannot be null.\");\n            Object.freeze(this.groups.slice());\n            Object.freeze(this.namedGroups);\n            _super.prototype.freeze.call(this);\n        };\n        Object.defineProperty(Match, \"Empty\", {\n            get: function () {\n                return EmptyMatch;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Match;\n    }(Group));\n    exports.Match = Match;\n    var EmptyMatch = new Match();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Regex;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Named groups based on: http://trentrichardson.com/2011/08/02/javascript-regexp-match-named-captures/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Collections/Dictionaries/IDictionary\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\n\r\n// NOTE: Avoid dependencies so this class can be used cleanly.\r\n\r\nconst EMPTY:string = \"\";\r\nconst UNDEFINED:string = \"undefined\";\r\n\r\n\r\n/**\r\n * https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regexoptions%28v=vs.110%29.aspx\r\n */\r\nexport module RegexOptions\r\n{\r\n\t/**\r\n\t * Specifies case-insensitive matching. For more information, see the \"Case-Insensitive Matching \" section in the Regular Expression Options topic.\r\n\t */\r\n\texport const IGNORE_CASE:string = 'i';\r\n\r\n\t/**\r\n\t * Specifies global matching instead of single.\r\n\t */\r\n\texport const GLOBAL:string = 'g';\r\n\r\n\t/**\r\n\t * treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)\r\n\t */\r\n\texport const MULTI_LINE:string = 'm';\r\n\r\n\t/**\r\n\t * treat pattern as a sequence of unicode code points\r\n\t */\r\n\texport const UNICODE:string = 'u';\r\n\r\n\t/**\r\n\t * matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).\r\n\t */\r\n\texport const STICKY:string = 'y';\r\n\r\n\texport type Global = 'g';\r\n\texport type IgnoreCase = 'i';\r\n\texport type MultiLine = 'm';\r\n\texport type Unicode = 'u';\r\n\texport type Sticky = 'y';\r\n\r\n\texport type Literal = Global | IgnoreCase | MultiLine | Unicode | Sticky;\r\n}\r\n\r\nexport interface MatchEvaluator extends Selector<Match,Primitive>\r\n{\r\n}\r\n\r\nexport class Regex\r\n{\r\n\tprivate _re:RegExp;\r\n\tprivate _keys:string[];\r\n\r\n\tconstructor(\r\n\t\tpattern:string|RegExp,\r\n\t\toptions?:RegexOptions.Literal[])\r\n\t{\r\n\t\tif(!pattern) throw new Error(\"'pattern' cannot be null or empty.\");\r\n\t\tvar patternString:string, flags:string = options && options.join(EMPTY) || EMPTY;\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tlet p = <RegExp>pattern;\r\n\t\t\tif(p.ignoreCase && flags.indexOf(RegexOptions.IGNORE_CASE)=== -1) flags\r\n\t\t\t\t+= RegexOptions.IGNORE_CASE;\r\n\t\t\tif(p.multiline && flags.indexOf(RegexOptions.MULTI_LINE)=== -1) flags\r\n\t\t\t\t+= RegexOptions.MULTI_LINE;\r\n\t\t\tpatternString = p.source;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpatternString = pattern;\r\n\t\t}\r\n\r\n\t\t// For the majority of expected behavior, we need to eliminate global.\r\n\t\tflags = flags.replace(RegexOptions.GLOBAL, EMPTY);\r\n\r\n\t\t// find the keys inside the pattern, and place in mapping array {0:'key1', 1:'key2', ...}\r\n\t\tvar keys:string[] = [];\r\n\t\t{\r\n\t\t\tlet k = patternString.match(/(?!\\(\\?<)(\\w+)(?=>)/g);\r\n\t\t\tif(k)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0, len = k.length; i<len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tkeys[i + 1] = k[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove keys from regexp leaving standard regexp\r\n\t\t\t\tpatternString = patternString.replace(/\\?<\\w+>/g, EMPTY);\r\n\t\t\t\tthis._keys = keys;\r\n\t\t\t}\r\n\r\n\t\t\tthis._re = new RegExp(patternString, flags);\r\n\r\n\t\t}\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\tmatch(input:string, startIndex:number = 0):Match\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar r:RegExpExecArray;\r\n\t\tif(!input\r\n\t\t\t|| startIndex>=input.length\r\n\t\t\t|| !(r = this._re.exec(input.substring(startIndex))))\r\n\t\t\treturn Match.Empty;\r\n\r\n\t\tif(!(startIndex>0)) startIndex = 0;\r\n\r\n\t\tvar first                = startIndex + r.index,\r\n\t\t    loc                  = first,\r\n\t\t    groups:Group[]       = [],\r\n\t\t    groupMap:IMap<Group> = {};\r\n\r\n\t\tfor(let i = 0, len = r.length; i<len; ++i)\r\n\t\t{\r\n\t\t\tlet text = typeof r[i]!==UNDEFINED && r[i].constructor===String ? r[i] : EMPTY;\r\n\t\t\tlet g = new Group(text, loc);\r\n\t\t\tg.freeze();\r\n\t\t\tif(i && _._keys && i<_._keys.length) groupMap[_._keys[i]] = g;\r\n\t\t\tgroups.push(g);\r\n\t\t\tif(i!==0) loc += text.length;\r\n\t\t}\r\n\r\n\t\tvar m = new Match(r[0], first, groups, groupMap);\r\n\t\tm.freeze();\r\n\t\treturn m;\r\n\t}\r\n\r\n\tmatches(input:string):Match[]\r\n\t{\r\n\t\tvar matches:Match[] = [], m:Match, p = 0, end = input && input.length || 0;\r\n\t\twhile(p<end && (m = this.match(input,p)) && m.success)\r\n\t\t{\r\n\t\t\tmatches.push(m);\r\n\t\t\tp = m.index + m.length;\r\n\t\t}\r\n\t\treturn Object.freeze(matches);\r\n\t}\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\treplacement:Primitive,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tevaluator:MatchEvaluator,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tr:any,\r\n\t\tcount:number = Infinity):string\r\n\t{\r\n\t\tif(!input || r===null || r=== void 0 || !(count>0)) return input;\r\n\t\tvar result:string[] = [];\r\n\t\tvar p = 0, end = input.length, isEvaluator = typeof r==\"function\";\r\n\r\n\t\tvar m:Match, i:number = 0;\r\n\t\twhile(i<count && p<end && (m = this.match(input,p)) && m.success)\r\n\t\t{\r\n\t\t\tlet {index, length} = m;\r\n\t\t\tif(p!==index) result.push(input.substring(p, index));\r\n\t\t\tresult.push(isEvaluator ? r(m, i++) : r);\r\n\t\t\tp = index + length;\r\n\t\t}\r\n\r\n\t\tif(p<end) result.push(input.substring(p));\r\n\r\n\t\treturn result.join(EMPTY);\r\n\t}\r\n\r\n\tisMatch(input:string):boolean\r\n\t{\r\n\t\treturn this._re.test(input);\r\n\t}\r\n\r\n\tstatic isMatch(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\toptions?:RegexOptions.Literal[]):boolean\r\n\t{\r\n\t\tvar r = new Regex(pattern, options);\r\n\t\treturn r.isMatch(input);\r\n\t}\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\treplacement:string,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\tevaluator:MatchEvaluator,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\te:any,\r\n\t\toptions?:RegexOptions.Literal[]):string\r\n\t{\r\n\t\tvar r = new Regex(pattern, options);\r\n\t\treturn r.replace(input, e);\r\n\t}\r\n}\r\n\r\nexport class Capture\r\n{\r\n\r\n\tget length():number\r\n\t{\r\n\t\tvar v = this.value;\r\n\t\treturn v && v.length || 0;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tpublic value:string = EMPTY,\r\n\t\tpublic index:number = -1)\r\n\t{\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tObject.freeze(this);\r\n\t}\r\n}\r\n\r\nexport class Group extends Capture\r\n{\r\n\tget success():boolean\r\n\t{\r\n\t\treturn this.index!= -1;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tvalue:string = EMPTY,\r\n\t\tindex:number = -1)\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tstatic get Empty():Group\r\n\t{\r\n\t\treturn EmptyGroup;\r\n\t}\r\n\r\n}\r\nconst EmptyGroup = new Group();\r\n\r\nexport class Match extends Group\r\n{\r\n\r\n\tconstructor(\r\n\t\tvalue:string = EMPTY,\r\n\t\tindex:number = -1,\r\n\t\tpublic groups:Group[] = [],\r\n\t\tpublic namedGroups:IMap<Group> = {})\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tif(!this.groups) throw new Error(\"'groups' cannot be null.\");\r\n\t\tif(!this.namedGroups) throw new Error(\"'groupMap' cannot be null.\");\r\n\t\tObject.freeze(this.groups.slice());\r\n\t\tObject.freeze(this.namedGroups);\r\n\t\tsuper.freeze();\r\n\t}\r\n\r\n\tstatic get Empty():Match\r\n\t{\r\n\t\treturn EmptyMatch;\r\n\t}\r\n}\r\nconst EmptyMatch = new Match();\r\n\r\n\r\nexport default Regex;"]}