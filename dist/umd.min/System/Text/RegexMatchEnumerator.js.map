{"version":3,"sources":["System/Text/RegexMatchEnumerator.js","System/Text/RegexMatchEnumerator.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","RegularExpressions_1","Enumerator_1","EnumeratorBase_1","RegexMatchEnumerator","pattern","Regex","this","_pattern","prototype","matches","input","p","_this","yielder","match","success","index","length","yieldReturn","yieldBreak","empty","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,uBAAwB,wCAAyC,6CAA8CN,IAElJ,SAAUI,EAASF,GAClB,YCNJ,IAAAM,GAAAJ,EAA2B,wBAC3BK,EAAAL,EAAoB,yCACpBM,EAAAN,EAA2B,6CAC3BO,EAAA,WAIC,QAAAA,GAAYC,GAERA,YAAmBJ,GAAAK,MAErBC,KAAKC,SAAWH,EAIhBE,KAAKC,SAAW,GAAIP,GAAAK,MAAMD,GAgC7B,MA5BCD,GAAAK,UAAAC,QAAA,SAAQC,GAAR,GAEKC,GAFLC,EAAAN,IAGC,OAAO,IAAIJ,GAAAA,WACV,WAECS,EAAI,GAEL,SAAAE,GAEC,GAAIC,GAAcF,EAAKL,SAASO,MAAMJ,EAAOC,EAC7C,OAAGG,GAAMC,SAERJ,EAAIG,EAAME,MAAQF,EAAMG,OACjBJ,EAAQK,YAAYJ,IAGrBD,EAAQM,gBAIXhB,EAAAM,QAAP,SAAeC,EAAcN,GAE5B,MAAOM,IAASN,EACb,GAAKD,GAAqBC,GAAUK,QAAQC,GAC5CT,EAAAmB,OAGLjB,IA5CaT,GAAAS,qBAAoBA,EA8CjCkB,OAAAC,eAAA5B,EAAA,cAAA6B,OAAA,IDPI7B,EAAAA,WCOWS,EAAqBM","file":"System/Text/RegexMatchEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./RegularExpressions\", \"../Collections/Enumeration/Enumerator\", \"../Collections/Enumeration/EnumeratorBase\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var RegularExpressions_1 = require(\"./RegularExpressions\");\n    var Enumerator_1 = require(\"../Collections/Enumeration/Enumerator\");\n    var EnumeratorBase_1 = require(\"../Collections/Enumeration/EnumeratorBase\");\n    var RegexMatchEnumerator = (function () {\n        function RegexMatchEnumerator(pattern) {\n            if (pattern instanceof RegularExpressions_1.Regex) {\n                this._pattern = pattern;\n            }\n            else {\n                this._pattern = new RegularExpressions_1.Regex(pattern);\n            }\n        }\n        RegexMatchEnumerator.prototype.matches = function (input) {\n            var _this = this;\n            var p;\n            return new EnumeratorBase_1.default(function () {\n                p = 0;\n            }, function (yielder) {\n                var match = _this._pattern.match(input, p);\n                if (match.success) {\n                    p = match.index + match.length;\n                    return yielder.yieldReturn(match);\n                }\n                return yielder.yieldBreak();\n            });\n        };\n        RegexMatchEnumerator.matches = function (input, pattern) {\n            return input && pattern\n                ? (new RegexMatchEnumerator(pattern)).matches(input)\n                : Enumerator_1.empty;\n        };\n        return RegexMatchEnumerator;\n    }());\n    exports.RegexMatchEnumerator = RegexMatchEnumerator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = RegexMatchEnumerator.matches;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Collections/Enumeration/IEnumerator.d.ts\"/>\r\nimport {Regex, Match} from \"./RegularExpressions\";\r\nimport {empty} from \"../Collections/Enumeration/Enumerator\";\r\nimport EnumeratorBase from \"../Collections/Enumeration/EnumeratorBase\";\r\nexport class RegexMatchEnumerator\r\n{\r\n\tprivate _pattern:Regex;\r\n\r\n\tconstructor(pattern:string|RegExp|Regex)\r\n\t{\r\n\t\tif(pattern instanceof Regex)\r\n\t\t{\r\n\t\t\tthis._pattern = pattern;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._pattern = new Regex(pattern);\r\n\t\t}\r\n\t}\r\n\r\n\tmatches(input:string):IEnumerator<Match>\r\n\t{\r\n\t\tvar p:number; // pointer\r\n\t\treturn new EnumeratorBase<Match>(\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tp = 0;\r\n\t\t\t},\r\n\t\t\tyielder=>\r\n\t\t\t{\r\n\t\t\t\tlet match:Match = this._pattern.match(input, p);\r\n\t\t\t\tif(match.success)\r\n\t\t\t\t{\r\n\t\t\t\t\tp = match.index + match.length;\r\n\t\t\t\t\treturn yielder.yieldReturn(match);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:string|RegExp|Regex):IEnumerator<Match>\r\n\t{\r\n\t\treturn input && pattern\r\n\t\t\t? (new RegexMatchEnumerator(pattern)).matches(input)\r\n\t\t\t: empty;\r\n\t}\r\n\r\n}\r\n\r\nexport default RegexMatchEnumerator.matches;"]}