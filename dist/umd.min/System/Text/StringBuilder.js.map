{"version":3,"sources":["System/Text/StringBuilder.js","System/Text/StringBuilder.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Types_1","VOID0","StringBuilder","StringBuilder.constructor","StringBuilder.appendSingle","StringBuilder.appendThese","StringBuilder.append","StringBuilder.appendLine","StringBuilder.appendLines","get","StringBuilder.isEmpty","enumerable","configurable","StringBuilder.toString","StringBuilder.join","StringBuilder.clear","StringBuilder.dispose","Object","defineProperty","value"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,YAAaN,IAEhD,SAAUI,EAASF,GCLtB,YAEA,IAAAM,GAAAJ,EAAiB,YAGXK,EAAY,OAalBC,EAAA,WASCA,QAAAA,KDfW,ICeCC,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAEXA,IAAIA,GAAIA,IACRA,GAAEA,QAAUA,KACZA,EAAEA,cACFA,EAAEA,YAAYA,GA+FhBD,MA5FSA,GAAAA,UAAAA,aAARA,SAAqBA,GAEpBE,GAAUA,OAAPA,GAAeA,IAAOA,EAAOA,CAC/BA,GAAIA,GAAIA,IAERA,QADAA,EAAEA,QAAUA,WACEA,IACbA,IAAKA,GAAAA,WAAKA,OACVA,IAAKA,GAAAA,WAAKA,SACTA,EAAOA,EAAKA,WAGdA,EAAEA,WAAWA,KAAKA,KAKpBF,EAAAA,UAAAA,YAAAA,SAAYA,GAEXG,GAAIA,GAAIA,IAERA,OADAA,GAAMA,QAAQA,SAAAA,GAAIA,MAAAA,GAAEA,aAAaA,KAC1BA,GAGRH,EAAAA,UAAAA,OAAAA,WDlBW,ICkBJI,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAGNA,OADAA,MAAKA,YAAYA,GACVA,MAGRJ,EAAAA,UAAAA,WAAAA,WDhBW,ICgBAK,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAGVA,OADAA,MAAKA,YAAYA,GACVA,MAGRL,EAAAA,UAAAA,YAAAA,SAAYA,GAEXM,GAAIA,GAAIA,IAURA,OATAA,GAAMA,QACJA,SAAAA,GAEOA,OAAJA,GAAYA,IAAIA,IAClBA,EAAEA,aAAaA,GACfA,EAAEA,WAAWA,KAAKA,WAIdA,GAeRN,OAAAA,eAAIA,EAAAA,UAAAA,WDhCOO,ICgCXP,WAECQ,MAAgCA,KAAzBA,KAAKA,WAAWA,QD/BbC,YAAY,EACZC,cAAc,ICiCzBV,EAAAA,UAAAA,SAAAA,WAECW,GAAIA,GAASA,KAAKA,OAIlBA,OAHaA,SAATA,IACHA,KAAKA,QAAUA,EAASA,KAAKA,WAAWA,QAElCA,GAGRX,EAAAA,UAAAA,KAAAA,SAAKA,GAEJY,MAAOA,MAAKA,WAAWA,KAAKA,IAG7BZ,EAAAA,UAAAA,MAAAA,WAECa,KAAKA,WAAWA,OAASA,EACzBA,KAAKA,QAAUA,MAGhBb,EAAAA,UAAAA,QAAAA,WAECc,KAAKA,SAGPd,IA7GAe,QAAAC,eAAAxB,EAAA,cAAAyB,OAAA,IDwEIzB,EAAAA,WAAkBQ","file":"System/Text/StringBuilder.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Types'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Types_1 = require('../Types');\n    var VOID0 = void 0;\n    var StringBuilder = (function () {\n        function StringBuilder() {\n            var initial = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                initial[_i - 0] = arguments[_i];\n            }\n            var _ = this;\n            _._latest = null;\n            _._partArray = [];\n            _.appendThese(initial);\n        }\n        StringBuilder.prototype.appendSingle = function (item) {\n            if (item !== null && item !== VOID0) {\n                var _ = this;\n                _._latest = null;\n                switch (typeof item) {\n                    case Types_1.default.OBJECT:\n                    case Types_1.default.FUNCTION:\n                        item = item.toString();\n                        break;\n                }\n                _._partArray.push(item);\n            }\n        };\n        StringBuilder.prototype.appendThese = function (items) {\n            var _ = this;\n            items.forEach(function (s) { return _.appendSingle(s); });\n            return _;\n        };\n        StringBuilder.prototype.append = function () {\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i - 0] = arguments[_i];\n            }\n            this.appendThese(items);\n            return this;\n        };\n        StringBuilder.prototype.appendLine = function () {\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i - 0] = arguments[_i];\n            }\n            this.appendLines(items);\n            return this;\n        };\n        StringBuilder.prototype.appendLines = function (items) {\n            var _ = this;\n            items.forEach(function (i) {\n                if (i !== null && i !== VOID0) {\n                    _.appendSingle(i);\n                    _._partArray.push(\"\\r\\n\");\n                }\n            });\n            return _;\n        };\n        Object.defineProperty(StringBuilder.prototype, \"isEmpty\", {\n            get: function () {\n                return this._partArray.length === 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        StringBuilder.prototype.toString = function () {\n            var latest = this._latest;\n            if (!latest === null)\n                this._latest = latest = this._partArray.join();\n            return latest;\n        };\n        StringBuilder.prototype.join = function (delimiter) {\n            return this._partArray.join(delimiter);\n        };\n        StringBuilder.prototype.clear = function () {\n            this._partArray.length = 0;\n            this._latest = null;\n        };\n        StringBuilder.prototype.dispose = function () {\n            this.clear();\n        };\n        return StringBuilder;\n    })();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = StringBuilder;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport LinkedList from '../Collections/LinkedList';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/string-concatenation-looped\r\n * http://jsperf.com/adding-strings-to-an-array\r\n * http://jsperf.com/string-concatenation-versus-array-operations-with-join\r\n *\r\n * It is clearly inefficient to use a StringBuilder or LinkedList to build a string when you have a small set of string portions.\r\n * StringBuilder will really show it's benefit likely somewhere above 1000 items.\r\n *****************************/\r\n\r\n\r\nexport default\r\nclass StringBuilder implements IDisposable\r\n\t// Adding IDisposable allows for use with System.using();\r\n\t// ... and since this may end up being a large array container, might be a good idea to allow for flexible cleanup.\r\n{\r\n\t//noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _partArray:any[];\r\n\tprivate _latest:string; // AKA persistentString\r\n\r\n\tconstructor(...initial:any[])\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._latest = null;\r\n\t\t_._partArray = [];\r\n\t\t_.appendThese(initial);\r\n\t}\r\n\r\n\tprivate appendSingle(item:any):void\r\n\t{\r\n\t\tif(item!==null && item!==VOID0) {\r\n\t\t\tvar _ = this;\r\n\t\t\t_._latest = null;\r\n\t\t\tswitch(typeof item) {\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\titem = item.toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t_._partArray.push(item); // Other primitive types can keep their format since a number or boolean is a smaller footprint than a string.\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tappendThese(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(s=> _.appendSingle(s));\r\n\t\treturn _;\r\n\t}\r\n\r\n\tappend(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendThese(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLine(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendLines(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLines(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(\r\n\t\t\t\ti=>\r\n\t\t\t{\r\n\t\t\t\tif(i!==null && i!==VOID0) {\r\n\t\t\t\t\t_.appendSingle(i);\r\n\t\t\t\t\t_._partArray.push(\"\\r\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn _;\r\n\t}\r\n\r\n\t/** /// These methods can only efficiently be added if not using a single array.\r\n\t insert(index: number, value: string, count: number = 1): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\r\n\t remove(startIndex:number, length:number): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\t /**/\r\n\r\n\tget isEmpty()\r\n\t{\r\n\t\treturn this._partArray.length===0;\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\tvar latest = this._latest;\r\n\t\tif(!latest===null)\r\n\t\t\tthis._latest = latest = this._partArray.join();\r\n\r\n\t\treturn latest;\r\n\t}\r\n\r\n\tjoin(delimiter:string):string\r\n\t{\r\n\t\treturn this._partArray.join(delimiter);\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tthis._partArray.length = 0;\r\n\t\tthis._latest = null;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n}\r\n"]}