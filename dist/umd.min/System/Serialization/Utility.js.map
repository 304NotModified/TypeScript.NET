{"version":3,"sources":["System/Serialization/Utility.js","System/Serialization/Utility.ts"],"names":["dependencies","factory","module","exports","v","require","undefined","define","amd","toString","value","defaultForUnknown","Types_1","Type","UNDEFINED","STRING","BOOLEAN","TRUE","FALSE","NUMBER","EMPTY","isSerializable","serialize","ex","InvalidOperationException_1","InvalidOperationException","data","instance","hasMemberOfType","FUNCTION","toPrimitive","caseInsensitive","unknownHandler","toLowerCase","cleaned","replace","test","int","parseInt","isNaN","number","parseFloat"],"mappings":"CAAA,SAAWA,EAAcC,GACrB,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAcC,KAEzB,UAAW,UAAW,WAAY,2CAA4C,SAAUI,EAASF,GACjG,YCIJ,SAAAM,GACCC,EACAC,GAGA,GAAIP,GAASM,CACb,cAAcN,IAEb,IAAKQ,GAAAC,KAAKC,UACV,IAAKF,GAAAC,KAAKE,OACT,MAAOX,EACR,KAAKQ,GAAAC,KAAKG,QACT,MAAOZ,GAAIa,EAAOC,CACnB,KAAKN,GAAAC,KAAKM,OACT,MAAOC,GAAQhB,CAChB,SAEC,GAAO,OAAJA,EACF,MAAOA,EAER,IAAGiB,EAAejB,GACjB,MAAOA,GAAEkB,WACL,IAAGX,EACP,MAAOA,EAER,IAAMY,GAAK,GAAIC,GAAAC,0BAA0B,+CAEzC,MADAF,GAAGG,KAAY,MAAItB,EACbmB,GAMT,QAAAF,GAA+BM,GAE9B,MAAOf,GAAAC,KAAKe,gBAA+BD,EAAU,YAAaf,EAAAC,KAAKgB,UAGxE,QAAAC,GACCpB,EACAqB,EACAC,GAIA,GAAGtB,EAIF,OAFGqB,IAAiBrB,EAAQA,EAAMuB,eAE3BvB,GAEN,IAAK,OACJ,MAAO,KACR,KAAKE,GAAAC,KAAKC,UACT,MACD,KAAKG,GACJ,OAAO,CACR,KAAKC,GACJ,OAAO,CACR,SAEC,GAAMgB,GAAUxB,EAAMyB,QAAQ,eAAgBf,EAC9C,IAAGc,EAGF,GAAG,SAASE,KAAKF,GACjB,CACC,GAAMG,GAAMC,SAASJ,EACrB,KAAIK,MAAMF,GAAM,MAAOA,OAGxB,CACC,GAAMG,GAASC,WAAW/B,EAC1B,KAAI6B,MAAMC,GAAS,MAAOA,GAQzBR,IAAgBtB,EAAQsB,EAAetB,IAO7C,MAAOA,GAhGR,GAAAE,GAAAP,EAAA,YACAmB,EAAAnB,EAAA,2CAKMe,EAAQ,GAAIH,EAAO,OAAQC,EAAQ,OAEzCf,GAAAM,SAAAA,EAiCAN,EAAAkB,eAAAA,EAKAlB,EAAA2B,YAAAA","file":"Utility.js","sourcesContent":["(function (dependencies, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(dependencies, factory);\n    }\n})([\"require\", \"exports\", \"../Types\", \"../Exceptions/InvalidOperationException\"], function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../Types\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var EMPTY = '', TRUE = 'true', FALSE = 'false';\n    function toString(value, defaultForUnknown) {\n        var v = value;\n        switch (typeof v) {\n            case Types_1.Type.UNDEFINED:\n            case Types_1.Type.STRING:\n                return v;\n            case Types_1.Type.BOOLEAN:\n                return v ? TRUE : FALSE;\n            case Types_1.Type.NUMBER:\n                return EMPTY + v;\n            default:\n                if (v === null)\n                    return v;\n                if (isSerializable(v))\n                    return v.serialize();\n                else if (defaultForUnknown)\n                    return defaultForUnknown;\n                var ex = new InvalidOperationException_1.InvalidOperationException('Attempting to serialize unidentifiable type.');\n                ex.data['value'] = v;\n                throw ex;\n        }\n    }\n    exports.toString = toString;\n    function isSerializable(instance) {\n        return Types_1.Type.hasMemberOfType(instance, 'serialize', Types_1.Type.FUNCTION);\n    }\n    exports.isSerializable = isSerializable;\n    function toPrimitive(value, caseInsensitive, unknownHandler) {\n        if (value) {\n            if (caseInsensitive)\n                value = value.toLowerCase();\n            switch (value) {\n                case 'null':\n                    return null;\n                case Types_1.Type.UNDEFINED:\n                    return void (0);\n                case TRUE:\n                    return true;\n                case FALSE:\n                    return false;\n                default:\n                    var cleaned = value.replace(/^\\s+|,|\\s+$/g, EMPTY);\n                    if (cleaned) {\n                        if (/^\\d+$/g.test(cleaned)) {\n                            var int = parseInt(cleaned);\n                            if (!isNaN(int))\n                                return int;\n                        }\n                        else {\n                            var number = parseFloat(value);\n                            if (!isNaN(number))\n                                return number;\n                        }\n                    }\n                    if (unknownHandler)\n                        value = unknownHandler(value);\n                    break;\n            }\n        }\n        return value;\n    }\n    exports.toPrimitive = toPrimitive;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../Types\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ISerializable} from \"./ISerializable\";\r\nimport {Primitive} from \"../Primitive\";\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable|undefined|null,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tlet v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.UNDEFINED:\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v===null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(defaultForUnknown)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tconst ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable\r\n{\r\n\treturn Type.hasMemberOfType<ISerializable>(instance, 'serialize', Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive|null|undefined\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn void(0);\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconst cleaned = value.replace(/^\\s+|,|\\s+$/g, EMPTY);\r\n\t\t\t\tif(cleaned)\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}