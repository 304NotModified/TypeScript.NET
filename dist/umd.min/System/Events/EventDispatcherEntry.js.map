{"version":3,"sources":["System/Events/EventDispatcherEntry.js","System/Events/EventDispatcherEntry.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","Types_1","DisposableBase_1","ArgumentNullException_1","ArgumentException_1","Compare_1","EventDispatcherEntry","_super","type","listener","params","finalizer","call","isObject","hasMemberOfType","FUNCTION","_","_disposableObjectName","_onDispose","dispatch","e","wasDisposed","l","isFunction","handleEvent","matches","equals","other","areEquivalent","defineProperty","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,+BAAgC,sCAAuC,kCAAmC,cAAeN,IAExK,SAAUI,EAASF,GCVtB,YAEA,IAAAM,GAAAJ,EAAiB,YACjBK,EAAAL,EAA2B,gCAC3BM,EAAAN,EAAkC,uCAClCO,EAAAP,EAA8B,mCAC9BQ,EAAAR,EAA4B,cAE5BS,EAAA,SAAAC,GAKC,QAAAD,GACQE,EACAC,EACAC,EACPC,GAIA,GALA,SAAAD,IAAAA,EAAA,MAGAH,EAAAK,KAAA7B,KAAM4B,GALC5B,KAAAyB,KAAAA,EACAzB,KAAA0B,SAAAA,EACA1B,KAAA2B,OAAAA,GAKHD,EACH,KAAM,IAAIN,GAAAA,WAAsB,WACjC,IAAGF,EAAAA,WAAKY,SAASJ,KAAcR,EAAAA,WAAKa,gBAAgBL,EAAU,cAAeR,EAAAA,WAAKc,UACjF,KAAM,IAAIX,GAAAA,WAAkB,WAAY,wEAEzC,IAAIY,GAAIjC,IACRiC,GAAER,KAAOA,EACTQ,EAAEP,SAAWA,EACbO,EAAEN,OAASA,EACXM,EAAEC,sBAAwB,uBAsD5B,MA1EQnC,WAAAwB,EAAAC,GAuBGD,EAAAhB,UAAA4B,WAAV,WAECX,EAAAjB,UAAM4B,WAAUN,KAAA7B,MAChBA,KAAK0B,SAAW,MAQjBH,EAAAhB,UAAA6B,SAAA,SAASC,GAER,GAAIJ,GAAIjC,IACR,IAAGiC,EAAEK,YAAa,OAAO,CAEzB,IAAIC,GAAIN,EAAEP,SAAUzB,EAAIsC,GAAKF,EAAEZ,MAAMQ,EAAER,IAQvC,OAPGxB,KAECiB,EAAAA,WAAKsB,WAAWD,GACZN,EAAGP,SAASW,GAEIE,EAAGE,YAAYJ,IAEhCpC,GASRsB,EAAAhB,UAAAmC,QAAA,SAAQjB,EAAaC,GAEpB,GAAIO,GAAIjC,IACR,OAAOiC,GAAER,MAAMA,GACXQ,EAAEP,UAAUA,GAQjBH,EAAAhB,UAAAoC,OAAA,SAAOC,GAEN,GAAIX,GAAIjC,IACR,OAAOiC,GAAES,QAAQE,EAAMnB,KAAKmB,EAAMlB,WAC9BJ,EAAAuB,cAAcZ,EAAEN,OAAQiB,EAAMjB,QAAQ,IAE5CJ,GA1EQJ,EAAAA,WAFRX,QAAAsC,eAAAlC,EAAA,cAAAmC,OAAA,IDyDInC,EAAAA,WAAkBW","file":"System/Events/EventDispatcherEntry.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Disposable/DisposableBase\", \"../Exceptions/ArgumentNullException\", \"../Exceptions/ArgumentException\", \"../Compare\"], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Types_1 = require(\"../Types\");\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var ArgumentException_1 = require(\"../Exceptions/ArgumentException\");\n    var Compare_1 = require(\"../Compare\");\n    var EventDispatcherEntry = (function (_super) {\n        __extends(EventDispatcherEntry, _super);\n        function EventDispatcherEntry(type, listener, params, finalizer) {\n            if (params === void 0) { params = null; }\n            _super.call(this, finalizer);\n            this.type = type;\n            this.listener = listener;\n            this.params = params;\n            if (!listener)\n                throw new ArgumentNullException_1.default('listener');\n            if (Types_1.default.isObject(listener) && !Types_1.default.hasMemberOfType(listener, \"handleEvent\", Types_1.default.FUNCTION))\n                throw new ArgumentException_1.default('listener', \"is invalid type.  Must be a function or an object with 'handleEvent'.\");\n            var _ = this;\n            _.type = type;\n            _.listener = listener;\n            _.params = params;\n            _._disposableObjectName = \"EventDispatcherEntry\";\n        }\n        EventDispatcherEntry.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.listener = null;\n        };\n        EventDispatcherEntry.prototype.dispatch = function (e) {\n            var _ = this;\n            if (_.wasDisposed)\n                return false;\n            var l = _.listener, d = l && e.type == _.type;\n            if (d) {\n                if (Types_1.default.isFunction(l))\n                    _.listener(e);\n                else\n                    l.handleEvent(e);\n            }\n            return d;\n        };\n        EventDispatcherEntry.prototype.matches = function (type, listener) {\n            var _ = this;\n            return _.type == type\n                && _.listener == listener;\n        };\n        EventDispatcherEntry.prototype.equals = function (other) {\n            var _ = this;\n            return _.matches(other.type, other.listener)\n                && Compare_1.areEquivalent(_.params, other.params, false);\n        };\n        return EventDispatcherEntry;\n    }(DisposableBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = EventDispatcherEntry;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../IEquatable.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from \"../Types\";\r\nimport DisposableBase from \"../Disposable/DisposableBase\";\r\nimport ArgumentNullException from \"../Exceptions/ArgumentNullException\";\r\nimport ArgumentException from \"../Exceptions/ArgumentException\";\r\nimport {areEquivalent} from \"../Compare\";\r\n\r\nexport default\r\nclass EventDispatcherEntry<TParams>\r\nextends DisposableBase implements IEquatable<EventDispatcherEntry<TParams>>\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic type:string,\r\n\t\tpublic listener:IEventListener,\r\n\t\tpublic params:TParams = null,\r\n\t\tfinalizer?:() => void)//, useWeakReference: boolean = false)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\r\n\t\tif(!listener)\r\n\t\t\tthrow new ArgumentNullException('listener');\r\n\t\tif(Type.isObject(listener) && !Type.hasMemberOfType(listener, \"handleEvent\", Type.FUNCTION))\r\n\t\t\tthrow new ArgumentException('listener', \"is invalid type.  Must be a function or an object with 'handleEvent'.\");\r\n\r\n\t\tvar _ = this;\r\n\t\t_.type = type;\r\n\t\t_.listener = listener;\r\n\t\t_.params = params;\r\n\t\t_._disposableObjectName = \"EventDispatcherEntry\";\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.listener = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely dispatches an event if entry is not disposed and type matches.\r\n\t * @param e\r\n\t * @returns {IEventListener|boolean}\r\n\t */\r\n\tdispatch(e:Event):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_.wasDisposed) return false;\r\n\r\n\t\tvar l = _.listener, d = l && e.type==_.type;\r\n\t\tif(d)\r\n\t\t{\r\n\t\t\tif(Type.isFunction(l))\r\n\t\t\t\t(<any>_).listener(e); // Use 'this' to ensure call reference.\r\n\t\t\telse\r\n\t\t\t\t(<EventListenerObject>l).handleEvent(e);\r\n\t\t}\r\n\t\treturn d;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type and listener object only.\r\n\t * @param type\r\n\t * @param listener\r\n\t * @returns {boolean}\r\n\t */\r\n\tmatches(type:string, listener:IEventListener):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.type==type\r\n\t\t\t&& _.listener==listener;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type, listener, and priority.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:EventDispatcherEntry<TParams>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.matches(other.type,other.listener)\r\n\t\t\t&& areEquivalent(_.params, other.params, false);\r\n\t}\r\n}"]}