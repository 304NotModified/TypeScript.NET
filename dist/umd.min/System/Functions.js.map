{"version":3,"sources":["System/Functions.js","System/Functions.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Functions","prototype","Identity","x","True","False","Blank","rootFunctions","Object","freeze","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GCNtB,YAKA,IAmCOM,GAnCPA,EAAA,WAAA,QAAAA,MA6BA,MAtBCA,GAAAC,UAAAC,SAAA,SAAYC,GACV,MAAOA,IAMTH,EAAAC,UAAAG,KAAA,WACE,OAAO,GAMTJ,EAAAC,UAAAI,MAAA,WACE,OAAO,GAKTL,EAAAC,UAAAK,MAAA,aAEDN,KAEMO,EAA0B,GAAIP,IAIpC,SAAOA,GAMKA,EAAAE,SACRK,EAAcL,SAMNF,EAAAI,KACRG,EAAcH,KAMNJ,EAAAK,MACRE,EAAcF,MAKNL,EAAAM,MACRC,EAAcD,OA3BXN,IAAAA,OA+BPQ,OAAOC,OAAOT,GAEdQ,OAAAE,eAAAhB,EAAA,cAAAiB,OAAA,ID9CIjB,EAAAA,WC8CWM","file":"System/Functions.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\"], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Functions = (function () {\r\n        function Functions() {\r\n        }\r\n        Functions.prototype.Identity = function (x) { return x; };\r\n        Functions.prototype.True = function () { return true; };\r\n        Functions.prototype.False = function () { return false; };\r\n        Functions.prototype.Blank = function () { };\r\n        return Functions;\r\n    }());\r\n    var rootFunctions = new Functions();\r\n    var Functions;\r\n    (function (Functions) {\r\n        Functions.Identity = rootFunctions.Identity;\r\n        Functions.True = rootFunctions.True;\r\n        Functions.False = rootFunctions.False;\r\n        Functions.Blank = rootFunctions.Blank;\r\n    })(Functions || (Functions = {}));\r\n    Object.freeze(Functions);\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Functions;\r\n});\r\n//# sourceMappingURL=Functions.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n/**\r\n * Can be used statically or extended for varying different reusable function signatures.\r\n */\r\nclass Functions\r\n{\r\n\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {T}\r\n\t */\r\n\tIdentity<T>(x:T):T\r\n\t{ return x; }\r\n\r\n\t/**\r\n\t * Returns true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tTrue():boolean\r\n\t{ return true; }\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\tFalse():boolean\r\n\t{ return false; }\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\tBlank():void\r\n\t{ }\r\n}\r\n\r\nconst rootFunctions:Functions = new Functions();\r\n\r\n// Expose static versions.\r\n\r\nmodule Functions\r\n{\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport var Identity:<T>(x:T) => T\r\n\t\t= rootFunctions.Identity;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport var True:() => boolean\r\n\t\t= rootFunctions.True;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport var False:() => boolean\r\n\t\t= rootFunctions.False;\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\texport var Blank:() => void\r\n\t\t= rootFunctions.Blank;\r\n}\r\n\r\n// Make this read only.  Should still allow for sub-classing since extra methods are added to prototype.\r\nObject.freeze(Functions);\r\n\r\nexport default Functions;\r\n\r\n"]}