{"version":3,"sources":["System/Uri/QueryParams.js","System/Uri/QueryParams.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","encode","values","prefixIfNotEmpty","entries","Array","isArray","map","kvp","KeyValueExtract_1","key","value","KEY_VALUE_SEPARATOR","encodeValue","Object","keys","length","join","ENTRY_SEPARATOR","isUriComponentFormattable","toUriComponent","indexOf","encodeURIComponent","Serialization","toString","instance","Types_1","hasMemberOfType","FUNCTION","parse","query","entryHandler","deserialize","decodeValues","replace","split","_i","entries_1","entry","si","substring","decodeURIComponent","toPrimitive","parseToMap","result","prev","push","parseToArray","Separator","Entry","KeyValue","freeze"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,2BAA4B,sBAAuBN,IAElG,SAAUI,EAASF,GCHtB,YAkBA,SAAAM,GACCC,EACAC,GAEA,IAAID,EAAQ,MAAO,EACnB,IAAIE,EAiBJ,OAbCA,GAFEC,MAAMC,QAAQJ,GAENA,EAAOK,IAChB,SAAAC,GAAK,MAAAC,GAAAA,WAAgBD,EACpB,SAACE,EAAKC,GAAQ,MAAAD,GAAME,EAAsBC,EAAYF,OAM9CG,OAAOC,KAAKb,GAAQK,IAC7B,SAAAG,GAAM,MAAAA,GAAME,EAAsBC,EAAkBX,EAAQQ,OAItDN,EAAQY,QAAUb,EAAmB,IAAM,IAChDC,EAAQa,KAAKC,GAQjB,QAAAL,GAA4BF,GAE3B,GAAIf,GAAW,IACf,IAAGuB,EAA0BR,IAG5B,GADAf,EAAIe,EAAMS,iBACPxB,GAAqB,GAAhBA,EAAEyB,QAAQ,KACjB,KAAM,kDAIPzB,GAAI0B,mBAAmBC,EAAcC,SAAS5B,GAE/C,OAAOA,GAQR,QAAAuB,GAA0CM,GAEzC,MAAOC,GAAAA,WAAKC,gBAA0CF,EAAU,iBAAkBC,EAAAA,WAAKE,UAUxF,QAAAC,GACCC,EACAC,EACAC,EACAC,GAEA,GAHA,SAAAD,IAAAA,GAAA,GACA,SAAAC,IAAAA,GAAA,GAEGH,IAAUA,EAAQA,EAAMI,QAAQ,UAAW,KAG7C,IAAiB,GADb9B,GAAU0B,EAAMK,MAAMjB,GACTkB,EAAA,EAAAC,EAAAjC,EAAAgC,EAAAC,EAAArB,OAAAoB,IAAQ,CAArB,GAAIE,GAAKD,EAAAD,GAMRG,EAAKD,EAAMjB,QAAQT,EACvB,IAAQ,IAAL2B,EACH,CACC,GAAI7B,GAAM4B,EAAME,UAAU,EAAGD,GACzB5B,EAAa2B,EAAME,UAAUD,EAAK,EACnCN,KAActB,EAAQ8B,mBAAmB9B,IACzCqB,IAAarB,EAAQY,EAAcmB,YAAY/B,IAClDoB,EAAarB,EAAKC,KAatB,QAAAgC,GACCb,EACAE,EACAC,GADA,SAAAD,IAAAA,GAAA,GACA,SAAAC,IAAAA,GAAA,EAEA,IAAIW,KAgBJ,OAfAf,GAAMC,EACL,SAACpB,EAAKC,GAEL,GAAG,IAAO,GACV,CACC,GAAIkC,GAAWD,EAAOlC,EACjBL,OAAMC,QAAQuC,KAClBD,EAAOlC,GAAOmC,GAAQA,IACvBA,EAAKC,KAAKnC,OAGViC,GAAOlC,GAAOC,GAEhBqB,EACAC,GACMW,EAUR,QAAAG,GACCjB,EACAE,EACAC,GADA,SAAAD,IAAAA,GAAA,GACA,SAAAC,IAAAA,GAAA,EAEA,IAAIW,KAMJ,OALAf,GAAMC,EACL,SAACpB,EAAKC,GAAUiC,EAAOE,MAAMpC,IAAKA,EAAKC,MAAOA,KAC9CqB,EACAC,GAEMW,EA7JR,GAAAlB,GAAA7B,EAAiB,YACL0B,EAAa1B,EAAM,4BAC/BY,EAAAZ,EAA4B,sBAQ3BqB,EAAsB,IACtBN,EAAsB,GAKPjB,GAAAM,OAAMA,EA+BNN,EAAAkB,YAAWA,EAqBXlB,EAAAwB,0BAAyBA,EAYzBxB,EAAAkC,MAAKA,EAmCLlC,EAAAgD,WAAUA,EA+BVhD,EAAAoD,aAAYA,CAe5B,IAAcC,IAAd,SAAcA,GAEAA,EAAAC,MAAe/B,EACf8B,EAAAE,SAAkBtC,GAHlBoC,EAAArD,EAAAqD,YAAArD,EAAAqD,eAKdlC,OAAOqC,OAAOH","file":"System/Uri/QueryParams.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../Types', '../Serialization/Utility', '../KeyValueExtract'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Types_1 = require('../Types');\r\n    var Serialization = require('../Serialization/Utility');\r\n    var KeyValueExtract_1 = require('../KeyValueExtract');\r\n    var ENTRY_SEPARATOR = \"&\", KEY_VALUE_SEPARATOR = \"=\";\r\n    function encode(values, prefixIfNotEmpty) {\r\n        if (!values)\r\n            return '';\r\n        var entries;\r\n        if (Array.isArray(values)) {\r\n            entries = values.map(function (kvp) { return KeyValueExtract_1.default(kvp, function (key, value) { return key + KEY_VALUE_SEPARATOR + encodeValue(value); }); });\r\n        }\r\n        else {\r\n            entries = Object.keys(values).map(function (key) { return key + KEY_VALUE_SEPARATOR + encodeValue(values[key]); });\r\n        }\r\n        return (entries.length && prefixIfNotEmpty ? '?' : '')\r\n            + entries.join(ENTRY_SEPARATOR);\r\n    }\r\n    exports.encode = encode;\r\n    function encodeValue(value) {\r\n        var v = null;\r\n        if (isUriComponentFormattable(value)) {\r\n            v = value.toUriComponent();\r\n            if (v && v.indexOf('&') != 1)\r\n                throw '.toUriComponent() did not encode the value.';\r\n        }\r\n        else {\r\n            v = encodeURIComponent(Serialization.toString(v));\r\n        }\r\n        return v;\r\n    }\r\n    exports.encodeValue = encodeValue;\r\n    function isUriComponentFormattable(instance) {\r\n        return Types_1.default.hasMemberOfType(instance, \"toUriComponent\", Types_1.default.FUNCTION);\r\n    }\r\n    exports.isUriComponentFormattable = isUriComponentFormattable;\r\n    function parse(query, entryHandler, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        if (query && (query = query.replace(/^\\s*\\?+/, ''))) {\r\n            var entries = query.split(ENTRY_SEPARATOR);\r\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n                var entry = entries_1[_i];\r\n                var si = entry.indexOf(KEY_VALUE_SEPARATOR);\r\n                if (si != -1) {\r\n                    var key = entry.substring(0, si);\r\n                    var value = entry.substring(si + 1);\r\n                    if (decodeValues)\r\n                        value = decodeURIComponent(value);\r\n                    if (deserialize)\r\n                        value = Serialization.toPrimitive(value);\r\n                    entryHandler(key, value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.parse = parse;\r\n    function parseToMap(query, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        var result = {};\r\n        parse(query, function (key, value) {\r\n            if ((key) in (result)) {\r\n                var prev = result[key];\r\n                if (!(Array.isArray(prev)))\r\n                    result[key] = prev = [prev];\r\n                prev.push(value);\r\n            }\r\n            else\r\n                result[key] = value;\r\n        }, deserialize, decodeValues);\r\n        return result;\r\n    }\r\n    exports.parseToMap = parseToMap;\r\n    function parseToArray(query, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        var result = [];\r\n        parse(query, function (key, value) { result.push({ key: key, value: value }); }, deserialize, decodeValues);\r\n        return result;\r\n    }\r\n    exports.parseToArray = parseToArray;\r\n    var Separator;\r\n    (function (Separator) {\r\n        Separator.Entry = ENTRY_SEPARATOR;\r\n        Separator.KeyValue = KEY_VALUE_SEPARATOR;\r\n    })(Separator = exports.Separator || (exports.Separator = {}));\r\n    Object.freeze(Separator);\r\n});\r\n//# sourceMappingURL=QueryParams.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../Types';\r\nimport * as Serialization from '../Serialization/Utility';\r\nimport extractKeyValue from '../KeyValueExtract';\r\n\r\n/*\r\n * This module is provided as a lighter weight utility for acquiring query params.\r\n * If more detailed operations are necessary, consider importing QueryBuilder.\r\n */\r\n\r\nconst\r\n\tENTRY_SEPARATOR     = \"&\",\r\n\tKEY_VALUE_SEPARATOR = \"=\";\r\n\r\n/**\r\n * Returns the encoded URI string\r\n */\r\nexport function encode(\r\n\tvalues:IUriComponentMap|StringKeyValuePair<Primitive>[],\r\n\tprefixIfNotEmpty?:boolean):string\r\n{\r\n\tif(!values) return '';\r\n\tvar entries:string[];\r\n\r\n\tif(Array.isArray(values))\r\n\t{\r\n\t\tentries = values.map(\r\n\t\t\tkvp=>extractKeyValue(kvp,\r\n\t\t\t\t(key, value)=>key + KEY_VALUE_SEPARATOR + encodeValue(value)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tentries = Object.keys(values).map(\r\n\t\t\tkey=> key + KEY_VALUE_SEPARATOR + encodeValue((<any>values)[key])\r\n\t\t);\r\n\t}\r\n\r\n\treturn (entries.length && prefixIfNotEmpty ? '?' : '')\r\n\t\t+ entries.join(ENTRY_SEPARATOR);\r\n}\r\n\r\n/**\r\n * Converts any primitive, serializable or uri-component object to an encoded string.\r\n * @param value\r\n * @returns {string}\r\n */\r\nexport function encodeValue(value:Primitive|ISerializable|IUriComponentFormattable):string\r\n{\r\n\tvar v:string = null;\r\n\tif(isUriComponentFormattable(value))\r\n\t{\r\n\t\tv = value.toUriComponent();\r\n\t\tif(v && v.indexOf('&')!=1)\r\n\t\t\tthrow '.toUriComponent() did not encode the value.';\r\n\t}\r\n\telse\r\n\t{\r\n\t\tv = encodeURIComponent(Serialization.toString(v));\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n/**\r\n * A shortcut for identifying an IUriComponentFormattable object.\r\n * @param instance\r\n * @returns {boolean}\r\n */\r\nexport function isUriComponentFormattable(instance:any):instance is IUriComponentFormattable\r\n{\r\n\treturn Type.hasMemberOfType<IUriComponentFormattable>(instance, \"toUriComponent\", Type.FUNCTION);\r\n}\r\n\r\n/**\r\n * Parses a string for valid query param entries and pipes them through a handler.\r\n * @param query\r\n * @param entryHandler\r\n * @param deserialize Default is true.\r\n * @param decodeValues Default is true.\r\n */\r\nexport function parse(\r\n\tquery:string,\r\n\tentryHandler:(key:string, value:Primitive)=>void,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):void\r\n{\r\n\tif(query && (query = query.replace(/^\\s*\\?+/, '')))\r\n\t{\r\n\t\tvar entries = query.split(ENTRY_SEPARATOR);\r\n\t\tfor(let entry of entries)\r\n\t\t{\r\n\t\t\t/*\r\n\t\t\t * Since it is technically possible to have multiple '=' we need to identify the first one.\r\n\t\t\t * And if there is no '=' then the entry is ignored.\r\n\t\t\t */\r\n\t\t\tvar si = entry.indexOf(KEY_VALUE_SEPARATOR);\r\n\t\t\tif(si!= -1)\r\n\t\t\t{\r\n\t\t\t\tvar key = entry.substring(0, si);\r\n\t\t\t\tvar value = <any>entry.substring(si + 1);\r\n\t\t\t\tif(decodeValues) value = decodeURIComponent(value);\r\n\t\t\t\tif(deserialize) value = Serialization.toPrimitive(value);\r\n\t\t\t\tentryHandler(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Parses a string for valid query params and returns a key-value map of the entries.\r\n * @param query\r\n * @param deserialize Default is true.\r\n * @param decodeValues Default is true.\r\n * @returns {IMap<Primitive>}\r\n */\r\nexport function parseToMap(\r\n\tquery:string,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):IMap<Primitive|Primitive[]>\r\n{\r\n\tvar result:IMap<Primitive|Primitive[]> = {};\r\n\tparse(query,\r\n\t\t(key, value)=>\r\n\t\t{\r\n\t\t\tif((key)in(result))\r\n\t\t\t{\r\n\t\t\t\tvar prev:any = result[key];\r\n\t\t\t\tif(!(Array.isArray(prev)))\r\n\t\t\t\t\tresult[key] = prev = [prev];\r\n\t\t\t\tprev.push(value);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult[key] = value;\r\n\t\t},\r\n\t\tdeserialize,\r\n\t\tdecodeValues);\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Parses a string for valid query params and returns a key-value pair array of the entries.\r\n * @param query\r\n * @param deserialize Default is true.\r\n * @param decodeValues Default is true.\r\n * @returns {IKeyValuePair<string, Primitive>[]}\r\n */\r\nexport function parseToArray(\r\n\tquery:string,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):IStringKeyValuePair<Primitive>[]\r\n{\r\n\tvar result:IStringKeyValuePair<Primitive>[] = [];\r\n\tparse(query,\r\n\t\t(key, value)=> {result.push({key: key, value: value});},\r\n\t\tdeserialize,\r\n\t\tdecodeValues\r\n\t);\r\n\treturn result;\r\n}\r\n\r\n\r\nexport module Separator\r\n{\r\n\texport const Entry:string = ENTRY_SEPARATOR;\r\n\texport const KeyValue:string = KEY_VALUE_SEPARATOR;\r\n}\r\nObject.freeze(Separator);\r\n\r\n"]}