{"version":3,"sources":["System/Uri/QueryParams.js","System/Uri/QueryParams.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","encode","values","prefixIfNotEmpty","encodeValue","value","parse","query","entryHandler","deserialize","decodeValues","parseToMap","parseToArray","Types_1","Serialization","ENTRY_SEPARATOR","KEY_VALUE_SEPARATOR","Separator","Object","freeze"],"mappings":";;;;CAIA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,WAAY,4BAA6B,SAAUI,EAASF,GCYtF,QAAAM,GACCC,EACAC,GAEAF,IAAIA,EAAQA,MAAOA,EACnBA,IAAIA,KAEJA,IAAGA,YAAkBA,OAEpBA,IAAeA,GAAAA,GAAAA,EAAXA,EAAAA,EAAAA,OAAAA,IAAkBA,CAAlBA,GAAIA,GAAOA,EAAMA,EAEjBA,IAAKA,EAAQA,KAAKA,EAAIA,IAAMA,EAAsBA,EAAYA,EAAIA,YAMtEA,KAAaA,GADTA,GAAOA,OAAOA,KAAKA,GACVA,EAAAA,EAATA,EAAAA,EAAAA,OAAAA,IAAcA,CAAdA,GAAIA,GAAKA,EAAIA,EAEhBA,GAAQA,KAAKA,EAAIA,EAAsBA,EAAkBA,EAAQA,KAInEA,OAAQA,EAAQA,QAAUA,EAAmBA,IAAMA,IAChDA,EAAQA,KAAKA,GAQjB,QAAAG,GAA4BC,GAE3BD,GAAIA,GAASA,CACbA,UAAUA,IAAGA,EAAAA,WAAKA,QAAUA,kBAAoBA,IAG/CA,GADAA,EAAIA,EAAEA,iBACHA,GAAqBA,GAAhBA,EAAEA,QAAQA,KACjBA,KAAMA,kDAIPA,GAAIA,mBAAmBA,EAAcA,SAASA,GAE/CA,OAAOA,GAUR,QAAAE,GACCC,EACAC,EACAC,EACAC,GAEAJ,GAHAA,SAAAA,IAAAA,GAAAA,GACAA,SAAAA,IAAAA,GAAAA,GAEGA,IAAUA,EAAQA,EAAMA,QAAQA,UAAWA,KAG7CA,IAAiBA,GADbA,GAAUA,EAAMA,MAAMA,GACTA,EAAAA,EAAbA,EAAAA,EAAAA,OAAAA,IAAqBA,CAArBA,GAAIA,GAASA,EAAOA,GAMnBA,EAAKA,EAAMA,QAAQA,EACvBA,IAAQA,IAALA,EACHA,CACCA,GAAIA,GAAMA,EAAMA,UAAUA,EAAGA,GACzBA,EAAaA,EAAMA,UAAUA,EAAKA,EACnCA,KAAcA,EAAQA,mBAAmBA,IACzCA,IAAaA,EAAQA,EAAcA,YAAYA,IAClDA,EAAaA,EAAKA,KAatB,QAAAK,GACCJ,EACAE,EACAC,GADAC,SAAAA,IAAAA,GAAAA,GACAA,SAAAA,IAAAA,GAAAA,EAEAA,IAAIA,KAcJA,OAbAA,GAAMA,EACLA,SAACA,EAAKA,GACLA,GAAGA,IAAOA,GAAQA,CACjBA,GAAIA,GAAWA,EAAOA,EACjBA,aAAgBA,SACpBA,EAAOA,GAAOA,GAAQA,IACvBA,EAAKA,KAAKA,OAGVA,GAAOA,GAAOA,GAEhBA,EACAA,GACMA,EAUR,QAAAC,GACCL,EACAE,EACAC,GADAE,SAAAA,IAAAA,GAAAA,GACAA,SAAAA,IAAAA,GAAAA,EAEAA,IAAIA,KAMJA,OALAA,GAAMA,EACLA,SAACA,EAAKA,GAAUA,EAAOA,MAAMA,IAAKA,EAAKA,MAAOA,KAC9CA,EACAA,GAEMA,EAjJR,GAAAC,GAAAhB,EAAiB,YACLiB,EAAajB,EAAM,4BAQ/BkB,EAAsB,IACtBC,EAAsB,GAKNrB,GAAAM,OAAMA,EAgCNN,EAAAS,YAAWA,EAuBXT,EAAAW,MAAKA,EAmCLX,EAAAgB,WAAUA,EA6BVhB,EAAAiB,aAAYA,CAc5B,IAAcK,IAAd,SAAcA,GAEAA,EAAAA,MAAeA,EACfA,EAAAA,SAAkBA,GAHlBA,EAAAtB,EAAAsB,YAAAtB,EAAAsB,eAKdC,OAAOC,OAAOF","file":"System/Uri/QueryParams.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../Types', '../Serialization/Utility'], function (require, exports) {\r\n    ///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n    ///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n    ///<reference path=\"../Primitive.d.ts\"/>\r\n    var Types_1 = require('../Types');\r\n    var Serialization = require('../Serialization/Utility');\r\n    var ENTRY_SEPARATOR = \"&\", KEY_VALUE_SEPARATOR = \"=\";\r\n    function encode(values, prefixIfNotEmpty) {\r\n        if (!values)\r\n            return '';\r\n        var entries = [];\r\n        if (values instanceof Array) {\r\n            for (var _i = 0; _i < values.length; _i++) {\r\n                var kvp = values[_i];\r\n                if (kvp)\r\n                    entries.push(kvp.key + KEY_VALUE_SEPARATOR + encodeValue(kvp.value));\r\n            }\r\n        }\r\n        else {\r\n            var keys = Object.keys(values);\r\n            for (var _a = 0; _a < keys.length; _a++) {\r\n                var k = keys[_a];\r\n                entries.push(k + KEY_VALUE_SEPARATOR + encodeValue(values[k]));\r\n            }\r\n        }\r\n        return (entries.length && prefixIfNotEmpty ? '?' : '')\r\n            + entries.join(ENTRY_SEPARATOR);\r\n    }\r\n    exports.encode = encode;\r\n    function encodeValue(value) {\r\n        var v = value;\r\n        if (typeof v == Types_1.default.OBJECT && \"toUriComponent\" in v) {\r\n            v = v.toUriComponent();\r\n            if (v && v.indexOf('&') != 1)\r\n                throw '.toUriComponent() did not encode the value.';\r\n        }\r\n        else {\r\n            v = encodeURIComponent(Serialization.toString(v));\r\n        }\r\n        return v;\r\n    }\r\n    exports.encodeValue = encodeValue;\r\n    function parse(query, entryHandler, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        if (query && (query = query.replace(/^\\s*\\?+/, ''))) {\r\n            var entries = query.split(ENTRY_SEPARATOR);\r\n            for (var _i = 0; _i < entries.length; _i++) {\r\n                var entry = entries[_i];\r\n                var si = entry.indexOf(KEY_VALUE_SEPARATOR);\r\n                if (si != -1) {\r\n                    var key = entry.substring(0, si);\r\n                    var value = entry.substring(si + 1);\r\n                    if (decodeValues)\r\n                        value = decodeURIComponent(value);\r\n                    if (deserialize)\r\n                        value = Serialization.toPrimitive(value);\r\n                    entryHandler(key, value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.parse = parse;\r\n    function parseToMap(query, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        var result = {};\r\n        parse(query, function (key, value) {\r\n            if (key in result) {\r\n                var prev = result[key];\r\n                if (!(prev instanceof Array))\r\n                    result[key] = prev = [prev];\r\n                prev.push(value);\r\n            }\r\n            else\r\n                result[key] = value;\r\n        }, deserialize, decodeValues);\r\n        return result;\r\n    }\r\n    exports.parseToMap = parseToMap;\r\n    function parseToArray(query, deserialize, decodeValues) {\r\n        if (deserialize === void 0) { deserialize = true; }\r\n        if (decodeValues === void 0) { decodeValues = true; }\r\n        var result = [];\r\n        parse(query, function (key, value) { result.push({ key: key, value: value }); }, deserialize, decodeValues);\r\n        return result;\r\n    }\r\n    exports.parseToArray = parseToArray;\r\n    var Separator;\r\n    (function (Separator) {\r\n        Separator.Entry = ENTRY_SEPARATOR;\r\n        Separator.KeyValue = KEY_VALUE_SEPARATOR;\r\n    })(Separator = exports.Separator || (exports.Separator = {}));\r\n    Object.freeze(Separator);\r\n});\r\n//# sourceMappingURL=QueryParams.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\nimport Type from '../Types';\r\nimport * as Serialization from '../Serialization/Utility';\r\n\r\n/*\r\n * This module is provided as a lighter weight utility for acquiring query params.\r\n * If more detailed operations are necessary, consider importing QueryBuilder.\r\n */\r\n\r\nconst\r\nENTRY_SEPARATOR     = \"&\",\r\nKEY_VALUE_SEPARATOR = \"=\";\r\n\r\n/**\r\n * Returns the encoded URI string\r\n */\r\nexport function encode(\r\n\tvalues:IUriComponentMap|IKeyValuePair<string,Primitive>[],\r\n\tprefixIfNotEmpty?:boolean):string\r\n{\r\n\tif(!values) return '';\r\n\tvar entries:string[] = [];\r\n\r\n\tif(values instanceof Array)\r\n\t{\r\n\t\tfor(let kvp of values)\r\n\t\t{\r\n\t\t\tif(kvp) entries.push(kvp.key + KEY_VALUE_SEPARATOR + encodeValue(kvp.value));\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvar keys = Object.keys(values);\r\n\t\tfor(let k of keys)\r\n\t\t{\r\n\t\t\tentries.push(k + KEY_VALUE_SEPARATOR + encodeValue((<any>values)[k]));\r\n\t\t}\r\n\t}\r\n\r\n\treturn (entries.length && prefixIfNotEmpty ? '?' : '')\r\n\t\t+ entries.join(ENTRY_SEPARATOR);\r\n}\r\n\r\n/**\r\n * Converts any primitive, serializable or uri-component object to an encoded string.\r\n * @param value\r\n * @returns {string}\r\n */\r\nexport function encodeValue(value:Primitive|ISerializable|IUriComponentFormattable):string\r\n{\r\n\tvar v = <any>value;\r\n\tif(typeof v==Type.OBJECT && \"toUriComponent\" in v)\r\n\t{\r\n\t\tv = v.toUriComponent();\r\n\t\tif(v && v.indexOf('&')!=1)\r\n\t\t\tthrow '.toUriComponent() did not encode the value.';\r\n\t}\r\n\telse\r\n\t{\r\n\t\tv = encodeURIComponent(Serialization.toString(v));\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n/**\r\n * Parses a string for valid query param entries and pipes them through a handler.\r\n * @param query\r\n * @param entryHandler\r\n * @param deserialize\r\n * @param decodeValues\r\n */\r\nexport function parse(\r\n\tquery:string,\r\n\tentryHandler:(key:string, value:Primitive)=>void,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):void\r\n{\r\n\tif(query && (query = query.replace(/^\\s*\\?+/, '')))\r\n\t{\r\n\t\tvar entries = query.split(ENTRY_SEPARATOR);\r\n\t\tfor(let entry of entries)\r\n\t\t{\r\n\t\t\t/*\r\n\t\t\t * Since it is technically possible to have multiple '=' we need to identify the first one.\r\n\t\t\t * And if there is no '=' then the entry is ignored.\r\n\t\t\t */\r\n\t\t\tvar si = entry.indexOf(KEY_VALUE_SEPARATOR);\r\n\t\t\tif(si!= -1)\r\n\t\t\t{\r\n\t\t\t\tvar key = entry.substring(0, si);\r\n\t\t\t\tvar value = <any>entry.substring(si + 1);\r\n\t\t\t\tif(decodeValues) value = decodeURIComponent(value);\r\n\t\t\t\tif(deserialize) value = Serialization.toPrimitive(value);\r\n\t\t\t\tentryHandler(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Parses a string for valid query params and returns a key-value map of the entries.\r\n * @param query\r\n * @param deserialize\r\n * @param decodeValues\r\n * @returns {IMap<Primitive>}\r\n */\r\nexport function parseToMap(\r\n\tquery:string,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):IMap<Primitive|Primitive[]>\r\n{\r\n\tvar result:IMap<Primitive|Primitive[]> = {};\r\n\tparse(query,\r\n\t\t(key, value)=> {\r\n\t\t\tif(key in result) {\r\n\t\t\t\tvar prev:any = result[key];\r\n\t\t\t\tif(!(prev instanceof Array))\r\n\t\t\t\t\tresult[key] = prev = [prev];\r\n\t\t\t\tprev.push(value);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult[key] = value;\r\n\t\t},\r\n\t\tdeserialize,\r\n\t\tdecodeValues);\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Parses a string for valid query params and returns a key-value pair array of the entries.\r\n * @param query\r\n * @param deserialize\r\n * @param decodeValues\r\n * @returns {IKeyValuePair<string, Primitive>[]}\r\n */\r\nexport function parseToArray(\r\n\tquery:string,\r\n\tdeserialize:boolean = true,\r\n\tdecodeValues:boolean = true):IKeyValuePair<string,Primitive>[]\r\n{\r\n\tvar result:IKeyValuePair<string,Primitive>[] = [];\r\n\tparse(query,\r\n\t\t(key, value)=> {result.push({key: key, value: value});},\r\n\t\tdeserialize,\r\n\t\tdecodeValues\r\n\t);\r\n\treturn result;\r\n}\r\n\r\nexport module Separator\r\n{\r\n\texport const Entry:string = ENTRY_SEPARATOR;\r\n\texport const KeyValue:string = KEY_VALUE_SEPARATOR;\r\n}\r\nObject.freeze(Separator);\r\n\r\n"]}