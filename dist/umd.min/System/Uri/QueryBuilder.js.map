{"version":3,"sources":["System/Uri/QueryBuilder.ts","System/Uri/QueryBuilder.js"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","deps","factory","module","exports","v","require","undefined","define","amd","Types_1","QueryParams","OrderedStringKeyDictionary_1","ENTRY_SEPARATOR","KEY_VALUE_SEPARATOR","QueryBuilder","_super","QueryBuilder.constructor","QueryBuilder.importQuery","QueryBuilder.importFromString","QueryBuilder.init","QueryBuilder.encode","QueryBuilder.toString","defineProperty","value"],"mappings":"AAIA,YCHA,IAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,WAAY,gBAAiB,0DAA2D,SAAUI,EAASF,GDHrI,GAAAM,GAAAJ,EAAiB,YAELK,EAAWL,EAAM,iBAC7BM,EAAAN,EAAuC,0DAGvCO,EAAsB,IACtBC,EAAsB,IAOtBC,EAAA,SAAAC,GAICD,QAAAA,GACCA,EACAA,GAAAE,SAAAA,IAAAA,GAAAA,GAEAA,EAAAA,KAAAA,MAEAA,KAAKA,YAAYA,EAAMA,GA4FzBF,MArG2BA,WAAAA,EAAAA,GAY1BA,EAAAA,UAAAA,YAAAA,SACCA,EACAA,GAeAG,MAfAA,UAAAA,IAAAA,GAAAA,GAEGA,EAAAA,WAAKA,SAASA,GAEhBA,KAAKA,iBAAyBA,EAAOA,GAE9BA,MAAMA,QAAQA,GAErBA,KAAKA,YAAYA,GAIjBA,KAAKA,UAA4BA,GAG3BA,MAURH,EAAAA,UAAAA,iBAAAA,SACCA,EACAA,EACAA,GADAI,SAAAA,IAAAA,GAAAA,GACAA,SAAAA,IAAAA,GAAAA,EAEAA,IAAIA,GAAIA,IAkBRA,OAjBAA,GAAYA,MAAMA,EACjBA,SAACA,EAAKA,GAELA,GAAGA,EAAEA,YAAYA,GACjBA,CACCA,GAAIA,GAAOA,EAAEA,SAASA,EACnBA,OAAMA,QAAQA,GAChBA,EAAKA,KAAKA,GAEVA,EAAEA,SAASA,GAAyBA,EAAMA,QAG3CA,GAAEA,SAASA,EAAKA,IAElBA,EACAA,GAEMA,MAGDJ,EAAAA,KAAPA,SACCA,EACAA,GAEAK,MAFAA,UAAAA,IAAAA,GAAAA,GAEOA,GAAIA,GAAaA,EAAOA,IAOhCL,EAAAA,UAAAA,OAAAA,SAAOA,GAINM,IAAaA,GAFTA,MACAA,EAAOA,KAAKA,KACHA,EAAAA,EAATA,EAAAA,EAAAA,OAAAA,IAKHA,IAAaA,GALNA,GAAKA,EAAIA,GAEZA,EAAQA,KAAKA,SAASA,GAGbA,EAAAA,EAAAA,EAAAA,MAAMA,QAAQA,GAASA,GAASA,GAAzCA,EAAAA,EAAAA,OAAAA,IAAgDA,CAAhDA,GAAIA,GAACA,EAAAA,EAERA,GAAQA,KACPA,EAAIA,EACFA,EAAYA,YAA+BA,IAIhDA,OAAQA,EAAQA,QAAUA,EAAmBA,IAAMA,IAChDA,EAAQA,KAAKA,IAGjBN,EAAAA,UAAAA,SAAAA,WAECO,MAAOA,MAAKA,UAEdP,GArG2BH,EAAAA,WAD3Bb,QAAAwB,eAAAnB,EAAA,cAAAoB,OAAA,IC4DIpB,EAAAA,WAAkBW","file":"System/Uri/QueryBuilder.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../Serialization/ISerializable.d.ts\"/>\r\n///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n///<reference path=\"../Primitive.d.ts\"/>\r\nimport Type from '../Types';\r\nimport * as Serialization from '../Serialization/Utility';\r\nimport * as QueryParams from './QueryParams';\r\nimport OrderedStringKeyDictionary from '../Collections/Dictionaries/OrderedStringKeyDictionary';\r\n\r\nconst\r\nENTRY_SEPARATOR     = \"&\",\r\nKEY_VALUE_SEPARATOR = \"=\";\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport default\r\nclass QueryBuilder extends OrderedStringKeyDictionary<UriComponentValue|UriComponentValue[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:string|IUriComponentMap|StringKeyValuePair<UriComponentValue|UriComponentValue[]>[],\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query,decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:string|IUriComponentMap|StringKeyValuePair<UriComponentValue|UriComponentValue[]>[],\r\n\t\tdecodeValues:boolean = true):QueryBuilder {\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(Array.isArray(query))\r\n\t\t{\r\n\t\t\tthis.importPairs(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<IUriComponentMap>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tQueryParams.parse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar prev = _.getValue(key);\r\n\t\t\t\t\tif(Array.isArray(prev))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponentValue>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tstatic init(\r\n\t\tquery:string|IUriComponentMap|StringKeyValuePair<UriComponentValue|UriComponentValue[]>[],\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\tvar entries:string[] = [];\r\n\t\tvar keys = this.keys;\r\n\t\tfor(let k of keys)\r\n\t\t{\r\n\t\t\tvar value = this.getValue(k);\r\n\t\t\t// Since the values can either be UriComponentValues or an array of UriComponentValues..\r\n\t\t\t// This creates a single code path for both options.\r\n\t\t\tfor(let v of Array.isArray(value) ? value : [value])\r\n\t\t\t{\r\n\t\t\t\tentries.push(\r\n\t\t\t\t\tk + KEY_VALUE_SEPARATOR\r\n\t\t\t\t\t+ QueryParams.encodeValue(<UriComponentValue>v));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (entries.length && prefixIfNotEmpty ? '?' : '')\r\n\t\t\t+ entries.join(ENTRY_SEPARATOR);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n","'use strict';\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../Types', './QueryParams', '../Collections/Dictionaries/OrderedStringKeyDictionary'], function (require, exports) {\r\n    ///<reference path=\"../Collections/Dictionaries/IDictionary.d.ts\"/>\r\n    ///<reference path=\"../Serialization/ISerializable.d.ts\"/>\r\n    ///<reference path=\"IUriComponentFormattable.d.ts\"/>\r\n    ///<reference path=\"../Primitive.d.ts\"/>\r\n    var Types_1 = require('../Types');\r\n    var QueryParams = require('./QueryParams');\r\n    var OrderedStringKeyDictionary_1 = require('../Collections/Dictionaries/OrderedStringKeyDictionary');\r\n    var ENTRY_SEPARATOR = \"&\", KEY_VALUE_SEPARATOR = \"=\";\r\n    var QueryBuilder = (function (_super) {\r\n        __extends(QueryBuilder, _super);\r\n        function QueryBuilder(query, decodeValues) {\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            _super.call(this);\r\n            this.importQuery(query, decodeValues);\r\n        }\r\n        QueryBuilder.prototype.importQuery = function (query, decodeValues) {\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            if (Types_1.default.isString(query)) {\r\n                this.importFromString(query, decodeValues);\r\n            }\r\n            else if (Array.isArray(query)) {\r\n                this.importPairs(query);\r\n            }\r\n            else {\r\n                this.importMap(query);\r\n            }\r\n            return this;\r\n        };\r\n        QueryBuilder.prototype.importFromString = function (values, deserialize, decodeValues) {\r\n            if (deserialize === void 0) { deserialize = true; }\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            var _ = this;\r\n            QueryParams.parse(values, function (key, value) {\r\n                if (_.containsKey(key)) {\r\n                    var prev = _.getValue(key);\r\n                    if (Array.isArray(prev))\r\n                        prev.push(value);\r\n                    else\r\n                        _.setValue(key, [prev, value]);\r\n                }\r\n                else\r\n                    _.setValue(key, value);\r\n            }, deserialize, decodeValues);\r\n            return this;\r\n        };\r\n        QueryBuilder.init = function (query, decodeValues) {\r\n            if (decodeValues === void 0) { decodeValues = true; }\r\n            return new QueryBuilder(query, decodeValues);\r\n        };\r\n        QueryBuilder.prototype.encode = function (prefixIfNotEmpty) {\r\n            var entries = [];\r\n            var keys = this.keys;\r\n            for (var _i = 0; _i < keys.length; _i++) {\r\n                var k = keys[_i];\r\n                var value = this.getValue(k);\r\n                for (var _a = 0, _b = Array.isArray(value) ? value : [value]; _a < _b.length; _a++) {\r\n                    var v = _b[_a];\r\n                    entries.push(k + KEY_VALUE_SEPARATOR\r\n                        + QueryParams.encodeValue(v));\r\n                }\r\n            }\r\n            return (entries.length && prefixIfNotEmpty ? '?' : '')\r\n                + entries.join(ENTRY_SEPARATOR);\r\n        };\r\n        QueryBuilder.prototype.toString = function () {\r\n            return this.encode();\r\n        };\r\n        return QueryBuilder;\r\n    })(OrderedStringKeyDictionary_1.default);\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = QueryBuilder;\r\n});\r\n//# sourceMappingURL=QueryBuilder.js.map"]}