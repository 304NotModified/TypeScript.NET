{"version":3,"sources":["System/Disposable/ObjectPool.js","System/Disposable/ObjectPool.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","dispose_1","DisposableBase_1","TaskHandler_1","ArgumentOutOfRangeException_1","ObjectPool","_super","_maxSize","_generator","call","autoClearTimeout","_","_disposableObjectName","_pool","_trimmer","_trim","clear","_clear","_flusher","_autoFlusher","defineProperty","get","enumerable","configurable","length","pool","withoutException","pop","trim","defer","throwIfDisposed","execute","cancel","these","toArrayAndClear","dump","_onDispose","extendAutoClear","t","isFinite","isScheduled","add","o","push","take","e","len","value"],"mappings":"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","file":"System/Disposable/ObjectPool.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon ObjectPool from Parallel Extension Extras and other ObjectPool implmentations.\n * Uses .add(T) and .take():T\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./dispose\", \"./DisposableBase\", \"../Tasks/TaskHandler\", \"../Exceptions/ArgumentOutOfRangeException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var dispose_1 = require(\"./dispose\");\n    var DisposableBase_1 = require(\"./DisposableBase\");\n    var TaskHandler_1 = require(\"../Tasks/TaskHandler\");\n    var ArgumentOutOfRangeException_1 = require(\"../Exceptions/ArgumentOutOfRangeException\");\n    var ObjectPool = (function (_super) {\n        __extends(ObjectPool, _super);\n        function ObjectPool(_maxSize, _generator) {\n            _super.call(this);\n            this._maxSize = _maxSize;\n            this._generator = _generator;\n            this.autoClearTimeout = 5000;\n            if (_maxSize < 1)\n                throw new ArgumentOutOfRangeException_1.default('_maxSize', _maxSize, \"Must be at least 1.\");\n            var _ = this;\n            _._disposableObjectName = \"ObjectPool\";\n            _._pool = [];\n            _._trimmer = new TaskHandler_1.default(function () { return _._trim(); });\n            var clear = function () { return _._clear(); };\n            _._flusher = new TaskHandler_1.default(clear);\n            _._autoFlusher = new TaskHandler_1.default(clear);\n        }\n        Object.defineProperty(ObjectPool.prototype, \"maxSize\", {\n            get: function () {\n                return this._maxSize;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ObjectPool.prototype, \"count\", {\n            get: function () {\n                var p = this._pool;\n                return p ? p.length : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ObjectPool.prototype._trim = function () {\n            var pool = this._pool;\n            while (pool.length > this._maxSize)\n                dispose_1.default.withoutException(pool.pop());\n        };\n        ObjectPool.prototype.trim = function (defer) {\n            this.throwIfDisposed();\n            this._trimmer.execute(defer);\n        };\n        ObjectPool.prototype._clear = function () {\n            var _ = this, p = _._pool;\n            _._trimmer.cancel();\n            _._flusher.cancel();\n            _._autoFlusher.cancel();\n            dispose_1.default.these(p, true);\n            p.length = 0;\n        };\n        ObjectPool.prototype.clear = function (defer) {\n            this.throwIfDisposed();\n            this._flusher.execute(defer);\n        };\n        ObjectPool.prototype.toArrayAndClear = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            _._trimmer.cancel();\n            _._flusher.cancel();\n            var p = _._pool;\n            _._pool = [];\n            return p;\n        };\n        ObjectPool.prototype.dump = function () {\n            return this.toArrayAndClear();\n        };\n        ObjectPool.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var _ = this;\n            _._generator = null;\n            dispose_1.default(_._trimmer, _._flusher, _._autoFlusher);\n            _._trimmer = null;\n            _._flusher = null;\n            _._autoFlusher = null;\n            _._pool.length = 0;\n            _._pool = null;\n        };\n        ObjectPool.prototype.extendAutoClear = function () {\n            var _ = this, t = _.autoClearTimeout;\n            if (isFinite(t) && !_._autoFlusher.isScheduled)\n                _._autoFlusher.execute(t);\n        };\n        ObjectPool.prototype.add = function (o) {\n            var _ = this;\n            _.throwIfDisposed();\n            _._pool.push(o);\n            if (_._pool.length > _._maxSize)\n                _._trimmer.execute(500);\n            _.extendAutoClear();\n        };\n        ObjectPool.prototype.take = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var e = _._pool.pop() || _._generator(), len = _._pool.length;\n            if (_._pool.length <= _._maxSize)\n                _._trimmer.cancel();\n            if (len)\n                _.extendAutoClear();\n            return e;\n        };\n        return ObjectPool;\n    }(DisposableBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ObjectPool;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon ObjectPool from Parallel Extension Extras and other ObjectPool implmentations.\r\n * Uses .add(T) and .take():T\r\n */\r\n\r\nimport dispose from \"./dispose\";\r\nimport DisposableBase from \"./DisposableBase\";\r\nimport TaskHandler from \"../Tasks/TaskHandler\";\r\nimport ArgumentOutOfRangeException from \"../Exceptions/ArgumentOutOfRangeException\";\r\nexport default class ObjectPool<T> extends DisposableBase {\r\n\r\n\tprivate _pool:T[];\r\n\tprivate _trimmer:TaskHandler;\r\n\tprivate _flusher:TaskHandler;\r\n\tprivate _autoFlusher:TaskHandler;\r\n\r\n\t/**\r\n\t * By default will clear after 5 seconds of non-use.\r\n\t */\r\n\tautoClearTimeout:number = 5000;\r\n\r\n\tconstructor(\r\n\t\tprivate _maxSize:number,\r\n\t\tprivate _generator:()=>T)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(_maxSize<1)\r\n\t\t\tthrow new ArgumentOutOfRangeException('_maxSize',_maxSize,\"Must be at least 1.\");\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ObjectPool\";\r\n\t\t_._pool = [];\r\n\t\t_._trimmer = new TaskHandler(()=>_._trim());\r\n\t\tvar clear = ()=>_._clear();\r\n\t\t_._flusher = new TaskHandler(clear);\r\n\t\t_._autoFlusher = new TaskHandler(clear);\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the maximum at which trimming should allow.\r\n\t * @returns {number}\r\n\t */\r\n\tget maxSize():number {\r\n\t\treturn this._maxSize;\r\n\t}\r\n\r\n\t/**\r\n\t * Current number of objects in pool.\r\n\t * @returns {number}\r\n\t */\r\n\tget count():number {\r\n\t\tvar p = this._pool;\r\n\t\treturn p ? p.length : 0;\r\n\t}\r\n\r\n\tprotected _trim():void {\r\n\t\tvar pool = this._pool;\r\n\t\twhile(pool.length>this._maxSize)\r\n\t\t\tdispose.withoutException(<any>pool.pop());\r\n\t}\r\n\r\n\t/**\r\n\t * Will trim ensure the pool is less than the maxSize.\r\n\t * @param defer A delay before trimming.  Will be overridden by later calls.\r\n\t */\r\n\ttrim(defer?:number):void {\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._trimmer.execute(defer);\r\n\t}\r\n\r\n\tprotected _clear():void {\r\n\t\tvar _ = this, p = _._pool;\r\n\t\t_._trimmer.cancel();\r\n\t\t_._flusher.cancel();\r\n\t\t_._autoFlusher.cancel();\r\n\t\tdispose.these(<any>p,true);\r\n\t\tp.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Will clear out the pool.\r\n\t * Cancels any scheduled trims when executed.\r\n\t * @param defer A delay before clearing.  Will be overridden by later calls.\r\n\t */\r\n\tclear(defer?:number):void {\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._flusher.execute(defer);\r\n\t}\r\n\r\n\ttoArrayAndClear():T[] {\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\t_._trimmer.cancel();\r\n\t\t_._flusher.cancel();\r\n\t\tvar p = _._pool;\r\n\t\t_._pool = [];\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for toArrayAndClear();\r\n\t */\r\n\tdump():T[] {\r\n\t\treturn this.toArrayAndClear();\r\n\t}\r\n\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar _ = this;\r\n\t\t_._generator = null;\r\n\t\tdispose(\r\n\t\t\t_._trimmer,\r\n\t\t\t_._flusher,\r\n\t\t\t_._autoFlusher\r\n\t\t);\r\n\t\t_._trimmer = null;\r\n\t\t_._flusher = null;\r\n\t\t_._autoFlusher = null;\r\n\r\n\t\t_._pool.length = 0;\r\n\t\t_._pool = null;\r\n\t}\r\n\r\n\textendAutoClear():void {\r\n\t\tvar _ = this, t = _.autoClearTimeout;\r\n\t\tif(isFinite(t) && !_._autoFlusher.isScheduled)\r\n\t\t\t_._autoFlusher.execute(t);\r\n\t}\r\n\r\n\tadd(o:T):void {\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\t_._pool.push(o);\r\n\t\tif(_._pool.length>_._maxSize)\r\n\t\t\t_._trimmer.execute(500);\r\n\t\t_.extendAutoClear();\r\n\r\n\t}\r\n\r\n\ttake():T {\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar e = _._pool.pop() || _._generator(),\r\n\t\t\tlen = _._pool.length;\r\n\r\n\t\tif(_._pool.length<=_._maxSize)\r\n\t\t\t_._trimmer.cancel();\r\n\t\tif(len)\r\n\t\t\t_.extendAutoClear();\r\n\t\t\r\n\t\treturn e;\r\n\t}\r\n\r\n\r\n\r\n}\r\n"]}