{"version":3,"sources":["System/Tasks/TaskScheduler.js","System/Tasks/TaskScheduler.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","flush","runSingle","task","domain","requestFlush","requestTick","TaskScheduler","Types_1","LinkedList_1","Queue_1","isNodeJS","flushing","immediateQueue","laterQueue","TaskScheduler.defer","TaskScheduler.runAfterDeferred","isObject","process","toString","nextTick","setImmediate","window","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","setTimeout","Object","defineProperty","value"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,4BAA6B,wBAAyBN,IAErG,SAAUI,EAASF,GC4BtB,QAAAM,KAKCA,IAFAA,GAAIA,GAEEA,EAAQA,EAAeA,OAC7BA,CACCA,GAAIA,GAAIA,EAAMA,MAAOA,EAASA,EAAEA,MAChCA,GAAMA,SACHA,GAAQA,EAAOA,QAClBA,EAAUA,EAAEA,KAAMA,GAInBA,IADAA,GAAIA,GACEA,EAAOA,EAAWA,WAEvBA,EAAUA,EAGXA,IAAWA,EAUZ,QAAAC,GAAmBC,EAAeC,GAEjCF,IAECA,IAGDA,MAAMA,GAELA,GAAGA,EAkBFA,KAVGA,IAEFA,EAAOA,OAERA,WAAWA,EAAOA,GACfA,GAEFA,EAAOA,QAGFA,CAONA,YAAWA,WAEVA,KAAMA,IACJA,GAIFA,GAEFA,EAAOA,OAIT,QAAAG,KACKA,IAEHA,GAAWA,EACXA,KAlHF,GAyBIC,GA6FGC,EAtHPC,EAAAX,EAAiB,YACjBY,EAAAZ,EAAuB,6BACvBa,EAAAb,EAAkB,wBAwBdc,GAAmB,EACnBC,GAAmB,EA+BnBC,EAA4C,GAAIJ,GAAAA,WAGhDK,EAA6B,GAAIJ,GAAAA,UA6GrC,IApDA,SAAOH,GAGNA,QAAAA,GAAsBA,EAAeA,GAEpCQ,GAAGA,EAAAA,WAAKA,SAASA,GAAMA,IAAUA,GAAOA,EAAGA,CAE1CA,GAAIA,GAAiBA,EAEjBA,EAASA,WACZA,MAAGA,IACFA,aAAaA,GACbA,EAAUA,GACHA,IAEDA,EAQRA,OALAA,GAAUA,WAAWA,WACpBA,IACAA,KACCA,GAEKA,EAGRA,GAAIA,IACHA,KAAKA,EACLA,OAAOA,GAAkBA,QAAiBA,OAO3CA,OAJAA,GAAeA,IAAIA,GAEnBA,IAEOA,WAAIA,QAAEA,EAAeA,OAAOA,IAOpCR,QAAAA,GAAiCA,GAEhCS,EAAWA,QAAQA,GACnBA,IA1CeT,EAAAA,MAAKA,EAuCLA,EAAAA,iBAAgBA,GA1C1BA,IAAAA,OAoDJC,EAAAA,WAAKS,SAASC,UACQ,qBAArBA,QAAQC,YACRD,QAAQE,SAUXT,GAAW,EAEXL,EAAc,WAEbY,QAAQE,SAASnB,QAId,IAAyB,kBAAfoB,cAKbf,EAFkB,mBAATgB,QAEKD,aAAaE,KAAKD,OAAQrB,GAI1B,WAEboB,aAAapB,QAKX,IAA2B,mBAAjBuB,gBACf,CAGC,GAAIC,GAAU,GAAID,eAGlBC,GAAQC,MAAMC,UAAY,WAEzBrB,EAAcsB,EACdH,EAAQC,MAAMC,UAAY1B,EAC1BA,IAED,IAAI2B,GAAkB,WAIrBH,EAAQI,MAAMC,YAAY,GAE3BxB,GAAc,WAEbyB,WAAW9B,EAAO,GAClB2B,SAODtB,GAAc,WAEbyB,WAAW9B,EAAO,GAIpB+B,QAAAC,eAAAtC,EAAA,cAAAuC,OAAA,ID1GIvC,EAAAA,WC0GWY","file":"System/Tasks/TaskScheduler.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based on code from: https://github.com/kriskowal/q\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Types', \"../Collections/LinkedList\", \"../Collections/Queue\"], factory);\n    }\n})(function (require, exports) {\n    var Types_1 = require('../Types');\n    var LinkedList_1 = require(\"../Collections/LinkedList\");\n    var Queue_1 = require(\"../Collections/Queue\");\n    \"use strict\";\n    var requestTick;\n    var isNodeJS = false;\n    var flushing = false;\n    function flush() {\n        var entry;\n        while (entry = immediateQueue.first) {\n            var e = entry.value, domain = e.domain;\n            entry.remove();\n            if (domain)\n                domain.enter();\n            runSingle(e.task, domain);\n        }\n        var task;\n        while (task = laterQueue.dequeue()) {\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    var immediateQueue = new LinkedList_1.default();\n    var laterQueue = new Queue_1.default();\n    function runSingle(task, domain) {\n        try {\n            task();\n        }\n        catch (e) {\n            if (isNodeJS) {\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n                throw e;\n            }\n            else {\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n        if (domain) {\n            domain.exit();\n        }\n    }\n    function requestFlush() {\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    }\n    var TaskScheduler;\n    (function (TaskScheduler) {\n        function defer(task, delay) {\n            if (Types_1.default.isNumber(delay, false) && delay >= 0) {\n                var timeout = 0;\n                var cancel = function () {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = 0;\n                        return true;\n                    }\n                    return false;\n                };\n                timeout = setTimeout(function () {\n                    cancel();\n                    task();\n                }, delay);\n                return cancel;\n            }\n            var entry = {\n                task: task,\n                domain: isNodeJS && process['domain']\n            };\n            immediateQueue.add(entry);\n            requestFlush();\n            return function () { return !!immediateQueue.remove(entry); };\n        }\n        TaskScheduler.defer = defer;\n        function runAfterDeferred(task) {\n            laterQueue.enqueue(task);\n            requestFlush();\n        }\n        TaskScheduler.runAfterDeferred = runAfterDeferred;\n    })(TaskScheduler || (TaskScheduler = {}));\n    if (Types_1.default.isObject(process)\n        && process.toString() === \"[object process]\"\n        && process.nextTick) {\n        isNodeJS = true;\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n    }\n    else if (typeof setImmediate === \"function\") {\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        }\n        else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n    }\n    else if (typeof MessageChannel !== \"undefined\") {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n    }\n    else {\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TaskScheduler;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on code from: https://github.com/kriskowal/q\r\n */\r\n\r\nimport Type from '../Types';\r\nimport LinkedList from \"../Collections/LinkedList\";\r\nimport Queue from \"../Collections/Queue\";\r\n\r\ndeclare module process\r\n{\r\n\texport function nextTick(callback:Function):void;\r\n\texport function toString():string;\r\n}\r\n\r\ninterface IDomain\r\n{\r\n\tenter():void;\r\n\texit():void;\r\n}\r\n\r\ninterface TaskQueueEntry\r\n{\r\n\ttask:Function;\r\n\tdomain?:IDomain;\r\n}\r\n\r\n\r\n\"use strict\";\r\n\r\nvar requestTick:()=>void;\r\nvar isNodeJS:boolean = false;\r\nvar flushing:boolean = false;\r\n\r\n// Use the fastest possible means to execute a task in a future turn\r\n// of the event loop.\r\n\r\n\r\n\r\nfunction flush():void\r\n{\r\n\t/* jshint loopfunc: true */\r\n\tvar entry:ILinkedListNode<TaskQueueEntry>;\r\n\r\n\twhile(entry = immediateQueue.first)\r\n\t{\r\n\t\tlet e = entry.value, domain = e.domain;\r\n\t\tentry.remove();\r\n\t\tif(domain) domain.enter();\r\n\t\trunSingle(e.task, domain);\r\n\t}\r\n\r\n\tvar task:Function;\r\n\twhile(task = laterQueue.dequeue())\r\n\t{\r\n\t\trunSingle(task);\r\n\t}\r\n\r\n\tflushing = false;\r\n}\r\n\r\n\r\n// linked list of tasks.  Using a real linked list to allow for removal.\r\nvar immediateQueue:LinkedList<TaskQueueEntry> = new LinkedList<TaskQueueEntry>();\r\n\r\n// queue for late tasks, used by unhandled rejection tracking\r\nvar laterQueue:Queue<Function> = new Queue<Function>();\r\n\r\nfunction runSingle(task:Function, domain?:IDomain):void\r\n{\r\n\ttry\r\n\t{\r\n\t\ttask();\r\n\r\n\t}\r\n\tcatch(e)\r\n\t{\r\n\t\tif(isNodeJS)\r\n\t\t{\r\n\t\t\t// In node, uncaught exceptions are considered fatal errors.\r\n\t\t\t// Re-throw them synchronously to interrupt flushing!\r\n\r\n\t\t\t// Ensure continuation if the uncaught exception is suppressed\r\n\t\t\t// listening \"uncaughtException\" events (as domains does).\r\n\t\t\t// Continue in next event to avoid tick recursion.\r\n\t\t\tif(domain)\r\n\t\t\t{\r\n\t\t\t\tdomain.exit();\r\n\t\t\t}\r\n\t\t\tsetTimeout(flush, 0);\r\n\t\t\tif(domain)\r\n\t\t\t{\r\n\t\t\t\tdomain.enter();\r\n\t\t\t}\r\n\r\n\t\t\tthrow e;\r\n\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// In browsers, uncaught exceptions are not fatal.\r\n\t\t\t// Re-throw them asynchronously to avoid slow-downs.\r\n\t\t\tsetTimeout(()=>\r\n\t\t\t{\r\n\t\t\t\tthrow e;\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tif(domain)\r\n\t{\r\n\t\tdomain.exit();\r\n\t}\r\n}\r\n\r\nfunction requestFlush():void {\r\n\tif(!flushing)\r\n\t{\r\n\t\tflushing = true;\r\n\t\trequestTick();\r\n\t}\r\n}\r\n\r\nmodule TaskScheduler {\r\n\r\n\r\n\texport function defer(task:Function, delay?:number):()=>boolean\r\n\t{\r\n\t\tif(Type.isNumber(delay,false) && delay>=0) {\r\n\r\n\t\t\tvar timeout:number = 0;\r\n\r\n\t\t\tvar cancel = ()=>{\r\n\t\t\t\tif(timeout) {\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t\ttimeout = 0;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t};\r\n\r\n\t\t\ttimeout = setTimeout(()=>{\r\n\t\t\t\tcancel();\r\n\t\t\t\ttask();\r\n\t\t\t},delay);\r\n\r\n\t\t\treturn cancel;\r\n\t\t}\r\n\r\n\t\tvar entry = {\r\n\t\t\ttask:task,\r\n\t\t\tdomain:isNodeJS && (<any>process)['domain']\r\n\t\t};\r\n\r\n\t\timmediateQueue.add(entry);\r\n\r\n\t\trequestFlush();\r\n\r\n\t\treturn ()=>!!immediateQueue.remove(entry)\r\n\t}\r\n\r\n\r\n\t// runs a task after all other tasks have been run\r\n\t// this is useful for unhandled rejection tracking that needs to happen\r\n\t// after all `then`d tasks have been run.\r\n\texport function runAfterDeferred(task:Function):void\r\n\t{\r\n\t\tlaterQueue.enqueue(task);\r\n\t\trequestFlush();\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nif(Type.isObject(process)\r\n\t&& process.toString()===\"[object process]\"\r\n\t&& process.nextTick)\r\n{\r\n\t// Ensure Q is in a real Node environment, with a `process.nextTick`.\r\n\t// To see through fake Node environments:\r\n\t// * Mocha test runner - exposes a `process` global without a `nextTick`\r\n\t// * Browserify - exposes a `process.nexTick` function that uses\r\n\t//   `setTimeout`. In this case `setImmediate` is preferred because\r\n\t//    it is faster. Browserify's `process.toString()` yields\r\n\t//   \"[object Object]\", while in a real Node environment\r\n\t//   `process.nextTick()` yields \"[object process]\".\r\n\tisNodeJS = true;\r\n\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tprocess.nextTick(flush);\r\n\t};\r\n\r\n}\r\nelse if(typeof setImmediate===\"function\")\r\n{\r\n\t// In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\r\n\tif(typeof window!==\"undefined\")\r\n\t{\r\n\t\trequestTick = setImmediate.bind(window, flush);\r\n\t}\r\n\telse\r\n\t{\r\n\t\trequestTick = ()=>\r\n\t\t{\r\n\t\t\tsetImmediate(flush);\r\n\t\t};\r\n\t}\r\n\r\n}\r\nelse if(typeof MessageChannel!==\"undefined\")\r\n{\r\n\t// modern browsers\r\n\t// http://www.nonblocking.io/2011/06/windownexttick.html\r\n\tvar channel = new MessageChannel();\r\n\t// At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\r\n\t// working message ports the first time a page loads.\r\n\tchannel.port1.onmessage = function()\r\n\t{\r\n\t\trequestTick = requestPortTick;\r\n\t\tchannel.port1.onmessage = flush;\r\n\t\tflush();\r\n\t};\r\n\tvar requestPortTick = ()=>\r\n\t{\r\n\t\t// Opera requires us to provide a message payload, regardless of\r\n\t\t// whether we use it.\r\n\t\tchannel.port2.postMessage(0);\r\n\t};\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tsetTimeout(flush, 0);\r\n\t\trequestPortTick();\r\n\t};\r\n\r\n}\r\nelse\r\n{\r\n\t// old browsers\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tsetTimeout(flush, 0);\r\n\t};\r\n}\r\n\r\nexport default TaskScheduler;\r\n"]}