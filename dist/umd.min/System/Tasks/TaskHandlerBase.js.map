{"version":3,"sources":["System/Tasks/TaskHandlerBase.js","System/Tasks/TaskHandlerBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","DisposableBase_1","TaskHandlerBase","_super","call","_id","defineProperty","get","enumerable","configurable","execute","defer","cancel","isNaN","_onExecute","isFinite","setTimeout","_handler","_onDispose","id","clearTimeout","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,gCAAiCN,IAEpE,SAAUI,EAASF,GAClB,YCXJ,IAAAM,GAAAJ,EAA2B,gCAK3BK,EAAA,SAAAC,GAGC,QAAAD,KAECC,EAAAC,KAAArB,MACAA,KAAKsB,IAAM,KAsDb,MA3DQvB,WAAAoB,EAAAC,GAUPZ,OAAAe,eAAIJ,EAAAZ,UAAA,eDIOiB,ICJX,WACC,QAASxB,KAAKsB,KDMJG,YAAY,EACZC,cAAc,ICCzBP,EAAAZ,UAAAoB,QAAA,SAAQC,GAEP5B,KAAK6B,SACFC,MAAMF,IAAgB,EAANA,EAElB5B,KAAK+B,aAEEC,SAASJ,KAEhB5B,KAAKsB,IAAMW,WAAWd,EAAgBe,SAAUN,EAAO5B,QAK1CmB,EAAAe,SAAf,SAAwBjC,GAEvBA,EAAE4B,SACF5B,EAAE8B,cAKOZ,EAAAZ,UAAA4B,WAAV,WAECnC,KAAK6B,UAGNV,EAAAZ,UAAAsB,OAAA,WAEC,GAAIO,GAAKpC,KAAKsB,GACd,OAAGc,IAEFC,aAAaD,GACbpC,KAAKsB,IAAM,MACJ,IAED,GAITH,GA3DQD,EAAAA,WA6DRV,QAAAe,eAAAX,EAAA,cAAA0B,OAAA,IDbI1B,EAAAA,WCaWO","file":"System/Tasks/TaskHandlerBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Disposable/DisposableBase\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var TaskHandlerBase = (function (_super) {\n        __extends(TaskHandlerBase, _super);\n        function TaskHandlerBase() {\n            _super.call(this);\n            this._id = null;\n        }\n        Object.defineProperty(TaskHandlerBase.prototype, \"isScheduled\", {\n            get: function () {\n                return !!this._id;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TaskHandlerBase.prototype.execute = function (defer) {\n            this.cancel();\n            if (isNaN(defer) || defer < 0) {\n                this._onExecute();\n            }\n            else if (isFinite(defer)) {\n                this._id = setTimeout(TaskHandlerBase._handler, defer, this);\n            }\n        };\n        TaskHandlerBase._handler = function (d) {\n            d.cancel();\n            d._onExecute();\n        };\n        TaskHandlerBase.prototype._onDispose = function () {\n            this.cancel();\n        };\n        TaskHandlerBase.prototype.cancel = function () {\n            var id = this._id;\n            if (id) {\n                clearTimeout(id);\n                this._id = null;\n                return true;\n            }\n            return false;\n        };\n        return TaskHandlerBase;\n    }(DisposableBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TaskHandlerBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ICancellable.d.ts\"/>\r\nimport DisposableBase from \"../Disposable/DisposableBase\";\r\n\r\n/**\r\n * A simple class for handling potentially repeated executions either deferred or immediate.\r\n */\r\nabstract class TaskHandlerBase\r\nextends DisposableBase implements ICancellable\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._id = null;\r\n\t}\r\n\r\n\tprotected _id:any;\r\n\r\n\tget isScheduled():boolean {\r\n\t\treturn !!this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules/Reschedules triggering the task.\r\n\t * If defer is omitted it is called synchronously.\r\n\t * @param defer Optional time to wait until triggering.\r\n\t */\r\n\texecute(defer?:number):void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tif(isNaN(defer) || defer<0)\r\n\t\t{\r\n\t\t\tthis._onExecute();\r\n\t\t}\r\n\t\telse if(isFinite(defer))\r\n\t\t{\r\n\t\t\tthis._id = setTimeout(TaskHandlerBase._handler, defer, this);\r\n\t\t}\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static _handler(d:TaskHandlerBase):void\r\n\t{\r\n\t\td.cancel();\r\n\t\td._onExecute();\r\n\t}\r\n\r\n\tprotected abstract _onExecute():void;\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default TaskHandlerBase;"]}