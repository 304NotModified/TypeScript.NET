{"version":3,"sources":["System/Utility/applyMixins.js","System/Utility/applyMixins.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","applyMixins","derivedConstructor","baseConstructors","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,WAAY,SAAUI,EAASF,GCN9C,QAAAM,GAAoCC,EAAwBC,GAE3DF,EACEA,QAAQA,SAAAA,GAERA,OAAOA,oBAAoBA,EAAGA,WAAWA,QACvCA,SAAAA,GAEAA,EAAmBA,UAAUA,GAAQA,EAAGA,UAAUA,OARvDG,OAAAC,eAAAV,EAAA,cAAAW,OAAA,IDgBIX,EAAAA,WAAkBM","file":"System/Utility/applyMixins.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\"], function (require, exports) {\r\n    function applyMixins(derivedConstructor, baseConstructors) {\r\n        baseConstructors\r\n            .forEach(function (bc) {\r\n            Object.getOwnPropertyNames(bc.prototype).forEach(function (name) {\r\n                derivedConstructor.prototype[name] = bc.prototype[name];\r\n            });\r\n        });\r\n    }\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = applyMixins;\r\n});\r\n//# sourceMappingURL=applyMixins.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nexport default function applyMixins(derivedConstructor:any, baseConstructors:any[]):void\r\n{\r\n\tbaseConstructors\r\n\t\t.forEach(bc =>\r\n\t\t{\r\n\t\t\tObject.getOwnPropertyNames(bc.prototype).forEach(\r\n\t\t\t\t\tname =>\r\n\t\t\t\t{\r\n\t\t\t\t\tderivedConstructor.prototype[name] = bc.prototype[name];\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t);\r\n}\r\n"]}