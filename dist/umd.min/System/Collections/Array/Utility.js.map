{"version":3,"sources":["System/Collections/Array/Utility.js","System/Collections/Array/Utility.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","initialize","length","copy","source","sourceIndex","copyTo","destination","destinationIndex","contains","array","item","equalityComparer","replace","old","newValue","max","updateRange","value","index","clear","register","findIndex","predicate","forEach","fn","applyTo","target","removeIndex","remove","repeat","element","count","flatten","a","recurseDepth","Types_1","Integer_1","Compare_1","ArgumentException_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","CBN","CBL0"],"mappings":"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","file":"System/Collections/Array/Utility.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../../Types', '../../Integer', '../../Compare', '../../Exceptions/ArgumentException', '../../Exceptions/ArgumentNullException', '../../Exceptions/ArgumentOutOfRangeException'], function (require, exports) {\r\n    ///<reference path=\"IArray.d.ts\"/>\r\n    ///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n    var Types_1 = require('../../Types');\r\n    var Integer_1 = require('../../Integer');\r\n    var Compare_1 = require('../../Compare');\r\n    var ArgumentException_1 = require('../../Exceptions/ArgumentException');\r\n    var ArgumentNullException_1 = require('../../Exceptions/ArgumentNullException');\r\n    var ArgumentOutOfRangeException_1 = require('../../Exceptions/ArgumentOutOfRangeException');\r\n    function initialize(length) {\r\n        Integer_1.default.assert(length, 'length');\r\n        var array;\r\n        if (length > 65536)\r\n            array = new Array(length);\r\n        else {\r\n            array = [];\r\n            array.length = length;\r\n        }\r\n        return array;\r\n    }\r\n    exports.initialize = initialize;\r\n    function copy(source, sourceIndex, length) {\r\n        if (sourceIndex === void 0) { sourceIndex = 0; }\r\n        if (length === void 0) { length = Infinity; }\r\n        if (!source)\r\n            return source;\r\n        return copyTo(source, initialize(Math.min(length, Math.max(source.length - sourceIndex, 0))), sourceIndex, 0, length);\r\n    }\r\n    exports.copy = copy;\r\n    var CBN = 'Cannot be null.', CBL0 = 'Cannot be less than zero.';\r\n    function copyTo(source, destination, sourceIndex, destinationIndex, length) {\r\n        if (sourceIndex === void 0) { sourceIndex = 0; }\r\n        if (destinationIndex === void 0) { destinationIndex = 0; }\r\n        if (length === void 0) { length = Infinity; }\r\n        if (!source)\r\n            throw new ArgumentNullException_1.default('source', CBN);\r\n        if (!destination)\r\n            throw new ArgumentNullException_1.default('destination', CBN);\r\n        if (sourceIndex < 0)\r\n            throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, CBL0);\r\n        var sourceLength = source.length;\r\n        if (sourceIndex >= sourceLength)\r\n            throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n        if (destination.length < 0)\r\n            throw new ArgumentOutOfRangeException_1.default('destinationIndex', destinationIndex, CBL0);\r\n        var maxLength = source.length - sourceIndex;\r\n        if (isFinite(length) && length > maxLength)\r\n            throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n        length = Math.min(length, maxLength);\r\n        for (var i = 0; i < length; ++i) {\r\n            destination[destinationIndex + i] = source[sourceIndex + i];\r\n        }\r\n        return destination;\r\n    }\r\n    exports.copyTo = copyTo;\r\n    function contains(array, item, equalityComparer) {\r\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\r\n        if (array && array.length) {\r\n            if (Array.isArray(array))\r\n                return array.indexOf(item) != -1;\r\n            for (var i = 0; i < array.length; ++i) {\r\n                if (equalityComparer(array[i], item))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    exports.contains = contains;\r\n    function replace(array, old, newValue, max) {\r\n        var count = 0;\r\n        if (max !== 0) {\r\n            if (!max)\r\n                max = Infinity;\r\n            else if (max < 0)\r\n                throw new ArgumentOutOfRangeException_1.default('max', max, CBL0);\r\n            for (var i = (array.length - 1); i >= 0; --i) {\r\n                if (array[i] === old) {\r\n                    array[i] = newValue;\r\n                    ++count;\r\n                    if (!--max)\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    exports.replace = replace;\r\n    function updateRange(array, value, index, length) {\r\n        Integer_1.default.assert(index, 'index');\r\n        Integer_1.default.assert(index, 'length');\r\n        var end = index + length;\r\n        for (var i = index; i < end; ++i) {\r\n            array[i] = value;\r\n        }\r\n    }\r\n    exports.updateRange = updateRange;\r\n    function clear(array, index, length) {\r\n        updateRange(array, null, index, length);\r\n    }\r\n    exports.clear = clear;\r\n    function register(array, item, equalityComparer) {\r\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\r\n        if (!array)\r\n            throw new ArgumentNullException_1.default('array', CBN);\r\n        var len = array.length;\r\n        var ok = !len || !contains(array, item, equalityComparer);\r\n        if (ok)\r\n            array[len] = item;\r\n        return ok;\r\n    }\r\n    exports.register = register;\r\n    function findIndex(array, predicate) {\r\n        if (!array)\r\n            throw new ArgumentNullException_1.default('array', CBN);\r\n        if (!Types_1.default.isFunction(predicate))\r\n            throw new ArgumentException_1.default('predicate', 'Must be a function.');\r\n        var len = array.length;\r\n        for (var i = 0; i < len; ++i) {\r\n            if ((i) in (array) && predicate(array[i]))\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n    exports.findIndex = findIndex;\r\n    function forEach(source, fn) {\r\n        if (!source)\r\n            throw new ArgumentNullException_1.default('source', CBN);\r\n        if (fn) {\r\n            for (var i = 0; i < source.length; ++i) {\r\n                if (fn(source[i]) === false)\r\n                    break;\r\n            }\r\n        }\r\n        return source;\r\n    }\r\n    exports.forEach = forEach;\r\n    function applyTo(target, fn) {\r\n        if (!target)\r\n            throw new ArgumentNullException_1.default('target', CBN);\r\n        if (fn) {\r\n            for (var i = 0; i < target.length; ++i) {\r\n                target[i] = fn(target[i]);\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    exports.applyTo = applyTo;\r\n    function removeIndex(array, index) {\r\n        if (!array)\r\n            throw new ArgumentNullException_1.default('array', CBN);\r\n        Integer_1.default.assert(index, 'index');\r\n        if (index < 0)\r\n            throw new ArgumentOutOfRangeException_1.default('index', index, CBL0);\r\n        var exists = index < array.length;\r\n        if (exists)\r\n            array.splice(index, 1);\r\n        return exists;\r\n    }\r\n    exports.removeIndex = removeIndex;\r\n    function remove(array, value, max, equalityComparer) {\r\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\r\n        if (!array)\r\n            throw new ArgumentNullException_1.default('array', CBN);\r\n        var count = 0;\r\n        if (array && array.length && max !== 0) {\r\n            if (!max)\r\n                max = Infinity;\r\n            else if (max < 0)\r\n                throw new ArgumentOutOfRangeException_1.default('max', max, CBL0);\r\n            for (var i = (array.length - 1); i >= 0; --i) {\r\n                if (equalityComparer(array[i], value)) {\r\n                    array.splice(i, 1);\r\n                    ++count;\r\n                    if (!--max)\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    exports.remove = remove;\r\n    function repeat(element, count) {\r\n        Integer_1.default.assert(count, 'count');\r\n        if (count < 0)\r\n            throw new ArgumentOutOfRangeException_1.default('count', count, CBL0);\r\n        var result = [];\r\n        while (count--) {\r\n            result.push(element);\r\n        }\r\n        return result;\r\n    }\r\n    exports.repeat = repeat;\r\n    function flatten(a, recurseDepth) {\r\n        if (recurseDepth === void 0) { recurseDepth = 0; }\r\n        var result = [];\r\n        for (var i = 0; i < a.length; i++) {\r\n            var x = a[i];\r\n            if (Array.isArray(x)) {\r\n                if (recurseDepth > 0)\r\n                    x = flatten(x, recurseDepth - 1);\r\n                for (var n = 0; n < x.length; n++)\r\n                    result.push(x[n]);\r\n            }\r\n            else\r\n                result.push(x);\r\n        }\r\n        return result;\r\n    }\r\n    exports.flatten = flatten;\r\n});\r\n//# sourceMappingURL=Utility.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IArray.d.ts\"/>\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\nimport Type from '../../Types';\r\nimport Integer from '../../Integer';\r\nimport {areEqual} from '../../Compare';\r\nimport ArgumentException from '../../Exceptions/ArgumentException';\r\nimport ArgumentNullException from '../../Exceptions/ArgumentNullException';\r\nimport ArgumentOutOfRangeException from '../../Exceptions/ArgumentOutOfRangeException';\r\n\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tvar array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n/**\r\n *\r\n * @param source\r\n * @param sourceIndex\r\n * @param length\r\n * @returns {any}\r\n */\r\nexport function copy<T>(\r\n\tsource:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tlength:number = Infinity):IArray<T>\r\n{\r\n\tif(!source) return source; // may have passed zero? undefined? or null?\r\n\treturn copyTo<T>(\r\n\t\tsource,\r\n\t\tinitialize<T>(Math.min(length, Math.max(source.length - sourceIndex, 0))),\r\n\t\tsourceIndex, 0, length);\r\n}\r\n\r\nconst\r\n\tCBN = 'Cannot be null.',\r\n\tCBL0 = 'Cannot be less than zero.';\r\n\r\n/**\r\n * Copies one array to another.\r\n * @param source\r\n * @param destination\r\n * @param sourceIndex\r\n * @param destinationIndex\r\n * @param length An optional limit to stop copying.\r\n * @returns The destination array.\r\n */\r\nexport function copyTo<T>(\r\n\tsource:IArray<T>,\r\n\tdestination:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tdestinationIndex:number = 0,\r\n\tlength:number = Infinity):IArray<T>\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(!destination)\r\n\t\tthrow new ArgumentNullException('destination', CBN);\r\n\r\n\tif(sourceIndex<0)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\r\n\r\n\tvar sourceLength = source.length;\r\n\tif(sourceIndex>=sourceLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n\r\n\tif(destination.length<0)\r\n\t\tthrow new ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\r\n\r\n\tvar maxLength = source.length - sourceIndex;\r\n\tif(isFinite(length) && length>maxLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n\r\n\tlength = Math.min(length, maxLength);\r\n\r\n\tfor(let i = 0; i<length; ++i)\r\n\t{\r\n\t\tdestination[destinationIndex + i] = source[sourceIndex + i];\r\n\t}\r\n\r\n\treturn destination;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(array && array.length)\r\n\t{\r\n\r\n\t\tif(Array.isArray(array)) return array.indexOf(item)!= -1;\r\n\r\n\t\tfor(let i = 0; i<array.length; ++i)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(equalityComparer(array[i], item))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:IArray<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax?:number):number\r\n{\r\n\r\n\tvar count = 0;\r\n\tif(max!==0)\r\n\t{\r\n\t\tif(!max)\r\n\t\t\tmax = Infinity;\r\n\t\telse if(max<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\t\tfor(let i = (array.length - 1); i>=0; --i)\r\n\t\t{\r\n\t\t\tif(array[i]===old)\r\n\t\t\t{\r\n\t\t\t\tarray[i] = newValue;\r\n\t\t\t\t++count;\r\n\t\t\t\tif(!--max)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param index\r\n * @param length\r\n */\r\nexport function updateRange<T>(\r\n\tarray:T[],\r\n\tvalue:T,\r\n\tindex:number,\r\n\tlength:number):void\r\n{\r\n\tInteger.assert(index, 'index');\r\n\tInteger.assert(index, 'length');\r\n\r\n\tvar end = index + length;\r\n\tfor(let i:number = index; i<end; ++i)\r\n\t{\r\n\t\tarray[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param index\r\n * @param length\r\n */\r\nexport function clear(\r\n\tarray:any[],\r\n\tindex:number,\r\n\tlength:number):void\r\n{\r\n\tupdateRange(array, null, index, length);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tvar len = array.length; // avoid querying .length more than once. *\r\n\tvar ok = !len || !contains(array, item, equalityComparer);\r\n\tif(ok) array[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:IArray<T>, predicate:Predicate<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\tvar len = array.length;\r\n\tfor(let i = 0; i<len; ++i)\r\n\t{\r\n\t\tif((i)in(array) && predicate(array[i]))\r\n\t\t\treturn i;\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param fn\r\n * @returns {IArray<T>}\r\n */\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\tfn:(value:T, index?:number) => (void|boolean)):IArray<T>\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(fn)\r\n\t{\r\n\t\tfor(let i = 0; i<source.length; ++i)\r\n\t\t{\r\n\t\t\tif(fn(source[i])===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn source;\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n * @returns {IArray<T>}\r\n */\r\nexport function applyTo<T>(target:IArray<T>, fn:(a:T) => T):IArray<T>\r\n{\r\n\tif(!target)\r\n\t\tthrow new ArgumentNullException('target', CBN);\r\n\r\n\tif(fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; ++i)\r\n\t\t{\r\n\t\t\ttarget[i] = fn(target[i]);\r\n\t\t}\r\n\t}\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tInteger.assert(index, 'index');\r\n\tif(index<0) throw new ArgumentOutOfRangeException('index', index, CBL0);\r\n\r\n\r\n\tvar exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @param {function?} equalityComparer\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(\r\n\tarray:T[], value:T, max?:number,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tvar count = 0;\r\n\tif(array && array.length && max!==0)\r\n\t{\r\n\t\tif(!max)\r\n\t\t\tmax = Infinity;\r\n\t\telse if(max<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\t\tfor(let i = (array.length - 1); i>=0; --i)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(!--max)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tInteger.assert(count, 'count');\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result:T[] = [];\r\n\twhile(count--)\r\n\t{\r\n\t\tresult.push(element);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tvar result:any[] = [];\r\n\tfor(var i = 0; i<a.length; i++)\r\n\t{\r\n\t\tvar x = a[i];\r\n\t\tif(Array.isArray(x))\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth - 1);\r\n\t\t\tfor(var n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n"]}