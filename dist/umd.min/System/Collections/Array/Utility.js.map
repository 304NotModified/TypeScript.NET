{"version":3,"sources":["System/Collections/Array/Utility.js","System/Collections/Array/Utility.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","initialize","length","Integer_1","assert","array","Array","copy","source","sourceIndex","Infinity","copyTo","Math","min","max","destination","destinationIndex","ArgumentNullException_1","CBN","ArgumentOutOfRangeException_1","CBL0","sourceLength","maxLength","isFinite","newLength","i","indexOf","item","equalityComparer","Compare_1","areEqual","len","isArray","Types_1","isTrueNaN","contains","replace","old","newValue","count","updateRange","value","start","stop","assertZeroOrGreater","clear","register","ok","findIndex","predicate","isFunction","ArgumentException_1","forEach","action","applyTo","target","fn","removeIndex","index","exists","splice","remove","found","push","repeat","element","result","range","first","step","isNaN","VFN","rangeUntil","until","CB0","flatten","a","recurseDepth","x","n"],"mappings":"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","file":"System/Collections/Array/Utility.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../../Types\", \"../../Integer\", \"../../Compare\", \"../../Exceptions/ArgumentException\", \"../../Exceptions/ArgumentNullException\", \"../../Exceptions/ArgumentOutOfRangeException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../../Types\");\n    var Integer_1 = require(\"../../Integer\");\n    var Compare_1 = require(\"../../Compare\");\n    var ArgumentException_1 = require(\"../../Exceptions/ArgumentException\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var ArgumentOutOfRangeException_1 = require(\"../../Exceptions/ArgumentOutOfRangeException\");\n    function initialize(length) {\n        Integer_1.default.assert(length, 'length');\n        var array;\n        if (length > 65536)\n            array = new Array(length);\n        else {\n            array = [];\n            array.length = length;\n        }\n        return array;\n    }\n    exports.initialize = initialize;\n    function copy(source, sourceIndex, length) {\n        if (sourceIndex === void 0) { sourceIndex = 0; }\n        if (length === void 0) { length = Infinity; }\n        if (!source)\n            return source;\n        return copyTo(source, initialize(Math.min(length, Math.max(source.length - sourceIndex, 0))), sourceIndex, 0, length);\n    }\n    exports.copy = copy;\n    var CBN = 'Cannot be null.', CB0 = 'Cannot be zero.', CBL0 = 'Cannot be less than zero.', VFN = 'Must be a valid finite number';\n    function copyTo(source, destination, sourceIndex, destinationIndex, length) {\n        if (sourceIndex === void 0) { sourceIndex = 0; }\n        if (destinationIndex === void 0) { destinationIndex = 0; }\n        if (length === void 0) { length = Infinity; }\n        if (!source)\n            throw new ArgumentNullException_1.default('source', CBN);\n        if (!destination)\n            throw new ArgumentNullException_1.default('destination', CBN);\n        if (sourceIndex < 0)\n            throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, CBL0);\n        var sourceLength = source.length;\n        if (sourceIndex >= sourceLength)\n            throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\n        if (destination.length < 0)\n            throw new ArgumentOutOfRangeException_1.default('destinationIndex', destinationIndex, CBL0);\n        var maxLength = source.length - sourceIndex;\n        if (isFinite(length) && length > maxLength)\n            throw new ArgumentOutOfRangeException_1.default('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\n        length = Math.min(length, maxLength);\n        var newLength = destinationIndex + length;\n        if (newLength > destination.length)\n            destination.length = newLength;\n        for (var i = 0; i < length; i++) {\n            destination[destinationIndex + i] = source[sourceIndex + i];\n        }\n        return destination;\n    }\n    exports.copyTo = copyTo;\n    function indexOf(array, item, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        var len = array && array.length;\n        if (len) {\n            if (Array.isArray(array) && !Types_1.default.isTrueNaN(item))\n                return array.indexOf(item);\n            for (var i = 0; i < len; i++) {\n                if (equalityComparer(array[i], item))\n                    return i;\n            }\n        }\n        return -1;\n    }\n    exports.indexOf = indexOf;\n    function contains(array, item, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        return indexOf(array, item, equalityComparer) != -1;\n    }\n    exports.contains = contains;\n    function replace(array, old, newValue, max) {\n        if (!array || !array.length || max === 0)\n            return 0;\n        if (max < 0)\n            throw new ArgumentOutOfRangeException_1.default('max', max, CBL0);\n        if (!max)\n            max = Infinity;\n        var count = 0;\n        for (var i = 0, len = array.length; i < len; i++) {\n            if (array[i] === old) {\n                array[i] = newValue;\n                ++count;\n                if (count == max)\n                    break;\n            }\n        }\n        return count;\n    }\n    exports.replace = replace;\n    function updateRange(array, value, start, stop) {\n        if (start === void 0) { start = 0; }\n        if (!array)\n            return;\n        Integer_1.default.assertZeroOrGreater(start, 'start');\n        if (!stop && stop !== 0)\n            stop = array.length;\n        Integer_1.default.assert(stop, 'stop');\n        if (stop < start)\n            throw new ArgumentOutOfRangeException_1.default(\"stop\", stop, \"is less than start\");\n        for (var i = start; i < stop; i++) {\n            array[i] = value;\n        }\n    }\n    exports.updateRange = updateRange;\n    function clear(array, start, stop) {\n        if (start === void 0) { start = 0; }\n        updateRange(array, null, start, stop);\n    }\n    exports.clear = clear;\n    function register(array, item, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        if (!array)\n            throw new ArgumentNullException_1.default('array', CBN);\n        var len = array.length;\n        var ok = !len || !contains(array, item, equalityComparer);\n        if (ok)\n            array[len] = item;\n        return ok;\n    }\n    exports.register = register;\n    function findIndex(array, predicate) {\n        if (!array)\n            throw new ArgumentNullException_1.default('array', CBN);\n        if (!Types_1.default.isFunction(predicate))\n            throw new ArgumentException_1.default('predicate', 'Must be a function.');\n        var len = array.length;\n        if (Array.isArray(array)) {\n            for (var i = 0; i < len; i++) {\n                if (predicate(array[i]))\n                    return i;\n            }\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                if ((i) in (array) && predicate(array[i]))\n                    return i;\n            }\n        }\n        return -1;\n    }\n    exports.findIndex = findIndex;\n    function forEach(source, action) {\n        if (source && action) {\n            for (var i = 0; i < source.length; i++) {\n                if (action(source[i]) === false)\n                    break;\n            }\n        }\n    }\n    exports.forEach = forEach;\n    function applyTo(target, fn) {\n        if (target && fn) {\n            for (var i = 0; i < target.length; i++) {\n                target[i] = fn(target[i]);\n            }\n        }\n    }\n    exports.applyTo = applyTo;\n    function removeIndex(array, index) {\n        if (!array)\n            throw new ArgumentNullException_1.default('array', CBN);\n        Integer_1.default.assert(index, 'index');\n        if (index < 0)\n            throw new ArgumentOutOfRangeException_1.default('index', index, CBL0);\n        var exists = index < array.length;\n        if (exists)\n            array.splice(index, 1);\n        return exists;\n    }\n    exports.removeIndex = removeIndex;\n    function remove(array, value, max, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        if (!array || !array.length || max === 0)\n            return 0;\n        if (max < 0)\n            throw new ArgumentOutOfRangeException_1.default('max', max, CBL0);\n        var count = 0;\n        if (!max || !isFinite(max)) {\n            for (var i = (array.length - 1); i >= 0; i--) {\n                if (equalityComparer(array[i], value)) {\n                    array.splice(i, 1);\n                    ++count;\n                }\n            }\n        }\n        else {\n            var found = [];\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (equalityComparer(array[i], value)) {\n                    found.push(i);\n                    ++count;\n                    if (count == max)\n                        break;\n                }\n            }\n            for (var i = found.length - 1; i >= 0; i--) {\n                array.splice(found[i], 1);\n            }\n        }\n        return count;\n    }\n    exports.remove = remove;\n    function repeat(element, count) {\n        Integer_1.default.assert(count, 'count');\n        if (count < 0)\n            throw new ArgumentOutOfRangeException_1.default('count', count, CBL0);\n        var result = initialize(count);\n        for (var i = 0; i < count; i++) {\n            result[i] = element;\n        }\n        return result;\n    }\n    exports.repeat = repeat;\n    function range(first, count, step) {\n        if (step === void 0) { step = 1; }\n        if (isNaN(first) || !isFinite(first))\n            throw new ArgumentOutOfRangeException_1.default('first', first, VFN);\n        if (isNaN(count) || !isFinite(count))\n            throw new ArgumentOutOfRangeException_1.default('count', count, VFN);\n        if (count < 0)\n            throw new ArgumentOutOfRangeException_1.default('count', count, CBL0);\n        var result = initialize(count);\n        for (var i = 0; i < count; i++) {\n            result[i] = first;\n            first += step;\n        }\n        return result;\n    }\n    exports.range = range;\n    function rangeUntil(first, until, step) {\n        if (step === void 0) { step = 1; }\n        if (step == 0)\n            throw new ArgumentOutOfRangeException_1.default('step', step, CB0);\n        return range(first, (until - first) / step, step);\n    }\n    exports.rangeUntil = rangeUntil;\n    function flatten(a, recurseDepth) {\n        if (recurseDepth === void 0) { recurseDepth = 0; }\n        var result = [];\n        for (var i = 0; i < a.length; i++) {\n            var x = a[i];\n            if (Array.isArray(x)) {\n                if (recurseDepth > 0)\n                    x = flatten(x, recurseDepth - 1);\n                for (var n = 0; n < x.length; n++)\n                    result.push(x[n]);\n            }\n            else\n                result.push(x);\n        }\n        return result;\n    }\n    exports.flatten = flatten;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IArray.d.ts\"/>\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\nimport Type from \"../../Types\";\r\nimport Integer from \"../../Integer\";\r\nimport {areEqual} from \"../../Compare\";\r\nimport ArgumentException from \"../../Exceptions/ArgumentException\";\r\nimport ArgumentNullException from \"../../Exceptions/ArgumentNullException\";\r\nimport ArgumentOutOfRangeException from \"../../Exceptions/ArgumentOutOfRangeException\";\r\n\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tvar array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n/**\r\n *\r\n * @param source\r\n * @param sourceIndex\r\n * @param length\r\n * @returns {any}\r\n */\r\nexport function copy<T>(\r\n\tsource:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tlength:number = Infinity):T[]\r\n{\r\n\tif(!source) return <any>source; // may have passed zero? undefined? or null?\r\n\treturn copyTo(\r\n\t\tsource,\r\n\t\tinitialize<T>(Math.min(length, Math.max(source.length - sourceIndex, 0))),\r\n\t\tsourceIndex, 0, length);\r\n}\r\n\r\nconst\r\n\tCBN  = 'Cannot be null.',\r\n\tCB0  = 'Cannot be zero.',\r\n\tCBL0 = 'Cannot be less than zero.',\r\n\tVFN  = 'Must be a valid finite number';\r\n\r\n/**\r\n * Copies one array to another.\r\n * @param source\r\n * @param destination\r\n * @param sourceIndex\r\n * @param destinationIndex\r\n * @param length An optional limit to stop copying.\r\n * @returns The destination array.\r\n */\r\nexport function copyTo<T,TDestination extends IArray<any>>(\r\n\tsource:IArray<T>,\r\n\tdestination:TDestination,\r\n\tsourceIndex:number = 0,\r\n\tdestinationIndex:number = 0,\r\n\tlength:number = Infinity):TDestination\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(!destination)\r\n\t\tthrow new ArgumentNullException('destination', CBN);\r\n\r\n\tif(sourceIndex<0)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\r\n\r\n\tvar sourceLength = source.length;\r\n\tif(sourceIndex>=sourceLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n\r\n\tif(destination.length<0)\r\n\t\tthrow new ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\r\n\r\n\tvar maxLength = source.length - sourceIndex;\r\n\tif(isFinite(length) && length>maxLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n\r\n\tlength = Math.min(length, maxLength);\r\n\tvar newLength = destinationIndex + length;\r\n\tif(newLength>destination.length) destination.length = newLength;\r\n\r\n\tfor(let i = 0; i<length; i++)\r\n\t{\r\n\t\tdestination[destinationIndex + i] = source[sourceIndex + i];\r\n\t}\r\n\r\n\treturn destination;\r\n}\r\n\r\n\r\n/**\r\n * Checks to see where the provided array contains an item/value.\r\n * If the array value is null, then -1 is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {number}\r\n */\r\nexport function indexOf<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\r\n\tvar len = array && array.length;\r\n\tif(len)\r\n\t{\r\n\t\t// NaN NEVER evaluates its equality so be careful.\r\n\t\tif(Array.isArray(array) && !Type.isTrueNaN(item))\r\n\t\t\treturn array.indexOf(item);\r\n\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(equalityComparer(array[i], item))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\treturn indexOf(array, item, equalityComparer)!= -1;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:IArray<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax?:number):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\tif(!max) max = Infinity;\r\n\r\n\tvar count = 0;\r\n\r\n\tfor(let i = 0,len=array.length;i<len;i++)\r\n\t{\r\n\t\tif(array[i]===old)\r\n\t\t{\r\n\t\t\tarray[i] = newValue;\r\n\t\t\t++count;\r\n\t\t\tif(count==max) break;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param start\r\n * @param stop\r\n */\r\nexport function updateRange<T>(\r\n\tarray:IArray<T>,\r\n\tvalue:T,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tif(!array) return;\r\n\tInteger.assertZeroOrGreater(start, 'start');\r\n\tif(!stop && stop!==0) stop = array.length;\r\n\tInteger.assert(stop, 'stop');\r\n\tif(stop<start) throw new ArgumentOutOfRangeException(\"stop\", stop, \"is less than start\");\r\n\r\n\tfor(let i:number = start; i<stop; i++)\r\n\t{\r\n\t\tarray[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param start\r\n * @param stop\r\n */\r\nexport function clear(\r\n\tarray:IArray<any>,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tupdateRange(array, null, start, stop);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tvar len = array.length; // avoid querying .length more than once. *\r\n\tvar ok = !len || !contains(array, item, equalityComparer);\r\n\tif(ok) array[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:IArray<T>, predicate:Predicate<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\r\n\tvar len = array.length;\r\n\tif(Array.isArray(array)) {\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif(predicate(array[i]))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t} else {\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif((i) in (array) && predicate(array[i]))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param action\r\n */\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\taction:Predicate<T> | Action<T>):void\r\n{\r\n\tif(source && action)\r\n\t{\r\n\t\t// Don't cache the length since it is possible that the underlying array changed.\r\n\t\tfor(let i = 0; i<source.length; i++)\r\n\t\t{\r\n\t\t\tif(action(source[i])===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n */\r\nexport function applyTo<T>(target:IArray<T>, fn:(a:T) => T):void\r\n{\r\n\tif(target && fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; i++)\r\n\t\t{\r\n\t\t\ttarget[i] = fn(target[i]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tInteger.assert(index, 'index');\r\n\tif(index<0) throw new ArgumentOutOfRangeException('index', index, CBL0);\r\n\r\n\r\n\tvar exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @param {function?} equalityComparer\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(\r\n\tarray:T[], value:T, max?:number,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\tvar count = 0;\r\n\tif(!max || !isFinite(max)) {\r\n\t\t// Don't track the indexes and remove in reverse.\r\n\t\tfor(let i = (array.length - 1); i>=0; i--)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\t// Since the user will expect it to happen in forward order...\r\n\t\tvar found:number[] = []; // indexes;\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tfound.push(i);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(count==max) break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(let i = found.length-1;i>=0;i--) {\r\n\t\t\tarray.splice(found[i], 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tInteger.assert(count, 'count');\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result = initialize<T>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = element;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value.\r\n * @param first\r\n * @param count\r\n * @param step\r\n * @returns {number[]}\r\n */\r\n\r\nexport function range(\r\n\tfirst:number,\r\n\tcount:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(isNaN(first) || !isFinite(first)) throw new ArgumentOutOfRangeException('first', first, VFN);\r\n\tif(isNaN(count) || !isFinite(count)) throw new ArgumentOutOfRangeException('count', count, VFN);\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result = initialize<number>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = first;\r\n\t\tfirst += step;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value excluding any numbers at or beyond the until value.\r\n * @param first\r\n * @param until\r\n * @param step\r\n * @returns {number[]}\r\n */\r\nexport function rangeUntil(\r\n\tfirst:number,\r\n\tuntil:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(step==0) throw new ArgumentOutOfRangeException('step', step, CB0);\r\n\treturn range(first, (until - first)/step, step);\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tvar result:any[] = [];\r\n\tfor(var i = 0; i<a.length; i++)\r\n\t{\r\n\t\tvar x = a[i];\r\n\t\tif(Array.isArray(x))\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth - 1);\r\n\t\t\tfor(var n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n"]}