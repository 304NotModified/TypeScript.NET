{"version":3,"sources":["System/Collections/Array/Dispatch.js","System/Collections/Array/Dispatch.ts"],"names":["dependencies","factory","module","exports","v","require","undefined","define","amd","unsafe","listeners","payload","trap","length","i","len","fn","ex","Types_1","Type","isFunction","mapped","result","Utility_1","copy","VOID0","dispatch","Object","defineProperty","value"],"mappings":"CAAA,SAAWA,EAAcC,GACrB,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAcC,KAEzB,UAAW,UAAW,cAAe,aAAc,SAAUI,EAASF,GACtE,YC6BJ,SAAAM,GACCC,EACAC,EAAWC,GAEX,GAAGF,GAAaA,EAAUG,OAEzB,IAAI,GAAIC,GAAI,EAAGC,EAAML,EAAUG,OAAQC,EAAEC,EAAKD,IAC9C,CACC,GAAIE,GAAcN,EAAUI,EAC5B,IAAIE,EACJ,IAECA,EAAGL,GAEJ,MAAMM,GAEL,IAAIL,EACH,KAAMK,EACCC,GAAAC,KAAKC,WAAWR,IACvBA,EAAKK,EAAIH,KAed,QAAAO,GACCX,EACAC,EAAWC,GAGX,IAAIF,EAAW,MAAYA,EAE3B,IAAMY,GAAeC,EAAAC,KAAKd,EAC1B,IAAGA,EAAUG,OAGZ,IAAI,GAAIC,GAAI,EAAGC,EAAMO,EAAOT,OAAQC,EAAEC,EAAKD,IAC3C,CACC,GAAIE,GAAcM,EAAOR,EACzB,KAECQ,EAAOR,GAAKE,EACTA,EAAGL,GACHc,EAEJ,MAAMR,GAGL,GADAK,EAAOR,GAAKW,GACRb,EACH,KAAMK,EACCC,GAAAC,KAAKC,WAAWR,IACvBA,EAAKK,EAAIH,IAKb,MAAOQ,GAYR,QAAAI,GACChB,EACAC,EAAWC,GAEXH,EAAOc,EAAAC,KAAKd,GAAYC,EAASC;;;;AAlHlC,GAAAM,GAAAb,EAAA,eACAkB,EAAAlB,EAAA,aAIMoB,EAAkB,MA4BxBtB,GAAAM,OAAAA,EAkCAN,EAAAkB,OAAAA,EA2CAlB,EAAAuB,SAAAA,EDZIC,OAAOC,eAAezB,EAAS,cAAgB0B,OAAO,ICmB1D1B,EAAAA,WAAeuB","file":"Dispatch.js","sourcesContent":["(function (dependencies, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(dependencies, factory);\n    }\n})([\"require\", \"exports\", \"../../Types\", \"./Utility\"], function (require, exports) {\n    \"use strict\";\n    /*!\n     * @author electricessence / https://github.com/electricessence/\n     * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n     */\n    var Types_1 = require(\"../../Types\");\n    var Utility_1 = require(\"./Utility\");\n    var VOID0 = void 0;\n    /**\n     * Simply takes a payload and passes it to all the listeners.\n     *\n     * While dispatching:\n     * * This is an unsafe method if by chance any of the listeners modify the array.\n     * * It cannot prevent changes to the payload.\n     *\n     * Improving safety:\n     * * Only use a local array that isn't exposed to the listeners.\n     * * Use the dispatch method instead as it makes a copy of the listeners array.\n     * * Freeze the listeners array so it can't be modified.\n     * * Freeze the payload.\n     *\n     * Specifying trap will catch any errors and pass them along if trap is a function.\n     * A payload is used instead of arguments for easy typing.\n     *\n     *\n     * @param listeners\n     * @param payload\n     * @param trap\n     */\n    function unsafe(listeners, payload, trap) {\n        if (listeners && listeners.length) {\n            for (var i = 0, len = listeners.length; i < len; i++) {\n                var fn = listeners[i];\n                if (!fn)\n                    continue; // Ignore null refs.\n                try {\n                    fn(payload);\n                }\n                catch (ex) {\n                    if (!trap)\n                        throw ex;\n                    else if (Types_1.Type.isFunction(trap))\n                        trap(ex, i);\n                }\n            }\n        }\n    }\n    exports.unsafe = unsafe;\n    /**\n     * Simply takes a payload and passes it to all the listeners.\n     * Returns the results in an array that matches the indexes of the listeners.\n     *\n     * @param listeners\n     * @param payload\n     * @param trap\n     * @returns {any}\n     */\n    function mapped(listeners, payload, trap) {\n        if (!listeners)\n            return listeners;\n        // Reuse the copy as the array result.\n        var result = Utility_1.copy(listeners);\n        if (listeners.length) {\n            for (var i = 0, len = result.length; i < len; i++) {\n                var fn = result[i];\n                try {\n                    result[i] = fn // Ignore null refs.\n                        ? fn(payload)\n                        : VOID0;\n                }\n                catch (ex) {\n                    result[i] = VOID0;\n                    if (!trap)\n                        throw ex;\n                    else if (Types_1.Type.isFunction(trap))\n                        trap(ex, i);\n                }\n            }\n        }\n        return result;\n    }\n    exports.mapped = mapped;\n    /**\n     * Simply takes a payload and passes it to all the listeners.\n     * Makes a copy of the listeners before calling dispatchUnsafe.\n     *\n     * @param listeners\n     * @param payload\n     * @param trap\n     */\n    function dispatch(listeners, payload, trap) {\n        unsafe(Utility_1.copy(listeners), payload, trap);\n    }\n    exports.dispatch = dispatch;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = dispatch;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../../Types\";\r\nimport {copy} from \"./Utility\";\r\nimport {IArray} from \"./IArray\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport interface DispatchErrorHandler\r\n{\r\n\t(ex:any, index:number):void\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n *\r\n * While dispatching:\r\n * * This is an unsafe method if by chance any of the listeners modify the array.\r\n * * It cannot prevent changes to the payload.\r\n *\r\n * Improving safety:\r\n * * Only use a local array that isn't exposed to the listeners.\r\n * * Use the dispatch method instead as it makes a copy of the listeners array.\r\n * * Freeze the listeners array so it can't be modified.\r\n * * Freeze the payload.\r\n *\r\n * Specifying trap will catch any errors and pass them along if trap is a function.\r\n * A payload is used instead of arguments for easy typing.\r\n *\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n */\r\nexport function unsafe<T>(\r\n\tlisteners:IArray<Selector<T,any>>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n{\r\n\tif(listeners && listeners.length)\r\n\t{\r\n\t\tfor(let i = 0, len = listeners.length; i<len; i++)\r\n\t\t{\r\n\t\t\tlet fn:Function = listeners[i];\r\n\t\t\tif(!fn) continue; // Ignore null refs.\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tfn(payload);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tif(!trap)\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\ttrap(ex, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n * Returns the results in an array that matches the indexes of the listeners.\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n * @returns {any}\r\n */\r\nexport function mapped<T,TResult>(\r\n\tlisteners:IArray<Selector<T,TResult>>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):TResult[]\r\n{\r\n\r\n\tif(!listeners) return <any>listeners;\r\n\t// Reuse the copy as the array result.\r\n\tconst result:any[] = copy(listeners);\r\n\tif(listeners.length)\r\n\t{\r\n\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tlet fn:Function = result[i];\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tresult[i] = fn // Ignore null refs.\r\n\t\t\t\t\t? fn(payload)\r\n\t\t\t\t\t: VOID0;\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = VOID0;\r\n\t\t\t\tif(!trap)\r\n\t\t\t\t\tthrow ex;\r\n\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\ttrap(ex, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n * Makes a copy of the listeners before calling dispatchUnsafe.\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n */\r\nexport function dispatch<T>(\r\n\tlisteners:IArray<Selector<T,any>>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n{\r\n\tunsafe(copy(listeners), payload, trap);\r\n}\r\n\r\nexport default dispatch;"]}