{"version":3,"sources":["System/Collections/Array/Sort.js","System/Collections/Array/Sort.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","ensureArray","value","createComparer","selector","order","equivalentToNaN","Types_1","Compare_1","by"],"mappings":";;;;CAIA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,cAAe,iBAAkB,SAAUI,EAASF,GCA9E,QAAAM,GAAwBC,GAEvBD,MAAOA,OAAMA,QAAQA,GACbA,GACDA,GA0BR,QAAAE,GACCC,EACAC,EACAC,GADAH,SAAAA,IAAAA,EAAAA,GACAA,SAAAA,IAAAA,EAAAA,IAEAA,IAAIA,IAAoBA,EAAAA,WAAKA,UAAUA,EAEvCA,OAAOA,UAACA,EAAqBA,GAQ5BA,IAAIA,GALAA,GAASA,EAAYA,EAASA,IAC9BA,EAASA,EAAYA,EAASA,IAC9BA,EAAMA,KAAKA,IAAIA,EAAOA,OAAQA,EAAOA,QAErCA,EAAiBA,MAAMA,QAAQA,GAASA,EAAQA,KAC5CA,EAAIA,EAAKA,EAAFA,EAAOA,IACtBA,CACCA,GAAIA,GAAKA,EAAOA,GAAIA,EAAKA,EAAOA,GAC5BA,EAAKA,EACDA,EAAEA,EAAOA,OAASA,EAAOA,GAAKA,EACxBA,CAEXA,KAECA,EAAAA,WAAKA,UAAUA,KACjBA,EAAKA,GACHA,EAAAA,WAAKA,UAAUA,KACjBA,EAAKA,GAIPA,IAAIA,GAAIA,EAAAA,QAAQA,EAAIA,EACpBA,IAAOA,IAAJA,EACFA,MAAOA,GAAEA,EAIXA,MAAOA,IAvET,GAAAI,GAAAV,EAAiB,eACjBW,EAAAX,EAAoC,gBAiCpBF,GAAAQ,eAAcA,EA0CXR,EAAAA,WAAOQ,EACPR,EAAAc,GAAEN","file":"System/Collections/Array/Sort.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../../Types', '../../Compare'], function (require, exports) {\r\n    ///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n    var Types_1 = require('../../Types');\r\n    var Compare_1 = require('../../Compare');\r\n    function ensureArray(value) {\r\n        return Array.isArray(value)\r\n            ? value\r\n            : [value];\r\n    }\r\n    function createComparer(selector, order, equivalentToNaN) {\r\n        if (order === void 0) { order = 1; }\r\n        if (equivalentToNaN === void 0) { equivalentToNaN = NaN; }\r\n        var nanHasEquivalent = !Types_1.default.isTrueNaN(equivalentToNaN);\r\n        return function (a, b) {\r\n            var aValue = ensureArray(selector(a));\r\n            var bValue = ensureArray(selector(b));\r\n            var len = Math.min(aValue.length, bValue.length);\r\n            var oArray = Array.isArray(order) ? order : null;\r\n            for (var i = 0; i < len; i++) {\r\n                var vA = aValue[i], vB = bValue[i], o = oArray\r\n                    ? (i < oArray.length ? oArray[i] : 1)\r\n                    : order;\r\n                if (nanHasEquivalent) {\r\n                    if (Types_1.default.isTrueNaN(vA))\r\n                        vA = equivalentToNaN;\r\n                    if (Types_1.default.isTrueNaN(vB))\r\n                        vB = equivalentToNaN;\r\n                }\r\n                var r = Compare_1.compare(vA, vB);\r\n                if (r !== 0)\r\n                    return o * r;\r\n            }\r\n            return 0;\r\n        };\r\n    }\r\n    exports.createComparer = createComparer;\r\n    exports.default = createComparer;\r\n    exports.by = createComparer;\r\n});\r\n//# sourceMappingURL=Sort.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n\r\nimport Type from '../../Types';\r\nimport {compare,CompareResult} from '../../Compare';\r\nimport Order from '../Sorting/Order';\r\n\r\nfunction ensureArray<T>(value:T|T[]):T[]\r\n{\r\n\treturn Array.isArray(value)\r\n\t\t? <T[]>value\r\n\t\t: [<T>value];\r\n}\r\n\r\n/**\r\n * A factory function that creates a comparer to be used in multi-dimensional sorting.\r\n *\r\n * <h4>Example</h4>\r\n * ```typescript\r\n * var myArray = [{a:1:b:2},{a:3,b:4},{a:1,b:3}];\r\n *\r\n * // First sort by a, then by b.\r\n * myArray.sort(\r\n *   createComparer(\r\n *     (e)=> [e.a, e.b],\r\n *     [Order.Ascending, Order.Descending]\r\n *   )\r\n * );\r\n *\r\n * // result: [{a:1,b:3},{a:1:b:2},{a:3,b:4}]\r\n * ```\r\n *\r\n * @param selector\r\n * @param order\r\n * @param equivalentToNaN\r\n * @returns {function((TSource|TSource[]), (TSource|TSource[])): CompareResult}\r\n */\r\nexport function createComparer<TSource,TSelect extends Primitive>(\r\n\tselector:Selector<TSource|TSource[],TSelect>,\r\n\torder:Order | Order[] = Order.Ascending,\r\n\tequivalentToNaN:any = NaN):Comparison<TSource|TSource[]>\r\n{\r\n\tvar nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);\r\n\r\n\treturn (a:TSource|TSource[], b:TSource|TSource[]):CompareResult=>\r\n\t{\r\n\t\t// Use an array always to ensure a single code path.\r\n\t\tvar aValue = ensureArray(selector(a));\r\n\t\tvar bValue = ensureArray(selector(b));\r\n\t\tvar len = Math.min(aValue.length, bValue.length);\r\n\r\n\t\tvar oArray:Order[] = Array.isArray(order) ? order : null;\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar vA = aValue[i], vB = bValue[i],\r\n\t\t\t    o  = oArray\r\n\t\t\t\t    ? (i<oArray.length ? oArray[i] : Order.Ascending)\r\n\t\t\t\t    : <Order>order;\r\n\r\n\t\t\tif(nanHasEquivalent)\r\n\t\t\t{\r\n\t\t\t\tif(Type.isTrueNaN(vA))\r\n\t\t\t\t\tvA = equivalentToNaN;\r\n\t\t\t\tif(Type.isTrueNaN(vB))\r\n\t\t\t\t\tvB = equivalentToNaN;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = compare(vA, vB);\r\n\t\t\tif(r!==CompareResult.Equal)\r\n\t\t\t\treturn o*r;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t};\r\n}\r\n\r\nexport {\r\n\tcreateComparer as default, // Allow for default import.\r\n\tcreateComparer as by // Alias for Sort.by(...) instead of Sort.createComparer\r\n}\r\n"]}