{"version":3,"sources":["System/Collections/Array/Procedure.js","System/Collections/Array/Procedure.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","sum","source","ignoreNaN","length","result","forEach","n","isNaN","every","average","NaN","count","product","found","ifSet","start","predicate","min","Infinity","max"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YCNJ,SAAAM,GAAoBC,EAAiBC,GAEpC,GAFoC,SAAAA,IAAAA,GAAA,IAEhCD,IAAWA,EAAOE,OACrB,MAAO,EAER,IAAIC,GAAS,CAab,OAZGF,GACFD,EAAOI,QAAQ,SAAAC,GAEVC,MAAMD,KAAIF,GAAUE,KAGzBL,EAAOO,MAAM,SAAAF,GAGZ,MADAF,IAAUE,GACFC,MAAMH,KAGTA,EAGR,QAAAK,GAAwBR,EAAiBC,GAExC,GAFwC,SAAAA,IAAAA,GAAA,IAEpCD,IAAWA,EAAOE,OACrB,MAAOO,IAER,IAAgBC,GAAZP,EAAS,CAyBb,OAxBGF,IAEFS,EAAQ,EACRV,EAAOI,QAAQ,SAAAC,GAEVC,MAAMD,KAETF,GAAUE,EACVK,SAOFA,EAAQV,EAAOE,OACfF,EAAOO,MAAM,SAAAF,GAGZ,MADAF,IAAUE,GACFC,MAAMH,OAKPO,GAASJ,MAAMH,GAAWM,IAAON,EAAOO,EAGlD,QAAAC,GAAwBX,EAAiBC,GAExC,GAFwC,SAAAA,IAAAA,GAAA,IAEpCD,IAAWA,EAAOE,OACrB,MAAOO,IAER,IAAIN,GAAS,CACb,IAAGF,EACH,CACC,GAAIW,IAAQ,CACZZ,GAAOI,QAAQ,SAAAC,GAEVC,MAAMD,KAETF,GAAUE,EACNO,IAAOA,GAAQ,MAIjBA,IACHT,EAASM,SAIVT,GAAOO,MAAM,SAAAF,GAEZ,MAAGC,OAAMD,IAERF,EAASM,KACF,IAGRN,GAAUE,GAEH,IAIT,OAAOF,GAGR,QAAAU,GACCb,EACAc,EACAb,EACAc,GAEA,IAAIf,IAAWA,EAAOE,OACrB,MAAOO,IAER,IAAIN,GAASW,CACb,IAAGb,EACH,CACC,GAAIW,IAAQ,CACZZ,GAAOI,QAAQ,SAAAC,GAEVC,MAAMD,KAENU,EAAUV,EAAGF,KACfA,EAASE,GACNO,IAAOA,GAAQ,MAIjBA,IACHT,EAASM,SAIVT,GAAOO,MAAM,SAAAF,GAEZ,MAAGC,OAAMD,IAERF,EAASM,KACF,IAGLM,EAAUV,EAAGF,KACfA,EAASE,IAEH,IAGT,OAAOF,GAIR,QAAAa,GAAoBhB,EAAiBC,GAEpC,MAFoC,UAAAA,IAAAA,GAAA,GAE7BY,EAAMb,IAASiB,EAAAA,GAAUhB,EAAW,SAACI,EAAGF,GAAW,MAAEA,GAAFE,IAG3D,QAAAa,GAAoBlB,EAAiBC,GAEpC,MAFoC,UAAAA,IAAAA,GAAA,GAE7BY,EAAMb,IAASiB,EAAAA,GAAUhB,EAAW,SAACI,EAAGF,GAAW,MAAAE,GAAEF,IAnJ7CV,EAAAM,IAAGA,EAqBHN,EAAAe,QAAOA,EAiCPf,EAAAkB,QAAOA,EAsFPlB,EAAAuB,IAAGA,EAKHvB,EAAAyB,IAAGA","file":"System/Collections/Array/Procedure.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\"], factory);\r\n    }\r\n})(function (require, exports) {\r\n    \"use strict\";\r\n    function sum(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        if (!source || !source.length)\r\n            return 0;\r\n        var result = 0;\r\n        if (ignoreNaN)\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n))\r\n                    result += n;\r\n            });\r\n        else\r\n            source.every(function (n) {\r\n                result += n;\r\n                return !isNaN(result);\r\n            });\r\n        return result;\r\n    }\r\n    exports.sum = sum;\r\n    function average(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        if (!source || !source.length)\r\n            return NaN;\r\n        var result = 0, count;\r\n        if (ignoreNaN) {\r\n            count = 0;\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n)) {\r\n                    result += n;\r\n                    count++;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            count = source.length;\r\n            source.every(function (n) {\r\n                result += n;\r\n                return !isNaN(result);\r\n            });\r\n        }\r\n        return (!count || isNaN(result)) ? NaN : (result / count);\r\n    }\r\n    exports.average = average;\r\n    function product(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        if (!source || !source.length)\r\n            return NaN;\r\n        var result = 1;\r\n        if (ignoreNaN) {\r\n            var found = false;\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n)) {\r\n                    result *= n;\r\n                    if (!found)\r\n                        found = true;\r\n                }\r\n            });\r\n            if (!found)\r\n                result = NaN;\r\n        }\r\n        else {\r\n            source.every(function (n) {\r\n                if (isNaN(n)) {\r\n                    result = NaN;\r\n                    return false;\r\n                }\r\n                result *= n;\r\n                return true;\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    exports.product = product;\r\n    function ifSet(source, start, ignoreNaN, predicate) {\r\n        if (!source || !source.length)\r\n            return NaN;\r\n        var result = start;\r\n        if (ignoreNaN) {\r\n            var found = false;\r\n            source.forEach(function (n) {\r\n                if (!isNaN(n)) {\r\n                    if (predicate(n, result))\r\n                        result = n;\r\n                    if (!found)\r\n                        found = true;\r\n                }\r\n            });\r\n            if (!found)\r\n                result = NaN;\r\n        }\r\n        else {\r\n            source.every(function (n) {\r\n                if (isNaN(n)) {\r\n                    result = NaN;\r\n                    return false;\r\n                }\r\n                if (predicate(n, result))\r\n                    result = n;\r\n                return true;\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    function min(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        return ifSet(source, +Infinity, ignoreNaN, function (n, result) { return n < result; });\r\n    }\r\n    exports.min = min;\r\n    function max(source, ignoreNaN) {\r\n        if (ignoreNaN === void 0) { ignoreNaN = false; }\r\n        return ifSet(source, -Infinity, ignoreNaN, function (n, result) { return n > result; });\r\n    }\r\n    exports.max = max;\r\n});\r\n//# sourceMappingURL=Procedure.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nexport function sum(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn 0;\r\n\r\n\tvar result = 0;\r\n\tif(ignoreNaN)\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n)) result += n;\r\n\t\t});\r\n\telse\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tresult += n;\r\n\t\t\treturn !isNaN(result);\r\n\t\t});\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function average(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = 0, count:number;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tcount = 0;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult += n;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\telse\r\n\t{\r\n\t\tcount = source.length;\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tresult += n;\r\n\t\t\treturn !isNaN(result);\r\n\t\t});\r\n\r\n\t}\r\n\r\n\treturn (!count || isNaN(result)) ? NaN : (result/count);\r\n}\r\n\r\nexport function product(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = 1;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tvar found = false;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult *= n;\r\n\t\t\t\tif(!found) found = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(!found)\r\n\t\t\tresult = NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tif(isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult = NaN;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tresult *= n;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction ifSet(\r\n\tsource:number[],\r\n\tstart:number,\r\n\tignoreNaN:boolean,\r\n\tpredicate:(n:number, result:number) => boolean)\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tvar result = start;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tvar found = false;\r\n\t\tsource.forEach(n =>\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tif(predicate(n, result))\r\n\t\t\t\t\tresult = n;\r\n\t\t\t\tif(!found) found = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif(!found)\r\n\t\t\tresult = NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsource.every(n =>\r\n\t\t{\r\n\t\t\tif(isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult = NaN;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif(predicate(n, result))\r\n\t\t\t\tresult = n;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\treturn result;\r\n\r\n}\r\n\r\nexport function min(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, +Infinity, ignoreNaN, (n, result) => n<result);\r\n}\r\n\r\nexport function max(source:number[], ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, -Infinity, ignoreNaN, (n, result) => n>result);\r\n}\r\n"]}