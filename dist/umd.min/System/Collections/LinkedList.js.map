{"version":3,"sources":["System/Collections/LinkedList.js","System/Collections/LinkedList.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","ensureExternal","node","list","external","LinkedListNode","getInternal","ArgumentNullException_1","InvalidOperationException_1","n","_node","Values","TextUtility","ArrayUtility","Enumerator","EnumeratorBase_1","ArgumentException_1","ArgumentOutOfRangeException_1","InternalNode","value","previous","next","this","prototype","assertDetached","LinkedList","source","_","c","first","last","e","from","moveNext","current","_first","_last","_count","_addFirst","entry","prev","_addLast","_addNodeBefore","inserting","_addNodeAfter","_findFirst","equals","areEqual","_findLast","forEach","action","useCopy","array","toArray","length","index","getEnumerator","yielder","yieldReturn","yieldBreak","Object","defineProperty","get","enumerable","configurable","add","clear","count","contains","found","copyTo","i","initialize","removeOnce","remove","removedCount","_getNodeAt","getValueAt","getNodeAt","find","findLast","addFirst","addLast","removeFirst","removeLast","removeNode","a","b","format","removed","addBefore","addAfter","addNodeBefore","before","addNodeAfter","after","_list","set"],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../Compare', '../Text/Utility', '../Collections/Array/Utility', './Enumeration/Enumerator', './Enumeration/EnumeratorBase', '../Exceptions/InvalidOperationException', '../Exceptions/ArgumentException', '../Exceptions/ArgumentNullException', '../Exceptions/ArgumentOutOfRangeException'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Values = require('../Compare');\n    var TextUtility = require('../Text/Utility');\n    var ArrayUtility = require('../Collections/Array/Utility');\n    var Enumerator = require('./Enumeration/Enumerator');\n    var EnumeratorBase_1 = require('./Enumeration/EnumeratorBase');\n    var InvalidOperationException_1 = require('../Exceptions/InvalidOperationException');\n    var ArgumentException_1 = require('../Exceptions/ArgumentException');\n    var ArgumentNullException_1 = require('../Exceptions/ArgumentNullException');\n    var ArgumentOutOfRangeException_1 = require('../Exceptions/ArgumentOutOfRangeException');\n    var InternalNode = (function () {\n        function InternalNode(value, previous, next) {\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        InternalNode.prototype.assertDetached = function () {\n            if (this.next || this.previous)\n                throw new InvalidOperationException_1.default(\"Adding a node that is already placed.\");\n        };\n        return InternalNode;\n    }());\n    function ensureExternal(node, list) {\n        if (!node)\n            return null;\n        var external = node.external;\n        if (!external)\n            node.external = external = new LinkedListNode(list, node);\n        return external;\n    }\n    function getInternal(node, list) {\n        if (!node)\n            throw new ArgumentNullException_1.default(\"Cannot be null.\");\n        if (node.list != list)\n            throw new InvalidOperationException_1.default(\"Provided node does not belong to this list.\");\n        var n = node._node;\n        if (!n)\n            throw new InvalidOperationException_1.default(\"Provided node is not valid.\");\n        return n;\n    }\n    var LinkedList = (function () {\n        function LinkedList(source) {\n            var _ = this, c = 0, first = null, last = null;\n            var e = Enumerator.from(source);\n            if (e.moveNext()) {\n                first = last = new InternalNode(e.current);\n                ++c;\n            }\n            while (e.moveNext()) {\n                last = last.next = new InternalNode(e.current, last);\n                ++c;\n            }\n            _._first = first;\n            _._last = last;\n            _._count = c;\n        }\n        LinkedList.prototype._addFirst = function (entry) {\n            var _ = this, first = _._first;\n            var prev = new InternalNode(entry, null, first);\n            if (first)\n                first.previous = prev;\n            else\n                _._last = prev;\n            _._first = prev;\n            _._count++;\n            return prev;\n        };\n        LinkedList.prototype._addLast = function (entry) {\n            var _ = this, last = _._last;\n            var next = new InternalNode(entry, last);\n            if (last)\n                last.next = next;\n            else\n                _._first = next;\n            _._last = next;\n            _._count++;\n            return next;\n        };\n        LinkedList.prototype._addNodeBefore = function (n, inserting) {\n            inserting.assertDetached();\n            inserting.next = n;\n            inserting.previous = n.previous;\n            n.previous.next = inserting;\n            n.previous = inserting;\n            this._count++;\n        };\n        LinkedList.prototype._addNodeAfter = function (n, inserting) {\n            inserting.assertDetached();\n            inserting.previous = n;\n            inserting.next = n.next;\n            n.next.previous = inserting;\n            n.next = inserting;\n            this._count++;\n        };\n        LinkedList.prototype._findFirst = function (entry) {\n            var equals = Values.areEqual, next = this._first;\n            while (next) {\n                if (equals(entry, next.value))\n                    return next;\n                next = next.next;\n            }\n            return null;\n        };\n        LinkedList.prototype._findLast = function (entry) {\n            var equals = Values.areEqual, prev = this._last;\n            while (prev) {\n                if (equals(entry, prev.value))\n                    return prev;\n                prev = prev.previous;\n            }\n            return null;\n        };\n        LinkedList.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            if (useCopy) {\n                var array = this.toArray();\n                ArrayUtility.forEach(array, action);\n                array.length = 0;\n            }\n            else {\n                var next = this._first, index = 0;\n                while (next && action(next.value, index++) !== false) {\n                    next = next.next;\n                }\n            }\n        };\n        LinkedList.prototype.getEnumerator = function () {\n            var _ = this, current;\n            return new EnumeratorBase_1.default(function () {\n                current = new InternalNode(null, null, _._first);\n            }, function (yielder) {\n                return (current = current.next)\n                    ? yielder.yieldReturn(current.value)\n                    : yielder.yieldBreak();\n            });\n        };\n        Object.defineProperty(LinkedList.prototype, \"count\", {\n            get: function () {\n                return this._count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"isReadOnly\", {\n            get: function () {\n                return false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedList.prototype.add = function (entry) {\n            this._addLast(entry);\n        };\n        LinkedList.prototype.clear = function () {\n            var _ = this;\n            _._first = null;\n            _._last = null;\n            var count = _._count;\n            _._count = 0;\n            return count;\n        };\n        LinkedList.prototype.contains = function (entry) {\n            var found = false, equals = Values.areEqual;\n            this.forEach(function (e) { return !(found = equals(entry, e)); });\n            return found;\n        };\n        LinkedList.prototype.copyTo = function (array, index) {\n            if (index === void 0) { index = 0; }\n            this.forEach(function (entry, i) {\n                array[index + i] = entry;\n            });\n            return array;\n        };\n        LinkedList.prototype.toArray = function () {\n            var array = ArrayUtility.initialize(this._count);\n            return this.copyTo(array);\n        };\n        LinkedList.prototype.removeOnce = function (entry) {\n            var _ = this;\n            var node = _._findFirst(entry);\n            if (node) {\n                var prev = node.previous, next = node.next;\n                if (prev)\n                    prev.next = next;\n                else\n                    _._first = next;\n                if (next)\n                    next.previous = prev;\n                else\n                    _._last = prev;\n                _._count--;\n            }\n            return node != null;\n        };\n        LinkedList.prototype.remove = function (entry) {\n            var _ = this, removedCount = 0;\n            while (_.removeOnce(entry)) {\n                ++removedCount;\n            }\n            return removedCount;\n        };\n        Object.defineProperty(LinkedList.prototype, \"first\", {\n            get: function () {\n                return ensureExternal(this._first, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"last\", {\n            get: function () {\n                return ensureExternal(this._last, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedList.prototype._getNodeAt = function (index) {\n            if (index < 0)\n                throw new ArgumentOutOfRangeException_1.default('index', index, 'Is less than zero.');\n            if (index >= this._count)\n                throw new ArgumentOutOfRangeException_1.default('index', index, 'Is greater than count.');\n            var next = this._first, i = 0;\n            while (next && index < i++) {\n                next = next.next;\n            }\n            return next;\n        };\n        LinkedList.prototype.getValueAt = function (index) {\n            return this._getNodeAt(index).value;\n        };\n        LinkedList.prototype.getNodeAt = function (index) {\n            return ensureExternal(this._getNodeAt(index), this);\n        };\n        LinkedList.prototype.find = function (entry) {\n            return ensureExternal(this._findFirst(entry), this);\n        };\n        LinkedList.prototype.findLast = function (entry) {\n            return ensureExternal(this._findLast(entry), this);\n        };\n        LinkedList.prototype.addFirst = function (entry) {\n            this._addFirst(entry);\n        };\n        LinkedList.prototype.addLast = function (entry) {\n            this._addLast(entry);\n        };\n        LinkedList.prototype.removeFirst = function () {\n            var _ = this, first = _._first;\n            if (first) {\n                var next = first.next;\n                _._first = next;\n                if (next)\n                    next.previous = null;\n                _._count--;\n            }\n        };\n        LinkedList.prototype.removeLast = function () {\n            var _ = this, last = _._last;\n            if (last) {\n                var prev = last.previous;\n                _._last = prev;\n                if (prev)\n                    prev.next = null;\n                _._count--;\n            }\n        };\n        LinkedList.prototype.removeNode = function (node) {\n            var _ = this;\n            var n = getInternal(node, _);\n            var prev = n.previous, next = n.next, a = false, b = false;\n            if (prev)\n                prev.next = next;\n            else if (_._first == n)\n                _._first = next;\n            else\n                a = true;\n            if (next)\n                next.previous = prev;\n            else if (_._last == n)\n                _._last = prev;\n            else\n                b = true;\n            if (a !== b) {\n                throw new ArgumentException_1.default('node', TextUtility.format(\"Provided node is has no {0} reference but is not the {1} node!\", a ? \"previous\" : \"next\", a ? \"first\" : \"last\"));\n            }\n            var removed = !a && !b;\n            if (removed)\n                _._count--;\n            return removed;\n        };\n        LinkedList.prototype.addBefore = function (node, entry) {\n            this._addNodeBefore(getInternal(node, this), new InternalNode(entry));\n        };\n        LinkedList.prototype.addAfter = function (node, entry) {\n            this._addNodeAfter(getInternal(node, this), new InternalNode(entry));\n        };\n        LinkedList.prototype.addNodeBefore = function (node, before) {\n            this._addNodeBefore(getInternal(node, this), getInternal(before, this));\n        };\n        LinkedList.prototype.addNodeAfter = function (node, after) {\n            this._addNodeAfter(getInternal(node, this), getInternal(after, this));\n        };\n        return LinkedList;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = LinkedList;\n    var LinkedListNode = (function () {\n        function LinkedListNode(_list, _node) {\n            this._list = _list;\n            this._node = _node;\n        }\n        Object.defineProperty(LinkedListNode.prototype, \"list\", {\n            get: function () {\n                return this._list;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"previous\", {\n            get: function () {\n                return ensureExternal(this._node.previous, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"next\", {\n            get: function () {\n                return ensureExternal(this._node.next, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"value\", {\n            get: function () {\n                return this._node.value;\n            },\n            set: function (v) {\n                this._node.value = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedListNode.prototype.addBefore = function (entry) {\n            this._list.addBefore(this, entry);\n        };\n        LinkedListNode.prototype.addAfter = function (entry) {\n            this._list.addAfter(this, entry);\n        };\n        LinkedListNode.prototype.addNodeBefore = function (before) {\n            this._list.addNodeBefore(this, before);\n        };\n        LinkedListNode.prototype.addNodeAfter = function (after) {\n            this._list.addNodeAfter(this, after);\n        };\n        LinkedListNode.prototype.remove = function () {\n            this._list.removeNode(this);\n        };\n        return LinkedListNode;\n    }());\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ILinkedListNode.d.ts\"/>\r\n///<reference path=\"ILinkedList.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from '../Compare';\r\nimport * as TextUtility from '../Text/Utility';\r\nimport * as ArrayUtility from '../Collections/Array/Utility';\r\nimport * as Enumerator from './Enumeration/Enumerator';\r\nimport EnumeratorBase from './Enumeration/EnumeratorBase';\r\n\r\nimport InvalidOperationException from '../Exceptions/InvalidOperationException';\r\n\r\nimport ArgumentException from '../Exceptions/ArgumentException';\r\nimport ArgumentNullException from '../Exceptions/ArgumentNullException';\r\nimport ArgumentOutOfRangeException from '../Exceptions/ArgumentOutOfRangeException';\r\n\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>,\r\n\t\tpublic next?:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:InternalNode<T>, list:LinkedList<T>):ILinkedListNode<T>\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\r\n\t\t\t\"Cannot be null.\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:InternalNode<T> = (<any>node)._node;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nexport default\r\nclass LinkedList<T>\r\nimplements ILinkedList<T>\r\n{\r\n\tprivate _first:InternalNode<T>;\r\n\tprivate _last:InternalNode<T>;\r\n\tprivate _count:number;\r\n\r\n\tconstructor(source?:IEnumerable<T>);\r\n\tconstructor(source?:IArray<T>);\r\n\tconstructor(source:any)\r\n\t{\r\n\t\tvar _ = this, c = 0, first:InternalNode<T> = null, last:InternalNode<T> = null;\r\n\t\tvar e = Enumerator.from<T>(source);\r\n\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tfirst = last = new InternalNode<T>(e.current);\r\n\t\t\t++c;\r\n\t\t}\r\n\r\n\t\twhile(e.moveNext())\r\n\t\t{\r\n\t\t\tlast = last.next = new InternalNode<T>(e.current, last);\r\n\t\t\t++c;\r\n\t\t}\r\n\r\n\t\t_._first = first;\r\n\t\t_._last = last;\r\n\t\t_._count = c;\r\n\t}\r\n\r\n\t// #region Internals.\r\n\r\n\tprivate _addFirst(entry:T):InternalNode<T>\r\n\t{\r\n\t\tvar _ = this, first = _._first;\r\n\t\tvar prev = new InternalNode(entry, null, first);\r\n\t\tif(first)\r\n\t\t\tfirst.previous = prev;\r\n\t\telse\r\n\t\t\t_._last = prev;\r\n\r\n\t\t_._first = prev;\r\n\r\n\t\t_._count++;\r\n\r\n\t\treturn prev;\r\n\t}\r\n\r\n\tprivate _addLast(entry:T):InternalNode<T>\r\n\t{\r\n\t\tvar _ = this, last = _._last;\r\n\t\tvar next = new InternalNode(entry, last);\r\n\t\tif(last)\r\n\t\t\tlast.next = next;\r\n\t\telse\r\n\t\t\t_._first = next;\r\n\r\n\t\t_._last = next;\r\n\t\t_._count++;\r\n\r\n\t\treturn next;\r\n\t}\r\n\r\n\tprivate _addNodeBefore(n:InternalNode<T>, inserting:InternalNode<T>):void\r\n\t{\r\n\t\tinserting.assertDetached();\r\n\r\n\t\tinserting.next = n;\r\n\t\tinserting.previous = n.previous;\r\n\r\n\t\tn.previous.next = inserting;\r\n\t\tn.previous = inserting;\r\n\r\n\t\tthis._count++;\r\n\t}\r\n\r\n\r\n\tprivate _addNodeAfter(n:InternalNode<T>, inserting:InternalNode<T>):void\r\n\t{\r\n\t\tinserting.assertDetached();\r\n\r\n\t\tinserting.previous = n;\r\n\t\tinserting.next = n.next;\r\n\r\n\t\tn.next.previous = inserting;\r\n\t\tn.next = inserting;\r\n\r\n\t\tthis._count++;\r\n\t}\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>\r\n\t{\r\n\t\tvar equals = Values.areEqual,\r\n\t\t    next   = this._first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>\r\n\t{\r\n\t\tvar equals = Values.areEqual,\r\n\t\t    prev   = this._last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region IEnumerateEach<T>\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):void\r\n\t{\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tvar array = this.toArray();\r\n\t\t\tArrayUtility.forEach(array, action);\r\n\t\t\tarray.length = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar next = this._first, index:number = 0;\r\n\t\t\twhile(next && <any>action(next.value, index++)!==false)\r\n\t\t\t{\r\n\t\t\t\tnext = next.next;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this, current:InternalNode<T>;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tcurrent = new InternalNode(null, null, _._first);\r\n\t\t\t}, // Initialize anchor...\r\n\t\t\t(yielder)=>\r\n\t\t\t\t(current = current.next)\r\n\t\t\t\t\t? yielder.yieldReturn(current.value)\r\n\t\t\t\t\t: yielder.yieldBreak()\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region ICollection<T>\r\n\tget count():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tadd(entry:T):void\r\n\t{\r\n\t\tthis._addLast(entry);\r\n\t}\r\n\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._first = null;\r\n\t\t_._last = null;\r\n\t\tvar count = _._count;\r\n\t\t_._count = 0;\r\n\t\treturn count;\r\n\t}\r\n\r\n\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tvar found:boolean = false, equals = Values.areEqual;\r\n\t\tthis.forEach(e => !(found = equals(entry, e)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\tcopyTo(array:T[], index:number = 0):T[]\r\n\t{\r\n\t\tthis.forEach(\r\n\t\t\t(entry, i) =>\r\n\t\t\t{\r\n\t\t\t\tarray[index + i] = entry;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn array;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar array = ArrayUtility.initialize<T>(this._count);\r\n\t\treturn this.copyTo(array);\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar node:InternalNode<T> = _._findFirst(entry);\r\n\t\tif(node)\r\n\t\t{\r\n\t\t\tvar prev = node.previous, next = node.next;\r\n\t\t\tif(prev) prev.next = next;\r\n\t\t\telse _._first = next;\r\n\t\t\tif(next) next.previous = prev;\r\n\t\t\telse _._last = prev;\r\n\r\n\t\t\t_._count--;\r\n\t\t}\r\n\r\n\t\treturn node!=null;\r\n\r\n\t}\r\n\r\n\tremove(entry:T):number\r\n\t{\r\n\t\tvar _ = this, removedCount:number = 0;\r\n\t\twhile(_.removeOnce(entry))\r\n\t\t{\r\n\t\t\t++removedCount;\r\n\t\t}\r\n\t\treturn removedCount;\r\n\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\tget first():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._first, this);\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._last, this);\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\tprivate _getNodeAt(index:number):InternalNode<T>\r\n\t{\r\n\t\tif(index<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\r\n\t\t\t\t'index', index, 'Is less than zero.');\r\n\r\n\t\tif(index>=this._count)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\r\n\t\t\t\t'index', index, 'Is greater than count.');\r\n\r\n\t\tvar next = this._first, i:number = 0;\r\n\t\twhile(next && index<i++)\r\n\t\t{\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\r\n\t\treturn next;\r\n\r\n\t}\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\treturn this._getNodeAt(index).value;\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis._addFirst(entry);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis._addLast(entry);\r\n\t}\r\n\r\n\tremoveFirst():void\r\n\t{\r\n\t\tvar _ = this, first = _._first;\r\n\t\tif(first)\r\n\t\t{\r\n\t\t\tvar next = first.next;\r\n\t\t\t_._first = next;\r\n\t\t\tif(next) // Might have been the last.\r\n\t\t\t\tnext.previous = null;\r\n\r\n\t\t\t_._count--;\r\n\t\t}\r\n\t}\r\n\r\n\tremoveLast():void\r\n\t{\r\n\t\tvar _ = this, last = _._last;\r\n\t\tif(last)\r\n\t\t{\r\n\t\t\tvar prev = last.previous;\r\n\t\t\t_._last = prev;\r\n\t\t\tif(prev) // Might have been the first.\r\n\t\t\t\tprev.next = null;\r\n\r\n\t\t\t_._count--;\r\n\t\t}\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n:InternalNode<T> = getInternal(node, _);\r\n\t\tvar prev = n.previous, next = n.next, a:boolean = false, b:boolean = false;\r\n\r\n\r\n\t\tif(prev) prev.next = next;\r\n\t\telse if(_._first==n) _._first = next;\r\n\t\telse a = true;\r\n\r\n\t\tif(next) next.previous = prev;\r\n\t\telse if(_._last==n) _._last = prev;\r\n\t\telse b = true;\r\n\r\n\t\tif(a!==b)\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(\r\n\t\t\t\t'node', TextUtility.format(\r\n\t\t\t\t\t\"Provided node is has no {0} reference but is not the {1} node!\",\r\n\t\t\t\t\ta ? \"previous\" : \"next\", a ? \"first\" : \"last\"\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tvar removed = !a && !b;\r\n\t\tif(removed) _._count--;\r\n\r\n\t\treturn removed;\r\n\r\n\t}\r\n\r\n\taddBefore(node:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tthis._addNodeBefore(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tnew InternalNode(entry)\r\n\t\t);\r\n\t}\r\n\r\n\r\n\taddAfter(node:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tthis._addNodeAfter(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tnew InternalNode(entry)\r\n\t\t);\r\n\t}\r\n\r\n\taddNodeBefore(node:ILinkedListNode<T>, before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._addNodeBefore(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tgetInternal(before, this)\r\n\t\t);\r\n\t}\r\n\r\n\taddNodeAfter(node:ILinkedListNode<T>, after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._addNodeAfter(\r\n\t\t\tgetInternal(node, this),\r\n\t\t\tgetInternal(after, this)\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _node:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._node.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._node.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this._node.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis._node.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\taddNodeBefore(before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeBefore(this, before);\r\n\t}\r\n\r\n\taddNodeAfter(after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeAfter(this, after);\r\n\t}\r\n\r\n\tremove():void\r\n\t{\r\n\t\tthis._list.removeNode(this);\r\n\t}\r\n\r\n}\r\n\r\n"]}