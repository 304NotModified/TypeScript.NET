{"version":3,"sources":["System/Collections/LinkedList.js","System/Collections/LinkedList.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","ensureExternal","node","list","ArgumentNullException_1","external","LinkedListNode","getInternal","InvalidOperationException_1","n","_nodeInternal","Compare_1","LinkedNodeList_1","CollectionBase_1","InternalNode","value","previous","next","assertDetached","LinkedList","_super","source","equalityComparer","areEqual","call","_","_listInternal","_importEntries","getCount","unsafeCount","_addInternal","entry","addNode","_removeInternal","max","Infinity","equals","_equalityComparer","removedCount","forEach","removeNode","_clearInternal","clear","action","useCopy","i","getEnumerator","valueEnumeratorFrom","_findFirst","first","_findLast","prev","last","removeOnce","remove","defineProperty","get","enumerable","configurable","getValueAt","index","getNodeAt","find","findLast","addFirst","addNodeBefore","_signalModification","addLast","add","removeFirst","removeLast","addBefore","before","addAfter","after","addNodeAfter","_list","set"],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Compare\", \"./LinkedNodeList\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentNullException\", \"./CollectionBase\"], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Compare_1 = require(\"../Compare\");\n    var LinkedNodeList_1 = require(\"./LinkedNodeList\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var InternalNode = (function () {\n        function InternalNode(value, previous, next) {\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        InternalNode.prototype.assertDetached = function () {\n            if (this.next || this.previous)\n                throw new InvalidOperationException_1.default(\"Adding a node that is already placed.\");\n        };\n        return InternalNode;\n    }());\n    function ensureExternal(node, list) {\n        if (!node)\n            return null;\n        if (!list)\n            throw new ArgumentNullException_1.default(\"list\");\n        var external = node.external;\n        if (!external)\n            node.external = external = new LinkedListNode(list, node);\n        return external;\n    }\n    function getInternal(node, list) {\n        if (!node)\n            throw new ArgumentNullException_1.default(\"node\");\n        if (!list)\n            throw new ArgumentNullException_1.default(\"list\");\n        if (node.list != list)\n            throw new InvalidOperationException_1.default(\"Provided node does not belong to this list.\");\n        var n = node._nodeInternal;\n        if (!n)\n            throw new InvalidOperationException_1.default(\"Provided node is not valid.\");\n        return n;\n    }\n    var LinkedList = (function (_super) {\n        __extends(LinkedList, _super);\n        function LinkedList(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            _._listInternal = new LinkedNodeList_1.default();\n            _._importEntries(source);\n        }\n        LinkedList.prototype.getCount = function () {\n            return this._listInternal.unsafeCount;\n        };\n        LinkedList.prototype._addInternal = function (entry) {\n            this._listInternal.addNode(new InternalNode(entry));\n            return true;\n        };\n        LinkedList.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this, equals = _._equalityComparer, list = _._listInternal, removedCount = 0;\n            list.forEach(function (node) {\n                if (equals(entry, node.value) && list.removeNode(node))\n                    removedCount++;\n                return removedCount < max;\n            });\n            return removedCount;\n        };\n        LinkedList.prototype._clearInternal = function () {\n            return this._listInternal.clear();\n        };\n        LinkedList.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            if (useCopy)\n                _super.prototype.forEach.call(this, action, useCopy);\n            else\n                this._listInternal.forEach(function (node, i) { return action(node.value, i); });\n        };\n        LinkedList.prototype.getEnumerator = function () {\n            return LinkedNodeList_1.default.valueEnumeratorFrom(this._listInternal);\n        };\n        LinkedList.prototype._findFirst = function (entry) {\n            var _ = this, equals = _._equalityComparer, next = _._listInternal.first;\n            while (next) {\n                if (equals(entry, next.value))\n                    return next;\n                next = next.next;\n            }\n            return null;\n        };\n        LinkedList.prototype._findLast = function (entry) {\n            var _ = this, equals = _._equalityComparer, prev = _._listInternal.last;\n            while (prev) {\n                if (equals(entry, prev.value))\n                    return prev;\n                prev = prev.previous;\n            }\n            return null;\n        };\n        LinkedList.prototype.removeOnce = function (entry) {\n            return this.remove(entry, 1) !== 0;\n        };\n        Object.defineProperty(LinkedList.prototype, \"first\", {\n            get: function () {\n                return ensureExternal(this._listInternal.first, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"last\", {\n            get: function () {\n                return ensureExternal(this._listInternal.last, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedList.prototype.getValueAt = function (index) {\n            var node = this._listInternal.getNodeAt(index);\n            if (!node)\n                return node && node.value || void (0);\n        };\n        LinkedList.prototype.getNodeAt = function (index) {\n            return ensureExternal(this._listInternal.getNodeAt(index), this);\n        };\n        LinkedList.prototype.find = function (entry) {\n            return ensureExternal(this._findFirst(entry), this);\n        };\n        LinkedList.prototype.findLast = function (entry) {\n            return ensureExternal(this._findLast(entry), this);\n        };\n        LinkedList.prototype.addFirst = function (entry) {\n            this._listInternal.addNodeBefore(new InternalNode(entry));\n            this._signalModification(true);\n        };\n        LinkedList.prototype.addLast = function (entry) {\n            this.add(entry);\n        };\n        LinkedList.prototype.removeFirst = function () {\n            var _ = this, first = _._listInternal.first;\n            if (first && _._listInternal.removeNode(first))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeLast = function () {\n            var _ = this, last = _._listInternal.last;\n            if (last && _._listInternal.removeNode(last))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeNode = function (node) {\n            var _ = this;\n            if (_._listInternal.removeNode(getInternal(node, _))) {\n                _._signalModification(true);\n                return true;\n            }\n            return false;\n        };\n        LinkedList.prototype.addBefore = function (before, entry) {\n            var _ = this;\n            _._listInternal.addNodeBefore(new InternalNode(entry), getInternal(before, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addAfter = function (after, entry) {\n            var _ = this;\n            _._listInternal.addNodeAfter(new InternalNode(entry), getInternal(after, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeBefore = function (node, before) {\n            var _ = this;\n            _._listInternal.addNodeBefore(getInternal(before, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeAfter = function (node, after) {\n            var _ = this;\n            this._listInternal.addNodeAfter(getInternal(after, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        return LinkedList;\n    }(CollectionBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = LinkedList;\n    var LinkedListNode = (function () {\n        function LinkedListNode(_list, _nodeInternal) {\n            this._list = _list;\n            this._nodeInternal = _nodeInternal;\n        }\n        Object.defineProperty(LinkedListNode.prototype, \"list\", {\n            get: function () {\n                return this._list;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"previous\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.previous, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"next\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.next, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"value\", {\n            get: function () {\n                return this._nodeInternal.value;\n            },\n            set: function (v) {\n                this._nodeInternal.value = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedListNode.prototype.addBefore = function (entry) {\n            this._list.addBefore(this, entry);\n        };\n        LinkedListNode.prototype.addAfter = function (entry) {\n            this._list.addAfter(this, entry);\n        };\n        LinkedListNode.prototype.addNodeBefore = function (before) {\n            this._list.addNodeBefore(this, before);\n        };\n        LinkedListNode.prototype.addNodeAfter = function (after) {\n            this._list.addNodeAfter(this, after);\n        };\n        LinkedListNode.prototype.remove = function () {\n            this._list.removeNode(this);\n        };\n        return LinkedListNode;\n    }());\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"ILinkedListNode.d.ts\"/>\r\n///<reference path=\"ILinkedList.d.ts\"/>\r\n///<reference path=\"IEnumerableOrArray.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport LinkedNodeList from \"./LinkedNodeList\";\r\nimport InvalidOperationException from \"../Exceptions/InvalidOperationException\";\r\nimport ArgumentNullException from \"../Exceptions/ArgumentNullException\";\r\nimport CollectionBase from \"./CollectionBase\";\r\n\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>,\r\n\t\tpublic next?:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:InternalNode<T>, list:LinkedList<T>):ILinkedListNode<T>\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nexport default\r\nclass LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\t_._importEntries(source);\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._listInternal.unsafeCount;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _            = this,\r\n\t\t    equals       = _._equalityComparer,\r\n\t\t    list         = _._listInternal,\r\n\t\t    removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(equals(entry, node.value) && list.removeNode(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t});\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\treturn this._listInternal.clear();\r\n\t}\r\n\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):void\r\n\t{\r\n\t\tif(useCopy) super.forEach(action, useCopy);\r\n\t\telse this._listInternal.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    next   = _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    prev   = _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.first, this);\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.last, this);\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\tvar node = this._listInternal.getNodeAt(index);\r\n\t\tif(!node)\r\n\t\t\treturn node && node.value || void(0);\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tremoveFirst():void\r\n\t{\r\n\t\tvar _ = this, first = _._listInternal.first;\r\n\t\tif(first && _._listInternal.removeNode(first))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tremoveLast():void\r\n\t{\r\n\t\tvar _ = this, last = _._listInternal.last;\r\n\t\tif(last && _._listInternal.removeNode(last))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(_._listInternal.removeNode(getInternal(node, _)))\r\n\t\t{\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeBefore(node:ILinkedListNode<T>, before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tgetInternal(before, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeAfter(node:ILinkedListNode<T>, after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tthis._listInternal.addNodeAfter(\r\n\t\t\tgetInternal(after, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\taddNodeBefore(before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeBefore(this, before);\r\n\t}\r\n\r\n\taddNodeAfter(after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeAfter(this, after);\r\n\t}\r\n\r\n\tremove():void\r\n\t{\r\n\t\tthis._list.removeNode(this);\r\n\t}\r\n\r\n}\r\n\r\n"]}