{"version":3,"sources":["System/Collections/LinkedList.js","System/Collections/LinkedList.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","ensureExternal","node","list","ArgumentNullException_1","ArgumentNullException","external","LinkedListNode","getInternal","InvalidOperationException_1","InvalidOperationException","n","_nodeInternal","detachExternal","e","_list","VOID0","Compare_1","LinkedNodeList_1","CollectionBase_1","extends_1","__extends","InternalNode","value","previous","next","this","prototype","assertDetached","LinkedList","_super","source","equalityComparer","areEqual","call","_listInternal","LinkedNodeList","_importEntries","assertVersion","version","_onDispose","l","dispose","getCount","li","unsafeCount","_addInternal","entry","addNode","_removeInternal","max","Infinity","_","equals","_equalityComparer","removedCount","forEach","_removeNodeInternal","_clearInternal","clear","action","useCopy","throwIfDisposed","i","getEnumerator","valueEnumeratorFrom","_findFirst","first","_findLast","prev","last","removeOnce","remove","Object","defineProperty","get","enumerable","configurable","getValueAt","index","getNodeAt","find","findLast","addFirst","assertModifiable","addNodeBefore","_signalModification","addLast","add","removeNode","removeFirst","removeLast","removeAt","addBefore","before","addAfter","after","addNodeAfter","CollectionBase","throwIfDetached","Error","set"],"mappings":"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","file":"LinkedList.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Compare\", \"./LinkedNodeList\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentNullException\", \"./CollectionBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Compare_1 = require(\"../Compare\");\n    var LinkedNodeList_1 = require(\"./LinkedNodeList\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var InternalNode = (function () {\n        function InternalNode(value, previous, next) {\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        InternalNode.prototype.assertDetached = function () {\n            if (this.next || this.previous)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Adding a node that is already placed.\");\n        };\n        return InternalNode;\n    }());\n    function ensureExternal(node, list) {\n        if (!node)\n            return null;\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        var external = node.external;\n        if (!external)\n            node.external = external = new LinkedListNode(list, node);\n        return external || null;\n    }\n    function getInternal(node, list) {\n        if (!node)\n            throw new ArgumentNullException_1.ArgumentNullException(\"node\");\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        if (node.list != list)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node does not belong to this list.\");\n        var n = node._nodeInternal;\n        if (!n)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node is not valid.\");\n        return n;\n    }\n    function detachExternal(node) {\n        if (node) {\n            var e = node.external;\n            if (e) {\n                e._list = VOID0;\n                e._nodeInternal = VOID0;\n            }\n            node.external = VOID0;\n        }\n    }\n    var LinkedList = (function (_super) {\n        __extends(LinkedList, _super);\n        function LinkedList(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, VOID0, equalityComparer);\n            this._listInternal = new LinkedNodeList_1.LinkedNodeList();\n            this._importEntries(source);\n        }\n        LinkedList.prototype.assertVersion = function (version) {\n            if (this._listInternal)\n                this._listInternal.assertVersion(version);\n            else\n                _super.prototype.assertVersion.call(this, version);\n        };\n        LinkedList.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var l = this._listInternal;\n            this._listInternal = null;\n            l.dispose();\n        };\n        LinkedList.prototype.getCount = function () {\n            var li = this._listInternal;\n            return li ? li.unsafeCount : 0;\n        };\n        LinkedList.prototype._addInternal = function (entry) {\n            this._listInternal.addNode(new InternalNode(entry));\n            return true;\n        };\n        LinkedList.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this, equals = _._equalityComparer, list = _._listInternal;\n            var removedCount = 0;\n            list.forEach(function (node) {\n                if (node && equals(entry, node.value) && _._removeNodeInternal(node))\n                    removedCount++;\n                return removedCount < max;\n            }, true);\n            return removedCount;\n        };\n        LinkedList.prototype._clearInternal = function () {\n            var list = this._listInternal;\n            list.forEach(function (node) { return detachExternal(node); });\n            return list.clear();\n        };\n        LinkedList.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            this.throwIfDisposed();\n            return useCopy\n                ? _super.prototype.forEach.call(this, action, useCopy)\n                : this._listInternal.forEach(function (node, i) { return action(node.value, i); });\n        };\n        LinkedList.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(this._listInternal);\n        };\n        LinkedList.prototype._findFirst = function (entry) {\n            var _ = this, equals = _._equalityComparer;\n            var next = _._listInternal && _._listInternal.first;\n            while (next) {\n                if (equals(entry, next.value))\n                    return next;\n                next = next.next;\n            }\n            return null;\n        };\n        LinkedList.prototype._findLast = function (entry) {\n            var _ = this, equals = _._equalityComparer;\n            var prev = _._listInternal && _._listInternal.last;\n            while (prev) {\n                if (equals(entry, prev.value))\n                    return prev;\n                prev = prev.previous;\n            }\n            return null;\n        };\n        LinkedList.prototype.removeOnce = function (entry) {\n            return this.remove(entry, 1) !== 0;\n        };\n        Object.defineProperty(LinkedList.prototype, \"first\", {\n            get: function () {\n                var li = this._listInternal;\n                return li && ensureExternal(li.first, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"firstValue\", {\n            get: function () {\n                var li = this._listInternal, node = li && li.first;\n                return node ? node.value : VOID0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"last\", {\n            get: function () {\n                var li = this._listInternal;\n                return ensureExternal(li.last, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"lastValue\", {\n            get: function () {\n                var li = this._listInternal, node = li && li.last;\n                return node ? node.value : VOID0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedList.prototype.getValueAt = function (index) {\n            var li = this._listInternal, node = li && li.getNodeAt(index);\n            return node ? node.value : VOID0;\n        };\n        LinkedList.prototype.getNodeAt = function (index) {\n            var li = this._listInternal;\n            return li && ensureExternal(li.getNodeAt(index), this);\n        };\n        LinkedList.prototype.find = function (entry) {\n            var li = this._listInternal;\n            return li && ensureExternal(this._findFirst(entry), this);\n        };\n        LinkedList.prototype.findLast = function (entry) {\n            var li = this._listInternal;\n            return li && ensureExternal(this._findLast(entry), this);\n        };\n        LinkedList.prototype.addFirst = function (entry) {\n            this.assertModifiable();\n            this._listInternal.addNodeBefore(new InternalNode(entry));\n            this._signalModification(true);\n        };\n        LinkedList.prototype.addLast = function (entry) {\n            this.add(entry);\n        };\n        LinkedList.prototype._removeNodeInternal = function (node) {\n            var _ = this;\n            if (node && _._listInternal.removeNode(node)) {\n                detachExternal(node);\n                _._signalModification(true);\n                return true;\n            }\n            return false;\n        };\n        LinkedList.prototype.removeFirst = function () {\n            var _ = this;\n            _.assertModifiable();\n            return _._removeNodeInternal(_._listInternal.first);\n        };\n        LinkedList.prototype.removeLast = function () {\n            var _ = this;\n            _.assertModifiable();\n            return _._removeNodeInternal(_._listInternal.last);\n        };\n        LinkedList.prototype.removeAt = function (index) {\n            var _ = this;\n            _.assertModifiable();\n            return _._removeNodeInternal(_._listInternal.getNodeAt(index));\n        };\n        LinkedList.prototype.removeNode = function (node) {\n            var _ = this;\n            _.assertModifiable();\n            return _._removeNodeInternal(getInternal(node, _));\n        };\n        LinkedList.prototype.addBefore = function (before, entry) {\n            var _ = this;\n            _.assertModifiable();\n            _._listInternal.addNodeBefore(new InternalNode(entry), getInternal(before, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addAfter = function (after, entry) {\n            var _ = this;\n            _.assertModifiable();\n            _._listInternal.addNodeAfter(new InternalNode(entry), getInternal(after, _));\n            _._signalModification(true);\n        };\n        return LinkedList;\n    }(CollectionBase_1.CollectionBase));\n    exports.LinkedList = LinkedList;\n    var LinkedListNode = (function () {\n        function LinkedListNode(_list, _nodeInternal) {\n            this._list = _list;\n            this._nodeInternal = _nodeInternal;\n        }\n        LinkedListNode.prototype.throwIfDetached = function () {\n            if (!this._list)\n                throw new Error(\"This node has been detached from its list and is no longer valid.\");\n        };\n        Object.defineProperty(LinkedListNode.prototype, \"list\", {\n            get: function () {\n                return this._list;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"previous\", {\n            get: function () {\n                this.throwIfDetached();\n                return ensureExternal(this._nodeInternal.previous, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"next\", {\n            get: function () {\n                this.throwIfDetached();\n                return ensureExternal(this._nodeInternal.next, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"value\", {\n            get: function () {\n                this.throwIfDetached();\n                return this._nodeInternal.value;\n            },\n            set: function (v) {\n                this.throwIfDetached();\n                this._nodeInternal.value = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedListNode.prototype.addBefore = function (entry) {\n            this.throwIfDetached();\n            this._list.addBefore(this, entry);\n        };\n        LinkedListNode.prototype.addAfter = function (entry) {\n            this.throwIfDetached();\n            this._list.addAfter(this, entry);\n        };\n        LinkedListNode.prototype.remove = function () {\n            var _ = this;\n            var list = _._list;\n            if (list)\n                list.removeNode(this);\n            _._list = VOID0;\n            _._nodeInternal = VOID0;\n        };\n        LinkedListNode.prototype.dispose = function () {\n            this.remove();\n        };\n        return LinkedListNode;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = LinkedList;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../Compare\";\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {ILinkedListNode, ILinkedNode, INodeWithValue} from \"./ILinkedListNode\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {EqualityComparison, PredicateWithIndex, ActionWithIndex} from \"../FunctionTypes\";\r\nimport {ILinkedList} from \"./ILinkedList\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>|null,\r\n\t\tpublic next?:InternalNode<T>|null)\r\n\t{\r\n\t}\r\n\r\n\texternal?:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(\r\n\tnode:InternalNode<T>|null|undefined,\r\n\tlist:LinkedList<T>):ILinkedListNode<T>|null\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tlet external = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external || null;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tlet n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nfunction detachExternal(node:InternalNode<any>):void\r\n{\r\n\tif(node)\r\n\t{\r\n\t\tconst e:any = node.external;\r\n\t\tif(e)\r\n\t\t{\r\n\t\t\te._list = VOID0;\r\n\t\t\te._nodeInternal = VOID0;\r\n\t\t}\r\n\t\tnode.external = VOID0;\r\n\t}\r\n}\r\n\r\nexport class LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate readonly _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(VOID0, equalityComparer);\r\n\t\tthis._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tassertVersion(version:number):void\r\n\t{\r\n\t\tif(this._listInternal)\r\n\t\t\tthis._listInternal.assertVersion(version);\r\n\t\telse // In case it's been disposed.\r\n\t\t\tsuper.assertVersion(version);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst l = this._listInternal;\r\n\t\t(<any>this)._listInternal = null;\r\n\t\tl.dispose();\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li ? li.unsafeCount : 0;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tconst _      = this,\r\n\t\t      equals = _._equalityComparer,\r\n\t\t      list   = _._listInternal;\r\n\t\tlet removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(node && equals(entry, node.value) && _._removeNodeInternal(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t}, true /* override versioning check */);\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst list = this._listInternal;\r\n\t\tlist.forEach(node=>detachExternal(node));\r\n\t\treturn list.clear();\r\n\t}\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number;\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number;\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._listInternal.forEach((node, i)=>action(<any>node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>|null\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tconst\r\n\t\t\t_      = this,\r\n\t\t\tequals = _._equalityComparer;\r\n\r\n\t\tlet next:any = _._listInternal && _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>|null\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tconst\r\n\t\t\t_      = this,\r\n\t\t\tequals = _._equalityComparer;\r\n\r\n\t\tlet prev:any = _._listInternal && _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>|null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.first, this);\r\n\t}\r\n\r\n\tget firstValue():T | undefined\r\n\t{\r\n\t\tconst li = this._listInternal, node = li && li.first;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>|null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn ensureExternal(li.last, this);\r\n\t}\r\n\r\n\tget lastValue():T | undefined\r\n\t{\r\n\t\tconst li = this._listInternal, node = li && li.last;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T | undefined\r\n\t{\r\n\t\tconst li = this._listInternal, node = li && li.getNodeAt(index);\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T> | null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T> | null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T> | null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis.assertModifiable();\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tprivate _removeNodeInternal(node:InternalNode<T>|null|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(node && _._listInternal.removeNode(node))\r\n\t\t{\r\n\t\t\tdetachExternal(node);\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.last);\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.getNodeAt(index));\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(getInternal(node, _));\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>, IDisposable\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tprivate throwIfDetached():void\r\n\t{\r\n\t\tif(!this._list)\r\n\t\t\tthrow new Error(\"This node has been detached from its list and is no longer valid.\");\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>|null\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>|null\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T|undefined\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T|undefined)\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\r\n\tremove():void\r\n\t{\r\n\t\tconst _:any = this;\r\n\t\tconst list = _._list;\r\n\t\tif(list) list.removeNode(this);\r\n\t\t_._list = VOID0;\r\n\t\t_._nodeInternal = VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.remove();\r\n\t}\r\n\r\n}\r\n\r\nexport default LinkedList;\r\n"]}