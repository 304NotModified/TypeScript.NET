{"version":3,"sources":["System/Collections/ReadOnlyCollectionWrapper.js","System/Collections/ReadOnlyCollectionWrapper.ts"],"names":["dependencies","factory","module","exports","v","require","undefined","define","amd","ArgumentNullException_1","ReadOnlyCollectionBase_1","extends_1","__extends","ReadOnlyCollectionWrapper","_super","c","_this","call","this","ArgumentNullException","_","_getCount","count","getEnumerator","ReadOnlyCollectionBase","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,EAAcC,GACrB,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAcC,KAEzB,UAAW,UAAW,sCAAuC,2BAA4B,iBAAkB,SAAUI,EAASF,GAC9H,YCPJ,IAAAM,GAAAJ,EAAA,uCACAK,EAAAL,EAAA,4BAEAM,EAAAN,EAAA,iBAEMO,EAAYD,EAAAA,WAElBE,EAAA,SAAAC,GAEC,QAAAD,GAAYE,GAAZ,GAAAC,GAECF,EAAAG,KAAAC,OAAOA,IAEP,KAAIH,EACH,KAAM,IAAIN,GAAAU,sBAAsB,aAEjC,IAAMC,GAAIJ,CDMA,OCLVI,GAAEC,UAAY,WAAI,MAAAN,GAAEO,OACpBF,EAAEG,cAAgB,WAAK,MAAAR,GAAEQ,iBDIRP,ECFnB,MAb0DJ,GAAAC,EAAAC,GAa1DD,GAb0DH,EAAAc,uBDmBtDC,QAAOC,eAAevB,EAAS,cAAgBwB,OAAO,IACtDxB,EAAAA,WAAkBU","file":"ReadOnlyCollectionWrapper.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (dependencies, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(dependencies, factory);\n    }\n})([\"require\", \"exports\", \"../Exceptions/ArgumentNullException\", \"./ReadOnlyCollectionBase\", \"../../extends\"], function (require, exports) {\n    \"use strict\";\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var ReadOnlyCollectionBase_1 = require(\"./ReadOnlyCollectionBase\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var ReadOnlyCollectionWrapper = (function (_super) {\n        __extends(ReadOnlyCollectionWrapper, _super);\n        function ReadOnlyCollectionWrapper(c) {\n            var _this = _super.call(this) || this;\n            if (!c)\n                throw new ArgumentNullException_1.ArgumentNullException('collection');\n            var _ = _this;\n            _._getCount = function () { return c.count; };\n            _.getEnumerator = function () { return c.getEnumerator(); };\n            return _this;\n        }\n        return ReadOnlyCollectionWrapper;\n    }(ReadOnlyCollectionBase_1.ReadOnlyCollectionBase));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ReadOnlyCollectionWrapper;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ReadOnlyCollectionBase} from \"./ReadOnlyCollectionBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport default class ReadOnlyCollectionWrapper<T> extends ReadOnlyCollectionBase<T>\r\n{\r\n\tconstructor(c:ICollection<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!c)\r\n\t\t\tthrow new ArgumentNullException('collection');\r\n\r\n\t\tconst _ = this;\r\n\t\t_._getCount = ()=>c.count;\r\n\t\t_.getEnumerator = ()=> c.getEnumerator();\r\n\t}\r\n}\r\n"]}