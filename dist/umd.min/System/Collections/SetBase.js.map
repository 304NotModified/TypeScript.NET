{"version":3,"sources":["System/Collections/SetBase.js","System/Collections/SetBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","LinkedNodeList_1","ArgumentNullException_1","Enumerator_1","dispose_1","Compare_1","CollectionBase_1","OTHER","SetBase","_super","source","call","areEqual","_importEntries","_getSet","s","_set","LinkedNodeList","getCount","unsafeCount","exceptWith","other","_","ArgumentNullException","forEach","_removeInternal","_incrementModified","_signalModification","intersectWith","n","contains","value","using","newUsing","o","isProperSubsetOf","_this","isProperSupersetOf","count","result","isSupersetOf","add","isSubsetOf","overlaps","setEquals","symmetricExceptWith","_addInternal","unionWith","importEntries","_clearInternal","clear","_onDispose","item","_getNode","getEnumerator","valueEnumeratorFrom","empty","action","useCopy","node","i","_removeNode","remove","removeFirst","first","removeLast","last","CollectionBase","defineProperty"],"mappings":"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","file":"System/Collections/SetBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./LinkedNodeList\", \"../Exceptions/ArgumentNullException\", \"./Enumeration/Enumerator\", \"../Disposable/dispose\", \"../Compare\", \"./CollectionBase\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var LinkedNodeList_1 = require(\"./LinkedNodeList\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var Enumerator_1 = require(\"./Enumeration/Enumerator\");\n    var dispose_1 = require(\"../Disposable/dispose\");\n    var Compare_1 = require(\"../Compare\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var OTHER = 'other';\n    var SetBase = (function (_super) {\n        __extends(SetBase, _super);\n        function SetBase(source) {\n            _super.call(this, null, Compare_1.areEqual);\n            this._importEntries(source);\n        }\n        SetBase.prototype._getSet = function () {\n            var s = this._set;\n            if (!s)\n                this._set = s = new LinkedNodeList_1.LinkedNodeList();\n            return s;\n        };\n        SetBase.prototype.getCount = function () {\n            return this._set ? this._set.unsafeCount : 0;\n        };\n        SetBase.prototype.exceptWith = function (other) {\n            var _ = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            Enumerator_1.forEach(other, function (v) {\n                if (_._removeInternal(v))\n                    _._incrementModified();\n            });\n            _._signalModification();\n        };\n        SetBase.prototype.intersectWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                var s = _._set;\n                if (s)\n                    s.forEach(function (n) {\n                        if (!other.contains(n.value) && _._removeInternal(n.value))\n                            _._incrementModified();\n                    });\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(_.newUsing(other), function (o) { return _.intersectWith(o); });\n            }\n        };\n        SetBase.prototype.isProperSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isProperSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isProperSupersetOf(_this); });\n        };\n        SetBase.prototype.isProperSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true, count;\n            if (other instanceof SetBase) {\n                result = this.isSupersetOf(other);\n                count = other.getCount();\n            }\n            else {\n                dispose_1.using(this.newUsing(), function (o) {\n                    Enumerator_1.forEach(other, function (v) {\n                        o.add(v);\n                        return result = _this.contains(v);\n                    });\n                    count = o.getCount();\n                });\n            }\n            return result && this.getCount() > count;\n        };\n        SetBase.prototype.isSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isSupersetOf(_this); });\n        };\n        SetBase.prototype.isSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true;\n            Enumerator_1.forEach(other, function (v) {\n                return result = _this.contains(v);\n            });\n            return result;\n        };\n        SetBase.prototype.overlaps = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = false;\n            Enumerator_1.forEach(other, function (v) { return !(result = _this.contains(v)); });\n            return result;\n        };\n        SetBase.prototype.setEquals = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return this.getCount() == (other instanceof SetBase\n                ? other.getCount()\n                : dispose_1.using(this.newUsing(other), function (o) { return o.getCount(); }))\n                && this.isSubsetOf(other);\n        };\n        SetBase.prototype.symmetricExceptWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                Enumerator_1.forEach(other, function (v) {\n                    if (_.contains(v)) {\n                        if (_._removeInternal(v))\n                            _._incrementModified();\n                    }\n                    else {\n                        if (_._addInternal(v))\n                            _._incrementModified();\n                    }\n                });\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(this.newUsing(other), function (o) { return _.symmetricExceptWith(o); });\n            }\n        };\n        SetBase.prototype.unionWith = function (other) {\n            this.importEntries(other);\n        };\n        SetBase.prototype._clearInternal = function () {\n            var s = this._set;\n            return s ? s.clear() : 0;\n        };\n        SetBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._set = null;\n        };\n        SetBase.prototype.contains = function (item) {\n            return !(!this.getCount() || !this._getNode(item));\n        };\n        SetBase.prototype.getEnumerator = function () {\n            var s = this._set;\n            return s && this.getCount()\n                ? LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(s)\n                : Enumerator_1.empty;\n        };\n        SetBase.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            if (useCopy)\n                _super.prototype.forEach.call(this, action, useCopy);\n            else\n                this._set.forEach(function (node, i) { return action(node.value, i); });\n        };\n        SetBase.prototype._removeNode = function (node) {\n            if (!node)\n                return false;\n            return this.remove(node.value) != 0;\n        };\n        SetBase.prototype.removeFirst = function () {\n            var s = this._set;\n            return this._removeNode(s && s.first);\n        };\n        SetBase.prototype.removeLast = function () {\n            var s = this._set;\n            return this._removeNode(s && s.last);\n        };\n        return SetBase;\n    }(CollectionBase_1.CollectionBase));\n    exports.SetBase = SetBase;\n    function wipe(map, depth) {\n        if (depth === void 0) { depth = 1; }\n        if (map && depth) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var v = map[key];\n                delete map[key];\n                wipe(v, depth - 1);\n            }\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SetBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {forEach, empty as emptyEnumerator} from \"./Enumeration/Enumerator\";\r\nimport {using} from \"../Disposable/dispose\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {ILinkedNodeWithValue} from \"./ILinkedListNode\";\r\nimport {Predicate, Action} from \"../FunctionTypes\";\r\nimport {IMap} from \"./Dictionaries/IDictionary\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ISet} from \"./ISet\";\r\n\r\nconst OTHER = 'other';\r\n\r\nexport abstract class SetBase<T>\r\nextends CollectionBase<T> implements ISet<T>, IDisposable\r\n{\r\n\r\n\tconstructor(source?:IEnumerableOrArray<T>)\r\n\t{\r\n\t\tsuper(null, areEqual);\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tprotected abstract newUsing(source?:IEnumerableOrArray<T>):SetBase<T>;\r\n\r\n\tprotected _set:LinkedNodeList<ILinkedNodeWithValue<T>>;\r\n\r\n\tprotected _getSet():LinkedNodeList<ILinkedNodeWithValue<T>>\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\tif(!s) this._set = s = new LinkedNodeList<ILinkedNodeWithValue<T>>();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._set ? this._set.unsafeCount : 0;\r\n\t}\r\n\r\n\texceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t_._incrementModified();\r\n\t\t});\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tintersectWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tlet s = _._set;\r\n\t\t\tif(s) s.forEach(n=>\r\n\t\t\t{\r\n\t\t\t\tif(!other.contains(n.value) && _._removeInternal(n.value))\r\n\t\t\t\t\t_._incrementModified();\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(_.newUsing(other), o=>_.intersectWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tisProperSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isProperSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isProperSupersetOf(this));\r\n\t}\r\n\r\n\tisProperSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = true, count:number;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tresult = this.isSupersetOf(other);\r\n\t\t\tcount = other.getCount();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(), o=>\r\n\t\t\t{\r\n\t\t\t\tforEach(other, v=>\r\n\t\t\t\t{\r\n\t\t\t\t\to.add(v); // We have to add to another set in order to filter out duplicates.\r\n\t\t\t\t\treturn result = this.contains(v);\r\n\t\t\t\t});\r\n\t\t\t\tcount = o.getCount();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result && this.getCount()>count;\r\n\t}\r\n\r\n\tisSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isSupersetOf(this));\r\n\t}\r\n\r\n\tisSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = true;\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\treturn result = this.contains(v);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\toverlaps(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = false;\r\n\t\tforEach(other, v => !(result = this.contains(v)));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsetEquals(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn this.getCount()==(\r\n\t\t\t\tother instanceof SetBase\r\n\t\t\t\t\t? other.getCount()\r\n\t\t\t\t\t: using(this.newUsing(other), o=> o.getCount()))\r\n\t\t\t&& this.isSubsetOf(other);\r\n\t}\r\n\r\n\tsymmetricExceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tforEach(other, v=>\r\n\t\t\t{\r\n\t\t\t\tif(_.contains(v))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._addInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(other), o=>_.symmetricExceptWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tunionWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tthis.importEntries(other);\r\n\t}\r\n\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn s ? s.clear() : 0;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._set = null;\r\n\t}\r\n\r\n\tprotected abstract _getNode(item:T):ILinkedNodeWithValue<T>;\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn !(!this.getCount() || !this._getNode(item));\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn s && this.getCount()\r\n\t\t\t? LinkedNodeList.valueEnumeratorFrom<T>(s)\r\n\t\t\t: emptyEnumerator;\r\n\t}\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):void\r\n\t{\r\n\t\tif(useCopy) super.forEach(action, useCopy);\r\n\t\telse this._set.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\tprotected _removeNode(node:ILinkedNodeWithValue<T>):boolean\r\n\t{\r\n\t\tif(!node) return false;\r\n\t\treturn this.remove(node.value)!=0;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn this._removeNode(s && s.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn this._removeNode(s && s.last);\r\n\t}\r\n\r\n\r\n}\r\n\r\nfunction wipe(map:IMap<any>, depth:number = 1):void\r\n{\r\n\tif(map && depth)\r\n\t{\r\n\t\tfor(var key of Object.keys(map))\r\n\t\t{\r\n\t\t\tvar v = map[key];\r\n\t\t\tdelete map[key];\r\n\t\t\twipe(v, depth - 1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default SetBase;"]}