{"version":3,"sources":["System/Collections/Enumeration/EnumeratorBase.js","System/Collections/Enumeration/EnumeratorBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","yielder","recycle","yielderPool","ObjectPool_1","ObjectPool","Yielder","y","yieldBreak","add","take","Types_1","DisposableBase_1","IteratorResult_1","extends_1","__extends","VOID0","this","_current","_index","NaN","Object","defineProperty","prototype","get","enumerable","configurable","yieldReturn","value","isNaN","dispose","NAME","EnumeratorBase","_super","_initializer","_tryGetNext","disposer","isEndless","call","_disposableObjectName","reset","Type","isBoolean","_isEndless","isFunction","_disposer","_yielder","current","index","_","throwIfDisposed","_state","_assertBadState","tryGetCurrent","out","moveNext","initializer","e","tryMoveNext","nextValue","next","IteratorResult","Done","end","_ensureDisposeState","state","wasDisposed","_onDispose","DisposableBase"],"mappings":"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","file":"EnumeratorBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../../Types\", \"../../Disposable/DisposableBase\", \"../../Disposable/ObjectPool\", \"./IteratorResult\", \"../../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../../Types\");\n    var DisposableBase_1 = require(\"../../Disposable/DisposableBase\");\n    var ObjectPool_1 = require(\"../../Disposable/ObjectPool\");\n    var IteratorResult_1 = require(\"./IteratorResult\");\n    var extends_1 = require(\"../../../extends\");\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var yielderPool;\n    function yielder(recycle) {\n        if (!yielderPool)\n            yielderPool\n                = new ObjectPool_1.ObjectPool(40, function () { return new Yielder(); }, function (y) { return y.yieldBreak(); });\n        if (!recycle)\n            return yielderPool.take();\n        yielderPool.add(recycle);\n    }\n    var Yielder = (function () {\n        function Yielder() {\n            this._current = VOID0;\n            this._index = NaN;\n        }\n        Object.defineProperty(Yielder.prototype, \"current\", {\n            get: function () { return this._current; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Yielder.prototype, \"index\", {\n            get: function () { return this._index; },\n            enumerable: true,\n            configurable: true\n        });\n        Yielder.prototype.yieldReturn = function (value) {\n            this._current = value;\n            if (isNaN(this._index))\n                this._index = 0;\n            else\n                this._index++;\n            return true;\n        };\n        Yielder.prototype.yieldBreak = function () {\n            this._current = VOID0;\n            this._index = NaN;\n            return false;\n        };\n        Yielder.prototype.dispose = function () {\n            this.yieldBreak();\n        };\n        return Yielder;\n    }());\n    var NAME = \"EnumeratorBase\";\n    var EnumeratorBase = (function (_super) {\n        __extends(EnumeratorBase, _super);\n        function EnumeratorBase(_initializer, _tryGetNext, disposer, isEndless) {\n            _super.call(this);\n            this._initializer = _initializer;\n            this._tryGetNext = _tryGetNext;\n            this._disposableObjectName = NAME;\n            this.reset();\n            if (Types_1.Type.isBoolean(isEndless))\n                this._isEndless = isEndless;\n            else if (Types_1.Type.isBoolean(disposer))\n                this._isEndless = disposer;\n            if (Types_1.Type.isFunction(disposer))\n                this._disposer = disposer;\n        }\n        Object.defineProperty(EnumeratorBase.prototype, \"current\", {\n            get: function () {\n                var y = this._yielder;\n                return y && y.current;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EnumeratorBase.prototype, \"index\", {\n            get: function () {\n                var y = this._yielder;\n                return y ? y.index : NaN;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EnumeratorBase.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        EnumeratorBase.prototype.reset = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var y = _._yielder;\n            _._yielder = null;\n            _._state = 0;\n            if (y)\n                yielder(y);\n        };\n        EnumeratorBase.prototype._assertBadState = function () {\n            var _ = this;\n            switch (_._state) {\n                case 3:\n                    _.throwIfDisposed(\"This enumerator caused a fault and was disposed.\");\n                    break;\n                case 5:\n                    _.throwIfDisposed(\"This enumerator was manually disposed.\");\n                    break;\n            }\n        };\n        EnumeratorBase.prototype.tryGetCurrent = function (out) {\n            this._assertBadState();\n            if (this._state === 1) {\n                out(this.current);\n                return true;\n            }\n            return false;\n        };\n        Object.defineProperty(EnumeratorBase.prototype, \"canMoveNext\", {\n            get: function () {\n                return this._state < 2;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        EnumeratorBase.prototype.moveNext = function () {\n            var _ = this;\n            _._assertBadState();\n            try {\n                switch (_._state) {\n                    case 0:\n                        _._yielder = _._yielder || yielder();\n                        _._state = 1;\n                        var initializer = _._initializer;\n                        if (initializer)\n                            initializer();\n                    case 1:\n                        if (_._tryGetNext(_._yielder)) {\n                            return true;\n                        }\n                        else {\n                            this.dispose();\n                            _._state = 2;\n                            return false;\n                        }\n                    default:\n                        return false;\n                }\n            }\n            catch (e) {\n                this.dispose();\n                _._state = 3;\n                throw e;\n            }\n        };\n        EnumeratorBase.prototype.tryMoveNext = function (out) {\n            if (this.moveNext()) {\n                out(this.current);\n                return true;\n            }\n            return false;\n        };\n        EnumeratorBase.prototype.nextValue = function () {\n            return this.moveNext()\n                ? this.current\n                : VOID0;\n        };\n        EnumeratorBase.prototype.next = function () {\n            return this.moveNext()\n                ? new IteratorResult_1.IteratorResult(this.current, this.index)\n                : IteratorResult_1.IteratorResult.Done;\n        };\n        EnumeratorBase.prototype.end = function () {\n            this._ensureDisposeState(4);\n        };\n        EnumeratorBase.prototype['return'] = function (value) {\n            var _ = this;\n            _._assertBadState();\n            try {\n                return value === VOID0 || _._state === 2 || _._state === 4\n                    ? IteratorResult_1.IteratorResult.Done\n                    : new IteratorResult_1.IteratorResult(value, VOID0, true);\n            }\n            finally {\n                _.end();\n            }\n        };\n        EnumeratorBase.prototype._ensureDisposeState = function (state) {\n            var _ = this;\n            if (!_.wasDisposed) {\n                _.dispose();\n                _._state = state;\n            }\n        };\n        EnumeratorBase.prototype._onDispose = function () {\n            var _ = this;\n            _._isEndless = false;\n            var disposer = _._disposer;\n            _._initializer = null;\n            _._disposer = null;\n            var y = _._yielder;\n            _._yielder = null;\n            this._state = 5;\n            if (y)\n                yielder(y);\n            if (disposer)\n                disposer();\n        };\n        return EnumeratorBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.EnumeratorBase = EnumeratorBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = EnumeratorBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IDisposable} from \"../../Disposable/IDisposable\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IYield} from \"./IYield\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport __extendsImport from \"../../../extends\";\r\nimport {Closure, Action} from \"../../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nvar yielderPool:ObjectPool<Yielder<any>>;\r\nfunction yielder():Yielder<any>;\r\nfunction yielder(recycle?:Yielder<any>):void;\r\nfunction yielder(recycle?:Yielder<any>):Yielder<any>|void\r\n{\r\n\tif(!yielderPool)\r\n\t\tyielderPool\r\n\t\t\t= new ObjectPool<Yielder<any>>(40, ()=>new Yielder<any>(), y=>y.yieldBreak());\r\n\tif(!recycle) return yielderPool.take();\r\n\tyielderPool.add(recycle);\r\n}\r\n\r\nclass Yielder<T> implements IYield<T>, IDisposable\r\n{\r\n\tprivate _current:T|undefined = VOID0;\r\n\tprivate _index:number = NaN;\r\n\r\n\tget current():T|undefined { return this._current; } // this class is not entirely local/private.  Still needs protection.\r\n\r\n\tget index():number { return this._index; }\r\n\r\n\tyieldReturn(value:T):boolean\r\n\t{\r\n\t\tthis._current = value;\r\n\t\tif(isNaN(this._index))\r\n\t\t\tthis._index = 0;\r\n\t\telse\r\n\t\t\tthis._index++;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tyieldBreak():boolean\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = NaN;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.yieldBreak();\r\n\t}\r\n}\r\n\r\n// IEnumerator State\r\nconst enum EnumeratorState { Before, Active, Completed, Faulted, Interrupted, Disposed }\r\n\r\nconst NAME = \"EnumeratorBase\";\r\n\r\n// \"Enumerator\" is conflict JScript's \"Enumerator\"\r\n// Naming this class EnumeratorBase to avoid collision with IE.\r\nexport class EnumeratorBase<T> extends DisposableBase implements IEnumerator<T>\r\n{\r\n\r\n\tprivate _yielder:Yielder<T>;\r\n\tprivate _state:EnumeratorState;\r\n\tprivate _disposer:()=>void;\r\n\r\n\tget current():T|undefined\r\n\t{\r\n\t\tvar y = this._yielder;\r\n\t\treturn y && y.current;\r\n\t}\r\n\r\n\tget index():number\r\n\t{\r\n\t\tvar y = this._yielder;\r\n\t\treturn y ? y.index : NaN;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tinitializer:Closure|null,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tinitializer:Closure|null,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:Closure|null,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tprivate _initializer:Closure,\r\n\t\tprivate _tryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:Closure|boolean|null,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = NAME;\r\n\t\tthis.reset();\r\n\t\tif(Type.isBoolean(isEndless))\r\n\t\t\tthis._isEndless = isEndless;\r\n\t\telse if(Type.isBoolean(disposer))\r\n\t\t\tthis._isEndless = disposer;\r\n\r\n\t\tif(Type.isFunction(disposer))\r\n\t\t\tthis._disposer = disposer;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\t/*\r\n\t * Provides a mechanism to indicate if this enumerable never ends.\r\n\t * If set to true, some operations that expect a finite result may throw.\r\n\t * Explicit false means it has an end.\r\n\t * Implicit void means unknown.\r\n\t */\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t/**\r\n\t * Added for compatibility but only works if the enumerator is active.\r\n\t */\r\n\treset():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tvar y = _._yielder;\r\n\t\t_._yielder = <any>null;\r\n\r\n\t\t_._state = EnumeratorState.Before;\r\n\r\n\t\tif(y) yielder(y); // recycle until actually needed.\r\n\t}\r\n\r\n\tprivate _assertBadState() {\r\n\t\tconst _ = this;\r\n\t\tswitch(_._state)\r\n\t\t{\r\n\t\t\tcase EnumeratorState.Faulted:\r\n\t\t\t\t_.throwIfDisposed(\"This enumerator caused a fault and was disposed.\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase EnumeratorState.Disposed:\r\n\t\t\t\t_.throwIfDisposed(\"This enumerator was manually disposed.\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Passes the current value to the out callback if the enumerator is active.\r\n\t * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\r\n\t */\r\n\ttryGetCurrent(out:Action<T>):boolean {\r\n\t\tthis._assertBadState();\r\n\t\tif(this._state===EnumeratorState.Active) {\r\n\t\t\tout(<T>this.current);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tget canMoveNext():boolean {\r\n\t\treturn this._state < EnumeratorState.Completed;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely moves to the next entry and returns true if there is one.\r\n\t * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\r\n\t */\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\t_._assertBadState();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(_._state)\r\n\t\t\t{\r\n\t\t\t\tcase EnumeratorState.Before:\r\n\t\t\t\t\t_._yielder = _._yielder || yielder();\r\n\t\t\t\t\t_._state = EnumeratorState.Active;\r\n\t\t\t\t\tvar initializer = _._initializer;\r\n\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\tinitializer();\r\n\t\t\t\t// fall through\r\n\t\t\t\tcase EnumeratorState.Active:\r\n\t\t\t\t\tif(_._tryGetNext(_._yielder))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.dispose();\r\n\t\t\t\t\t\t_._state = EnumeratorState.Completed;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t\t_._state = EnumeratorState.Faulted;\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Moves to the next entry and emits the value through the out callback.\r\n\t * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\r\n\t */\r\n\ttryMoveNext(out:Action<T>):boolean {\r\n\t\tif(this.moveNext()) {\r\n\t\t\tout(<T>this.current);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tnextValue():T|undefined\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? this.current\r\n\t\t\t: VOID0;\r\n\t}\r\n\r\n\t/**\r\n\t * Exposed for compatibility with generators.\r\n\t */\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this.current, this.index)\r\n\t\t\t: IteratorResult.Done\r\n\t}\r\n\r\n\tend():void {\r\n\t\tthis._ensureDisposeState(EnumeratorState.Interrupted);\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._assertBadState();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value===VOID0 || _._state===EnumeratorState.Completed || _._state===EnumeratorState.Interrupted\r\n\t\t\t\t? IteratorResult.Done\r\n\t\t\t\t: new IteratorResult(value, VOID0, true);\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_.end();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _ensureDisposeState(state:EnumeratorState):void {\r\n\t\tconst _ = this;\r\n\t\tif(!_.wasDisposed) {\r\n\t\t\t_.dispose();\r\n\t\t\t_._state = state;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._isEndless = false;\r\n\t\tvar disposer = _._disposer;\r\n\r\n\t\t_._initializer = <any>null;\r\n\t\t_._disposer = <any>null;\r\n\r\n\r\n\t\tvar y = _._yielder;\r\n\t\t_._yielder = <any>null;\r\n\t\tthis._state = EnumeratorState.Disposed;\r\n\r\n\t\tif(y) yielder(y);\r\n\r\n\t\tif(disposer)\r\n\t\t\tdisposer();\r\n\t}\r\n\r\n}\r\n\r\nexport default EnumeratorBase;\r\n"]}