!function(e,r){if("object"==typeof module&&"object"==typeof module.exports){var t=r(require,exports);void 0!==t&&(module.exports=t)}else"function"==typeof define&&define.amd&&define(e,r)}(["require","exports","./EnumeratorBase","../../../extends"],function(e,r){"use strict";/*!
     * @author electricessence / https://github.com/electricessence/
     * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md
     */
var t=e("./EnumeratorBase"),n=e("../../../extends"),o=n["default"],i=function(e){function r(r){var t,n;return t=e.call(this,function(){if(n=r(),n&&n.source){var e=n.length;if(e<0)throw new Error("length must be zero or greater");if(!isFinite(e))throw new Error("length must finite number");if(e&&0===n.step)throw new Error("Invalid IndexEnumerator step value (0).");var t=n.pointer;if(t){if(t!=Math.floor(t))throw new Error("Invalid IndexEnumerator pointer value ("+t+") has decimal.")}else t=0;n.pointer=t;var o=n.step;if(o){if(o!=Math.floor(o))throw new Error("Invalid IndexEnumerator step value ("+o+") has decimal.")}else o=1;n.step=o}},function(e){var r=n&&n.source?n.length:0;if(!r||isNaN(r))return e.yieldBreak();var t=n.pointer;return n.pointer+=n.step,t<r&&t>=0?e.yieldReturn(n.source[t]):e.yieldBreak()},function(){n&&(n.source=null)})||this,t._isEndless=!1,t}return o(r,e),r}(t.EnumeratorBase);r.IndexEnumerator=i,Object.defineProperty(r,"__esModule",{value:!0}),r["default"]=i});
//# sourceMappingURL=IndexEnumerator.js.map