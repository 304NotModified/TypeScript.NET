{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","from","source","isEnumerable","instance","isEnumerator","forEach","e","action","Types_1","ArrayEnumerator_1","IndexEnumerator_1","EmptyEnumerator","get","enumerable","configurable","EmptyEnumerator.moveNext","Empty"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,cAAe,oBAAqB,qBAAsBN,IAE7F,SAAUI,EAASF,GCFtB,YA4BA,SAAAM,GAAwBC,GAGvBD,IAAIA,EACHA,MAAOA,EAERA,IAAGA,MAAMA,QAAQA,GAChBA,MAAOA,IAAIA,GAAAA,WAAwBA,EAGpCA,KAAIA,EAAAA,WAAKA,YAAYA,GACrBA,CACCA,GAAGA,EAAAA,WAAKA,YAAeA,GAEtBA,MAAOA,IAAIA,GAAAA,WACVA,WAECA,OACCA,OAAQA,EACRA,OAAQA,EAAOA,OACfA,QAASA,EACTA,KAAMA,IAKVA,IAAGA,EAAgBA,GAClBA,MAAOA,GAAOA,gBAIhBA,KAAMA,IAAIA,OAAMA,uBAGjB,QAAAE,GAAgCC,GAE/BD,MAAOA,GAAAA,WAAKA,gBAAgCA,EAAUA,gBAAiBA,EAAAA,WAAKA,UAG7E,QAAAE,GAAgCD,GAE/BC,MAAOA,GAAAA,WAAKA,gBAAgCA,EAAUA,WAAYA,EAAAA,WAAKA,UAGxE,QAAAC,GACCC,EACAC,GAEAF,GAAGA,EACHA,CACCA,GAAGA,MAAMA,QAAQA,GAGhBA,WADAA,GAAEA,QAAQA,EASXA,IALGA,EAAgBA,KAElBA,EAAqBA,EAAGA,iBAGtBA,EAAgBA,GAIlBA,IAFAA,GAAIA,GAAQA,EAENA,EAAEA,YAEJA,EAAOA,EAAEA,QAASA,QAAWA,MA7FpC,GAAAG,GAAAZ,EAAiB,eAEjBa,EAAAb,EAA4B,qBAC5Bc,EAAAd,EAA4B,qBAG5Be,EAAA,WAAAA,QAAAA,MAeAA,MAbCA,QAAAA,eAAIA,EAAAA,UAAAA,WDCOC,ICDXD,aDIWE,YAAY,EACZC,cAAc,ICAzBH,EAAAA,UAAAA,SAAAA,WAECI,OAAOA,GAGRJ,EAAAA,UAAAA,MAAAA,aAEAA,EAAAA,UAAAA,QAAAA,aACDA,KAEMK,EAAQ,GAAIL,EAGFjB,GAAAM,KAAIA,EAkCJN,EAAAQ,aAAYA,EAKZR,EAAAU,aAAYA,EAKZV,EAAAW,QAAOA","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../../Types', './ArrayEnumerator', './IndexEnumerator'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Types_1 = require('../../Types');\n    var ArrayEnumerator_1 = require('./ArrayEnumerator');\n    var IndexEnumerator_1 = require('./IndexEnumerator');\n    var EmptyEnumerator = (function () {\n        function EmptyEnumerator() {\n        }\n        Object.defineProperty(EmptyEnumerator.prototype, \"current\", {\n            get: function () {\n                return undefined;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        EmptyEnumerator.prototype.moveNext = function () {\n            return false;\n        };\n        EmptyEnumerator.prototype.reset = function () { };\n        EmptyEnumerator.prototype.dispose = function () { };\n        return EmptyEnumerator;\n    })();\n    var Empty = new EmptyEnumerator();\n    function from(source) {\n        if (!source)\n            return Empty;\n        if (Array.isArray(source))\n            return new ArrayEnumerator_1.default(source);\n        if (!Types_1.default.isPrimitive(source)) {\n            if (Types_1.default.isArrayLike(source)) {\n                return new IndexEnumerator_1.default(function () {\n                    return {\n                        source: source,\n                        length: source.length,\n                        pointer: 0,\n                        step: 1\n                    };\n                });\n            }\n            if (isEnumerable(source))\n                return source.getEnumerator();\n        }\n        throw new Error(\"Unknown enumerable.\");\n    }\n    exports.from = from;\n    function isEnumerable(instance) {\n        return Types_1.default.hasMemberOfType(instance, \"getEnumerator\", Types_1.default.FUNCTION);\n    }\n    exports.isEnumerable = isEnumerable;\n    function isEnumerator(instance) {\n        return Types_1.default.hasMemberOfType(instance, \"moveNext\", Types_1.default.FUNCTION);\n    }\n    exports.isEnumerator = isEnumerator;\n    function forEach(e, action) {\n        if (e) {\n            if (Array.isArray(e)) {\n                e.forEach(action);\n                return;\n            }\n            if (isEnumerable(e)) {\n                e = e.getEnumerator();\n            }\n            if (isEnumerator(e)) {\n                var index = 0;\n                while (e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            }\n        }\n    }\n    exports.forEach = forEach;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../../Types';\r\nimport DisposableBase from '../../Disposable/DisposableBase';\r\nimport ArrayEnumerator from './ArrayEnumerator';\r\nimport IndexEnumerator from './IndexEnumerator';\r\n\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerable<T> | IArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(source))\r\n\t\t{\r\n\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsource: source,\r\n\t\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\t\tstep: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\nexport function forEach<T>(\r\n\te:T[]|IEnumerator<T>|IEnumerable<T>,\r\n\taction:(element:T, index?:number) => any):void\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(Array.isArray(e))\r\n\t\t{\r\n\t\t\te.forEach(action);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\te = (<IEnumerable<T>>e).getEnumerator();\r\n\t\t}\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tvar index = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}