{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","from","source","forEach","e","action","Types_1","ArrayEnumerator_1","IndexEnumerator_1","EmptyEnumerator","get","EmptyEnumerator.current","enumerable","configurable","EmptyEnumerator.moveNext","Empty"],"mappings":";;;;CAIA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,cAAe,oBAAqB,qBAAsB,SAAUI,EAASF,GCwBvG,QAAAM,GAAwBC,GAGvBD,IAAIA,EACHA,MAAOA,EAERA,IAAGA,YAAkBA,OACpBA,MAAOA,IAAIA,GAAAA,WAAwBA,EAEpCA,UAAUA,KAASA,EAAAA,WAAKA,OACxBA,CACCA,GAAGA,UAAYA,GACfA,CACCA,GAAIA,GAAeA,CACnBA,OAAOA,IAAIA,GAAAA,WACVA,WAECA,OACCA,OAA8BA,EAC9BA,OAAQA,EAAEA,OACVA,QAASA,EACTA,KAAMA,KAKVA,GAAGA,iBAAmBA,GACrBA,MAAaA,GAAQA,gBAIvBA,KAAMA,IAAIA,OAAMA,uBAGjB,QAAAE,GACCC,EACAC,GAEAF,GAAGA,EAIFA,IAFAA,GAAIA,GAAQA,EAENA,EAAEA,YAEJA,EAAOA,EAAEA,QAASA,QAAWA,KAtEnC,GAAAG,GAAAT,EAAiB,eAEjBU,EAAAV,EAA4B,qBAC5BW,EAAAX,EAA4B,qBAG5BY,EAAA,WAAAA,QAAAA,MAeAA,MAbCA,QAAAA,eAAIA,EAAAA,UAAAA,WDMOC,ICNXD,WAECE,MAAOA,SDOGC,YAAY,EACZC,cAAc,ICLzBJ,EAAAA,UAAAA,SAAAA,WAECK,OAAOA,GAGRL,EAAAA,UAAAA,MAAAA,aAEAA,EAAAA,UAAAA,QAAAA,aACDA,KAEMM,EAAQ,GAAIN,EAGFd,GAAAM,KAAIA,EAkCJN,EAAAQ,QAAOA","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../../Types', './ArrayEnumerator', './IndexEnumerator'], function (require, exports) {\r\n    ///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n    ///<reference path=\"IEnumerable.d.ts\"/>\r\n    ///<reference path=\"IEnumerator.d.ts\"/>\r\n    ///<reference path=\"IYield.d.ts\"/>\r\n    var Types_1 = require('../../Types');\r\n    var ArrayEnumerator_1 = require('./ArrayEnumerator');\r\n    var IndexEnumerator_1 = require('./IndexEnumerator');\r\n    var EmptyEnumerator = (function () {\r\n        function EmptyEnumerator() {\r\n        }\r\n        Object.defineProperty(EmptyEnumerator.prototype, \"current\", {\r\n            get: function () {\r\n                return undefined;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        EmptyEnumerator.prototype.moveNext = function () {\r\n            return false;\r\n        };\r\n        EmptyEnumerator.prototype.reset = function () { };\r\n        EmptyEnumerator.prototype.dispose = function () { };\r\n        return EmptyEnumerator;\r\n    })();\r\n    var Empty = new EmptyEnumerator();\r\n    function from(source) {\r\n        if (!source)\r\n            return Empty;\r\n        if (source instanceof Array)\r\n            return new ArrayEnumerator_1.default(source);\r\n        if (typeof source === Types_1.default.OBJECT) {\r\n            if (\"length\" in source) {\r\n                var a = source;\r\n                return new IndexEnumerator_1.default(function () {\r\n                    return {\r\n                        source: a,\r\n                        length: a.length,\r\n                        pointer: 0,\r\n                        step: 1\r\n                    };\r\n                });\r\n            }\r\n            if (\"getEnumerator\" in source)\r\n                return source.getEnumerator();\r\n        }\r\n        throw new Error(\"Unknown enumerable.\");\r\n    }\r\n    exports.from = from;\r\n    function forEach(e, action) {\r\n        if (e) {\r\n            var index = 0;\r\n            while (e.moveNext()) {\r\n                if (action(e.current, index++) === false)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    exports.forEach = forEach;\r\n});\r\n//# sourceMappingURL=Enumerator.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\nimport Type from '../../Types';\r\nimport DisposableBase from '../../Disposable/DisposableBase';\r\nimport ArrayEnumerator from './ArrayEnumerator';\r\nimport IndexEnumerator from './IndexEnumerator';\r\n\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerable<T> | IArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(source instanceof Array)\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\tif(typeof source===Type.OBJECT)\r\n\t{\r\n\t\tif(\"length\" in source)\r\n\t\t{\r\n\t\t\tvar a = <IArray<T>>source;\r\n\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsource: <{[index: number]: T}>a,\r\n\t\t\t\t\t\tlength: a.length,\r\n\t\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\t\tstep: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\tif(\"getEnumerator\" in source)\r\n\t\t\treturn (<any>source).getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function forEach<T>(\r\n\te:IEnumerator<T>,\r\n\taction:(element:T, index?:number) => any):void\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tvar index = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\twhile(e.moveNext())\r\n\t\t{\r\n\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n"]}