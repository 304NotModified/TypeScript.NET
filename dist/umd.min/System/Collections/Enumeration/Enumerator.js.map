{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","from","source","Empty","Array","isArray","ArrayEnumerator_1","Types_1","isPrimitive","isArrayLike","IndexEnumerator_1","length","pointer","step","isEnumerable","getEnumerator","Error","instance","hasMemberOfType","FUNCTION","isEnumerator","forEach","e","action","index","moveNext","current","EmptyEnumerator","Object","defineProperty","prototype","get","enumerable","configurable","reset","dispose"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,cAAe,oBAAqB,qBAAsBN,IAE7F,SAAUI,EAASF,GCFtB,YA4BA,SAAAM,GAAwBC,GAGvB,IAAIA,EACH,MAAOC,EAER,IAAGC,MAAMC,QAAQH,GAChB,MAAO,IAAII,GAAAA,WAAwBJ,EAGpC,KAAIK,EAAAA,WAAKC,YAAYN,GACrB,CACC,GAAGK,EAAAA,WAAKE,YAAeP,GAEtB,MAAO,IAAIQ,GAAAA,WACV,WAEC,OACCR,OAAQA,EACRS,OAAQT,EAAOS,OACfC,QAAS,EACTC,KAAM,IAKV,IAAGC,EAAgBZ,GAClB,MAAOA,GAAOa,gBAIhB,KAAM,IAAIC,OAAM,uBAGjB,QAAAF,GAAgCG,GAE/B,MAAOV,GAAAA,WAAKW,gBAAgCD,EAAU,gBAAiBV,EAAAA,WAAKY,UAG7E,QAAAC,GAAgCH,GAE/B,MAAOV,GAAAA,WAAKW,gBAAgCD,EAAU,WAAYV,EAAAA,WAAKY,UAGxE,QAAAE,GACCC,EACAC,GAEA,GAAGD,EACH,CACC,GAAGlB,MAAMC,QAAQiB,GAGhB,WADAA,GAAED,QAAQE,EASX,IALGT,EAAgBQ,KAElBA,EAAqBA,EAAGP,iBAGtBK,EAAgBE,GAIlB,IAFA,GAAIE,GAAQ,EAENF,EAAEG,YAEJF,EAAOD,EAAEI,QAASF,QAAW,MA7FpC,GAAAjB,GAAAV,EAAiB,eAEjBS,EAAAT,EAA4B,qBAC5Ba,EAAAb,EAA4B,qBAG5B8B,EAAA,WAAA,QAAAA,MAeA,MAbCC,QAAAC,eAAIF,EAAAG,UAAA,WDCOC,ICDX,WAEC,MAAOjC,SDEGkC,YAAY,EACZC,cAAc,ICAzBN,EAAAG,UAAAL,SAAA,WAEC,OAAO,GAGRE,EAAAG,UAAAI,MAAA,aAEAP,EAAAG,UAAAK,QAAA,aACDR,KAEMxB,EAAQ,GAAIwB,EAGFhC,GAAAM,KAAIA,EAkCJN,EAAAmB,aAAYA,EAKZnB,EAAAyB,aAAYA,EAKZzB,EAAA0B,QAAOA","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n(function (factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define([\"require\", \"exports\", '../../Types', './ArrayEnumerator', './IndexEnumerator'], factory);\r\n    }\r\n})(function (require, exports) {\r\n    'use strict';\r\n    var Types_1 = require('../../Types');\r\n    var ArrayEnumerator_1 = require('./ArrayEnumerator');\r\n    var IndexEnumerator_1 = require('./IndexEnumerator');\r\n    var EmptyEnumerator = (function () {\r\n        function EmptyEnumerator() {\r\n        }\r\n        Object.defineProperty(EmptyEnumerator.prototype, \"current\", {\r\n            get: function () {\r\n                return undefined;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        EmptyEnumerator.prototype.moveNext = function () {\r\n            return false;\r\n        };\r\n        EmptyEnumerator.prototype.reset = function () { };\r\n        EmptyEnumerator.prototype.dispose = function () { };\r\n        return EmptyEnumerator;\r\n    }());\r\n    var Empty = new EmptyEnumerator();\r\n    function from(source) {\r\n        if (!source)\r\n            return Empty;\r\n        if (Array.isArray(source))\r\n            return new ArrayEnumerator_1.default(source);\r\n        if (!Types_1.default.isPrimitive(source)) {\r\n            if (Types_1.default.isArrayLike(source)) {\r\n                return new IndexEnumerator_1.default(function () {\r\n                    return {\r\n                        source: source,\r\n                        length: source.length,\r\n                        pointer: 0,\r\n                        step: 1\r\n                    };\r\n                });\r\n            }\r\n            if (isEnumerable(source))\r\n                return source.getEnumerator();\r\n        }\r\n        throw new Error(\"Unknown enumerable.\");\r\n    }\r\n    exports.from = from;\r\n    function isEnumerable(instance) {\r\n        return Types_1.default.hasMemberOfType(instance, \"getEnumerator\", Types_1.default.FUNCTION);\r\n    }\r\n    exports.isEnumerable = isEnumerable;\r\n    function isEnumerator(instance) {\r\n        return Types_1.default.hasMemberOfType(instance, \"moveNext\", Types_1.default.FUNCTION);\r\n    }\r\n    exports.isEnumerator = isEnumerator;\r\n    function forEach(e, action) {\r\n        if (e) {\r\n            if (Array.isArray(e)) {\r\n                e.forEach(action);\r\n                return;\r\n            }\r\n            if (isEnumerable(e)) {\r\n                e = e.getEnumerator();\r\n            }\r\n            if (isEnumerator(e)) {\r\n                var index = 0;\r\n                while (e.moveNext()) {\r\n                    if (action(e.current, index++) === false)\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.forEach = forEach;\r\n});\r\n//# sourceMappingURL=Enumerator.js.map","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"IEnumerable.d.ts\"/>\r\n///<reference path=\"IEnumerator.d.ts\"/>\r\n///<reference path=\"IYield.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport Type from '../../Types';\r\nimport DisposableBase from '../../Disposable/DisposableBase';\r\nimport ArrayEnumerator from './ArrayEnumerator';\r\nimport IndexEnumerator from './IndexEnumerator';\r\n\r\n\r\nclass EmptyEnumerator implements IEnumerator<any>\r\n{\r\n\tget current():any\r\n\t{\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\treset():void { }\r\n\r\n\tdispose():void { }\r\n}\r\n\r\nconst Empty = new EmptyEnumerator();\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerable<T> | IArray<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(source))\r\n\t\t{\r\n\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsource: source,\r\n\t\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\t\tstep: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t}\r\n\r\n\tthrow new Error(\"Unknown enumerable.\");\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\nexport function forEach<T>(\r\n\te:T[]|IEnumerator<T>|IEnumerable<T>,\r\n\taction:(element:T, index?:number) => any):void\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(Array.isArray(e))\r\n\t\t{\r\n\t\t\te.forEach(action);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\te = (<IEnumerable<T>>e).getEnumerator();\r\n\t\t}\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tvar index = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}