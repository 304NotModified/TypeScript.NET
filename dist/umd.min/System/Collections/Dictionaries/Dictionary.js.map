{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.js","System/Collections/Dictionaries/Dictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","callHasOwnProperty","target","key","computeHashCode","obj","Compare_1","Types_1","Functions_1","DictionaryBase_1","EnumeratorBase_1","VOID0","HashEntry","HashEntry.constructor","EntryList","EntryList.constructor","EntryList.addLast","EntryList.replace","EntryList.remove","EntryList.clear","EntryList.forEach","Dictionary","_super","Dictionary.constructor","Dictionary.setKV","Dictionary.addByKeyValue","Dictionary.getValue","Dictionary.setValue","Dictionary.containsKey","Dictionary.clear","Dictionary.getCount","Dictionary.getEnumerator","Dictionary.getKeys","Dictionary.getValues","defineProperty","value"],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../../Compare', '../../Types', '../../Functions', './DictionaryBase', '../Enumeration/EnumeratorBase'], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Compare_1 = require('../../Compare');\n    var Types_1 = require('../../Types');\n    var Functions_1 = require('../../Functions');\n    var DictionaryBase_1 = require('./DictionaryBase');\n    var EnumeratorBase_1 = require('../Enumeration/EnumeratorBase');\n    var VOID0 = void 0;\n    var HashEntry = (function () {\n        function HashEntry(key, value, prev, next) {\n            this.key = key;\n            this.value = value;\n            this.prev = prev;\n            this.next = next;\n        }\n        return HashEntry;\n    })();\n    var EntryList = (function () {\n        function EntryList(first, last) {\n            this.first = first;\n            this.last = last;\n        }\n        EntryList.prototype.addLast = function (entry) {\n            var _ = this;\n            if (_.last != null) {\n                _.last.next = entry;\n                entry.prev = _.last;\n                _.last = entry;\n            }\n            else\n                _.first = _.last = entry;\n        };\n        EntryList.prototype.replace = function (entry, newEntry) {\n            var _ = this;\n            if (entry.prev != null) {\n                entry.prev.next = newEntry;\n                newEntry.prev = entry.prev;\n            }\n            else\n                _.first = newEntry;\n            if (entry.next != null) {\n                entry.next.prev = newEntry;\n                newEntry.next = entry.next;\n            }\n            else\n                _.last = newEntry;\n        };\n        EntryList.prototype.remove = function (entry) {\n            var _ = this;\n            if (entry.prev != null)\n                entry.prev.next = entry.next;\n            else\n                _.first = entry.next;\n            if (entry.next != null)\n                entry.next.prev = entry.prev;\n            else\n                _.last = entry.prev;\n        };\n        EntryList.prototype.clear = function () {\n            var _ = this;\n            while (_.last) {\n                _.remove(_.last);\n            }\n        };\n        EntryList.prototype.forEach = function (closure) {\n            var _ = this, currentEntry = _.first;\n            while (currentEntry) {\n                closure(currentEntry);\n                currentEntry = currentEntry.next;\n            }\n        };\n        return EntryList;\n    })();\n    function callHasOwnProperty(target, key) {\n        return Object.prototype.hasOwnProperty.call(target, key);\n    }\n    function computeHashCode(obj) {\n        if (obj === null)\n            return \"null\";\n        if (obj === VOID0)\n            return \"undefined\";\n        return (typeof obj.toString === Types_1.default.FUNCTION)\n            ? obj.toString()\n            : Object.prototype.toString.call(obj);\n    }\n    var Dictionary = (function (_super) {\n        __extends(Dictionary, _super);\n        function Dictionary(compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions_1.default.Identity; }\n            _super.call(this);\n            this.compareSelector = compareSelector;\n            this._count = 0;\n            this._entries = new EntryList();\n            this._buckets = {};\n        }\n        Dictionary.prototype.setKV = function (key, value, allowOverwrite) {\n            var _ = this, buckets = _._buckets, entries = _._entries, comparer = _.compareSelector;\n            var compareKey = comparer(key);\n            var hash = computeHashCode(compareKey), entry;\n            if (callHasOwnProperty(buckets, hash)) {\n                var equal = Compare_1.areEqual;\n                var array = buckets[hash];\n                for (var i = 0; i < array.length; i++) {\n                    var old = array[i];\n                    if (comparer(old.key) === compareKey) {\n                        if (!allowOverwrite)\n                            throw new Error(\"Key already exists.\");\n                        var changed = !equal(old.value, value);\n                        if (changed) {\n                            if (value === VOID0) {\n                                entries.remove(old);\n                                array.splice(i, 1);\n                                if (!array.length)\n                                    delete buckets[hash];\n                                --_._count;\n                            }\n                            else {\n                                entry = new HashEntry(key, value);\n                                entries.replace(old, entry);\n                                array[i] = entry;\n                            }\n                            _._onValueUpdate(key, value, old.value);\n                        }\n                        return changed;\n                    }\n                }\n                array.push(entry = entry || new HashEntry(key, value));\n            }\n            else {\n                if (value === VOID0) {\n                    if (allowOverwrite)\n                        return false;\n                    else\n                        throw new Error(\"Cannot add 'undefined' value.\");\n                }\n                buckets[hash] = [entry = new HashEntry(key, value)];\n            }\n            ++_._count;\n            entries.addLast(entry);\n            _._onValueUpdate(key, value, undefined);\n            return true;\n        };\n        Dictionary.prototype.addByKeyValue = function (key, value) {\n            this.setKV(key, value, false);\n        };\n        Dictionary.prototype.getValue = function (key) {\n            var buckets = this._buckets, comparer = this.compareSelector;\n            var compareKey = comparer(key);\n            var hash = computeHashCode(compareKey);\n            if (!callHasOwnProperty(buckets, hash))\n                return undefined;\n            var array = buckets[hash];\n            for (var _i = 0; _i < array.length; _i++) {\n                var entry = array[_i];\n                if (comparer(entry.key) === compareKey)\n                    return entry.value;\n            }\n            return undefined;\n        };\n        Dictionary.prototype.setValue = function (key, value) {\n            return this.setKV(key, value, true);\n        };\n        Dictionary.prototype.containsKey = function (key) {\n            var _ = this, buckets = _._buckets, comparer = _.compareSelector;\n            var compareKey = comparer(key);\n            var hash = computeHashCode(compareKey);\n            if (!callHasOwnProperty(buckets, hash))\n                return false;\n            var array = buckets[hash];\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (comparer(array[i].key) === compareKey)\n                    return true;\n            }\n            return false;\n        };\n        Dictionary.prototype.clear = function () {\n            var _ = this, buckets = _._buckets, count = _super.prototype.clear.call(this);\n            _._count = 0;\n            for (var key in buckets) {\n                if (buckets.hasOwnProperty(key))\n                    delete buckets[key];\n            }\n            _._entries.clear();\n            return count;\n        };\n        Dictionary.prototype.getCount = function () {\n            return this._count;\n        };\n        Dictionary.prototype.getEnumerator = function () {\n            var _ = this, currentEntry;\n            return new EnumeratorBase_1.default(function () { currentEntry = _._entries.first; }, function (yielder) {\n                if (currentEntry != null) {\n                    var result = { key: currentEntry.key, value: currentEntry.value };\n                    currentEntry = currentEntry.next;\n                    return yielder.yieldReturn(result);\n                }\n                return yielder.yieldBreak();\n            });\n        };\n        Dictionary.prototype.getKeys = function () {\n            var _ = this, result = [];\n            _._entries.forEach(function (entry) { return result.push(entry.key); });\n            return result;\n        };\n        Dictionary.prototype.getValues = function () {\n            var _ = this, result = [];\n            _._entries.forEach(function (entry) { return result.push(entry.value); });\n            return result;\n        };\n        return Dictionary;\n    })(DictionaryBase_1.default);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Dictionary;\n});\n","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\nimport {areEqual} from '../../Compare';\r\nimport Type from '../../Types';\r\nimport Functions from '../../Functions';\r\nimport DictionaryAbstractBase from './DictionaryBase';\r\nimport EnumeratorBase from '../Enumeration/EnumeratorBase';\r\n\r\nconst VOID0:any = void 0;\r\n\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key?:TKey,\r\n\t\tpublic value?:TValue,\r\n\t\tpublic prev?:HashEntry<TKey, TValue>,\r\n\t\tpublic next?:HashEntry<TKey, TValue>)\r\n\t{ }\r\n}\r\n\r\nclass EntryList<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic first?:HashEntry<TKey, TValue>,\r\n\t\tpublic last?:HashEntry<TKey, TValue>)\r\n\t{ }\r\n\r\n\taddLast(entry:HashEntry<TKey, TValue>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_.last!=null)\r\n\t\t{\r\n\t\t\t_.last.next = entry;\r\n\t\t\tentry.prev = _.last;\r\n\t\t\t_.last = entry;\r\n\t\t}\r\n\t\telse\r\n\t\t\t_.first = _.last = entry;\r\n\t}\r\n\r\n\treplace(entry:HashEntry<TKey, TValue>, newEntry:HashEntry<TKey, TValue>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(entry.prev!=null)\r\n\t\t{\r\n\t\t\tentry.prev.next = newEntry;\r\n\t\t\tnewEntry.prev = entry.prev;\r\n\t\t}\r\n\t\telse _.first = newEntry;\r\n\r\n\t\tif(entry.next!=null)\r\n\t\t{\r\n\t\t\tentry.next.prev = newEntry;\r\n\t\t\tnewEntry.next = entry.next;\r\n\t\t}\r\n\t\telse _.last = newEntry;\r\n\r\n\t}\r\n\r\n\tremove(entry:HashEntry<TKey, TValue>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(entry.prev!=null) entry.prev.next = entry.next;\r\n\t\telse _.first = entry.next;\r\n\r\n\t\tif(entry.next!=null) entry.next.prev = entry.prev;\r\n\t\telse _.last = entry.prev;\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\twhile(_.last)\r\n\t\t{\r\n\t\t\t_.remove(_.last);\r\n\t\t}\r\n\t}\r\n\r\n\tforEach(closure:(entry:HashEntry<TKey, TValue>) => void):void\r\n\t{\r\n\t\tvar _ = this, currentEntry:HashEntry<TKey, TValue> = _.first;\r\n\t\twhile(currentEntry)\r\n\t\t{\r\n\t\t\tclosure(currentEntry);\r\n\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nfunction computeHashCode(obj:any):string\r\n{\r\n\tif(obj===null) return \"null\";\r\n\tif(obj===VOID0) return \"undefined\";\r\n\r\n\treturn (typeof obj.toString===Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport default\r\nclass Dictionary<TKey, TValue> extends DictionaryAbstractBase<TKey, TValue>\r\n{\r\n\tprivate _count:number = 0;\r\n\tprivate _entries = new EntryList<TKey, TValue>();\r\n\tprivate _buckets:IMap<HashEntry<TKey, TValue>[]> = {};\r\n\r\n\tconstructor(private compareSelector:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\r\n\tprivate setKV(key:TKey, value:TValue, allowOverwrite:boolean):boolean\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, entries = _._entries, comparer = _.compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey), entry:HashEntry<TKey, TValue>;\r\n\r\n\t\tif(callHasOwnProperty(buckets, hash))\r\n\t\t{\r\n\t\t\tvar equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\t\tvar array = buckets[hash];\r\n\t\t\tfor(let i = 0; i<array.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar old = array[i];\r\n\t\t\t\tif(comparer(old.key)===compareKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!allowOverwrite)\r\n\t\t\t\t\t\tthrow new Error(\"Key already exists.\");\r\n\r\n\t\t\t\t\tvar changed = !equal(old.value, value);\r\n\t\t\t\t\tif(changed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(value===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentries.remove(old);\r\n\t\t\t\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t\t\t\tif(!array.length)\r\n\t\t\t\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\t\t\t--_._count;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentry = new HashEntry<TKey, TValue>(key, value);\r\n\t\t\t\t\t\t\tentries.replace(old, entry);\r\n\t\t\t\t\t\t\tarray[i] = entry;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_._onValueUpdate(key, value, old.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn changed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tarray.push(entry = entry || new HashEntry<TKey, TValue>(key, value));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif(allowOverwrite)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"Cannot add 'undefined' value.\");\r\n\t\t\t}\r\n\t\t\tbuckets[hash] = [entry = new HashEntry<TKey, TValue>(key, value)];\r\n\t\t}\r\n\t\t++_._count;\r\n\t\tentries.addLast(entry);\r\n\t\t_._onValueUpdate(key, value, undefined);\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddByKeyValue(key:TKey, value:TValue):void\r\n\t{\r\n\t\tthis.setKV(key, value, false);\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar buckets = this._buckets, comparer = this.compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return undefined;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let entry of array)\r\n\t\t{\r\n\t\t\tif(comparer(entry.key)===compareKey) return entry.value;\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tsetValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\treturn this.setKV(key, value, true);\r\n\t}\r\n\r\n\tcontainsKey(key:TKey):boolean\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, comparer = _.compareSelector;\r\n\t\tvar compareKey = comparer(key);\r\n\t\tvar hash = computeHashCode(compareKey);\r\n\t\tif(!callHasOwnProperty(buckets, hash)) return false;\r\n\r\n\t\tvar array = buckets[hash];\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(comparer(array[i].key)===compareKey) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets, count = super.clear(); // Remove one by one to allow for signaling.\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\t_._count = 0;\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t\tdelete buckets[key];\r\n\t\t}\r\n\r\n\t\t_._entries.clear();\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tvar _ = this, currentEntry:HashEntry<TKey, TValue>;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() => { currentEntry = _._entries.first; },\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tvar _ = this, result:TKey[] = [];\r\n\t\t_._entries.forEach(entry=> result.push(entry.key));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\t_._entries.forEach(entry=> result.push(entry.value));\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n"]}