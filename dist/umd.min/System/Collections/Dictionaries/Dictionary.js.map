{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.js","System/Collections/Dictionaries/Dictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","linkedNodeList","recycle","linkedListPool","ObjectPool_1","LinkedNodeList_1","clear","add","take","callHasOwnProperty","target","key","call","getHashString","obj","NULL","VOID0","Types_1","UNDEFINED","hasMemberOfType","GET_HASH_CODE","FUNCTION","getHashCode","toString","Compare_1","Functions_1","DictionaryBase_1","EnumeratorBase_1","HashEntry","value","previous","next","Dictionary","_super","_keyComparer","Identity","_entries","_buckets","getCount","unsafeCount","_getBucket","hash","createIfMissing","buckets","bucket","_getBucketEntry","_","comparer","compareKey","find","e","_getEntry","getValue","_setValueInternal","entries","bucketEntry","old","areEqual","x","removeNode","y","count","entry","addNode","_clearInternal","getEnumerator","ver","currentEntry","_version","first","yielder","assertVersion","result","yieldReturn","yieldBreak","getKeys","push","getValues","defineProperty"],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../../Compare\", \"../../Types\", \"../../Functions\", \"./DictionaryBase\", \"../Enumeration/EnumeratorBase\", \"../LinkedNodeList\", \"../../Disposable/ObjectPool\"], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Compare_1 = require(\"../../Compare\");\n    var Types_1 = require(\"../../Types\");\n    var Functions_1 = require(\"../../Functions\");\n    var DictionaryBase_1 = require(\"./DictionaryBase\");\n    var EnumeratorBase_1 = require(\"../Enumeration/EnumeratorBase\");\n    var LinkedNodeList_1 = require(\"../LinkedNodeList\");\n    var ObjectPool_1 = require(\"../../Disposable/ObjectPool\");\n    var VOID0 = void 0;\n    var HashEntry = (function () {\n        function HashEntry(key, value, previous, next) {\n            this.key = key;\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        return HashEntry;\n    }());\n    var linkedListPool;\n    function linkedNodeList(recycle) {\n        if (!linkedListPool)\n            linkedListPool\n                = new ObjectPool_1.default(20, function () { return new LinkedNodeList_1.default(); });\n        if (!recycle)\n            return linkedListPool.take();\n        recycle.clear();\n        linkedListPool.add(recycle);\n    }\n    function callHasOwnProperty(target, key) {\n        return Object.prototype.hasOwnProperty.call(target, key);\n    }\n    var NULL = \"null\", GET_HASH_CODE = \"getHashCode\";\n    function getHashString(obj) {\n        if (obj === null)\n            return NULL;\n        if (obj === VOID0)\n            return Types_1.default.UNDEFINED;\n        if (Types_1.default.hasMemberOfType(obj, GET_HASH_CODE, Types_1.default.FUNCTION)) {\n            return obj.getHashCode();\n        }\n        return (typeof obj.toString == Types_1.default.FUNCTION)\n            ? obj.toString()\n            : Object.prototype.toString.call(obj);\n    }\n    var Dictionary = (function (_super) {\n        __extends(Dictionary, _super);\n        function Dictionary(_keyComparer) {\n            if (_keyComparer === void 0) { _keyComparer = Functions_1.default.Identity; }\n            _super.call(this);\n            this._keyComparer = _keyComparer;\n            this._entries = linkedNodeList();\n            this._buckets = {};\n        }\n        Dictionary.prototype.getCount = function () {\n            return this._entries.unsafeCount;\n        };\n        Dictionary.prototype._getBucket = function (hash, createIfMissing) {\n            if (hash === null || hash === VOID0 || !createIfMissing && !this.getCount())\n                return null;\n            var buckets = this._buckets;\n            var bucket = callHasOwnProperty(buckets, hash) ? buckets[hash] : VOID0;\n            if (createIfMissing && !bucket)\n                buckets[hash]\n                    = bucket\n                        = linkedNodeList();\n            return bucket;\n        };\n        Dictionary.prototype._getBucketEntry = function (key, hash, bucket) {\n            if (key === null || key === VOID0 || !this.getCount())\n                return null;\n            var _ = this, comparer = _._keyComparer, compareKey = comparer(key);\n            if (!bucket)\n                bucket = _._getBucket(hash || getHashString(compareKey));\n            return bucket && bucket\n                .find(function (e) { return comparer(e.key) === compareKey; });\n        };\n        Dictionary.prototype._getEntry = function (key) {\n            var e = this._getBucketEntry(key);\n            return e && e.value;\n        };\n        Dictionary.prototype.getValue = function (key) {\n            var e = this._getEntry(key);\n            return e ? e.value : VOID0;\n        };\n        Dictionary.prototype._setValueInternal = function (key, value) {\n            var _ = this, buckets = _._buckets, entries = _._entries, comparer = _._keyComparer, compareKey = comparer(key), hash = getHashString(compareKey), bucket = _._getBucket(hash), bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\n            if (bucketEntry) {\n                if (value === VOID0) {\n                    var x = bucket.removeNode(bucketEntry), y = entries.removeNode(bucketEntry.value);\n                    if (x && !bucket.count) {\n                        delete buckets[hash];\n                        linkedNodeList(bucket);\n                        bucket = null;\n                    }\n                    if (x !== y)\n                        throw \"Entries and buckets are out of sync.\";\n                    if (x)\n                        return true;\n                }\n                else {\n                    var old = bucketEntry.value.value;\n                    bucketEntry.value.value = value;\n                    return !Compare_1.areEqual(value, old);\n                }\n            }\n            else if (value !== VOID0) {\n                if (!bucket)\n                    bucket = _._getBucket(hash, true);\n                var entry = new HashEntry(key, value);\n                entries.addNode(entry);\n                bucket.addNode(new HashEntry(key, entry));\n                return true;\n            }\n            return false;\n        };\n        Dictionary.prototype._clearInternal = function () {\n            var _ = this, buckets = _._buckets;\n            for (var key in buckets) {\n                if (buckets.hasOwnProperty(key)) {\n                    var bucket = buckets[key];\n                    delete buckets[key];\n                    linkedNodeList(bucket);\n                }\n            }\n            return _._entries.clear();\n        };\n        Dictionary.prototype.getEnumerator = function () {\n            var _ = this, ver, currentEntry;\n            return new EnumeratorBase_1.default(function () {\n                ver = _._version;\n                currentEntry = _._entries.first;\n            }, function (yielder) {\n                if (currentEntry != null) {\n                    _.assertVersion(ver);\n                    var result = { key: currentEntry.key, value: currentEntry.value };\n                    currentEntry = currentEntry.next;\n                    return yielder.yieldReturn(result);\n                }\n                return yielder.yieldBreak();\n            });\n        };\n        Dictionary.prototype.getKeys = function () {\n            var _ = this, result = [];\n            var e = _._entries.first;\n            while (e) {\n                result.push(e.key);\n                e = e.next;\n            }\n            return result;\n        };\n        Dictionary.prototype.getValues = function () {\n            var _ = this, result = [];\n            var e = _._entries.first;\n            while (e) {\n                result.push(e.value);\n                e = e.next;\n            }\n            return result;\n        };\n        return Dictionary;\n    }(DictionaryBase_1.default));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Dictionary;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../../FunctionTypes.d.ts\"/>\r\n///<reference path=\"../ILinkedListNode.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport Type from \"../../Types\";\r\nimport Functions from \"../../Functions\";\r\nimport DictionaryBase from \"./DictionaryBase\";\r\nimport EnumeratorBase from \"../Enumeration/EnumeratorBase\";\r\nimport LinkedNodeList from \"../LinkedNodeList\";\r\nimport ObjectPool from \"../../Disposable/ObjectPool\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\n\r\nexport interface IHashEntry<TKey, TValue>\r\nextends  ILinkedNode<IHashEntry<TKey, TValue>>, IKeyValuePair<TKey,TValue> {\r\n\r\n}\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements IHashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key?:TKey,\r\n\t\tpublic value?:TValue,\r\n\t\tpublic previous?:IHashEntry<TKey, TValue>,\r\n\t\tpublic next?:IHashEntry<TKey, TValue>)\r\n\t{ }\r\n}\r\n\r\n\r\nvar linkedListPool:ObjectPool<LinkedNodeList<any>>;\r\nfunction linkedNodeList():LinkedNodeList<any>;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):void;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):LinkedNodeList<any> {\r\n\tif(!linkedListPool)\r\n\t\tlinkedListPool\r\n\t\t\t= new ObjectPool<LinkedNodeList<any>>(20,()=>new LinkedNodeList<any>());\r\n\tif(!recycle) return linkedListPool.take();\r\n\trecycle.clear();\r\n\tlinkedListPool.add(recycle);\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nconst NULL = \"null\", GET_HASH_CODE = \"getHashCode\";\r\nfunction getHashString(obj:any):string\r\n{\r\n\tif(obj===null) return NULL;\r\n\tif(obj===VOID0) return Type.UNDEFINED;\r\n\r\n\t// See IHashable.\r\n\tif(Type.hasMemberOfType(obj, GET_HASH_CODE, Type.FUNCTION))\r\n\t{\r\n\t\treturn obj.getHashCode();\r\n\t}\r\n\r\n\treturn (typeof obj.toString==Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport default\r\nclass Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\t// Retains the order...\r\n\tprivate _entries:LinkedNodeList<IHashEntry<TKey, TValue>>;\r\n\tprivate _buckets:IMap<LinkedNodeList<IHashEntry<TKey, IHashEntry<TKey, TValue>>>>;\r\n\r\n\tconstructor(\r\n\t\tprivate _keyComparer:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._entries = linkedNodeList();\r\n\t\tthis._buckets = {};\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._entries.unsafeCount;\r\n\t}\r\n\r\n\r\n\tprivate _getBucket(\r\n\t\thash:string,\r\n\t\tcreateIfMissing?:boolean):LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>\r\n\t{\r\n\t\tif(hash===null || hash===VOID0 || !createIfMissing && !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar buckets = this._buckets;\r\n\t\tvar bucket = callHasOwnProperty(buckets, hash) ? buckets[hash] : VOID0;\r\n\r\n\t\tif(createIfMissing && !bucket)\r\n\t\t\tbuckets[hash]\r\n\t\t\t\t= bucket\r\n\t\t\t\t= linkedNodeList();\r\n\r\n\t\treturn bucket;\r\n\t}\r\n\r\n\tprivate _getBucketEntry(\r\n\t\tkey:TKey,\r\n\t\thash?:string,\r\n\t\tbucket?:LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>):IHashEntry<TKey,IHashEntry<TKey,TValue>>\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar _          = this,\r\n\t\t    comparer   = _._keyComparer,\r\n\t\t    compareKey = comparer(key);\r\n\r\n\t\tif(!bucket) bucket = _._getBucket(hash || getHashString(compareKey));\r\n\r\n\t\treturn bucket && bucket\r\n\t\t\t\t.find(e=>comparer(e.key)===compareKey);\r\n\t}\r\n\r\n\tprotected _getEntry(key:TKey):IHashEntry<TKey,TValue>\r\n\t{\r\n\t\tvar e = this._getBucketEntry(key);\r\n\t\treturn e && e.value;\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar e = this._getEntry(key);\r\n\t\treturn e ? e.value : VOID0;\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\tvar _           = this,\r\n\t\t    buckets     = _._buckets,\r\n\t\t    entries     = _._entries,\r\n\t\t    comparer    = _._keyComparer,\r\n\t\t    compareKey  = comparer(key),\r\n\t\t    hash        = getHashString(compareKey),\r\n\t\t    bucket      = _._getBucket(hash),\r\n\t\t    bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\r\n\r\n\t\t// Entry exits? Delete or update\r\n\t\tif(bucketEntry)\r\n\t\t{\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tlet x = bucket.removeNode(bucketEntry),\r\n\t\t\t\t    y = entries.removeNode(bucketEntry.value);\r\n\r\n\t\t\t\tif(x && !bucket.count) {\r\n\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t\t\tbucket = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(x!==y) throw \"Entries and buckets are out of sync.\";\r\n\r\n\t\t\t\tif(x) return true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We don't expose the internal hash entries so replacing the value is ok.\r\n\t\t\t\tvar old = bucketEntry.value.value;\r\n\t\t\t\tbucketEntry.value.value = value;\r\n\t\t\t\treturn !areEqual(value, old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse if(value!==VOID0)\r\n\t\t{\r\n\t\t\tif(!bucket) bucket = _._getBucket(hash, true);\r\n\t\t\tlet entry = new HashEntry(key, value);\r\n\t\t\tentries.addNode(entry);\r\n\t\t\tbucket.addNode(new HashEntry(key, entry));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets;\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t{\r\n\t\t\t\tlet bucket = buckets[key];\r\n\t\t\t\tdelete buckets[key];\r\n\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _._entries.clear();\r\n\t}\r\n\r\n\t/*\r\n\t * Note: super.getEnumerator() works perfectly well,\r\n\t * but enumerating the internal linked node list is much more efficient.\r\n\t */\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tvar _ = this, ver:number, currentEntry:IHashEntry<TKey, TValue>;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tver = _._version;\r\n\t\t\t\tcurrentEntry = _._entries.first;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.assertVersion(ver);\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tvar _ = this, result:TKey[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n"]}