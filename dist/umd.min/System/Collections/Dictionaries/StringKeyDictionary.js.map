{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.js","System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":["dependencies","factory","module","exports","v","require","undefined","define","amd","Compare_1","DictionaryBase_1","extends_1","__extends","VOID0","StringKeyDictionary","_super","_this","apply","this","arguments","_count","_map","prototype","_onDispose","call","_getEntry","key","containsKey","value","getAssuredValue","containsValue","map","hasOwnProperty","areEqual","getValue","_setValueInternal","_","old","importMap","values","handleUpdate","changed","setValue","toMap","selector","result","getKeys","Object","keys","getValues","i","len","length","getCount","DictionaryBase","defineProperty"],"mappings":"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","file":"StringKeyDictionary.js","sourcesContent":["(function (dependencies, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(dependencies, factory);\n    }\n})([\"require\", \"exports\", \"../../Compare\", \"./DictionaryBase\", \"../../../extends\"], function (require, exports) {\n    \"use strict\";\n    var Compare_1 = require(\"../../Compare\");\n    var DictionaryBase_1 = require(\"./DictionaryBase\");\n    var extends_1 = require(\"../../../extends\");\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var StringKeyDictionary = (function (_super) {\n        __extends(StringKeyDictionary, _super);\n        function StringKeyDictionary() {\n            var _this = _super.apply(this, arguments) || this;\n            _this._count = 0;\n            _this._map = {};\n            return _this;\n        }\n        StringKeyDictionary.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._map = null;\n        };\n        StringKeyDictionary.prototype._getEntry = function (key) {\n            return !this.containsKey(key)\n                ? null : {\n                key: key,\n                value: this.getAssuredValue(key)\n            };\n        };\n        StringKeyDictionary.prototype.containsKey = function (key) {\n            return key !== null\n                && key !== VOID0\n                && this._count != 0\n                && this._map[key] !== VOID0;\n        };\n        StringKeyDictionary.prototype.containsValue = function (value) {\n            if (!this._count)\n                return false;\n            var map = this._map;\n            for (var key in map) {\n                if (map.hasOwnProperty(key) && Compare_1.areEqual(map[key], value))\n                    return true;\n            }\n            return false;\n        };\n        StringKeyDictionary.prototype.getValue = function (key) {\n            return key === null || key === VOID0 || !this._count\n                ? VOID0\n                : this._map[key];\n        };\n        StringKeyDictionary.prototype._setValueInternal = function (key, value) {\n            var _ = this;\n            var map = _._map, old = map[key];\n            if (old !== value) {\n                if (value === VOID0) {\n                    if ((key) in (map)) {\n                        delete map[key];\n                        _._count--;\n                    }\n                }\n                else {\n                    if (!map.hasOwnProperty(key))\n                        _._count++;\n                    map[key] = value;\n                }\n                return true;\n            }\n            return false;\n        };\n        StringKeyDictionary.prototype.importMap = function (values) {\n            var _ = this;\n            return _.handleUpdate(function () {\n                var changed = false;\n                for (var key in values) {\n                    if (values.hasOwnProperty(key) && _.setValue(key, values[key]))\n                        changed = true;\n                }\n                return changed;\n            });\n        };\n        StringKeyDictionary.prototype.toMap = function (selector) {\n            var _ = this;\n            var result = {};\n            if (_._count)\n                for (var key in _._map) {\n                    if (_._map.hasOwnProperty(key)) {\n                        var value = _._map[key];\n                        if (selector)\n                            value = selector(key, value);\n                        if (value !== VOID0)\n                            result[key] = value;\n                    }\n                }\n            return result;\n        };\n        StringKeyDictionary.prototype.getKeys = function () {\n            return Object.keys(this._map);\n        };\n        StringKeyDictionary.prototype.getValues = function () {\n            if (!this._count)\n                return [];\n            var result = Object.keys(this._map);\n            for (var i = 0, len = result.length; i < len; i++) {\n                result[i] = this._map[result[i]];\n            }\n            return result;\n        };\n        StringKeyDictionary.prototype.getCount = function () {\n            return this._count;\n        };\n        return StringKeyDictionary;\n    }(DictionaryBase_1.DictionaryBase));\n    exports.StringKeyDictionary = StringKeyDictionary;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = StringKeyDictionary;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../../Compare\";\r\nimport {IStringKeyDictionary, IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {DictionaryBase} from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport class StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\r\n\tprotected _onDispose() {\r\n\t\tsuper._onDispose();\r\n\t\t(<any>this)._map = null;\r\n\t}\r\n\r\n\tprivate _count:number = 0;\r\n\tprivate readonly _map:IMap<TValue> = {};\r\n\r\n\tprotected _getEntry(key:string):IKeyValuePair<string,TValue>|null\r\n\t{\r\n\t\treturn !this.containsKey(key)\r\n\t\t\t? null : {\r\n\t\t\tkey: key,\r\n\t\t\tvalue: this.getAssuredValue(key)\r\n\t\t}\r\n\t}\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\treturn key!==null\r\n\t\t\t&& key!==VOID0\r\n\t\t\t&& this._count!=0\r\n\t\t\t&& this._map[key]!==VOID0;\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tif(!this._count) return false;\r\n\t\tconst map = this._map;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && areEqual(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue|undefined\r\n\t{\r\n\t\treturn key===null || key===VOID0 || !this._count\r\n\t\t\t? VOID0\r\n\t\t\t: this._map[key];\r\n\t}\r\n\r\n\r\n\tprotected _setValueInternal(key:string, value:TValue|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key) in (map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t_._count--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!map.hasOwnProperty(key))\r\n\t\t\t\t\t_._count++;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst result:IMap<TValue> = {};\r\n\t\tif(_._count) for(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tlet value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\treturn Object.keys(this._map);\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tif(!this._count) return [];\r\n\t\tconst result:any[] = Object.keys(this._map);\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tresult[i] = this._map[result[i]];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default StringKeyDictionary;\r\n"]}