{"version":3,"sources":["System/Collections/MapUtility.js","System/Collections/MapUtility.ts"],"names":["dependencies","factory","module","exports","v","require","undefined","define","amd","apply","target","source","result","key","hasOwnProperty","ensure","defaults","copy","merge","a","b"],"mappings":"CAAA,SAAWA,EAAcC,GACrB,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAcC,KAEzB,UAAW,WAAY,SAAUI,EAASF,GAC1C,YCIJ,SAAAM,GACCC,EACAC,GAEA,GAAMC,GAAaF,KACnB,KAAI,GAAMG,KAAOF,GAEbA,EAAOG,eAAeD,KAExBD,EAAOC,GAAaF,EAAQE,GAG9B,OAAOD,GASR,QAAAG,GACCL,EACAM,GAEA,GAAMJ,GAAaF,KACnB,KAAI,GAAMG,KAAOG,GAEbA,EAASF,eAAeD,KAASD,EAAOE,eAAeD,KAEzDD,EAAOC,GAAaG,EAAUH,GAGhC,OAAOD,GAQR,QAAAK,GAA0CN,GAEzC,MAAOF,MAASE,GAUjB,QAAAO,GACCC,EACAC,GAEA,MAAOX,GAAMQ,EAAKE,GAAGC,GAzDtBjB,EAAAM,MAAAA,EAqBAN,EAAAY,OAAAA,EAoBAZ,EAAAc,KAAAA,EAYAd,EAAAe,MAAAA","file":"MapUtility.js","sourcesContent":["(function (dependencies, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(dependencies, factory);\n    }\n})([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    /**\n     * Takes a target object and applies all source values to it.\n     * @param target\n     * @param source\n     * @returns {any}\n     */\n    function apply(target, source) {\n        var result = target || {};\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                result[key] = source[key];\n            }\n        }\n        return result;\n    }\n    exports.apply = apply;\n    /**\n     * Takes a target object and ensures values exist.\n     * @param target\n     * @param defaults\n     * @returns {any}\n     */\n    function ensure(target, defaults) {\n        var result = target || {};\n        for (var key in defaults) {\n            if (defaults.hasOwnProperty(key) && !result.hasOwnProperty(key)) {\n                result[key] = defaults[key];\n            }\n        }\n        return result;\n    }\n    exports.ensure = ensure;\n    /**\n     * Make a copy of the source object.\n     * @param source\n     * @returns {Object}\n     */\n    function copy(source) {\n        return apply({}, source);\n    }\n    exports.copy = copy;\n    /**\n     * Takes two objects and creates another with the values of both.\n     * B overwrites A.\n     * @param a\n     * @param b\n     */\n    function merge(a, b) {\n        return apply(copy(a), b);\n    }\n    exports.merge = merge;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {IMap} from \"../../IMap\";\r\n\r\n/**\r\n * Takes a target object and applies all source values to it.\r\n * @param target\r\n * @param source\r\n * @returns {any}\r\n */\r\nexport function apply<T extends IMap<any>, U extends IMap<any>>(\r\n\ttarget:T,\r\n\tsource:U):T & U\r\n{\r\n\tconst result:any = target || {};\r\n\tfor(const key in source)\r\n\t{\r\n\t\tif(source.hasOwnProperty(key))\r\n\t\t{\r\n\t\t\tresult[key] = (<any>source)[key];\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Takes a target object and ensures values exist.\r\n * @param target\r\n * @param defaults\r\n * @returns {any}\r\n */\r\nexport function ensure<T extends IMap<any>, U extends IMap<any>>(\r\n\ttarget:T,\r\n\tdefaults:U):T & U\r\n{\r\n\tconst result:any = target || {};\r\n\tfor(const key in defaults)\r\n\t{\r\n\t\tif(defaults.hasOwnProperty(key) && !result.hasOwnProperty(key))\r\n\t\t{\r\n\t\t\tresult[key] = (<any>defaults)[key];\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Make a copy of the source object.\r\n * @param source\r\n * @returns {Object}\r\n */\r\nexport function copy<T extends IMap<any>>(source:T):T\r\n{\r\n\treturn apply({},source);\r\n}\r\n\r\n\r\n/**\r\n * Takes two objects and creates another with the values of both.\r\n * B overwrites A.\r\n * @param a\r\n * @param b\r\n */\r\nexport function merge<A extends IMap<any>, B extends IMap<any>>(\r\n\ta:A,\r\n\tb:B):A & B\r\n{\r\n\treturn apply(copy(a),b);\r\n}\r\n"]}