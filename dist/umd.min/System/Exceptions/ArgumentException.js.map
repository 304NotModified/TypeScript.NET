{"version":3,"sources":["System/Exceptions/ArgumentException.js","System/Exceptions/ArgumentException.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","deps","factory","module","exports","v","require","undefined","define","amd","SystemException_1","Utility_1","NAME","ArgumentException","_super","ArgumentException.constructor","ArgumentException.getName","ArgumentException.toString","defineProperty","value"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,oBAAqB,mBAAoB,SAAUI,EAASF,GCTtF,GAAAM,GAAAJ,EAA4B,qBAC5BK,EAAAL,EAAmB,mBAGbM,EAAc,oBAEpBC,EAAA,SAAAC,GAOCD,QAAAA,GACCA,EACAA,EACAA,EACAA,GAFAE,SAAAA,IAAAA,EAAAA,MACAA,SAAAA,IAAAA,EAAAA,KAGAA,IAAIA,GAAKA,EAAaA,IAAMA,EAAYA,KAAQA,EAEhDA,GAAAA,KAAAA,KAAMA,EAAAA,KAAKA,EAAKA,GAAUA,EAAgBA,SAACA,GAC1CA,EAAEA,UAAYA,EACXA,GAAeA,EAAcA,KAgBnCF,MAhCgCA,WAAAA,EAAAA,GAqBrBA,EAAAA,UAAAA,QAAVA,WAECG,MAAOA,IAGRH,EAAAA,UAAAA,SAAAA,WAECI,GAAIA,GAAIA,IACRA,OAAOA,IAAMA,EAAEA,KAAOA,KAAOA,EAAEA,QAAUA,KAG3CJ,GAhCgCH,EAAAA,WADhCX,QAAAmB,eAAAd,EAAA,cAAAe,OAAA,ID6BIf,EAAAA,WAAkBS","file":"System/Exceptions/ArgumentException.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", './SystemException', '../Text/Utility'], function (require, exports) {\r\n    var SystemException_1 = require('./SystemException');\r\n    var Utility_1 = require('../Text/Utility');\r\n    var NAME = 'ArgumentException';\r\n    var ArgumentException = (function (_super) {\r\n        __extends(ArgumentException, _super);\r\n        function ArgumentException(paramName, message, innerException, beforeSealing) {\r\n            if (message === void 0) { message = null; }\r\n            if (innerException === void 0) { innerException = null; }\r\n            var pn = paramName ? ('{' + paramName + '} ') : '';\r\n            _super.call(this, Utility_1.trim(pn + message), innerException, function (_) {\r\n                _.paramName = paramName;\r\n                if (beforeSealing)\r\n                    beforeSealing(_);\r\n            });\r\n        }\r\n        ArgumentException.prototype.getName = function () {\r\n            return NAME;\r\n        };\r\n        ArgumentException.prototype.toString = function () {\r\n            var _ = this;\r\n            return '[' + _.name + ': ' + _.message + ']';\r\n        };\r\n        return ArgumentException;\r\n    })(SystemException_1.default);\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = ArgumentException;\r\n});\r\n//# sourceMappingURL=ArgumentException.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\nimport Type from '../Types';\r\nimport Exception from '../Exception';\r\nimport SystemException from './SystemException';\r\nimport {trim} from '../Text/Utility';\r\n\r\n\r\nconst NAME:string = 'ArgumentException';\r\n\r\nexport default\r\nclass ArgumentException extends SystemException\r\n{\r\n\r\n\tparamName:string;\r\n\r\n\t// For simplicity and consistency, lets stick with 1 signature.\r\n\tconstructor(\r\n\t\tparamName:string,\r\n\t\tmessage:string = null,\r\n\t\tinnerException:Error = null,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tvar pn = paramName ? ('{' + paramName + '} ') : '';\r\n\r\n\t\tsuper(trim(pn + message), innerException, (_)=>{\r\n\t\t\t_.paramName = paramName;\r\n\t\t\tif(beforeSealing) beforeSealing(_);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn '[' + _.name + ': ' + _.message + ']';\r\n\t}\r\n\r\n}\r\n"]}