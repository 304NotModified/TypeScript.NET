{"version":3,"sources":["System/Promises/Promise.js","System/Promises/Promise.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","isPromise","value","Types_1","hasMemberOfType","THEN","FUNCTION","resolve","resolver","promiseFactory","nextValue","Promise","wrap","handleResolution","p","ex","reject","handleResolutionMethods","targetFulfill","targetReject","handleDispatch","onFulfilled","onRejected","PromiseBase","thenThis","then","newODE","ObjectDisposedException_1","ObjectDisposedException","deferImmediate_1","DisposableBase_1","InvalidOperationException_1","ArgumentException_1","ArgumentNullException_1","ObjectPool_1","Set_1","defer_1","extends_1","__extends","VOID0","PROMISE","PROMISE_STATE","TARGET","PromiseState","_super","_state","_result","_error","call","this","_disposableObjectName","prototype","_onDispose","getState","Object","defineProperty","get","enumerable","configurable","State","Pending","Fulfilled","Rejected","getResult","throwIfDisposed","getError","DisposableBase","_this","result","error","done","defer","delayFromNow","milliseconds","e","delayAfterResolve","isSettled","fin","finallyThis","f","deferImmediate","Resolvable","apply","arguments","thenSynchronous","state","Error","Resolved","PromiseWrapper","_target","ArgumentNullException","ArgumentException","t","forceSynchronous","resolveUsing","_waiting","push","pools","PromiseCallbacks","init","_resolvedCalled","throwIfSettled","InvalidOperationException","rejectHandler","reason","console","warn","fulfillHandler","_emitDisposalRejection","d","wasDisposed","_rejectInternal","_resolveInternal","r","o","_i","o_1","length","c","promise","recycle","o_2","getPool","pool","ObjectPool","take","add","all","first","rest","promises","Array","isArray","concat","every","len","remaining","Set","map","i","cleanup","dispose","checkIfShouldResolve","count","onFulfill","remove","onReject","_loop_1","waitAll","onResolved","_loop_2","race","filter","onResolve","promises_1","p_1","target","createFrom","freeze"],"mappings":"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","file":"System/Promises/Promise.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT\n * Although most of the following code is written from scratch, it is\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Threading/deferImmediate\", \"../Disposable/DisposableBase\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentException\", \"../Exceptions/ArgumentNullException\", \"../Disposable/ObjectPool\", \"../Collections/Set\", \"../Threading/defer\", \"../Disposable/ObjectDisposedException\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../Types\");\n    var deferImmediate_1 = require(\"../Threading/deferImmediate\");\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var ArgumentException_1 = require(\"../Exceptions/ArgumentException\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var ObjectPool_1 = require(\"../Disposable/ObjectPool\");\n    var Set_1 = require(\"../Collections/Set\");\n    var defer_1 = require(\"../Threading/defer\");\n    var ObjectDisposedException_1 = require(\"../Disposable/ObjectDisposedException\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var VOID0 = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\n    function isPromise(value) {\n        return Types_1.default.hasMemberOfType(value, THEN, Types_1.default.FUNCTION);\n    }\n    function resolve(value, resolver, promiseFactory) {\n        var nextValue = resolver\n            ? resolver(value)\n            : value;\n        return nextValue && isPromise(nextValue)\n            ? Promise.wrap(nextValue)\n            : promiseFactory(nextValue);\n    }\n    function handleResolution(p, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (p)\n                p.resolve(v);\n        }\n        catch (ex) {\n            p.reject(ex);\n        }\n    }\n    function handleResolutionMethods(targetFulfill, targetReject, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (targetFulfill)\n                targetFulfill(v);\n        }\n        catch (ex) {\n            if (targetReject)\n                targetReject(ex);\n        }\n    }\n    function handleDispatch(p, onFulfilled, onRejected) {\n        if (p instanceof PromiseBase)\n            p.thenThis(onFulfilled, onRejected);\n        else\n            p.then(onFulfilled, onRejected);\n    }\n    function newODE() {\n        return new ObjectDisposedException_1.ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\n    }\n    var PromiseState = (function (_super) {\n        __extends(PromiseState, _super);\n        function PromiseState(_state, _result, _error) {\n            _super.call(this);\n            this._state = _state;\n            this._result = _result;\n            this._error = _error;\n            this._disposableObjectName = PROMISE_STATE;\n        }\n        PromiseState.prototype._onDispose = function () {\n            this._state = VOID0;\n            this._result = VOID0;\n            this._error = VOID0;\n        };\n        PromiseState.prototype.getState = function () {\n            return this._state;\n        };\n        Object.defineProperty(PromiseState.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isPending\", {\n            get: function () {\n                return this.getState() === Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isSettled\", {\n            get: function () {\n                return this.getState() != Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isFulfilled\", {\n            get: function () {\n                return this.getState() === Promise.State.Fulfilled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isRejected\", {\n            get: function () {\n                return this.getState() === Promise.State.Rejected;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getResult = function () {\n            return this._result;\n        };\n        Object.defineProperty(PromiseState.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getError = function () {\n            return this._error;\n        };\n        Object.defineProperty(PromiseState.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getError();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return PromiseState;\n    }(DisposableBase_1.DisposableBase));\n    exports.PromiseState = PromiseState;\n    var PromiseBase = (function (_super) {\n        __extends(PromiseBase, _super);\n        function PromiseBase() {\n            _super.call(this, Promise.State.Pending);\n            this._disposableObjectName = PROMISE;\n        }\n        PromiseBase.prototype.then = function (onFulfilled, onRejected) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (result) { return handleResolutionMethods(resolve, reject, result, onFulfilled); }, function (error) { return onRejected\n                    ? handleResolutionMethods(resolve, null, error, onRejected)\n                    : reject(error); });\n            });\n        };\n        PromiseBase.prototype.done = function (onFulfilled, onRejected) {\n            var _this = this;\n            defer_1.defer(function () { return _this.thenThis(onFulfilled, onRejected); });\n        };\n        PromiseBase.prototype.delayFromNow = function (milliseconds) {\n            var _this = this;\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            return new Promise(function (resolve, reject) {\n                defer_1.defer(function () {\n                    _this.thenThis(function (v) { return resolve(v); }, function (e) { return reject(e); });\n                }, milliseconds);\n            }, true);\n        };\n        PromiseBase.prototype.delayAfterResolve = function (milliseconds) {\n            var _this = this;\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            if (this.isSettled)\n                return this.delayFromNow(milliseconds);\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (v) { return defer_1.defer(function () { return resolve(v); }, milliseconds); }, function (e) { return defer_1.defer(function () { return reject(e); }, milliseconds); });\n            }, true);\n        };\n        PromiseBase.prototype['catch'] = function (onRejected) {\n            this.throwIfDisposed();\n            return this.then(VOID0, onRejected);\n        };\n        PromiseBase.prototype['finally'] = function (fin) {\n            this.throwIfDisposed();\n            return this.then(fin, fin);\n        };\n        PromiseBase.prototype.finallyThis = function (fin) {\n            this.throwIfDisposed();\n            var f = function () { return deferImmediate_1.deferImmediate(fin); };\n            this.thenThis(f, f);\n            return this;\n        };\n        return PromiseBase;\n    }(PromiseState));\n    exports.PromiseBase = PromiseBase;\n    var Resolvable = (function (_super) {\n        __extends(Resolvable, _super);\n        function Resolvable() {\n            _super.apply(this, arguments);\n        }\n        Resolvable.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            try {\n                switch (this.state) {\n                    case Promise.State.Fulfilled:\n                        return onFulfilled\n                            ? resolve(this._result, onFulfilled, Promise.resolve)\n                            : this;\n                    case Promise.State.Rejected:\n                        return onRejected\n                            ? resolve(this._error, onRejected, Promise.resolve)\n                            : this;\n                }\n            }\n            catch (ex) {\n                return new Rejected(ex);\n            }\n            throw new Error(\"Invalid state for a resolved promise.\");\n        };\n        Resolvable.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            switch (this.state) {\n                case Promise.State.Fulfilled:\n                    if (onFulfilled)\n                        onFulfilled(this._result);\n                    break;\n                case Promise.State.Rejected:\n                    if (onRejected)\n                        onRejected(this._error);\n                    break;\n            }\n            return this;\n        };\n        return Resolvable;\n    }(PromiseBase));\n    exports.Resolvable = Resolvable;\n    var Resolved = (function (_super) {\n        __extends(Resolved, _super);\n        function Resolved(state, result, error) {\n            _super.call(this);\n            this._result = result;\n            this._error = error;\n            this._state = state;\n        }\n        return Resolved;\n    }(Resolvable));\n    exports.Resolved = Resolved;\n    var Fulfilled = (function (_super) {\n        __extends(Fulfilled, _super);\n        function Fulfilled(value) {\n            _super.call(this, Promise.State.Fulfilled, value);\n        }\n        return Fulfilled;\n    }(Resolved));\n    var Rejected = (function (_super) {\n        __extends(Rejected, _super);\n        function Rejected(error) {\n            _super.call(this, Promise.State.Rejected, VOID0, error);\n        }\n        return Rejected;\n    }(Resolved));\n    var PromiseWrapper = (function (_super) {\n        __extends(PromiseWrapper, _super);\n        function PromiseWrapper(_target) {\n            var _this = this;\n            _super.call(this);\n            this._target = _target;\n            if (!_target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            if (!isPromise(_target))\n                throw new ArgumentException_1.ArgumentException(TARGET, \"Must be a promise-like object.\");\n            _target.then(function (v) {\n                _this._state = Promise.State.Fulfilled;\n                _this._result = v;\n                _this._error = VOID0;\n                _this._target = VOID0;\n            }, function (e) {\n                _this._state = Promise.State.Rejected;\n                _this._error = e;\n                _this._target = VOID0;\n            });\n        }\n        PromiseWrapper.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            return new Promise(function (resolve, reject) {\n                handleDispatch(t, function (result) { return handleResolutionMethods(resolve, reject, result, onFulfilled); }, function (error) { return onRejected\n                    ? handleResolutionMethods(resolve, null, error, onRejected)\n                    : reject(error); });\n            }, true);\n        };\n        PromiseWrapper.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            handleDispatch(t, onFulfilled, onRejected);\n            return this;\n        };\n        PromiseWrapper.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._target = VOID0;\n        };\n        return PromiseWrapper;\n    }(Resolvable));\n    var Promise = (function (_super) {\n        __extends(Promise, _super);\n        function Promise(resolver, forceSynchronous) {\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            _super.call(this);\n            if (resolver)\n                this.resolveUsing(resolver, forceSynchronous);\n        }\n        Promise.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            var p = new Promise();\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\n            return p;\n        };\n        Promise.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\n            return this;\n        };\n        Promise.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._resolvedCalled = VOID0;\n        };\n        Promise.prototype.resolveUsing = function (resolver, forceSynchronous, throwIfSettled) {\n            var _this = this;\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            if (!resolver)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n            if (this._resolvedCalled)\n                throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n            if (this.state)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\n            this._resolvedCalled = true;\n            var state = 0;\n            var rejectHandler = function (reason) {\n                if (state) {\n                    console.warn(state == -1\n                        ? \"Rejection called multiple times\"\n                        : \"Rejection called after fulfilled.\");\n                }\n                else {\n                    state = -1;\n                    _this._resolvedCalled = false;\n                    _this.reject(reason);\n                }\n            };\n            var fulfillHandler = function (v) {\n                if (state) {\n                    console.warn(state == 1\n                        ? \"Fulfill called multiple times\"\n                        : \"Fulfill called after rejection.\");\n                }\n                else {\n                    state = 1;\n                    _this._resolvedCalled = false;\n                    _this.resolve(v);\n                }\n            };\n            if (forceSynchronous)\n                resolver(fulfillHandler, rejectHandler);\n            else\n                deferImmediate_1.deferImmediate(function () { return resolver(fulfillHandler, rejectHandler); });\n        };\n        Promise.prototype._emitDisposalRejection = function (p) {\n            var d = p.wasDisposed;\n            if (d)\n                this._rejectInternal(newODE());\n            return d;\n        };\n        Promise.prototype._resolveInternal = function (result) {\n            var _this = this;\n            if (this.wasDisposed)\n                return;\n            while (result instanceof PromiseBase) {\n                var r = result;\n                if (this._emitDisposalRejection(r))\n                    return;\n                switch (r.state) {\n                    case Promise.State.Pending:\n                        r.thenSynchronous(function (v) { return _this._resolveInternal(v); }, function (e) { return _this._rejectInternal(e); });\n                        return;\n                    case Promise.State.Rejected:\n                        this._rejectInternal(r.error);\n                        return;\n                    case Promise.State.Fulfilled:\n                        result = r.result;\n                        break;\n                }\n            }\n            if (isPromise(result)) {\n                result.then(function (v) { return _this._resolveInternal(v); }, function (e) { return _this._rejectInternal(e); });\n            }\n            else {\n                this._state = Promise.State.Fulfilled;\n                this._result = result;\n                this._error = VOID0;\n                var o = this._waiting;\n                if (o) {\n                    this._waiting = VOID0;\n                    for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {\n                        var c = o_1[_i];\n                        var onFulfilled = c.onFulfilled, promise = c.promise, p = promise;\n                        pools.PromiseCallbacks.recycle(c);\n                        handleResolution(p, result, onFulfilled);\n                    }\n                    o.length = 0;\n                }\n            }\n        };\n        Promise.prototype._rejectInternal = function (error) {\n            if (this.wasDisposed)\n                return;\n            this._state = Promise.State.Rejected;\n            this._error = error;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = null;\n                for (var _i = 0, o_2 = o; _i < o_2.length; _i++) {\n                    var c = o_2[_i];\n                    var onRejected = c.onRejected, promise = c.promise, p = promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    if (onRejected)\n                        handleResolution(p, error, onRejected);\n                    else\n                        p.reject(error);\n                }\n                o.length = 0;\n            }\n        };\n        Promise.prototype.resolve = function (result, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (result == this)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Fulfilled && this._result === result)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._resolveInternal(result);\n        };\n        Promise.prototype.reject = function (error, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Rejected && this._error === error)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._rejectInternal(error);\n        };\n        return Promise;\n    }(Resolvable));\n    exports.Promise = Promise;\n    var pools;\n    (function (pools) {\n        var PromiseCallbacks;\n        (function (PromiseCallbacks) {\n            var pool;\n            function getPool() {\n                return pool\n                    || (pool = new ObjectPool_1.ObjectPool(40, factory, function (c) {\n                        c.onFulfilled = null;\n                        c.onRejected = null;\n                        c.promise = null;\n                    }));\n            }\n            function factory() {\n                return {\n                    onFulfilled: null,\n                    onRejected: null,\n                    promise: null\n                };\n            }\n            function init(onFulfilled, onRejected, promise) {\n                var c = getPool().take();\n                c.onFulfilled = onFulfilled;\n                c.onRejected = onRejected;\n                c.promise = promise;\n                return c;\n            }\n            PromiseCallbacks.init = init;\n            function recycle(c) {\n                getPool().add(c);\n            }\n            PromiseCallbacks.recycle = recycle;\n        })(PromiseCallbacks = pools.PromiseCallbacks || (pools.PromiseCallbacks = {}));\n    })(pools || (pools = {}));\n    var Promise;\n    (function (Promise) {\n        (function (State) {\n            State[State[\"Pending\"] = 0] = \"Pending\";\n            State[State[\"Fulfilled\"] = 1] = \"Fulfilled\";\n            State[State[\"Rejected\"] = -1] = \"Rejected\";\n        })(Promise.State || (Promise.State = {}));\n        var State = Promise.State;\n        Object.freeze(State);\n        function all(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new Fulfilled(promises);\n            return new Promise(function (resolve, reject) {\n                var checkedAll = false;\n                var result = [];\n                var len = promises.length;\n                result.length = len;\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; }));\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                    remaining.dispose();\n                    remaining = null;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(result);\n                    }\n                };\n                var onFulfill = function (v, i) {\n                    if (resolve) {\n                        result[i] = v;\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var onReject = function (e) {\n                    var r = reject;\n                    if (r) {\n                        cleanup();\n                        r(e);\n                    }\n                };\n                var _loop_1 = function(i) {\n                    var p = promises[i];\n                    if (p)\n                        p.then(function (v) { return onFulfill(v, i); }, onReject);\n                    else\n                        remaining.remove(i);\n                    checkIfShouldResolve();\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_1(i);\n                }\n            });\n        }\n        Promise.all = all;\n        function waitAll(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new Fulfilled(promises);\n            return new Promise(function (resolve, reject) {\n                var checkedAll = false;\n                var len = promises.length;\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; }));\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    remaining.dispose();\n                    remaining = null;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(promises);\n                    }\n                };\n                var onResolved = function (i) {\n                    if (remaining) {\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var _loop_2 = function(i) {\n                    var p = promises[i];\n                    if (p)\n                        p.then(function (v) { return onResolved(i); }, function (e) { return onResolved(i); });\n                    else\n                        onResolved(i);\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_2(i);\n                }\n            });\n        }\n        Promise.waitAll = waitAll;\n        function race(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            var promises = first && (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises || !promises.length || !(promises = promises.filter(function (v) { return v != null; })).length)\n                throw new ArgumentException_1.ArgumentException(\"Nothing to wait for.\");\n            var len = promises.length;\n            if (len == 1)\n                return wrap(promises[0]);\n            for (var i = 0; i < len; i++) {\n                var p = promises[i];\n                if (p instanceof PromiseBase && p.isSettled)\n                    return p;\n            }\n            return new Promise(function (resolve, reject) {\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                };\n                var onResolve = function (r, v) {\n                    if (r) {\n                        cleanup();\n                        r(v);\n                    }\n                };\n                var onFulfill = function (v) { return onResolve(resolve, v); };\n                var onReject = function (e) { return onResolve(reject, e); };\n                for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n                    var p_1 = promises_1[_i];\n                    if (!resolve)\n                        break;\n                    p_1.then(onFulfill, onReject);\n                }\n            });\n        }\n        Promise.race = race;\n        function resolve(value) {\n            return isPromise(value) ? wrap(value) : new Fulfilled(value);\n        }\n        Promise.resolve = resolve;\n        function reject(reason) {\n            return new Rejected(reason);\n        }\n        Promise.reject = reject;\n        function wrap(target) {\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            return target instanceof PromiseBase ? target : new PromiseWrapper(target);\n        }\n        Promise.wrap = wrap;\n        function createFrom(then) {\n            if (!then)\n                throw new ArgumentNullException_1.ArgumentNullException(THEN);\n            return new PromiseWrapper({ then: then });\n        }\n        Promise.createFrom = createFrom;\n    })(Promise = exports.Promise || (exports.Promise = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Promise;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n\r\n/*\r\n * Resources:\r\n * https://promisesaplus.com/\r\n * https://github.com/kriskowal/q\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ObjectDisposedException} from \"../Disposable/ObjectDisposedException\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:Promise.Resolution<T>, resolver:(v:Promise.Resolution<T>)=>any,\r\n\tpromiseFactory:(v:any)=>PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? Promise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:Promise<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p) p.resolve(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ p.reject(ex); }\r\n}\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:Promise.Fulfill<any,any>,\r\n\ttargetReject:Promise.Reject<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\tp.thenThis(onFulfilled, onRejected);\r\n\telse\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nfunction newODE()\r\n{\r\n\treturn new ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\r\n}\r\n\r\nexport class PromiseState<T>\r\nextends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:Promise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\nextends PromiseState<T> implements PromiseLike<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(Promise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * Errors are not trapped.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>;\r\n\r\n\r\n\t/**\r\n\t * Standard .then method that defers execution until resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {Promise}\r\n\t */\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tdone(\r\n\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\tonRejected?:Promise.Reject<any>):void\r\n\t{\r\n\t\tdefer(()=>this.thenThis(onFulfilled, onRejected));\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tdefer(()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\te=> reject(e));\r\n\t\t\t\t}, milliseconds)\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(this.isSettled) return this.delayFromNow(milliseconds);\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tthis.thenThis(\r\n\t\t\t\t\tv=>defer(()=>resolve(v), milliseconds),\r\n\t\t\t\t\te=>defer(()=>reject(e), milliseconds))\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t'catch'<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t'finally'<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\tfinallyThis(fin:()=>void):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tvar f = ()=>deferImmediate(fin);\r\n\t\tthis.thenThis(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T> extends PromiseBase<T>\r\n{\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T> extends Resolvable<T>\r\n{\r\n\tconstructor(state:Promise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nclass Fulfilled<T> extends Resolved<T>\r\n{\r\n\tconstructor(value?:T)\r\n\t{\r\n\t\tsuper(Promise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nclass Rejected<T> extends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(Promise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T> extends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\thandleDispatch(t,\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenThis(onFulfilled, onRejected);\r\n\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class Promise<T> extends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[];\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:Promise.Executor<T>, forceSynchronous:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, forceSynchronous);\r\n\t}\r\n\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tvar p = new Promise<TResult>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenThis(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false,\r\n\t\tthrowIfSettled:boolean = false)\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tvar state = 0;\r\n\t\tvar rejectHandler = (reason:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state== -1\r\n\t\t\t\t\t? \"Rejection called multiple times\"\r\n\t\t\t\t\t: \"Rejection called after fulfilled.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = -1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.reject(reason);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar fulfillHandler = (v:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state==1\r\n\t\t\t\t\t? \"Fulfill called multiple times\"\r\n\t\t\t\t\t: \"Fulfill called after rejection.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = 1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.resolve(v);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\r\n\t\tif(forceSynchronous)\r\n\t\t\tresolver(fulfillHandler, rejectHandler);\r\n\t\telse\r\n\t\t\tdeferImmediate(()=>resolver(fulfillHandler, rejectHandler));\r\n\r\n\t}\r\n\r\n\r\n\tprivate _emitDisposalRejection(p:PromiseBase<any>):boolean\r\n\t{\r\n\t\tvar d = p.wasDisposed;\r\n\t\tif(d) this._rejectInternal(newODE());\r\n\t\treturn d;\r\n\t}\r\n\r\n\tprivate _resolveInternal(result?:T|PromiseLike<T>):void\r\n\t{\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\t// Note: Avoid recursion if possible.\r\n\r\n\t\t// Check ahead of time for resolution and resolve appropriately\r\n\t\twhile(result instanceof PromiseBase)\r\n\t\t{\r\n\t\t\tlet r:PromiseBase<T> = <any>result;\r\n\t\t\tif(this._emitDisposalRejection(r)) return;\r\n\t\t\tswitch(r.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Pending:\r\n\t\t\t\t\tr.thenSynchronous(\r\n\t\t\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\tthis._rejectInternal(r.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\tresult = r.result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(isPromise(result))\r\n\t\t{\r\n\t\t\tresult.then(\r\n\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._state = Promise.State.Fulfilled;\r\n\r\n\t\t\tthis._result = result;\r\n\t\t\tthis._error = VOID0;\r\n\t\t\tvar o = this._waiting;\r\n\t\t\tif(o)\r\n\t\t\t{\r\n\t\t\t\tthis._waiting = VOID0;\r\n\t\t\t\tfor(let c of o)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {onFulfilled, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\t\thandleResolution(p, result, onFulfilled);\r\n\t\t\t\t}\r\n\t\t\t\to.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rejectInternal(error:any):void\r\n\t{\r\n\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\tthis._state = Promise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected) handleResolution(p, error, onRejected);\r\n\t\t\t\telse p.reject(error);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tresolve(result?:T | PromiseLike<T>, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._resolveInternal(result);\r\n\t}\r\n\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._rejectInternal(error);\r\n\t}\r\n}\r\n\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tvar pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c=>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = null;\r\n\t\t\t\t\tc.onRejected = null;\r\n\t\t\t\t\tc.promise = null;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: null,\r\n\t\t\t\tonRejected: null,\r\n\t\t\t\tpromise: null\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\t\tonRejected?:Promise.Reject<any>,\r\n\t\t\tpromise?:PromiseLike<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tvar c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled;\r\n\t\t\tc.onRejected = onRejected;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module Promise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending   = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected  = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = PromiseLike<TResult>|TResult|void;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(err?:any):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Then<T,TResult>\r\n\t{\r\n\t\t(\r\n\t\t\tonFulfilled:Fulfill<T,TResult>,\r\n\t\t\tonRejected?:Reject<TResult>):PromiseBase<TResult>\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new Promise<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any)=>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t */\r\n\texport function waitAll<T>(promises:PromiseLike<T>[]):PromiseBase<PromiseLike<T>[]>\r\n\texport function waitAll<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):PromiseBase<PromiseLike<T>[]>\r\n\texport function waitAll(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<PromiseLike<any>[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new Promise<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet len = promises.length;\r\n\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(promises);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolved = (i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(remaining)\r\n\t\t\t\t{\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onResolved(i), e=>onResolved(i));\r\n\t\t\t\telse onResolved(i);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @param promises An array of Promises.\r\n\t * @returns A new Promise.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tvar promises = first && (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v=>v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tvar len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any)=>void, v:any)=>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any)=> onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any)=> onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn target instanceof PromiseBase ? target : new PromiseWrapper(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T,TResult>(then:Then<T,TResult>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper({then: then});\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled:Promise.Fulfill<T,any>;\r\n\tonRejected:Promise.Reject<any>;\r\n\tpromise?:PromiseLike<any>;\r\n}\r\n\r\nexport default Promise;"]}