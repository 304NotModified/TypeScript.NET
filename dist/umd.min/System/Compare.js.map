{"version":3,"sources":["System/Compare.js","System/Compare.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","areEqual","a","b","strict","isTrueNaN","compare","Types_1","hasMember","COMPARE_TO","compareTo","VOID0","NaN","areEquivalent","nullEquivalency","extraDepth","isObject","Object","keys","length","aKeys","bKeys","len","sort","i","key","_i","aKeys_1"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAYN,IAE/C,SAAUI,EAASF,GAClB,YCQJ,SAAAM,GAAyBC,EAAOC,EAAOC,GAEtC,MAFsC,UAAAA,IAAAA,GAAA,GAE/BF,IAAIC,IACNC,GAAUF,GAAGC,GACdE,EAAUH,IAAMG,EAAUF,GAY/B,QAAAG,GAAwBJ,EAAOC,EAAOC,GAGrC,MAHqC,UAAAA,IAAAA,GAAA,GAGlCH,EAASC,EAAGC,EAAGC,GACV,EAELF,GAAKK,EAAAA,WAAKC,UAAUN,EAAGO,GAClBP,EAAEQ,UAAUP,GACZA,GAAKI,EAAAA,WAAKC,UAAUL,EAAGM,IACtBN,EAAEO,UAAUR,GAIlBA,EAAEC,GAAKC,IAAe,IAAJF,GAAY,GAAHC,GAAY,OAAJD,GAAYC,IAAIQ,GAC9C,EAELR,EAAED,GAAKE,IAAe,IAAJD,GAAY,GAAHD,GAAY,OAAJC,GAAYD,IAAIS,GAC9C,GAEDC,IAWR,QAAAC,GAA8BX,EAAOC,EAAOW,EAAgCC,GAI3E,GAJ2C,SAAAD,IAAAA,GAAA,GAAgC,SAAAC,IAAAA,EAAA,GAIxEd,EAASC,EAAGC,GAAG,GAAO,OAAO,CAEhC,IAAO,OAAJD,GAAYA,IAAIS,GAAY,MAAHR,GAAWA,IAAIQ,EAE1C,MAAIG,GAEDP,EAAAA,WAAKS,SAASd,IAERe,OAAOC,KAAKhB,GAAGiB,OAGrBZ,EAAAA,WAAKS,SAASb,IAERc,OAAOC,KAAKf,GAAGgB,SAGZ,OAAJjB,GAAYA,IAAIS,GAAc,MAAHR,GAAWA,IAAIQ,IAZtB,CAe7B,IAAGJ,EAAAA,WAAKS,SAASd,IAAMK,EAAAA,WAAKS,SAASb,GACrC,CAEC,GAAIiB,GAAQH,OAAOC,KAAKhB,GAAImB,EAAQJ,OAAOC,KAAKf,GAAImB,EAAMF,EAAMD,MAChE,IAAGG,GAAKD,EAAMF,OACb,OAAO,CAERC,GAAMG,OACNF,EAAME,MAEN,KAAI,GAAIC,GAAI,EAAKF,EAAFE,EAAOA,IACtB,CACC,GAAIC,GAAML,EAAMI,EAChB,IAAGC,IAAMJ,EAAMG,KAAOvB,EAASC,EAAEuB,GAAMtB,EAAEsB,IAAM,GAAO,OAAO,EAI9D,GAAGV,EAAW,EAEb,IAAe,GAAAW,GAAA,EAAAC,EAAAP,EAAAM,EAAAC,EAAAR,OAAAO,IAAM,CAAjB,GAAID,GAAGE,EAAAD,EACV,KAAIb,EAAcX,EAAEuB,GAAMtB,EAAEsB,GAAMX,EAAiBC,EAAW,GAAI,OAAO,EAI3E,OAAO,EAGR,OAAO,EA5GR,GAAAR,GAAAV,EAAiB,WACVQ,EAAYE,EAAAA,WAAKF,UAElBM,EAAY,MASFhB,GAAAM,SAAQA,CAOxB,IAAMQ,GAAa,WASHd,GAAAW,QAAOA,EA8BPX,EAAAkB,cAAaA","file":"System/Compare.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./Types\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"./Types\");\n    var isTrueNaN = Types_1.default.isTrueNaN;\n    var VOID0 = void 0;\n    function areEqual(a, b, strict) {\n        if (strict === void 0) { strict = true; }\n        return a === b\n            || !strict && a == b\n            || isTrueNaN(a) && isTrueNaN(b);\n    }\n    exports.areEqual = areEqual;\n    var COMPARE_TO = \"compareTo\";\n    function compare(a, b, strict) {\n        if (strict === void 0) { strict = true; }\n        if (areEqual(a, b, strict))\n            return 0;\n        if (a && Types_1.default.hasMember(a, COMPARE_TO))\n            return a.compareTo(b);\n        else if (b && Types_1.default.hasMember(b, COMPARE_TO))\n            return -b.compareTo(a);\n        if (a > b || strict && (a === 0 && b == 0 || a === null && b === VOID0))\n            return 1;\n        if (b > a || strict && (b === 0 && a == 0 || b === null && a === VOID0))\n            return -1;\n        return NaN;\n    }\n    exports.compare = compare;\n    function areEquivalent(a, b, nullEquivalency, extraDepth) {\n        if (nullEquivalency === void 0) { nullEquivalency = true; }\n        if (extraDepth === void 0) { extraDepth = 0; }\n        if (areEqual(a, b, true))\n            return true;\n        if (a === null || a === VOID0 || b == null || b === VOID0) {\n            if (!nullEquivalency)\n                return false;\n            if (Types_1.default.isObject(a)) {\n                return !Object.keys(a).length;\n            }\n            if (Types_1.default.isObject(b)) {\n                return !Object.keys(b).length;\n            }\n            return (a === null || a === VOID0) && (b == null || b === VOID0);\n        }\n        if (Types_1.default.isObject(a) && Types_1.default.isObject(b)) {\n            var aKeys = Object.keys(a), bKeys = Object.keys(b), len = aKeys.length;\n            if (len != bKeys.length)\n                return false;\n            aKeys.sort();\n            bKeys.sort();\n            for (var i = 0; i < len; i++) {\n                var key = aKeys[i];\n                if (key !== bKeys[i] || !areEqual(a[key], b[key], true))\n                    return false;\n            }\n            if (extraDepth > 0) {\n                for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {\n                    var key = aKeys_1[_i];\n                    if (!areEquivalent(a[key], b[key], nullEquivalency, extraDepth - 1))\n                        return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    exports.areEquivalent = areEquivalent;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"IComparable.d.ts\"/>\r\n///<reference path=\"Primitive.d.ts\"/>\r\n///<reference path=\"CompareResult.d.ts\"/>\r\nimport Type from \"./Types\";\r\nimport isTrueNaN = Type.isTrueNaN;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * Used for special comparison including NaN.\r\n * @param a\r\n * @param b\r\n * @param strict\r\n * @returns {boolean|any}\r\n */\r\nexport function areEqual(a:any, b:any, strict:boolean = true):boolean\r\n{\r\n\treturn a===b\r\n\t\t|| !strict && a==b\r\n\t\t|| isTrueNaN(a) && isTrueNaN(b);\r\n}\r\n\r\nconst COMPARE_TO = \"compareTo\";\r\n\r\n/**\r\n * Compares two comparable objects or primitives.\r\n * @param a\r\n * @param b\r\n */\r\nexport function compare<T>(a:IComparable<T>, b:IComparable<T>):number;\r\nexport function compare<T extends Primitive>(a:T, b:T, strict?:boolean):CompareResult;\r\nexport function compare(a:any, b:any, strict:boolean = true):CompareResult\r\n{\r\n\r\n\tif(areEqual(a, b, strict))\r\n\t\treturn CompareResult.Equal;\r\n\r\n\tif(a && Type.hasMember(a, COMPARE_TO))\r\n\t\treturn a.compareTo(b); // If a has compareTo, use it.\r\n\telse if(b && Type.hasMember(b, COMPARE_TO))\r\n\t\treturn -b.compareTo(a); // a doesn't have compareTo? check if b does and invert.\r\n\r\n\t// Allow for special inequality..\r\n\r\n\tif(a>b || strict && (a===0 && b==0 || a===null && b===VOID0))\r\n\t\treturn CompareResult.Greater;\r\n\r\n\tif(b>a || strict && (b===0 && a==0 || b===null && a===VOID0))\r\n\t\treturn CompareResult.Less;\r\n\r\n\treturn NaN;\r\n}\r\n\r\n/**\r\n * Determines if two primitives are equal or if two objects have the same key/value combinations.\r\n * @param a\r\n * @param b\r\n * @param nullEquivalency If true, null/undefined will be equivalent to an empty object {}.\r\n * @param extraDepth\r\n * @returns {boolean}\r\n */\r\nexport function areEquivalent(a:any, b:any, nullEquivalency:boolean = true, extraDepth:number = 0):boolean\r\n{\r\n\r\n\t// Take a step by step approach to ensure efficiency.\r\n\tif(areEqual(a, b, true)) return true;\r\n\r\n\tif(a===null || a===VOID0 || b==null || b===VOID0)\r\n\t{\r\n\t\tif(!nullEquivalency) return false;\r\n\r\n\t\tif(Type.isObject(a))\r\n\t\t{\r\n\t\t\treturn !Object.keys(a).length;\r\n\t\t}\r\n\r\n\t\tif(Type.isObject(b))\r\n\t\t{\r\n\t\t\treturn !Object.keys(b).length;\r\n\t\t}\r\n\r\n\t\treturn (a===null || a===VOID0) && (b==null || b===VOID0);\r\n\t}\r\n\r\n\tif(Type.isObject(a) && Type.isObject(b))\r\n\t{\r\n\r\n\t\tvar aKeys = Object.keys(a), bKeys = Object.keys(b), len = aKeys.length;\r\n\t\tif(len!=bKeys.length)\r\n\t\t\treturn false;\r\n\r\n\t\taKeys.sort();\r\n\t\tbKeys.sort();\r\n\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tlet key = aKeys[i];\r\n\t\t\tif(key!==bKeys[i] || !areEqual(a[key], b[key], true)) return false;\r\n\t\t}\r\n\r\n\t\t// Doesn't track circular references but allows for controlling the amount of recursion.\r\n\t\tif(extraDepth>0) {\r\n\r\n\t\t\tfor(let key of aKeys) {\r\n\t\t\t\tif(!areEquivalent(a[key], b[key], nullEquivalency, extraDepth-1)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n"]}