{"version":3,"sources":["System/Observable/ObservableNodeBase.ts","System/Observable/ObservableNodeBase.js"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","deps","factory","module","exports","v","require","undefined","define","amd","processAction","observers","handler","SubscribableBase_1","ObservableNodeBase","_super","ObservableNodeBase.constructor","ObservableNodeBase.onNext","ObservableNodeBase.onError","ObservableNodeBase.onCompleted","defineProperty","value","OBSERVER_ERROR_MESSAGE"],"mappings":"AAMA,YCLA,IAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,sBAAuB,SAAUI,EAASF,GDgCpE,QAAAM,GACCC,EACAC,GAIAF,IAAaA,GAFTA,GAAmDA,KAE1CA,EAAAA,EAATA,EAAAA,EAAAA,OAAAA,IAAmBA,CAAnBA,GAAIA,GAAKA,EAASA,EAErBA,KAECA,EAAQA,GAETA,MAAMA,GAELA,EAAkBA,MAElBA,EAAgBA,MAAMA,SAAUA,EAAGA,GAAIA,KAMzCA,GAFAA,EAAUA,OAASA,EAEhBA,GAAmBA,EAAgBA,OACtCA,CACCA,IAAGA,UAAWA,QAAQA,MAEjBA,MACJA,QAASA,EACTA,OAAQA,EAHRA,SAAQA,MAAMA,EAAwBA,IA5DzC,GAAAG,GAAAP,EAA6B,sBAG7BQ,EAAA,SAAAC,GAAAD,QAAAA,KAEQE,EAAAA,MAAAA,KAAAA,WA0BRF,MA1BQA,WAAAA,EAAAA,GAGPA,EAAAA,UAAAA,OAAAA,SAAOA,GAENG,EACCA,KAAKA,kBACLA,SAAAA,GAAOA,EAAEA,QAAUA,EAAEA,OAAOA,MAI9BH,EAAAA,UAAAA,QAAAA,SAAQA,GAEPI,EACCA,KAAKA,kBACLA,SAAAA,GAAOA,EAAEA,SAAWA,EAAEA,QAAQA,MAIhCJ,EAAAA,UAAAA,YAAAA,WAECK,EACCA,KAAKA,iBAAgBA,GACrBA,SAAAA,GAAOA,EAAEA,aAAeA,EAAEA,iBAG7BL,GA1BQD,EAAAA,WAFRd,QAAAqB,eAAAhB,EAAA,cAAAiB,OAAA,ICqBIjB,EAAAA,WAAkBU,CDStB,IAAMQ,GAAgC","file":"System/Observable/ObservableNodeBase.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n///<reference path=\"IObserver.d.ts\"/>\r\n///<reference path=\"IObservable.d.ts\"/>\r\nimport SubscribableBase from './SubscribableBase';\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\nexport default\r\nclass ObservableNodeBase<T>\r\nextends SubscribableBase<IObserver<T>> implements IObservable<T>, IObserver<T>\r\n{\r\n\r\n\tonNext(value:T):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onNext && s.onNext(value); }\r\n\t\t);\r\n\t}\r\n\r\n\tonError(error:Error):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onError && s.onError(error); }\r\n\t\t);\r\n\t}\r\n\r\n\tonCompleted():void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._unsubscribeAll(true),\r\n\t\t\ts => { s.onCompleted && s.onCompleted(); }\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst OBSERVER_ERROR_MESSAGE:string = 'One or more observers had errors when attempting to pass information.';\r\n\r\nfunction processAction<T>(\r\n\tobservers:IObserver<T>[],\r\n\thandler:(s:IObserver<T>)=>void)\r\n{\r\n\tvar observersErrors:{observer:IObserver<T>,ex:any}[] = null;\r\n\r\n\tfor(let s of observers)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\thandler(s);\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tobserversErrors = observersErrors || [];\r\n\t\t\t// Don't let one error prevent others from recieving information.\r\n\t\t\tobserversErrors.push({observer: s, ex: ex});\r\n\t\t}\r\n\t}\r\n\r\n\tobservers.length = 0;\r\n\r\n\tif(observersErrors && observersErrors.length)\r\n\t{\r\n\t\tif(console && console.error)\r\n\t\t\tconsole.error(OBSERVER_ERROR_MESSAGE, observersErrors);\r\n\t\telse throw {\r\n\t\t\tmessage: OBSERVER_ERROR_MESSAGE,\r\n\t\t\terrors: observersErrors\r\n\t\t};\r\n\t}\r\n\r\n}\r\n","'use strict';\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", './SubscribableBase'], function (require, exports) {\r\n    ///<reference path=\"IObserver.d.ts\"/>\r\n    ///<reference path=\"IObservable.d.ts\"/>\r\n    var SubscribableBase_1 = require('./SubscribableBase');\r\n    var ObservableNodeBase = (function (_super) {\r\n        __extends(ObservableNodeBase, _super);\r\n        function ObservableNodeBase() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        ObservableNodeBase.prototype.onNext = function (value) {\r\n            processAction(this._getSubscribers(), function (s) { s.onNext && s.onNext(value); });\r\n        };\r\n        ObservableNodeBase.prototype.onError = function (error) {\r\n            processAction(this._getSubscribers(), function (s) { s.onError && s.onError(error); });\r\n        };\r\n        ObservableNodeBase.prototype.onCompleted = function () {\r\n            processAction(this._unsubscribeAll(true), function (s) { s.onCompleted && s.onCompleted(); });\r\n        };\r\n        return ObservableNodeBase;\r\n    })(SubscribableBase_1.default);\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = ObservableNodeBase;\r\n    var OBSERVER_ERROR_MESSAGE = 'One or more observers had errors when attempting to pass information.';\r\n    function processAction(observers, handler) {\r\n        var observersErrors = null;\r\n        for (var _i = 0; _i < observers.length; _i++) {\r\n            var s = observers[_i];\r\n            try {\r\n                handler(s);\r\n            }\r\n            catch (ex) {\r\n                observersErrors = observersErrors || [];\r\n                observersErrors.push({ observer: s, ex: ex });\r\n            }\r\n        }\r\n        observers.length = 0;\r\n        if (observersErrors && observersErrors.length) {\r\n            if (console && console.error)\r\n                console.error(OBSERVER_ERROR_MESSAGE, observersErrors);\r\n            else\r\n                throw {\r\n                    message: OBSERVER_ERROR_MESSAGE,\r\n                    errors: observersErrors\r\n                };\r\n        }\r\n    }\r\n});\r\n//# sourceMappingURL=ObservableNodeBase.js.map"]}