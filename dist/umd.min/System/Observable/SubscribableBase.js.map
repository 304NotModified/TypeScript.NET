{"version":3,"sources":["System/Observable/SubscribableBase.js","System/Observable/SubscribableBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","LinkedNodeList_1","dispose_1","Subscription_1","DisposableBase_1","extends_1","__extends","NAME","SubscribableBase","_super","call","this","_disposableObjectName","prototype","_getSubscribers","s","__subscriptions","map","node","value","subscriber","_findEntryNode","find","n","subscribe","_","throwIfDisposed","_s","LinkedNodeList","Subscription","addNode","unsubscribe","removeNode","dispose","_unsubscribeAll","returnSubscribers","u","o","clear","these","unsubscribeAll","_onDispose","DisposableBase","Object","defineProperty"],"mappings":"CAAA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,gCAAiC,wBAAyB,iBAAkB,+BAAgC,iBAAkBN,IAEjK,SAAUI,EAASF,GAClB,YCFJ,IAAAM,GAAAJ,EAA6B,iCAC7BK,EAAAL,EAAsB,yBACtBM,EAAAN,EAA2B,kBAG3BO,EAAAP,EAA6B,gCAC7BQ,EAAAR,EAA4B,iBAEtBS,EAAYD,EAAAA,WAEZE,EAAO,mBAEbC,EAAA,SAAAC,GAeC,QAAAD,KAECC,EAAAC,KAAAC,MACAA,KAAKC,sBAAwBL,EAuE/B,MAxFQD,GAAAE,EAAAC,GAMGD,EAAAK,UAAAC,gBAAV,WAEC,GAAMC,GAAIJ,KAAKK,eACf,OAAOD,GACJA,EAAEE,IAAI,SAAAC,GAAM,MAAcA,IAAQA,EAAKC,OAASD,EAAKC,MAAMC,aAC3D,MASIZ,EAAAK,UAAAQ,eAAR,SACCD,GAEA,GAAML,GAAIJ,KAAKK,eACf,OAAOD,IAAKA,EAAEO,KAAK,SAAAC,GAAG,QAAEA,EAAEJ,OAASI,EAAEJ,MAAMC,aAAaA,KAIzDZ,EAAAK,UAAAW,UAAA,SAAUJ,GAET,GAAMK,GAAId,IACVc,GAAEC,iBAEF,IAAMH,GAAIE,EAAEJ,eAAeD,EAC3B,IAAGG,EACF,MAAoBA,GAAEJ,KAEvB,IAAIQ,GAAKF,EAAET,eACPW,KAAIF,EAAET,gBAAkBW,EACzB,GAAI1B,GAAA2B,eAEP,IAAMb,GAAI,GAAIZ,GAAA0B,aAAaJ,EAAGL,EAG9B,OAFAO,GAAGG,SAASX,MAAOJ,IAEZA,GAGRP,EAAAK,UAAAkB,YAAA,SAAYX,GAEX,GAAMK,GAAId,KAEJY,EAAIE,EAAEJ,eAAeD,EAC3B,IAAGG,EACH,CACC,GAAMR,GAAIQ,EAAEJ,KACZM,GAAET,gBAAgBgB,WAAWT,GAC1BR,GAAGA,EAAEkB,YAIAzB,EAAAK,UAAAqB,gBAAV,SAA0BC,GAAA,SAAAA,IAAAA,GAAA,EAEzB,IAAMV,GAAId,KACNgB,EAAKF,EAAET,eACX,KAAIW,EAAI,MAAO,KACf,IAAMZ,GAAIY,EAAGV,IAAI,SAAAM,GAAK,MAAAA,GAAEJ,QAClBiB,EAAID,EAAoBpB,EAAEE,IAAI,SAAAoB,GAAK,MAAAA,GAAGjB,aAAc,IAK1D,OAJAO,GAAGW,QAEHpC,EAAA+B,QAAQM,MAAMxB,GAEPqB,GAGR5B,EAAAK,UAAA2B,eAAA,WAEC7B,KAAKuB,mBAGI1B,EAAAK,UAAA4B,WAAV,WAEChC,EAAAI,UAAM4B,WAAU/B,KAAAC,MAChBA,KAAKuB,iBACL,IAAMnB,GAAIJ,KAAKK,eACfL,MAAKK,gBAAuB,KAC5Bd,EAAA+B,QAAQlB,IAGVP,GAxFQJ,EAAAsC,eADK/C,GAAAa,iBAAgBA,EA2F7BmC,OAAAC,eAAAjD,EAAA,cAAAwB,OAAA,ID3BIxB,EAAAA,WC2BWa","file":"SubscribableBase.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Collections/LinkedNodeList\", \"../Disposable/dispose\", \"./Subscription\", \"../Disposable/DisposableBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var LinkedNodeList_1 = require(\"../Collections/LinkedNodeList\");\n    var dispose_1 = require(\"../Disposable/dispose\");\n    var Subscription_1 = require(\"./Subscription\");\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var NAME = \"SubscribableBase\";\n    var SubscribableBase = (function (_super) {\n        __extends(SubscribableBase, _super);\n        function SubscribableBase() {\n            _super.call(this);\n            this._disposableObjectName = NAME;\n        }\n        SubscribableBase.prototype._getSubscribers = function () {\n            var s = this.__subscriptions;\n            return s\n                ? s.map(function (node) { return (node && node.value && node.value.subscriber); })\n                : null;\n        };\n        SubscribableBase.prototype._findEntryNode = function (subscriber) {\n            var s = this.__subscriptions;\n            return s && s.find(function (n) { return !!n.value && n.value.subscriber === subscriber; });\n        };\n        SubscribableBase.prototype.subscribe = function (subscriber) {\n            var _ = this;\n            _.throwIfDisposed();\n            var n = _._findEntryNode(subscriber);\n            if (n)\n                return n.value;\n            var _s = _.__subscriptions;\n            if (!_s)\n                _.__subscriptions = _s\n                    = new LinkedNodeList_1.LinkedNodeList();\n            var s = new Subscription_1.Subscription(_, subscriber);\n            _s.addNode({ value: s });\n            return s;\n        };\n        SubscribableBase.prototype.unsubscribe = function (subscriber) {\n            var _ = this;\n            var n = _._findEntryNode(subscriber);\n            if (n) {\n                var s = n.value;\n                _.__subscriptions.removeNode(n);\n                if (s)\n                    s.dispose();\n            }\n        };\n        SubscribableBase.prototype._unsubscribeAll = function (returnSubscribers) {\n            if (returnSubscribers === void 0) { returnSubscribers = false; }\n            var _ = this;\n            var _s = _.__subscriptions;\n            if (!_s)\n                return null;\n            var s = _s.map(function (n) { return n.value; });\n            var u = returnSubscribers ? s.map(function (o) { return o.subscriber; }) : null;\n            _s.clear();\n            dispose_1.dispose.these(s);\n            return u;\n        };\n        SubscribableBase.prototype.unsubscribeAll = function () {\n            this._unsubscribeAll();\n        };\n        SubscribableBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._unsubscribeAll();\n            var s = this.__subscriptions;\n            this.__subscriptions = null;\n            dispose_1.dispose(s);\n        };\n        return SubscribableBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.SubscribableBase = SubscribableBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SubscribableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {dispose} from \"../Disposable/dispose\";\r\nimport {Subscription} from \"./Subscription\";\r\nimport {ILinkedNodeWithValue} from \"../Collections/ILinkedListNode\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME = \"SubscribableBase\";\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\nexport class SubscribableBase<TSubscriber>\r\nextends DisposableBase\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]|null\r\n\t{\r\n\t\tconst s = this.__subscriptions;\r\n\t\treturn s\r\n\t\t\t? s.map(node=><TSubscriber>(node && node.value && node.value.subscriber))\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = NAME;\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>|null\r\n\t{\r\n\t\tconst s = this.__subscriptions;\r\n\t\treturn s && s.find(n=>!!n.value && n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn <IDisposable>n.value;\r\n\r\n\t\tlet _s = _.__subscriptions;\r\n\t\tif(!_s) _.__subscriptions = _s\r\n\t\t\t= new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\r\n\t\tconst s = new Subscription(_, subscriber);\r\n\t\t_s.addNode({value: s});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t// _.throwIfDisposed(); If it was disposed, then it's still safe to try and unsubscribe.\r\n\t\tconst n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tconst s = n.value;\r\n\t\t\t_.__subscriptions.removeNode(n);\r\n\t\t\tif(s) s.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]|null\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet _s = _.__subscriptions;\r\n\t\tif(!_s) return null;\r\n\t\tconst s = _s.map(n => n.value);\r\n\t\tconst u = returnSubscribers ? s.map(o => o!.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tdispose.these(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._unsubscribeAll();\r\n\t\tconst s = this.__subscriptions;\r\n\t\tthis.__subscriptions = <any>null;\r\n\t\tdispose(s);\r\n\t}\r\n\r\n}\r\n\r\nexport default SubscribableBase;\r\n"]}