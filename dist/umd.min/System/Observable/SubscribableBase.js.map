{"version":3,"sources":["System/Observable/SubscribableBase.ts","System/Observable/SubscribableBase.js"],"names":["deps","factory","module","exports","v","require","undefined","define","amd","LinkedList_1","DisposeUtility","Subscription_1","SubscribableBase","SubscribableBase.constructor","SubscribableBase._getSubscribers","SubscribableBase._findEntryNode","SubscribableBase.subscribe","SubscribableBase.unsubscribe","SubscribableBase._unsubscribeAll","SubscribableBase.unsubscribeAll","SubscribableBase.dispose","Object","defineProperty","value"],"mappings":"AAMA,cCLA,SAAWA,EAAMC,GACb,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,OAAOP,EAAMC,KAEjB,UAAW,UAAW,4BAA6B,wBAAyB,kBAAmB,SAAUI,EAASF,GDGtH,GAAAM,GAAAJ,EAAuB,6BACXK,EAAcL,EAAM,yBAChCM,EAAAN,EAAyB,kBAIzBO,EAAA,WAcCA,QAAAA,KAECC,KAAKA,gBAAkBA,GAAIA,GAAAA,WAkE7BD,MA1EWA,GAAAA,UAAAA,gBAAVA,WACCE,MAAOA,MAAKA,gBACVA,UACAA,IAAIA,SAAAA,GAAGA,MAAAA,GAAEA,cAQJF,EAAAA,UAAAA,eAARA,SACCA,GAGAG,IADAA,GAAIA,GAAOA,KAAKA,gBAAgBA,MAC1BA,GAEFA,EAAKA,MAAMA,aAAaA,GAM1BA,EAAOA,EAAKA,IAIdA,OAAOA,IAIRH,EAAAA,UAAAA,UAAAA,SAAUA,GAETI,GAAIA,GAAIA,KACJA,EAAIA,EAAEA,eAAeA,EACzBA,IAAGA,EACFA,MAAOA,GAAEA,KAEVA,IAAIA,GAAIA,GAAIA,GAAAA,WAAaA,EAAGA,EAG5BA,OAFAA,GAAEA,gBAAgBA,IAAIA,GAEfA,GAGRJ,EAAAA,UAAAA,YAAAA,SAAYA,GAEXK,GAAIA,GAAIA,KAAKA,eAAeA,EAC5BA,IAAGA,EACHA,CACCA,GAAIA,GAAIA,EAAEA,KACVA,GAAEA,SACFA,EAAEA,YAIML,EAAAA,UAAAA,gBAAVA,SAA0BA,GAAAM,SAAAA,IAAAA,GAAAA,EACzBA,IAAIA,GAAIA,KAAMA,EAAKA,EAAEA,gBACjBA,EAAIA,EAAGA,UACPA,EAAIA,EAAoBA,EAAEA,IAAIA,SAAAA,GAAGA,MAAAA,GAAEA,aAAcA,IAKrDA,OAJAA,GAAGA,QAEHA,EAAeA,aAAaA,GAErBA,GAGRN,EAAAA,UAAAA,eAAAA,WACCO,KAAKA,mBAGNP,EAAAA,UAAAA,QAAAA,WACCQ,KAAKA,mBAGPR,IAlFAS,QAAAC,eAAAnB,EAAA,cAAAoB,OAAA,ICqDIpB,EAAAA,WAAkBS","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\n///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n///<reference path=\"../FunctionTypes.d.ts\"/>\r\n\r\nimport LinkedList from '../Collections/LinkedList';\r\nimport * as DisposeUtility from '../Disposable/Utility'\r\nimport Subscription from './Subscription';\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\n\r\nexport default\r\nclass SubscribableBase<TSubscriber>\r\nimplements IDisposable\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedList<Subscription<TSubscriber>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[] {\r\n\t\treturn this.__subscriptions\r\n\t\t\t.toArray()\r\n\t\t\t.map(s=>s.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.__subscriptions = new LinkedList<Subscription<TSubscriber>>();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedListNode<Subscription<TSubscriber>>\r\n\t{\r\n\t\tvar node = this.__subscriptions.first;\r\n\t\twhile(node)\r\n\t\t{\r\n\t\t\tif(node.value.subscriber===subscriber)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnode = node.next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_.__subscriptions.add(s);\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tvar n = this._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\tn.remove();\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[] {\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tvar s = _s.toArray();\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tDisposeUtility.disposeThese(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tdispose() {\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n}\r\n","'use strict';\r\n(function (deps, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\r\n    }\r\n    else if (typeof define === 'function' && define.amd) {\r\n        define(deps, factory);\r\n    }\r\n})([\"require\", \"exports\", '../Collections/LinkedList', '../Disposable/Utility', './Subscription'], function (require, exports) {\r\n    ///<reference path=\"../Disposable/IDisposable.d.ts\"/>\r\n    ///<reference path=\"../FunctionTypes.d.ts\"/>\r\n    var LinkedList_1 = require('../Collections/LinkedList');\r\n    var DisposeUtility = require('../Disposable/Utility');\r\n    var Subscription_1 = require('./Subscription');\r\n    var SubscribableBase = (function () {\r\n        function SubscribableBase() {\r\n            this.__subscriptions = new LinkedList_1.default();\r\n        }\r\n        SubscribableBase.prototype._getSubscribers = function () {\r\n            return this.__subscriptions\r\n                .toArray()\r\n                .map(function (s) { return s.subscriber; });\r\n        };\r\n        SubscribableBase.prototype._findEntryNode = function (subscriber) {\r\n            var node = this.__subscriptions.first;\r\n            while (node) {\r\n                if (node.value.subscriber === subscriber) {\r\n                    break;\r\n                }\r\n                else {\r\n                    node = node.next;\r\n                }\r\n            }\r\n            return node;\r\n        };\r\n        SubscribableBase.prototype.subscribe = function (subscriber) {\r\n            var _ = this;\r\n            var n = _._findEntryNode(subscriber);\r\n            if (n)\r\n                return n.value;\r\n            var s = new Subscription_1.default(_, subscriber);\r\n            _.__subscriptions.add(s);\r\n            return s;\r\n        };\r\n        SubscribableBase.prototype.unsubscribe = function (subscriber) {\r\n            var n = this._findEntryNode(subscriber);\r\n            if (n) {\r\n                var s = n.value;\r\n                n.remove();\r\n                s.dispose();\r\n            }\r\n        };\r\n        SubscribableBase.prototype._unsubscribeAll = function (returnSubscribers) {\r\n            if (returnSubscribers === void 0) { returnSubscribers = false; }\r\n            var _ = this, _s = _.__subscriptions;\r\n            var s = _s.toArray();\r\n            var u = returnSubscribers ? s.map(function (o) { return o.subscriber; }) : null;\r\n            _s.clear();\r\n            DisposeUtility.disposeThese(s);\r\n            return u;\r\n        };\r\n        SubscribableBase.prototype.unsubscribeAll = function () {\r\n            this._unsubscribeAll();\r\n        };\r\n        SubscribableBase.prototype.dispose = function () {\r\n            this._unsubscribeAll();\r\n        };\r\n        return SubscribableBase;\r\n    })();\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = SubscribableBase;\r\n});\r\n//# sourceMappingURL=SubscribableBase.js.map"]}