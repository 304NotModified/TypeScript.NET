{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","getEmptyEnumerator","EmptyEnumerator_1","EmptyEnumerator","nextEnumerator","queue","e","moveNext","dispose_1","dispose","enqueue","createSortContext","orderedEnumerable","currentContext","context","KeySortedContext_1","KeySortedContext","keySelector","order","comparer","parent","throwIfDisposed","disposed","ObjectDisposedException_1","ObjectDisposedException","Compare_1","Arrays","ArrayUtility","Utility_1","enumUtil","Enumerator_1","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","DisposableBase_1","UnsupportedEnumerableException_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","extends_1","IndexEnumerator_1","__extends","INVALID_DEFAULT","VOID0","NULL","BREAK","element","LinqFunctions","_super","apply","this","arguments","prototype","Greater","a","b","Lesser","Functions","Object","freeze","InfiniteEnumerable","_enumeratorFactory","finalizer","call","_isEndless","defineProperty","get","enumerable","configurable","getEnumerator","_onDispose","asEnumerable","_","doAction","action","initializer","isEndless","isE","Enumerable","enumerator","index","EnumeratorBase","yielder","actionResult","current","yieldBreak","yieldReturn","force","skip","count","isFinite","Integer","assert","take","empty","ArgumentOutOfRangeException","elementAt","elementAtOrDefault","defaultValue","assertZeroOrGreater","n","using","i","first","firstOrDefault","Error","single","value","singleOrDefault","any","isEmpty","traverseBreadthFirst","childrenSelector","resultSelector","Identity","buffer","len","nestLevel","next","from","selectMany","length","traverseDepthFirst","enumeratorStack","fromAny","these","flatten","middleEnumerator","c","Type","isString","pairwise","selector","ArgumentNullException","prev","scan","func","seed","isUseSeed","isFirst","select","_selectMany","collectionSelector","middleSeq","_choose","result","choose","where","predicate","ofType","type","typeName","Number","NUMBER","String","STRING","Boolean","BOOLEAN","Function","FUNCTION","x","except","second","compareSelector","keys","Dictionary","forEach","key","addByKeyValue","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","areEqual","defaultIfEmpty","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","Queue","dequeue","join","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","toLookup","innerElement","groupJoin","merge","enumerables","concat","_i","union","insertAt","other","isEnumerated","alternateMultiple","sequence","mode","alternateEnumerator","ArrayEnumerator","toArray","hasAtLeastOne","reset","latest","another","alternateSingle","make","alternate","catchError","handler","finallyAction","size","array","initialize","share","sharedEnumerator","DisposableBase","enumeratorFactory","skipWhile","takeWhile","takeUntil","includeUntilValue","found","max","Infinity","throwIfEndless","copyTo","target","elementSelector","dict","getValue","push","Lookup","toMap","obj","toDictionary","toJoinedString","separator","takeExceptLast","q","skipToLast","reverse","shuffle","capacity","selectedIndex","random","selectedValue","all","every","some","contains","s","indexOf","lastIndexOf","intersect","outs","sequenceEqual","equalityComparer","e1","e2","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","_this","partitionBy","elements","Grouping","group","hasNext","aggregate","lastOrDefault","average","numberOrNaN","sum","isNaN","NaN","min","maxBy","minBy","sumInfinite","product","exists","quotient","last","memoize","cache","FiniteEnumerable","ArrayEnumerable","source","_source","_disposableObjectName","IndexEnumerator","pointer","step","isArrayLike","Array","isArray","_groupKey","_dictionary","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes","UnsupportedEnumerableException","defaultEnumerable","isObject","isEnumerable","fromOrEmpty","_choice","values","choice","copy","chooseFrom","args","_cycle","cycle","cycleThrough","repeat","repeatWithFinalize","range","start","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","matches","input","pattern","flags","RegExp","regex","match","exec","generate","unfold","valueFactory","skipSeed","map","weave","mainEnumerator","dump"],"mappings":"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","file":"Linq.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../System/Compare\", \"../System/Collections/Array/Compare\", \"../System/Collections/Array/Utility\", \"../System/Collections/Array/Utility\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Collections/Enumeration/EmptyEnumerator\", \"../System/Types\", \"../System/Integer\", \"../System/Functions\", \"../System/Collections/Enumeration/ArrayEnumerator\", \"../System/Collections/Enumeration/EnumeratorBase\", \"../System/Collections/Dictionaries/Dictionary\", \"../System/Collections/Queue\", \"../System/Disposable/dispose\", \"../System/Disposable/DisposableBase\", \"../System/Collections/Enumeration/UnsupportedEnumerableException\", \"../System/Disposable/ObjectDisposedException\", \"../System/Collections/Sorting/KeySortedContext\", \"../System/Exceptions/ArgumentNullException\", \"../System/Exceptions/ArgumentOutOfRangeException\", \"../extends\", \"../System/Collections/Enumeration/IndexEnumerator\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Compare_1 = require(\"../System/Compare\");\n    var Arrays = require(\"../System/Collections/Array/Compare\");\n    var ArrayUtility = require(\"../System/Collections/Array/Utility\");\n    var Utility_1 = require(\"../System/Collections/Array/Utility\");\n    var enumUtil = require(\"../System/Collections/Enumeration/Enumerator\");\n    var Enumerator_1 = require(\"../System/Collections/Enumeration/Enumerator\");\n    var EmptyEnumerator_1 = require(\"../System/Collections/Enumeration/EmptyEnumerator\");\n    var Types_1 = require(\"../System/Types\");\n    var Integer_1 = require(\"../System/Integer\");\n    var Functions_1 = require(\"../System/Functions\");\n    var ArrayEnumerator_1 = require(\"../System/Collections/Enumeration/ArrayEnumerator\");\n    var EnumeratorBase_1 = require(\"../System/Collections/Enumeration/EnumeratorBase\");\n    var Dictionary_1 = require(\"../System/Collections/Dictionaries/Dictionary\");\n    var Queue_1 = require(\"../System/Collections/Queue\");\n    var dispose_1 = require(\"../System/Disposable/dispose\");\n    var DisposableBase_1 = require(\"../System/Disposable/DisposableBase\");\n    var UnsupportedEnumerableException_1 = require(\"../System/Collections/Enumeration/UnsupportedEnumerableException\");\n    var ObjectDisposedException_1 = require(\"../System/Disposable/ObjectDisposedException\");\n    var KeySortedContext_1 = require(\"../System/Collections/Sorting/KeySortedContext\");\n    var ArgumentNullException_1 = require(\"../System/Exceptions/ArgumentNullException\");\n    var ArgumentOutOfRangeException_1 = require(\"../System/Exceptions/ArgumentOutOfRangeException\");\n    var extends_1 = require(\"../extends\");\n    var IndexEnumerator_1 = require(\"../System/Collections/Enumeration/IndexEnumerator\");\n    var __extends = extends_1.default;\n    var INVALID_DEFAULT = {};\n    var VOID0 = void 0;\n    var NULL = null;\n    var BREAK = function (element) { return 0; };\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            _super.apply(this, arguments);\n        }\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.Functions));\n    var Functions = new LinqFunctions();\n    Object.freeze(Functions);\n    function getEmptyEnumerator() {\n        return EmptyEnumerator_1.EmptyEnumerator;\n    }\n    var InfiniteEnumerable = (function (_super) {\n        __extends(InfiniteEnumerable, _super);\n        function InfiniteEnumerable(_enumeratorFactory, finalizer) {\n            _super.call(this, finalizer);\n            this._enumeratorFactory = _enumeratorFactory;\n            this._isEndless = true;\n        }\n        Object.defineProperty(InfiniteEnumerable.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        InfiniteEnumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        InfiniteEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._enumeratorFactory = null;\n        };\n        InfiniteEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new InfiniteEnumerable(function () { return _.getEnumerator(); });\n        };\n        InfiniteEnumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            var _ = this;\n            var isE = isEndless || undefined;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    if (initializer)\n                        initializer();\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var actionResult = action(enumerator.current, index++);\n                        if (actionResult === false || actionResult === 0)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2)\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isE);\n            }, function () {\n                disposed = true;\n            }, isE);\n        };\n        InfiniteEnumerable.prototype.force = function () {\n            this.throwIfDisposed();\n            this.doAction(BREAK)\n                .getEnumerator()\n                .moveNext();\n        };\n        InfiniteEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return new InfiniteEnumerable(getEmptyEnumerator);\n            Integer_1.Integer.assert(count, \"count\");\n            return this.doAction(function (element, index) {\n                return index < count\n                    ? 2\n                    : 1;\n            });\n        };\n        InfiniteEnumerable.prototype.take = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, 'Must be finite.');\n            Integer_1.Integer.assert(count, \"count\");\n            return _.doAction(function (element, index) { return index < count; }, null, false);\n        };\n        InfiniteEnumerable.prototype.elementAt = function (index) {\n            var v = this.elementAtOrDefault(index, INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var n = index;\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                var i = 0;\n                while (e.moveNext()) {\n                    if (i == n)\n                        return e.current;\n                    i++;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.first = function () {\n            var v = this.firstOrDefault(INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"first:The sequence is empty.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext() ? e.current : defaultValue; });\n        };\n        InfiniteEnumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                    throw new Error(\"single:sequence contains more than one element.\");\n                }\n                throw new Error(\"single:The sequence is empty.\");\n            });\n        };\n        InfiniteEnumerable.prototype.singleOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.any = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext(); });\n        };\n        InfiniteEnumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        InfiniteEnumerable.prototype.traverseBreadthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .from(buffer)\n                            .selectMany(childrenSelector);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    buffer.length = 0;\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.traverseDepthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumeratorStack = [];\n                var enumerator;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            var e = Enumerable.fromAny(childrenSelector(enumerator.current));\n                            enumerator = e ? e.getEnumerator() : EmptyEnumerator_1.EmptyEnumerator;\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        dispose_1.dispose.these(enumeratorStack);\n                    }\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.flatten = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator = null;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (true) {\n                        if (middleEnumerator) {\n                            if (middleEnumerator.moveNext()) {\n                                return yielder.yieldReturn(middleEnumerator.current);\n                            }\n                            else {\n                                middleEnumerator.dispose();\n                                middleEnumerator = null;\n                            }\n                        }\n                        if (enumerator.moveNext()) {\n                            var c = enumerator.current;\n                            var e = !Types_1.Type.isString(c) && Enumerable.fromAny(c);\n                            if (e) {\n                                middleEnumerator = e\n                                    .selectMany(Functions.Identity)\n                                    .flatten()\n                                    .getEnumerator();\n                                continue;\n                            }\n                            else {\n                                return yielder.yieldReturn(c);\n                            }\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!selector)\n                throw new ArgumentNullException_1.ArgumentNullException(\"selector\");\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!selector);\n                    enumerator = _.getEnumerator();\n                    enumerator.moveNext();\n                }, function (yielder) {\n                    throwIfDisposed(!selector);\n                    var prev = enumerator.current;\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                selector = NULL;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.scan = function (func, seed) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!func)\n                throw new ArgumentNullException_1.ArgumentNullException(\"func\");\n            var isUseSeed = seed !== VOID0;\n            return new Enumerable(function () {\n                var enumerator;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!func);\n                    enumerator = _.getEnumerator();\n                    isFirst = true;\n                }, function (yielder) {\n                    throwIfDisposed(!func);\n                    if (isFirst) {\n                        isFirst = false;\n                        return isUseSeed\n                            ? yielder.yieldReturn(value = seed)\n                            : enumerator.moveNext()\n                                && yielder.yieldReturn(value = enumerator.current);\n                    }\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                func = NULL;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.select = function (selector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!selector)\n                throw new ArgumentNullException_1.ArgumentNullException(\"selector\");\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!selector);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(!selector);\n                    return enumerator.moveNext()\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\n                        : yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                selector = NULL;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype._selectMany = function (collectionSelector, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!collectionSelector)\n                throw new ArgumentNullException_1.ArgumentNullException(\"collectionSelector\");\n            var isEndless = _._isEndless;\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!collectionSelector);\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = VOID0;\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(!collectionSelector);\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    do {\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = enumUtil.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                    enumerator = NULL;\n                    middleEnumerator = null;\n                }, isEndless);\n            }, function () {\n                collectionSelector = NULL;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        InfiniteEnumerable.prototype._choose = function (selector) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var result = selector(enumerator.current, index++);\n                        if (result !== null && result !== VOID0)\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        InfiniteEnumerable.prototype.where = function (predicate) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var v = enumerator.current;\n                        if (predicate(v, index++))\n                            return yielder.yieldReturn(v);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.Type.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.Type.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.Type.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.Type.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .choose()\n                .where(function (x) { return (typeof x) === typeName; });\n        };\n        InfiniteEnumerable.prototype.except = function (second, compareSelector) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                    if (second)\n                        enumUtil.forEach(second, function (key) { keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    keys.clear();\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.distinct = function (compareSelector) {\n            return this.except(NULL, compareSelector);\n        };\n        InfiniteEnumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (Compare_1.areEqual(compareKey, key)) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = enumUtil.from(second);\n                }, function (yielder) { return firstEnumerator.moveNext()\n                    && secondEnumerator.moveNext()\n                    && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)); }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    secondTemp = new Queue_1.Queue(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = NULL;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = enumUtil.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = NULL;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements;\n                var innerCount = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElements = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(outerEnumerator);\n                    innerElements = null;\n                    outerEnumerator = NULL;\n                    lookup = NULL;\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    enumerator = NULL;\n                    lookup = NULL;\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.merge = function (enumerables) {\n            var _ = this;\n            var isEndless = _._isEndless;\n            if (!enumerables || enumerables.length == 0)\n                return _;\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.Queue(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.count) {\n                            enumerator = enumUtil.from(queue.dequeue());\n                        }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = NULL;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, queue);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            return this.merge(enumerables);\n        };\n        InfiniteEnumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = enumUtil.from(second);\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.insertAt = function (index, other) {\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var n = index;\n            var _ = this;\n            _.throwIfDisposed();\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = enumUtil.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            var isEndless = _._isEndless;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    alternateEnumerator = new ArrayEnumerator_1.ArrayEnumerator(Enumerable.toArray(sequence));\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1\n                        : 0;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0:\n                            return yielder.yieldBreak();\n                        case 2:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1;\n                            break;\n                    }\n                    var latest = buffer;\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2\n                        : 0;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    dispose_1.dispose(enumerator, alternateEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        InfiniteEnumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i - 0] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        InfiniteEnumerable.prototype.catchError = function (handler) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.finallyAction = function (action) {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.Integer.assert(size, \"size\");\n            var _ = this;\n            var isEndless = _._isEndless;\n            var len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext()) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return !!len && yielder.yieldReturn(array);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return sharedEnumerator || (sharedEnumerator = _.getEnumerator());\n            }, function () {\n                dispose_1.dispose(sharedEnumerator);\n            }, _._isEndless);\n        };\n        return InfiniteEnumerable;\n    }(DisposableBase_1.DisposableBase));\n    exports.InfiniteEnumerable = InfiniteEnumerable;\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(enumeratorFactory, finalizer, isEndless) {\n            _super.call(this, enumeratorFactory, finalizer);\n            this._isEndless = isEndless;\n        }\n        Enumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () { return _.getEnumerator(); });\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException('predicate');\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1\n                    : 0;\n            }, null, null);\n        };\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException('predicate');\n            if (!includeUntilValue)\n                return this.doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0\n                        : 1;\n                }, null, null);\n            var found = false;\n            return this.doAction(function (element, index) {\n                if (found)\n                    return 0;\n                found = predicate(element, index);\n                return 1;\n            }, function () {\n                found = false;\n            }, null);\n        };\n        Enumerable.prototype.forEach = function (action, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_.isEndless);\n            var index = 0;\n            return max > 0 ? dispose_1.using(_.getEnumerator(), function (e) {\n                Enumerator_1.throwIfEndless(!isFinite(max) && !!e.isEndless);\n                var i = 0;\n                while (max > i && _.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, i++) === false)\n                        break;\n                }\n                return i;\n            }) : 0;\n        };\n        Enumerable.prototype.toArray = function (predicate) {\n            return predicate\n                ? this.where(predicate).toArray()\n                : this.copyTo([]);\n        };\n        Enumerable.prototype.copyTo = function (target, index, count) {\n            if (index === void 0) { index = 0; }\n            if (count === void 0) { count = Infinity; }\n            this.throwIfDisposed();\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(\"target\");\n            Integer_1.Integer.assertZeroOrGreater(index);\n            enumUtil.forEach(this, function (x, i) {\n                target[i + index] = x;\n            }, count);\n            return target;\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.Dictionary(compareSelector);\n            this.forEach(function (x, i) {\n                var key = keySelector(x, i);\n                var element = elementSelector(x, i);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x, i) {\n                obj[keySelector(x, i)] = elementSelector(x, i);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.Dictionary(compareSelector);\n            this.forEach(function (x, i) { return dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this\n                .select(selector)\n                .toArray()\n                .join(separator);\n        };\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.Integer.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.Queue();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        q.enqueue(enumerator.current);\n                        if (q.count > c)\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            Integer_1.Integer.assert(count, \"count\");\n            return _.reverse()\n                .take(count)\n                .reverse();\n        };\n        Enumerable.prototype.select = function (selector) {\n            return _super.prototype.select.call(this, selector);\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        Enumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    _.throwIfDisposed();\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) { return !!index && yielder.yieldReturn(buffer[--index]); }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.Integer.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len];\n                    buffer[len] = NULL;\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var count = 0;\n            this.forEach(predicate\n                ?\n                    function (x, i) {\n                        if (predicate(x, i))\n                            ++count;\n                    }\n                :\n                    function () {\n                        ++count;\n                    });\n            return count;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            if (!predicate)\n                throw new ArgumentNullException_1.ArgumentNullException(\"predicate\");\n            var result = true;\n            this.forEach(function (x, i) {\n                if (!predicate(x, i)) {\n                    result = false;\n                    return false;\n                }\n            });\n            return result;\n        };\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        Enumerable.prototype.any = function (predicate) {\n            if (!predicate)\n                return _super.prototype.any.call(this);\n            var result = false;\n            this.forEach(function (x, i) {\n                result = predicate(x, i);\n                return !result;\n            });\n            return result;\n        };\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            if (compareSelector) {\n                var s = compareSelector(value);\n                return this.any(function (v) { return Compare_1.areEqual(compareSelector(v), s); });\n            }\n            return this.any(function (v) { return Compare_1.areEqual(v, value); });\n        };\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Compare_1.areEqual(compareSelector(element, i), compareSelector(value, i), true)) {\n                            found = i;\n                            return false;\n                        }\n                    }\n                :\n                    function (element, i) {\n                        if (Compare_1.areEqual(element, value, true)) {\n                            found = i;\n                            return false;\n                        }\n                    });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Compare_1.areEqual(compareSelector(element, i), compareSelector(value, i), true))\n                            result\n                                = i;\n                    }\n                :\n                    function (element, i) {\n                        if (Compare_1.areEqual(element, value, true))\n                            result = i;\n                    });\n            return result;\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second)\n                throw new ArgumentNullException_1.ArgumentNullException(\"second\");\n            var isEndless = _.isEndless;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!second);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.Dictionary(compareSelector);\n                    outs = new Dictionary_1.Dictionary(compareSelector);\n                    enumUtil.forEach(second, function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator, keys, outs);\n                }, isEndless);\n            }, function () {\n                second = NULL;\n            }, isEndless);\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            this.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e1) { return dispose_1.using(enumUtil.from(second), function (e2) {\n                Enumerator_1.throwIfEndless(e1.isEndless && e2.isEndless);\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.ofType = function (type) {\n            this.throwIfDisposed();\n            return _super.prototype.ofType.call(this, type);\n        };\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, keySelector, 1);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, null, 1, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, null, -1, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this, keySelector, -1);\n        };\n        Enumerable.prototype.buffer = function (size) {\n            return _super.prototype.buffer.call(this, size);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _this = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () { return _this\n                .toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(!elementSelector);\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        var v = enumerator.current;\n                        key = keySelector(v);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(v)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    throwIfDisposed(!elementSelector);\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (Compare_1.areEqual(compareKey, compareSelector(keySelector(c))))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    group = null;\n                });\n            }, function () {\n                elementSelector = NULL;\n            });\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            return this\n                .scan(func, seed)\n                .lastOrDefault();\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var count = 0;\n            var sum = this.sum(function (e, i) {\n                count++;\n                return selector(e, i);\n            });\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            this.forEach(function (x, i) {\n                var value = selector(x, i);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite +=\n                        value > 0 ?\n                            (+1) :\n                            (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x, i) {\n                exists = true;\n                var value = selector(x, i);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0;\n                    return false;\n                }\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        Enumerable.prototype.quotient = function (selector) {\n            if (selector === void 0) { selector = Types_1.Type.numberOrNaN; }\n            var count = 0;\n            var result = NaN;\n            this.forEach(function (x, i) {\n                var value = selector(x, i);\n                count++;\n                if (count === 1) {\n                    result = value;\n                }\n                else {\n                    if (isNaN(value) || value === 0 || !isFinite(value)) {\n                        result = NaN;\n                        return false;\n                    }\n                    result /= value;\n                }\n            });\n            if (count === 1)\n                result = NaN;\n            return result;\n        };\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = VOID0;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = VOID0;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.memoize = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = NULL;\n                dispose_1.dispose(enumerator);\n                enumerator = NULL;\n            });\n        };\n        return Enumerable;\n    }(InfiniteEnumerable));\n    exports.Enumerable = Enumerable;\n    var FiniteEnumerable = (function (_super) {\n        __extends(FiniteEnumerable, _super);\n        function FiniteEnumerable(enumeratorFactory, finalizer) {\n            _super.call(this, enumeratorFactory, finalizer, false);\n        }\n        return FiniteEnumerable;\n    }(Enumerable));\n    exports.FiniteEnumerable = FiniteEnumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.ArrayEnumerator(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source;\n                });\n            });\n            var _ = this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = NULL;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return enumUtil.toArray(_._source);\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.throwIfDisposed();\n            return enumUtil.forEach(_._source, action, max);\n        };\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return !!len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.Integer.assertZeroOrGreater(index, 'index');\n            var source = _._source;\n            return index < source.length\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!(count > 0))\n                return _;\n            return new Enumerable(function () { return new ArrayEnumerator_1.ArrayEnumerator(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            _.throwIfDisposed();\n            return _.take(_._source.length - count);\n        };\n        ArrayEnumerable.prototype.skipToLast = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!(count > 0))\n                return Enumerable.empty();\n            if (!isFinite(count))\n                return _;\n            var len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            var disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                _.throwIfDisposed();\n                return new IndexEnumerator_1.IndexEnumerator(function () {\n                    var s = _._source;\n                    throwIfDisposed(disposed || !s);\n                    return {\n                        source: s,\n                        pointer: (s.length - 1),\n                        length: s.length,\n                        step: -1\n                    };\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return this.asEnumerable();\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            if (Types_1.Type.isArrayLike(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(FiniteEnumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            _super.call(this, elements);\n            this._groupKey = _groupKey;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key) || null;\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                dispose_1.dispose(enumerator);\n                enumerator = NULL;\n            });\n        };\n        return Lookup;\n    }());\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Compare_1.compare; }\n            _super.call(this, NULL);\n            this.source = source;\n            this.keySelector = keySelector;\n            this.order = order;\n            this.parent = parent;\n            this.comparer = comparer;\n            Enumerator_1.throwIfEndless(!!source && !!source.isEndless);\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            this.throwIfDisposed();\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                _.throwIfDisposed();\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_)\n                    .generateSortedIndexes(buffer);\n            }, function (yielder) {\n                _.throwIfDisposed();\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = NULL;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = NULL;\n            }, false);\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            var _ = this;\n            _super.prototype._onDispose.call(this);\n            _.source = NULL;\n            _.keySelector = NULL;\n            _.order = NULL;\n            _.parent = NULL;\n        };\n        return OrderedEnumerable;\n    }(FiniteEnumerable));\n    function nextEnumerator(queue, e) {\n        if (e) {\n            if (e.moveNext()) {\n                queue.enqueue(e);\n            }\n            else {\n                dispose_1.dispose(e);\n                return null;\n            }\n        }\n        return e;\n    }\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.KeySortedContext(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed) {\n        if (disposed)\n            throw new ObjectDisposedException_1.ObjectDisposedException(\"Enumerable\");\n    }\n    var Enumerable;\n    (function (Enumerable) {\n        function from(source) {\n            var e = fromAny(source);\n            if (!e)\n                throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n            return e;\n        }\n        Enumerable.from = from;\n        function fromAny(source, defaultEnumerable) {\n            if (Types_1.Type.isObject(source) || Types_1.Type.isString(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Types_1.Type.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); }, null, source.isEndless);\n            }\n            return defaultEnumerable;\n        }\n        Enumerable.fromAny = fromAny;\n        function fromOrEmpty(source) {\n            return Enumerable.fromAny(source) || Enumerable.empty();\n        }\n        Enumerable.fromOrEmpty = fromOrEmpty;\n        function toArray(source) {\n            if (source instanceof Enumerable)\n                return source.toArray();\n            return enumUtil.toArray(source);\n        }\n        Enumerable.toArray = toArray;\n        function _choice(values) {\n            return new InfiniteEnumerable(function () { return new EnumeratorBase_1.EnumeratorBase(null, function (yielder) {\n                throwIfDisposed(!values);\n                return yielder.yieldReturn(Integer_1.Integer.random.select(values));\n            }, true); }, function () {\n                values.length = 0;\n                values = NULL;\n            });\n        }\n        Enumerable._choice = _choice;\n        function choice(values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return _choice(Utility_1.copy(values));\n        }\n        Enumerable.choice = choice;\n        function chooseFrom() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            if (!args.length)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return _choice(args);\n        }\n        Enumerable.chooseFrom = chooseFrom;\n        function _cycle(values) {\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(!values);\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                }, true);\n            }, function () {\n                values.length = 0;\n                values = NULL;\n            });\n        }\n        function cycle(values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return _cycle(Utility_1.copy(values));\n        }\n        Enumerable.cycle = cycle;\n        function cycleThrough() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            if (!args.length)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('length', length);\n            return _cycle(args);\n        }\n        Enumerable.cycleThrough = cycleThrough;\n        function empty() {\n            return new FiniteEnumerable(getEmptyEnumerator);\n        }\n        Enumerable.empty = empty;\n        function repeat(element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!(count > 0))\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.Integer.assert(count, \"count\")\n                ? new FiniteEnumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.EnumeratorBase(function () { index = 0; }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); }, null, false);\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.EnumeratorBase(null, function (yielder) { return yielder.yieldReturn(element); }, true);\n                });\n        }\n        Enumerable.repeat = repeat;\n        function repeatWithFinalize(initializer, finalizer) {\n            if (!initializer)\n                throw new ArgumentNullException_1.ArgumentNullException(\"initializer\");\n            return new InfiniteEnumerable(function () {\n                var element;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    if (initializer)\n                        element = initializer();\n                }, function (yielder) {\n                    return initializer\n                        ? yielder.yieldReturn(element)\n                        : yielder.yieldBreak();\n                }, function () {\n                    element = NULL;\n                    if (finalizer)\n                        finalizer(element);\n                }, true);\n            }, function () {\n                initializer = NULL;\n                finalizer = VOID0;\n            });\n        }\n        Enumerable.repeatWithFinalize = repeatWithFinalize;\n        function make(element) {\n            return repeat(element, 1);\n        }\n        Enumerable.make = make;\n        function range(start, count, step) {\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\n            if (!(count > 0))\n                return empty();\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\n            Integer_1.Integer.assert(count, \"count\");\n            return new FiniteEnumerable(function () {\n                var value;\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    value = start;\n                }, function (yielder) {\n                    var result = index++ < c\n                        && yielder.yieldReturn(value);\n                    if (result && index < count)\n                        value += step;\n                    return result;\n                }, false);\n            });\n        }\n        Enumerable.range = range;\n        function rangeDown(start, count, step) {\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return range(start, count, step);\n        }\n        Enumerable.rangeDown = rangeDown;\n        function toInfinity(start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\n            return new InfiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    value = start;\n                }, function (yielder) {\n                    var current = value;\n                    value += step;\n                    return yielder.yieldReturn(current);\n                }, true);\n            });\n        }\n        Enumerable.toInfinity = toInfinity;\n        function toNegativeInfinity(start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return toInfinity(start, -step);\n        }\n        Enumerable.toNegativeInfinity = toNegativeInfinity;\n        function rangeTo(start, to, step) {\n            if (step === void 0) { step = 1; }\n            if (isNaN(to) || !isFinite(to))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\n            if (step && !isFinite(step))\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\n            step = Math.abs(step);\n            return new FiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.EnumeratorBase(function () { value = start; }, start < to\n                    ?\n                        function (yielder) {\n                            var result = value <= to && yielder.yieldReturn(value);\n                            if (result)\n                                value += step;\n                            return result;\n                        }\n                    :\n                        function (yielder) {\n                            var result = value >= to && yielder.yieldReturn(value);\n                            if (result)\n                                value -= step;\n                            return result;\n                        }, false);\n            });\n        }\n        Enumerable.rangeTo = rangeTo;\n        function matches(input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            if (input === null || input === VOID0)\n                throw new ArgumentNullException_1.ArgumentNullException(\"input\");\n            var type = typeof input;\n            if (type != Types_1.Type.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new FiniteEnumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        }\n        Enumerable.matches = matches;\n        function generate(factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!factory)\n                throw new ArgumentNullException_1.ArgumentNullException(\"factory\");\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.Integer.assert(count, \"count\")\n                ?\n                    new FiniteEnumerable(function () {\n                        var c = count;\n                        var index = 0;\n                        return new EnumeratorBase_1.EnumeratorBase(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            throwIfDisposed(!factory);\n                            var current = index++;\n                            return current < c && yielder.yieldReturn(factory(current));\n                        }, false);\n                    }, function () {\n                        factory = NULL;\n                    })\n                :\n                    new InfiniteEnumerable(function () {\n                        var index = 0;\n                        return new EnumeratorBase_1.EnumeratorBase(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            throwIfDisposed(!factory);\n                            return yielder.yieldReturn(factory(index++));\n                        }, true);\n                    }, function () {\n                        factory = NULL;\n                    });\n        }\n        Enumerable.generate = generate;\n        function unfold(seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            if (!valueFactory)\n                throw new ArgumentNullException_1.ArgumentNullException(\"factory\");\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    throwIfDisposed(!valueFactory);\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                }, true);\n            }, function () {\n                valueFactory = NULL;\n            });\n        }\n        Enumerable.unfold = unfold;\n        function forEach(enumerable, action, max) {\n            if (max === void 0) { max = Infinity; }\n            return enumUtil.forEach(enumerable, action, max);\n        }\n        Enumerable.forEach = forEach;\n        function map(enumerable, selector) {\n            return enumUtil.map(enumerable, selector);\n        }\n        Enumerable.map = map;\n        function max(values) {\n            var v = values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n            return v === VOID0 ? NaN : v;\n        }\n        Enumerable.max = max;\n        function min(values) {\n            var v = values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n            return v === VOID0 ? NaN : v;\n        }\n        Enumerable.min = min;\n        function weave(enumerables) {\n            if (!enumerables)\n                throw new ArgumentNullException_1.ArgumentNullException('enumerables');\n            var disposed = false;\n            return new Enumerable(function () {\n                var queue;\n                var mainEnumerator;\n                var index;\n                return new EnumeratorBase_1.EnumeratorBase(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    queue = new Queue_1.Queue();\n                    mainEnumerator = enumUtil.from(enumerables);\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var e = null;\n                    if (mainEnumerator) {\n                        while (!e && mainEnumerator.moveNext()) {\n                            var c = mainEnumerator.current;\n                            e = nextEnumerator(queue, c ? enumUtil.from(c) : NULL);\n                        }\n                        if (!e)\n                            mainEnumerator = null;\n                    }\n                    while (!e && queue.count) {\n                        e = nextEnumerator(queue, queue.dequeue());\n                    }\n                    return e\n                        ? yielder.yieldReturn(e.current)\n                        : yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose.these(queue.dump());\n                    dispose_1.dispose(mainEnumerator, queue);\n                    mainEnumerator = null;\n                    queue = NULL;\n                });\n            }, function () {\n                disposed = true;\n            });\n        }\n        Enumerable.weave = weave;\n    })(Enumerable = exports.Enumerable || (exports.Enumerable = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual as areEqualValues, compare as compareValues} from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {copy} from \"../System/Collections/Array/Utility\";\r\nimport * as enumUtil from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {isEnumerable, throwIfEndless} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"../System/Collections/Enumeration/EmptyEnumerator\";\r\nimport {Type} from \"../System/Types\";\r\nimport {Integer} from \"../System/Integer\";\r\nimport {Functions as BaseFunctions} from \"../System/Functions\";\r\nimport {ArrayEnumerator} from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport {EnumeratorBase} from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport {Dictionary} from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport {Queue} from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport {DisposableBase} from \"../System/Disposable/DisposableBase\";\r\nimport {UnsupportedEnumerableException} from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport {ObjectDisposedException} from \"../System/Disposable/ObjectDisposedException\";\r\nimport {KeySortedContext} from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport {ArgumentNullException} from \"../System/Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\nimport {IEnumerator} from \"../System/Collections/Enumeration/IEnumerator\";\r\nimport {IEnumerable} from \"../System/Collections/Enumeration/IEnumerable\";\r\nimport {\r\n\tAction,\r\n\tPredicate,\r\n\tSelector,\r\n\tEqualityComparison,\r\n\tComparison,\r\n\tClosure,\r\n\tActionWithIndex,\r\n\tPredicateWithIndex,\r\n\tSelectorWithIndex\r\n} from \"../System/FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"../System/Collections/IEnumerableOrArray\";\r\nimport {IArray} from \"../System/Collections/Array/IArray\";\r\nimport {IMap, IDictionary} from \"../System/Collections/Dictionaries/IDictionary\";\r\nimport {Comparable} from \"../System/IComparable\";\r\nimport {IComparer} from \"../System/IComparer\";\r\nimport {IKeyValuePair} from \"../System/KeyValuePair\";\r\nimport {Order} from \"../System/Collections/Sorting/Order\";\r\nimport {\r\n\tIInfiniteEnumerable,\r\n\tILinqEnumerable,\r\n\tIFiniteEnumerable,\r\n\tILookup,\r\n\tIOrderedEnumerable,\r\n\tIGrouping\r\n} from \"./Enumerable\";\r\nimport {EnumerableAction} from \"./EnumerableAction\";\r\nimport __extendsImport from \"../extends\";\r\nimport {IndexEnumerator} from \"../System/Collections/Enumeration/IndexEnumerator\";\r\nimport {Primitive} from \"../System/Primitive\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:undefined = void 0;\r\nconst NULL:any = null;\r\nconst BREAK:(e:any)=>EnumerableAction = element => EnumerableAction.Break;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\t// noinspection JSMethodCanBeStatic\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\r\n\t// noinspection JSMethodCanBeStatic\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n\r\n/*\r\n * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\r\n * There may seem like there's extra overrides here and they may seem unnecessary.\r\n * But after closer inspection you'll see the type chain is retained and\r\n * infinite enumerables are prevented from having features that finite ones have.\r\n *\r\n * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\r\n */\r\n\r\nexport class InfiniteEnumerable<T>\r\nextends DisposableBase implements IInfiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure|null)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t\tthis._isEndless = true;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean|undefined;\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\t(<any>this)._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new InfiniteEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t * @param action\r\n\t * @param initializer\r\n\t * @param isEndless Special case where isEndless can be null in order to negate inheritance.\r\n\t * @returns {any}\r\n\t */\r\n\tdoAction(\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T> | SelectorWithIndex<T, number> | SelectorWithIndex<T, EnumerableAction>,\r\n\t\tinitializer?:Closure|null,\r\n\t\tisEndless:boolean|null|undefined = this.isEndless):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tconst isE:boolean|undefined = isEndless || undefined; // In case it's null.\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet actionResult = <any>action(<T>enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisE\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisE\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforce():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.doAction(BREAK)\r\n\t\t\t.getEnumerator()\r\n\t\t\t.moveNext();\r\n\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> new InfiniteEnumerable<T>(getEmptyEnumerator);\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element, index) =>\r\n\t\t\t\tindex<count\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn <any> _.doAction((element, index) => index<count, null, false);\r\n\t}\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar v = this.elementAtOrDefault(index, INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number):T|undefined\r\n\telementAtOrDefault(index:number, defaultValue:T):T\r\n\telementAtOrDefault(index:number, defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * Otherwise there would need to be much more code to handle these cases (.first(predicate), etc);\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\tfirstOrDefault():T|undefined\r\n\tfirstOrDefault(defaultValue:T):T\r\n\tfirstOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <T>using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault():T|undefined\r\n\tsingleOrDefault(defaultValue:T):T\r\n\tsingleOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T> | null | undefined):Enumerable<T>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode> | null | undefined):Enumerable<TNode>;\r\n\r\n\ttraverseBreadthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode> | null | undefined,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet nestLevel:number = 0;\r\n\t\t\t\tlet buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tlet next = Enumerable\r\n\t\t\t\t\t\t\t\t.from(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(childrenSelector);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T> | null | undefined):Enumerable<T>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode> | null | undefined):Enumerable<TNode>;\r\n\r\n\ttraverseDepthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T,TResult>):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode> | null | undefined,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tlet enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet value = resultSelector(<TNode>enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tlet e = Enumerable.fromAny(childrenSelector(<T|TNode>enumerator.current));\r\n\t\t\t\t\t\t\t\tenumerator = e ? e.getEnumerator() : EmptyEnumerator;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet middleEnumerator:IEnumerator<any>|null = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = enumerator.current;\r\n\t\t\t\t\t\t\t\t// Because strings are enumerable, we can get stuck in an infinite loop.\r\n\t\t\t\t\t\t\t\t// Treat strings as primitives here.\r\n\t\t\t\t\t\t\t\tlet e = !Type.isString(c) && Enumerable.fromAny(c);\r\n\t\t\t\t\t\t\t\tif(e)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = e\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(c);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!selector)\r\n\t\t\tthrow new ArgumentNullException(\"selector\");\r\n\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!selector);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!selector);\r\n\t\t\t\t\t\tlet prev = <T>enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, <T>enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tselector = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!func)\r\n\t\t\tthrow new ArgumentNullException(\"func\");\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet value:T;\r\n\t\t\t\tlet isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!func);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!func);\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = <T>seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(value = <T>enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, <T>enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfunc = NULL;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tselect<TResult>(selector:SelectorWithIndex<T, TResult>):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!selector)\r\n\t\t\tthrow new ArgumentNullException(\"selector\");\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!selector);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!selector);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(<T>enumerator.current, index++))\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tselector = NULL;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n\tpublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\r\n\t\tthis IEnumerable<TSource> source,\r\n\t\tFunc<TSource, IEnumerable<TCollection>> collectionSelector,\r\n\t\tFunc<TSource, TCollection, TResult> resultSelector)\r\n\t */\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, IEnumerableOrArray<TElement> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!collectionSelector)\r\n\t\t\tthrow new ArgumentNullException(\"collectionSelector\");\r\n\r\n\t\tconst isEndless = _._isEndless; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet middleEnumerator:IEnumerator<any>|null|undefined;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!collectionSelector);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = VOID0;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!collectionSelector);\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet middleSeq = collectionSelector(<T>enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumUtil.from(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector!(\r\n\t\t\t\t\t\t\t\t\t\t<T>enumerator.current, <TElement>middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tcollectionSelector = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, IEnumerableOrArray<TResult> | null | undefined>):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, IEnumerableOrArray<TElement> | null | undefined>,\r\n\t\tresultSelector:(collection:T, element:TElement) => TResult):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, IEnumerableOrArray<any> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:any) => TResult):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tprotected _choose<TResult>(selector:SelectorWithIndex<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result = selector(<T>enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t */\r\n\tchoose():InfiniteEnumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):InfiniteEnumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector)\r\n\t}\r\n\r\n\twhere(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet v = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(predicate(v, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(v);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):InfiniteEnumerable<TType>;\r\n\tofType<TType>(type:any):InfiniteEnumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <any> this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.choose()\r\n\t\t\t.where(x=>(typeof x)===typeName);\r\n\t}\r\n\r\n\texcept(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, string|number|symbol>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tenumUtil.forEach(second, key => { keys.addByKeyValue(key, true) });\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tdistinct(compareSelector?:Selector<T, string|number|symbol>):this\r\n\t{\r\n\t\treturn this.except(NULL, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged(compareSelector:Selector<T, any> = Functions.Identity):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet compareKey:any;\r\n\t\t\t\tlet initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet key = compareSelector(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(areEqualValues(compareKey, key))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue?:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed:boolean = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerableOrArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumUtil.from<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerableOrArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet secondTemp:Queue<any>;\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tlet next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumUtil.from<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tlet innerElements:TInner[]|null;\r\n\t\t\t\tlet innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(<T>outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet key = outerKeySelector(<T>outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\touterEnumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]|null) => TResult,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:ILookup<TKey, TInner>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t<T>enumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(<T>enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\tif(!enumerables || enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet queue:Queue<IEnumerableOrArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerableOrArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumUtil.from<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):this\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector:Selector<T, string|number|symbol> = Functions.Identity):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = <T>firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumUtil.from(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = <T>secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:IEnumerableOrArray<T>):this\r\n\t{\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tlet count:number = 0;\r\n\t\t\t\tlet isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumUtil.from<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerableOrArray<T>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tlet hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tlet another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):this\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):this\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:any) => void):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:Closure):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):InfiniteEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\t\tvar len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = <T>enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn !!len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tshare():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet sharedEnumerator:IEnumerator<T>;\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn sharedEnumerator || (sharedEnumerator = _.getEnumerator());\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends InfiniteEnumerable<T> implements ILinqEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure|null,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new Enumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n// #region Indexing/Paging methods.\r\n\r\n\tskipWhile(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttakeWhile(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:PredicateWithIndex<T>, includeUntilValue?:boolean):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tlet found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:ActionWithIndex<T>, max?:number):number\r\n\tforEach(action:PredicateWithIndex<T>, max?:number):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\t/*\r\n\t\t// It could be just as easy to do the following:\r\n\t\treturn enumUtil.forEach(_, action, max);\r\n\t\t// But to be more active about checking for disposal, we use this instead:\r\n\t\t*/\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the enumUtil.forEach will discontinue.\r\n\t\treturn max>0 ? using(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\r\n\t\t\t\tthrowIfEndless(!isFinite(max) && !!e.isEndless);\r\n\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(max>i && _.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(<T>e.current, i++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t) : 0;\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:PredicateWithIndex<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0, count:number = Infinity):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assertZeroOrGreater(index);\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use enumUtil.forEach utility instead.\r\n\t\tenumUtil.forEach<T>(this, (x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t}, count);\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tlet key = keySelector(x, i);\r\n\t\t\t\tlet element = elementSelector(x, i);\r\n\r\n\t\t\t\tlet array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:SelectorWithIndex<T, string|number|symbol>,\r\n\t\telementSelector:SelectorWithIndex<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x, i)] = elementSelector(x, i);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\r\n\ttoDictionary<TKey, TValue>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, string|number|symbol> = Functions.Identity):IDictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach((x, i)=> dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this\r\n\t\t\t.select(selector)\r\n\t\t\t.toArray()\r\n\t\t\t.join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn <any> _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\tselect<TResult>(selector:SelectorWithIndex<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\treturn <Enumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, IEnumerableOrArray<TResult> | null | undefined>):Enumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, IEnumerableOrArray<TElement> | null | undefined>,\r\n\t\tresultSelector:(collection:T, element:TElement)=>TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, IEnumerableOrArray<any> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:any)=>TResult):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tchoose():Enumerable<T>;\r\n\tchoose<TResult>(selector:SelectorWithIndex<T, TResult>):Enumerable<TResult>\r\n\tchoose(selector:SelectorWithIndex<T, any> = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> !!index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet capacity:number;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tlet selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = NULL; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:PredicateWithIndex<T>):number\r\n\t{\r\n\t\tvar count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t?\r\n\t\t\t\t(x, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tvar result = true;\r\n\t\tthis.forEach((x, i) =>\r\n\t\t{\r\n\t\t\tif(!predicate(x, i))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tvar result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x, i); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\tcontains(value:T, compareSelector?:Selector<T, any>):boolean\r\n\t{\r\n\t\tif(compareSelector) {\r\n\t\t\tvar s = compareSelector(value);\r\n\t\t\treturn this.any(v=> areEqualValues(compareSelector(v),s));\r\n\t\t}\r\n\t\treturn this.any(v=> areEqualValues(v,value));\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf(value:T, compareSelector?:SelectorWithIndex<T, any>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(areEqualValues(compareSelector(element, i), compareSelector(value, i), true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\t\tif(areEqualValues(element, value, true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf(value:T, compareSelector?:SelectorWithIndex<T, any>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(areEqualValues(compareSelector(element, i), compareSelector(value, i), true)) result\r\n\t\t\t\t\t\t= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(areEqualValues(element, value, true)) result = i;\r\n\t\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\tintersect(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, string|number|symbol>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second)\r\n\t\t\tthrow new ArgumentNullException(\"second\");\r\n\r\n\t\tconst isEndless = _.isEndless;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T,boolean>;\r\n\t\t\t\tlet outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!second);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tenumUtil.forEach(second, key=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, keys, outs);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tsecond = NULL;\r\n\t\t\t},\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqualValues):boolean\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tenumUtil.from(second),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(<T>e1.current, <T>e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerableOrArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = valuesAreEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn <Enumerable<TType>>super.ofType(type);\r\n\t}\r\n\r\n// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):Enumerable<T[]>\r\n\t{\r\n\t\treturn <Enumerable<T[]>>super.buffer(size);\r\n\t}\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\tgroupBy<TKey>(keySelector:SelectorWithIndex<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\r\n\tgroupBy<TKey>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, T>,\r\n\t\tcompareSelector?:Selector<TKey, string|number|symbol>):Enumerable<IGrouping<TKey, T>>;\r\n\r\n\tgroupBy<TKey, TElement>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, string|number|symbol>):Enumerable<IGrouping<TKey, TElement>>\r\n\r\n\r\n\tgroupBy<TKey, TElement>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>|Selector<T,TKey>,\r\n\t\telementSelector?:SelectorWithIndex<T, TElement>|Selector<T,TElement>,\r\n\t\tcompareSelector?:Selector<TKey, string|number|symbol>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this\r\n\t\t\t\t.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement>(\r\n\t\tkeySelector:Selector<T,TKey>,\r\n\t\telementSelector?:Selector<T,TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, any>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement>(\r\n\t\tkeySelector:Selector<T,TKey>,\r\n\t\telementSelector?:Selector<T,TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, any>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet key:TKey;\r\n\t\t\t\tlet compareKey:any;\r\n\t\t\t\tlet group:TElement[]|null;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!elementSelector);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet v = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(v);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(v)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!elementSelector);\r\n\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(areEqualValues(compareKey,compareSelector(keySelector(c))))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector!(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\telementSelector = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T|undefined\r\n\t{\r\n\t\treturn this\r\n\t\t\t.scan(func, seed)\r\n\t\t\t.lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar sum = this.sum((e, i)=>\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\treturn selector(e, i);\r\n\t\t});\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T|undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T|undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy(keySelector:Selector<T, Primitive> = Functions.Identity):T|undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy(keySelector:Selector<T, Primitive> = Functions.Identity):T|undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite +=\r\n\t\t\t\t\t\tvalue>0 ?\r\n\t\t\t\t\t\t\t(+1) :\r\n\t\t\t\t\t\t\t(-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T|undefined = VOID0;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn <any>value;\r\n\t}\r\n\r\n\tlastOrDefault():T|undefined\r\n\tlastOrDefault(defaultValue:T):T\r\n\tlastOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T|undefined = VOID0;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tmemoize():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tlet i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = <T>enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = NULL;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\nextends Enumerable<T> implements IFiniteEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Should never be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = NULL;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn enumUtil.toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <any> new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:ActionWithIndex<T>, max?:number):number\r\n\tforEach(action:PredicateWithIndex<T>, max?:number):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn enumUtil.forEach(_._source, action, max);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn !!len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number):T|undefined\r\n\telementAtOrDefault(index:number, defaultValue:T):T\r\n\telementAtOrDefault(index:number, defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn index<source.length\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault():T|undefined\r\n\tlastOrDefault(defaultValue:T):T\r\n\tlastOrDefault(defaultValue?:T):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <any> _.take(_._source.length - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tvar len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn <any> _.skip(len - count);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar s = _._source;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed || !s);\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tsource: s,\r\n\t\t\t\t\t\t\tpointer: (s.length - 1),\r\n\t\t\t\t\t\t\tlength: s.length,\r\n\t\t\t\t\t\t\tstep: -1\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():this\r\n\t{\r\n\t\treturn this.asEnumerable();\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqualValues):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:IDictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]|null\r\n\t{\r\n\t\treturn this._dictionary.getValue(key) || null;\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tlet current = <IKeyValuePair<TKey, TElement[]>>enumerator.current;\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends FiniteEnumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:Selector<T,TOrderBy>|null,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>|null,\r\n\t\tpublic comparer:Comparison<T> = compareValues)\r\n\t{\r\n\t\tsuper(NULL);\r\n\t\tthrowIfEndless(!!source && !!source.isEndless);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:Selector<T,TOrderBy>,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_)\r\n\t\t\t\t\t.generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = NULL;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tconst _:this = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.source = NULL;\r\n\t\t_.keySelector = NULL;\r\n\t\t_.order = NULL;\r\n\t\t_.parent = NULL;\r\n\t}\r\n\r\n}\r\n\r\n// A private static helper for the weave function.\r\nfunction nextEnumerator<T>(queue:Queue<IEnumerator<T>>, e:IEnumerator<T>):IEnumerator<T>|null\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tqueue.enqueue(e);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdispose(e);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn e;\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T>|null = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(\"Enumerable\");\r\n}\r\n// #endregion\r\n\r\n\r\nexport module Enumerable\r\n{\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\texport function from<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar e = fromAny(source);\r\n\t\tif(!e) throw new UnsupportedEnumerableException();\r\n\t\treturn e;\r\n\t}\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:IEnumerableOrArray<T>):Enumerable<T>\r\n\r\n\texport function fromAny(\r\n\t\tsource:any):Enumerable<any>\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:IEnumerableOrArray<T>,\r\n\t\tdefaultEnumerable:Enumerable<T>):Enumerable<T>\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:any,\r\n\t\tdefaultEnumerable?:Enumerable<T>):Enumerable<T>|undefined\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable<T>(\r\n\t\t\t\t\t()=>source.getEnumerator(),\r\n\t\t\t\t\tnull, source.isEndless);\r\n\t\t}\r\n\r\n\t\treturn defaultEnumerable;\r\n\t}\r\n\r\n\texport function fromOrEmpty<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\treturn Enumerable.fromAny(source) || Enumerable.empty<T>();\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\texport function toArray<T>(source:IEnumerableOrArray<T>):T[]\r\n\t{\r\n\t\tif(source instanceof Enumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn enumUtil.toArray(source);\r\n\t}\r\n\r\n\r\n\texport function _choice<T>(values:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthrowIfDisposed(!values);\r\n\t\t\t\t\treturn yielder.yieldReturn(Integer.random.select(values));\r\n\t\t\t\t},\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t),\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tvalues.length = 0;\r\n\t\t\t\tvalues = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function choice<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _choice(copy(values));\r\n\t}\r\n\r\n\texport function chooseFrom<T>(arg:T, ...args:T[]):InfiniteEnumerable<T>\r\n\texport function chooseFrom<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!args.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _choice(args);\r\n\t}\r\n\r\n\tfunction _cycle<T>(values:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!values);\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tvalues.length = 0;\r\n\t\t\t\tvalues = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function cycle<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\t// Make a copy to avoid modifying the collection as we go.\r\n\t\treturn _cycle(copy(values));\r\n\t}\r\n\r\n\texport function cycleThrough<T>(arg:T, ...args:T[]):InfiniteEnumerable<T>\r\n\texport function cycleThrough<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!args.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _cycle(args);\r\n\t}\r\n\r\n\texport function empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single export function instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\texport function repeat<T>(element:T):InfiniteEnumerable<T>;\r\n\texport function repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\texport function repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet c:number = count;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * DEPRECATED This method began to not make sense in so many ways.\r\n\t * @deprecated since version 4.2\r\n\t * @param initializer\r\n\t * @param finalizer\r\n\t */\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:Closure):InfiniteEnumerable<T>\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer?:Action<T>):InfiniteEnumerable<T>\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer?:Action<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tif(!initializer)\r\n\t\t\tthrow new ArgumentNullException(\"initializer\");\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn initializer\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(element)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = NULL;\r\n\t\t\t\t\t\tif(finalizer) finalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tinitializer = NULL;\r\n\t\t\t\tfinalizer = VOID0;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\texport function make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn repeat<T>(element, 1);\r\n\t}\r\n\r\n// start and step can be other than integer.\r\n\r\n\texport function range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\t\t\t\tlet c:number = count; // Force integer evaluation.\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\texport function rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn range(start, count, step);\r\n\t}\r\n\r\n// step = -1 behaves the same as toNegativeInfinity;\r\n\texport function toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\treturn toInfinity(start, -step);\r\n\t}\r\n\r\n\texport function rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tyielder=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function matches(\r\n\t\tinput:string, pattern:any,\r\n\t\tflags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\t\tif(input===null || input===VOID0)\r\n\t\t\tthrow new ArgumentNullException(\"input\");\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tlet match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function generate<T>(factory:() => T):InfiniteEnumerable<T>;\r\n\texport function generate<T>(factory:() => T, count:number):FiniteEnumerable<T>;\r\n\texport function generate<T>(factory:(index:number) => T):InfiniteEnumerable<T>;\r\n\texport function generate<T>(factory:(index:number) => T, count:number):FiniteEnumerable<T>;\r\n\texport function generate<T>(\r\n\t\tfactory:(index:number) => T,\r\n\t\tcount:number = Infinity):InfiniteEnumerable<T>\r\n\t{\r\n\t\tif(!factory)\r\n\t\t\tthrow new ArgumentNullException(\"factory\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t?\r\n\t\t\tnew FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet c:number = count;\r\n\t\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(!factory);\r\n\t\t\t\t\t\t\tlet current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tfactory = NULL;\r\n\t\t\t\t})\r\n\t\t\t:\r\n\t\t\tnew InfiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(!factory);\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(factory(index++));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tfactory = NULL;\r\n\t\t\t\t});\r\n\t}\r\n\r\n\texport function unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:SelectorWithIndex<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteEnumerable<T>\r\n\t{\r\n\t\tif(!valueFactory)\r\n\t\t\tthrow new ArgumentNullException(\"factory\");\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\tlet value:T;\r\n\t\t\t\tlet isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!valueFactory);\r\n\t\t\t\t\t\tlet i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tvalueFactory = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function forEach<T>(\r\n\t\te:IEnumerableOrArray<T>,\r\n\t\taction:ActionWithIndex<T>,\r\n\t\tmax?:number):number\r\n\r\n\texport function forEach<T>(\r\n\t\te:IEnumerableOrArray<T>,\r\n\t\taction:PredicateWithIndex<T>,\r\n\t\tmax?:number):number\r\n\r\n\texport function forEach<T>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T>,\r\n\t\tmax:number = Infinity):number\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn enumUtil.forEach(enumerable, action, max);\r\n\t}\r\n\r\n\texport function map<T,TResult>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\tselector:SelectorWithIndex<T,TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn enumUtil.map(enumerable, selector);\r\n\t}\r\n\r\n// Slightly optimized versions for numbers.\r\n\texport function max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tvar v = values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\texport function min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tvar v = values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Takes any set of collections of the same type and weaves them together.\r\n\t * @param enumerables\r\n\t * @returns {Enumerable<T>}\r\n\t */\r\n\texport function weave<T>(\r\n\t\tenumerables:IEnumerableOrArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(!enumerables)\r\n\t\t\tthrow new ArgumentNullException('enumerables');\r\n\r\n\t\tvar disposed = false;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet queue:Queue<IEnumerator<T>>;\r\n\t\t\t\tlet mainEnumerator:IEnumerator<IEnumerableOrArray<T>>|null;\r\n\t\t\t\tlet index:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerator<T>>();\r\n\t\t\t\t\t\tmainEnumerator = enumUtil.from(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tlet e:IEnumerator<T>|null = null;\r\n\r\n\t\t\t\t\t\t// First pass...\r\n\t\t\t\t\t\tif(mainEnumerator)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(!e && mainEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = mainEnumerator.current;\r\n\t\t\t\t\t\t\t\te = nextEnumerator(queue, c ? enumUtil.from(c) : NULL);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!e)\r\n\t\t\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile(!e && queue.count)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te = nextEnumerator(queue, queue.dequeue());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn e\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(e.current)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose.these(queue.dump());\r\n\t\t\t\t\t\tdispose(mainEnumerator, queue);\r\n\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\tqueue = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Enumerable;\r\n"]}