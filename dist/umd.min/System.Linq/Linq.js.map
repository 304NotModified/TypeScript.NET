{"version":3,"sources":["System.Linq/Linq.js","System.Linq/Linq.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","getEmptyEnumerator","Enumerator_1","empty","nextEnumerator","queue","e","moveNext","enqueue","dispose_1","dispose","createSortContext","orderedEnumerable","currentContext","context","KeySortedContext_1","keySelector","order","comparer","parent","throwIfDisposed","disposed","ObjectDisposedException_1","Values","Arrays","ArrayUtility","Types_1","Integer_1","Functions_1","ArrayEnumerator_1","EnumeratorBase_1","Dictionary_1","Queue_1","DisposableBase_1","UnsupportedEnumerableException_1","ArgumentNullException_1","ArgumentOutOfRangeException_1","INVALID_DEFAULT","VOID0","BREAK","element","LinqFunctions","_super","apply","arguments","Greater","a","Lesser","Functions","freeze","InfiniteEnumerable","_enumeratorFactory","finalizer","call","_isEndless","defineProperty","get","enumerable","configurable","getEnumerator","_onDispose","asEnumerable","_","doAction","action","initializer","isEndless","Enumerable","enumerator","index","yielder","actionResult","current","yieldBreak","yieldReturn","force","skip","count","isFinite","assert","take","elementAt","elementAtOrDefault","defaultValue","assertZeroOrGreater","n","using","i","first","firstOrDefault","Error","single","value","singleOrDefault","any","isEmpty","traverseBreadthFirst","childrenSelector","resultSelector","Identity","buffer","len","nestLevel","next","from","selectMany","length","traverseDepthFirst","enumeratorStack","fromAny","these","flatten","middleEnumerator","c","isString","pairwise","selector","prev","scan","func","seed","isUseSeed","isFirst","select","_selectMany","collectionSelector","middleSeq","_choose","result","choose","where","predicate","ofType","type","typeName","Number","NUMBER","String","STRING","Boolean","BOOLEAN","Function","FUNCTION","x","except","second","compareSelector","keys","forEach","key","addByKeyValue","containsKey","clear","distinct","distinctUntilChanged","compareKey","initial","areEqual","defaultIfEmpty","zip","firstEnumerator","secondEnumerator","zipMultiple","secondTemp","dequeue","join","inner","outerKeySelector","innerKeySelector","outerEnumerator","lookup","innerElements","innerCount","toLookup","innerElement","groupJoin","merge","enumerables","concat","_i","union","insertAt","other","isEnumerated","alternateMultiple","sequence","mode","alternateEnumerator","toArray","hasAtLeastOne","reset","latest","another","alternateSingle","make","alternate","catchError","handler","finallyAction","size","array","initialize","share","sharedEnumerator","enumeratorFactory","source","defaultEnumerable","isObject","isArrayLike","ArrayEnumerable","isEnumerable","choice","values","random","chooseFrom","args","cycle","cycleThrough","FiniteEnumerable","repeat","Infinity","repeatWithFinalize","range","start","step","rangeDown","Math","abs","toInfinity","toNegativeInfinity","rangeTo","to","isNaN","matches","input","pattern","flags","RegExp","indexOf","regex","match","exec","generate","unfold","valueFactory","skipSeed","map","max","takeUntil","aggregate","min","weave","mainEnumerator","dump","skipWhile","takeWhile","includeUntilValue","found","throwIfEndless","copyTo","target","elementSelector","dict","getValue","push","Lookup","toMap","obj","toDictionary","toJoinedString","separator","takeExceptLast","q","skipToLast","reverse","shuffle","capacity","selectedIndex","selectedValue","all","every","some","contains","lastIndexOf","intersect","outs","sequenceEqual","equalityComparer","e1","e2","orderBy","OrderedEnumerable","orderUsing","comparison","orderUsingReversed","orderByDescending","groupBy","_this","partitionBy","elements","Grouping","group","hasNext","lastOrDefault","average","numberOrNaN","sum","NaN","maxBy","minBy","sumInfinite","product","exists","quotient","last","memoize","cache","_source","_disposableObjectName","s","Array","isArray","_groupKey","_dictionary","compare","createOrderedEnumerable","thenBy","thenUsing","thenByDescending","thenUsingReversed","indexes","generateSortedIndexes"],"mappings":"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","file":"System.Linq/Linq.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Original: http://linqjs.codeplex.com/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../System/Compare\", \"../System/Collections/Array/Compare\", \"../System/Collections/Array/Utility\", \"../System/Collections/Enumeration/Enumerator\", \"../System/Types\", \"../System/Integer\", \"../System/Functions\", \"../System/Collections/Enumeration/ArrayEnumerator\", \"../System/Collections/Enumeration/EnumeratorBase\", \"../System/Collections/Dictionaries/Dictionary\", \"../System/Collections/Queue\", \"../System/Disposable/dispose\", \"../System/Disposable/DisposableBase\", \"../System/Collections/Enumeration/UnsupportedEnumerableException\", \"../System/Disposable/ObjectDisposedException\", \"../System/Collections/Sorting/KeySortedContext\", \"../System/Exceptions/ArgumentNullException\", \"../System/Exceptions/ArgumentOutOfRangeException\"], factory);\n    }\n})(function (require, exports) {\n    'use strict';\n    var Values = require(\"../System/Compare\");\n    var Arrays = require(\"../System/Collections/Array/Compare\");\n    var ArrayUtility = require(\"../System/Collections/Array/Utility\");\n    var Enumerator_1 = require(\"../System/Collections/Enumeration/Enumerator\");\n    var Types_1 = require(\"../System/Types\");\n    var Integer_1 = require(\"../System/Integer\");\n    var Functions_1 = require(\"../System/Functions\");\n    var ArrayEnumerator_1 = require(\"../System/Collections/Enumeration/ArrayEnumerator\");\n    var EnumeratorBase_1 = require(\"../System/Collections/Enumeration/EnumeratorBase\");\n    var Dictionary_1 = require(\"../System/Collections/Dictionaries/Dictionary\");\n    var Queue_1 = require(\"../System/Collections/Queue\");\n    var dispose_1 = require(\"../System/Disposable/dispose\");\n    var DisposableBase_1 = require(\"../System/Disposable/DisposableBase\");\n    var UnsupportedEnumerableException_1 = require(\"../System/Collections/Enumeration/UnsupportedEnumerableException\");\n    var ObjectDisposedException_1 = require(\"../System/Disposable/ObjectDisposedException\");\n    var KeySortedContext_1 = require(\"../System/Collections/Sorting/KeySortedContext\");\n    var ArgumentNullException_1 = require(\"../System/Exceptions/ArgumentNullException\");\n    var ArgumentOutOfRangeException_1 = require(\"../System/Exceptions/ArgumentOutOfRangeException\");\n    var INVALID_DEFAULT = {};\n    var VOID0 = void 0;\n    var BREAK = function (element) { return 0; };\n    var LinqFunctions = (function (_super) {\n        __extends(LinqFunctions, _super);\n        function LinqFunctions() {\n            _super.apply(this, arguments);\n        }\n        LinqFunctions.prototype.Greater = function (a, b) {\n            return a > b ? a : b;\n        };\n        LinqFunctions.prototype.Lesser = function (a, b) {\n            return a < b ? a : b;\n        };\n        return LinqFunctions;\n    }(Functions_1.default));\n    var Functions = new LinqFunctions();\n    Object.freeze(Functions);\n    function getEmptyEnumerator() {\n        return Enumerator_1.empty;\n    }\n    var InfiniteEnumerable = (function (_super) {\n        __extends(InfiniteEnumerable, _super);\n        function InfiniteEnumerable(_enumeratorFactory, finalizer) {\n            _super.call(this, finalizer);\n            this._enumeratorFactory = _enumeratorFactory;\n            this._isEndless = true;\n        }\n        Object.defineProperty(InfiniteEnumerable.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        InfiniteEnumerable.prototype.getEnumerator = function () {\n            this.throwIfDisposed();\n            return this._enumeratorFactory();\n        };\n        InfiniteEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._enumeratorFactory = null;\n        };\n        InfiniteEnumerable.prototype.asEnumerable = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return new InfiniteEnumerable(function () { return _.getEnumerator(); });\n        };\n        InfiniteEnumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (initializer)\n                        initializer();\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var actionResult = action(enumerator.current, index++);\n                        if (actionResult === false || actionResult === 0)\n                            return yielder.yieldBreak();\n                        if (actionResult !== 2)\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, isEndless);\n            }, function () {\n                disposed = true;\n            }, isEndless);\n        };\n        InfiniteEnumerable.prototype.force = function () {\n            this.throwIfDisposed();\n            this.doAction(BREAK)\n                .getEnumerator()\n                .moveNext();\n        };\n        InfiniteEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            return this.doAction(function (element, index) {\n                return index < count\n                    ? 2\n                    : 1;\n            });\n        };\n        InfiniteEnumerable.prototype.take = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            _.throwIfDisposed();\n            if (!isFinite(count))\n                throw new ArgumentOutOfRangeException_1.default('count', count, 'Must be finite.');\n            Integer_1.default.assert(count, \"count\");\n            return _.doAction(function (element, index) { return index < count; }, null, false);\n        };\n        InfiniteEnumerable.prototype.elementAt = function (index) {\n            var v = this.elementAtOrDefault(index, INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new ArgumentOutOfRangeException_1.default('index', index, \"is greater than or equal to the number of elements in source\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.default.assertZeroOrGreater(index, 'index');\n            var n = index;\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                var i = 0;\n                while (e.moveNext()) {\n                    if (i == n)\n                        return e.current;\n                    i++;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.first = function () {\n            var v = this.firstOrDefault(INVALID_DEFAULT);\n            if (v === INVALID_DEFAULT)\n                throw new Error(\"first:The sequence is empty.\");\n            return v;\n        };\n        InfiniteEnumerable.prototype.firstOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext() ? e.current : defaultValue; });\n        };\n        InfiniteEnumerable.prototype.single = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                    throw new Error(\"single:sequence contains more than one element.\");\n                }\n                throw new Error(\"single:The sequence is empty.\");\n            });\n        };\n        InfiniteEnumerable.prototype.singleOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) {\n                if (e.moveNext()) {\n                    var value = e.current;\n                    if (!e.moveNext())\n                        return value;\n                }\n                return defaultValue;\n            });\n        };\n        InfiniteEnumerable.prototype.any = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return dispose_1.using(this.getEnumerator(), function (e) { return e.moveNext(); });\n        };\n        InfiniteEnumerable.prototype.isEmpty = function () {\n            return !this.any();\n        };\n        InfiniteEnumerable.prototype.traverseBreadthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var nestLevel = 0;\n                var buffer, len;\n                return new EnumeratorBase_1.default(function () {\n                    nestLevel = 0;\n                    buffer = [];\n                    len = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            buffer[len++] = enumerator.current;\n                            return yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\n                        }\n                        if (!len)\n                            return yielder.yieldBreak();\n                        var next = Enumerable\n                            .from(buffer)\n                            .selectMany(childrenSelector);\n                        if (!next.any()) {\n                            return yielder.yieldBreak();\n                        }\n                        else {\n                            nestLevel++;\n                            buffer = [];\n                            len = 0;\n                            enumerator.dispose();\n                            enumerator = next.getEnumerator();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    buffer.length = 0;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.traverseDepthFirst = function (childrenSelector, resultSelector) {\n            if (resultSelector === void 0) { resultSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumeratorStack = [];\n                var enumerator;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    len = 0;\n                }, function (yielder) {\n                    while (true) {\n                        if (enumerator.moveNext()) {\n                            var value = resultSelector(enumerator.current, len);\n                            enumeratorStack[len++] = enumerator;\n                            var e = Enumerable.fromAny(childrenSelector(enumerator.current));\n                            enumerator = e ? e.getEnumerator() : Enumerator_1.empty;\n                            return yielder.yieldReturn(value);\n                        }\n                        if (len == 0)\n                            return false;\n                        enumerator.dispose();\n                        enumerator = enumeratorStack[--len];\n                        enumeratorStack.length = len;\n                    }\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        dispose_1.dispose.these(enumeratorStack);\n                    }\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.flatten = function () {\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    while (true) {\n                        if (middleEnumerator) {\n                            if (middleEnumerator.moveNext()) {\n                                return yielder.yieldReturn(middleEnumerator.current);\n                            }\n                            else {\n                                middleEnumerator.dispose();\n                                middleEnumerator = null;\n                            }\n                        }\n                        if (enumerator.moveNext()) {\n                            var c = enumerator.current;\n                            var e = !Types_1.default.isString(c) && Enumerable.fromAny(c);\n                            if (e) {\n                                middleEnumerator\n                                    = e\n                                        .selectMany(Functions.Identity)\n                                        .flatten()\n                                        .getEnumerator();\n                                continue;\n                            }\n                            else {\n                                return yielder.yieldReturn(c);\n                            }\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.pairwise = function (selector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    enumerator.moveNext();\n                }, function (yielder) {\n                    var prev = enumerator.current;\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(selector(prev, enumerator.current));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.scan = function (func, seed) {\n            var isUseSeed = seed !== VOID0;\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    isFirst = true;\n                }, function (yielder) {\n                    if (isFirst) {\n                        isFirst = false;\n                        return isUseSeed\n                            ? yielder.yieldReturn(value = seed)\n                            : enumerator.moveNext() && yielder.yieldReturn(value\n                                = enumerator.current);\n                    }\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(value = func(value, enumerator.current))\n                        : false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.select = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return enumerator.moveNext()\n                        ? yielder.yieldReturn(selector(enumerator.current, index++))\n                        : yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype._selectMany = function (collectionSelector, resultSelector) {\n            var _ = this, isEndless = _._isEndless || null;\n            if (!resultSelector)\n                resultSelector = function (a, b) { return b; };\n            return new Enumerable(function () {\n                var enumerator;\n                var middleEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    middleEnumerator = undefined;\n                    index = 0;\n                }, function (yielder) {\n                    if (middleEnumerator === VOID0 && !enumerator.moveNext())\n                        return false;\n                    do {\n                        if (!middleEnumerator) {\n                            var middleSeq = collectionSelector(enumerator.current, index++);\n                            if (!middleSeq)\n                                continue;\n                            middleEnumerator = Enumerator_1.from(middleSeq);\n                        }\n                        if (middleEnumerator.moveNext())\n                            return yielder.yieldReturn(resultSelector(enumerator.current, middleEnumerator.current));\n                        middleEnumerator.dispose();\n                        middleEnumerator = null;\n                    } while (enumerator.moveNext());\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, middleEnumerator);\n                    enumerator = null;\n                    middleEnumerator = null;\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        InfiniteEnumerable.prototype._choose = function (selector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var result = selector(enumerator.current, index++);\n                        if (result !== null && result !== VOID0)\n                            return yielder.yieldReturn(result);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        InfiniteEnumerable.prototype.where = function (predicate) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    index = 0;\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        if (predicate(enumerator.current, index++))\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.ofType = function (type) {\n            var typeName;\n            switch (type) {\n                case Number:\n                    typeName = Types_1.default.NUMBER;\n                    break;\n                case String:\n                    typeName = Types_1.default.STRING;\n                    break;\n                case Boolean:\n                    typeName = Types_1.default.BOOLEAN;\n                    break;\n                case Function:\n                    typeName = Types_1.default.FUNCTION;\n                    break;\n                default:\n                    return this\n                        .where(function (x) { return x instanceof type; });\n            }\n            return this\n                .choose()\n                .where(function (x) { return (typeof x) === typeName; });\n        };\n        InfiniteEnumerable.prototype.except = function (second, compareSelector) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    if (second)\n                        Enumerator_1.forEach(second, function (key) { return keys.addByKeyValue(key, true); });\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    keys.clear();\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.distinct = function (compareSelector) {\n            return this.except(null, compareSelector);\n        };\n        InfiniteEnumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var compareKey;\n                var initial = true;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    while (enumerator.moveNext()) {\n                        var key = compareSelector(enumerator.current);\n                        if (initial) {\n                            initial = false;\n                        }\n                        else if (Values.areEqual(compareKey, key)) {\n                            continue;\n                        }\n                        compareKey = key;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, function () {\n                disposed = true;\n            }, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.defaultIfEmpty = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    isFirst = true;\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    if (enumerator.moveNext()) {\n                        isFirst = false;\n                        return yielder.yieldReturn(enumerator.current);\n                    }\n                    else if (isFirst) {\n                        isFirst = false;\n                        return yielder.yieldReturn(defaultValue);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.zip = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(second);\n                }, function (yielder) { return firstEnumerator.moveNext()\n                    && secondEnumerator.moveNext()\n                    && yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)); }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.zipMultiple = function (second, resultSelector) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (!second.length)\n                return Enumerable.empty();\n            return new Enumerable(function () {\n                var secondTemp;\n                var firstEnumerator;\n                var secondEnumerator;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    secondTemp = new Queue_1.default(second);\n                    index = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = null;\n                }, function (yielder) {\n                    if (firstEnumerator.moveNext()) {\n                        while (true) {\n                            while (!secondEnumerator) {\n                                if (secondTemp.count) {\n                                    var next = secondTemp.dequeue();\n                                    if (next)\n                                        secondEnumerator = Enumerator_1.from(next);\n                                }\n                                else\n                                    return yielder.yieldBreak();\n                            }\n                            if (secondEnumerator.moveNext())\n                                return yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++));\n                            secondEnumerator.dispose();\n                            secondEnumerator = null;\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondTemp);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var outerEnumerator;\n                var lookup;\n                var innerElements = null;\n                var innerCount = 0;\n                return new EnumeratorBase_1.default(function () {\n                    outerEnumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    while (true) {\n                        if (innerElements != null) {\n                            var innerElement = innerElements[innerCount++];\n                            if (innerElement !== VOID0)\n                                return yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\n                            innerElement = null;\n                            innerCount = 0;\n                        }\n                        if (outerEnumerator.moveNext()) {\n                            var key = outerKeySelector(outerEnumerator.current);\n                            innerElements = lookup.get(key);\n                        }\n                        else {\n                            return yielder.yieldBreak();\n                        }\n                    }\n                }, function () {\n                    dispose_1.dispose(outerEnumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var lookup = null;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    lookup = Enumerable.from(inner)\n                        .toLookup(innerKeySelector, Functions.Identity, compareSelector);\n                }, function (yielder) {\n                    return enumerator.moveNext()\n                        && yielder.yieldReturn(resultSelector(enumerator.current, lookup.get(outerKeySelector(enumerator.current))));\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.merge = function (enumerables) {\n            var _ = this, isEndless = _._isEndless || null;\n            if (!enumerables || enumerables.length == 0)\n                return _;\n            return new Enumerable(function () {\n                var enumerator;\n                var queue;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    queue = new Queue_1.default(enumerables);\n                }, function (yielder) {\n                    while (true) {\n                        while (!enumerator && queue.count) {\n                            enumerator = Enumerator_1.from(queue.dequeue());\n                        }\n                        if (enumerator && enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                        if (enumerator) {\n                            enumerator.dispose();\n                            enumerator = null;\n                            continue;\n                        }\n                        return yielder.yieldBreak();\n                    }\n                }, function () {\n                    dispose_1.dispose(enumerator, queue);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            return this.merge(enumerables);\n        };\n        InfiniteEnumerable.prototype.union = function (second, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this, isEndless = _._isEndless || null;\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var keys;\n                return new EnumeratorBase_1.default(function () {\n                    firstEnumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                }, function (yielder) {\n                    var current;\n                    if (secondEnumerator === VOID0) {\n                        while (firstEnumerator.moveNext()) {\n                            current = firstEnumerator.current;\n                            if (!keys.containsKey(current)) {\n                                keys.addByKeyValue(current, null);\n                                return yielder.yieldReturn(current);\n                            }\n                        }\n                        secondEnumerator = Enumerator_1.from(second);\n                    }\n                    while (secondEnumerator.moveNext()) {\n                        current = secondEnumerator.current;\n                        if (!keys.containsKey(current)) {\n                            keys.addByKeyValue(current, null);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.insertAt = function (index, other) {\n            Integer_1.default.assertZeroOrGreater(index, 'index');\n            var n = index;\n            var _ = this, isEndless = _._isEndless || null;\n            _.throwIfDisposed();\n            return new Enumerable(function () {\n                var firstEnumerator;\n                var secondEnumerator;\n                var count = 0;\n                var isEnumerated = false;\n                return new EnumeratorBase_1.default(function () {\n                    count = 0;\n                    firstEnumerator = _.getEnumerator();\n                    secondEnumerator = Enumerator_1.from(other);\n                    isEnumerated = false;\n                }, function (yielder) {\n                    if (count == n) {\n                        isEnumerated = true;\n                        if (secondEnumerator.moveNext())\n                            return yielder.yieldReturn(secondEnumerator.current);\n                    }\n                    if (firstEnumerator.moveNext()) {\n                        count++;\n                        return yielder.yieldReturn(firstEnumerator.current);\n                    }\n                    return !isEnumerated\n                        && secondEnumerator.moveNext()\n                        && yielder.yieldReturn(secondEnumerator.current);\n                }, function () {\n                    dispose_1.dispose(firstEnumerator, secondEnumerator);\n                }, isEndless);\n            }, null, isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateMultiple = function (sequence) {\n            var _ = this;\n            return new Enumerable(function () {\n                var buffer, mode, enumerator, alternateEnumerator;\n                return new EnumeratorBase_1.default(function () {\n                    alternateEnumerator = new ArrayEnumerator_1.default(Enumerable.toArray(sequence));\n                    enumerator = _.getEnumerator();\n                    var hasAtLeastOne = enumerator.moveNext();\n                    mode = hasAtLeastOne\n                        ? 1\n                        : 0;\n                    if (hasAtLeastOne)\n                        buffer = enumerator.current;\n                }, function (yielder) {\n                    switch (mode) {\n                        case 0:\n                            return yielder.yieldBreak();\n                        case 2:\n                            if (alternateEnumerator.moveNext())\n                                return yielder.yieldReturn(alternateEnumerator.current);\n                            alternateEnumerator.reset();\n                            mode = 1;\n                            break;\n                    }\n                    var latest = buffer;\n                    var another = enumerator.moveNext();\n                    mode = another\n                        ? 2\n                        : 0;\n                    if (another)\n                        buffer = enumerator.current;\n                    return yielder.yieldReturn(latest);\n                }, function () {\n                    dispose_1.dispose(enumerator, alternateEnumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.alternateSingle = function (value) {\n            return this.alternateMultiple(Enumerable.make(value));\n        };\n        InfiniteEnumerable.prototype.alternate = function () {\n            var sequence = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                sequence[_i - 0] = arguments[_i];\n            }\n            return this.alternateMultiple(sequence);\n        };\n        InfiniteEnumerable.prototype.catchError = function (handler) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    try {\n                        throwIfDisposed(disposed);\n                        enumerator = _.getEnumerator();\n                    }\n                    catch (e) {\n                    }\n                }, function (yielder) {\n                    try {\n                        throwIfDisposed(disposed);\n                        if (enumerator.moveNext())\n                            return yielder.yieldReturn(enumerator.current);\n                    }\n                    catch (e) {\n                        handler(e);\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.finallyAction = function (action) {\n            var _ = this, disposed = !_.throwIfDisposed();\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    return (enumerator.moveNext())\n                        ? yielder.yieldReturn(enumerator.current)\n                        : false;\n                }, function () {\n                    try {\n                        dispose_1.dispose(enumerator);\n                    }\n                    finally {\n                        action();\n                    }\n                });\n            });\n        };\n        InfiniteEnumerable.prototype.buffer = function (size) {\n            if (size < 1 || !isFinite(size))\n                throw new Error(\"Invalid buffer size.\");\n            Integer_1.default.assert(size, \"size\");\n            var _ = this, len;\n            return new Enumerable(function () {\n                var enumerator;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                }, function (yielder) {\n                    var array = ArrayUtility.initialize(size);\n                    len = 0;\n                    while (len < size && enumerator.moveNext()) {\n                        array[len++] = enumerator.current;\n                    }\n                    array.length = len;\n                    return len && yielder.yieldReturn(array);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        InfiniteEnumerable.prototype.share = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var sharedEnumerator;\n            return new Enumerable(function () {\n                return sharedEnumerator || (sharedEnumerator = _.getEnumerator());\n            }, function () {\n                dispose_1.dispose(sharedEnumerator);\n            }, _._isEndless);\n        };\n        return InfiniteEnumerable;\n    }(DisposableBase_1.default));\n    exports.InfiniteEnumerable = InfiniteEnumerable;\n    var Enumerable = (function (_super) {\n        __extends(Enumerable, _super);\n        function Enumerable(enumeratorFactory, finalizer, isEndless) {\n            if (isEndless === void 0) { isEndless = null; }\n            _super.call(this, enumeratorFactory, finalizer);\n            this._isEndless = isEndless;\n        }\n        Enumerable.from = function (source) {\n            var e = Enumerable.fromAny(source);\n            if (!e)\n                throw new UnsupportedEnumerableException_1.default();\n            return e;\n        };\n        Enumerable.fromAny = function (source, defaultEnumerable) {\n            if (defaultEnumerable === void 0) { defaultEnumerable = null; }\n            if (Types_1.default.isObject(source) || Types_1.default.isString(source)) {\n                if (source instanceof Enumerable)\n                    return source;\n                if (Types_1.default.isArrayLike(source))\n                    return new ArrayEnumerable(source);\n                if (Enumerator_1.isEnumerable(source))\n                    return new Enumerable(function () { return source.getEnumerator(); }, null, source.isEndless);\n            }\n            return defaultEnumerable;\n        };\n        Enumerable.toArray = function (source) {\n            if (source instanceof Enumerable)\n                return source.toArray();\n            return Enumerator_1.toArray(source);\n        };\n        Enumerable.choice = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.default('length', length);\n            return new InfiniteEnumerable(function () { return new EnumeratorBase_1.default(null, function (yielder) {\n                return yielder.yieldReturn(Integer_1.default.random.select(values));\n            }, true); });\n        };\n        Enumerable.chooseFrom = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.choice(args);\n        };\n        Enumerable.cycle = function (values) {\n            var len = values && values.length;\n            if (!len || !isFinite(len))\n                throw new ArgumentOutOfRangeException_1.default('length', length);\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                }, function (yielder) {\n                    if (index >= values.length)\n                        index = 0;\n                    return yielder.yieldReturn(values[index++]);\n                }, true);\n            });\n        };\n        Enumerable.cycleThrough = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return Enumerable.cycle(args);\n        };\n        Enumerable.empty = function () {\n            return new FiniteEnumerable(getEmptyEnumerator);\n        };\n        Enumerable.repeat = function (element, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!(count > 0))\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ? new FiniteEnumerable(function () {\n                    var c = count;\n                    var index = 0;\n                    return new EnumeratorBase_1.default(function () { index = 0; }, function (yielder) { return (index++ < c) && yielder.yieldReturn(element); }, null, false);\n                })\n                : new Enumerable(function () {\n                    return new EnumeratorBase_1.default(null, function (yielder) { return yielder.yieldReturn(element); }, true);\n                });\n        };\n        Enumerable.repeatWithFinalize = function (initializer, finalizer) {\n            return new InfiniteEnumerable(function () {\n                var element;\n                return new EnumeratorBase_1.default(function () {\n                    element = initializer();\n                }, function (yielder) { return yielder.yieldReturn(element); }, function () {\n                    finalizer(element);\n                }, true);\n            });\n        };\n        Enumerable.make = function (element) {\n            return Enumerable.repeat(element, 1);\n        };\n        Enumerable.range = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.default(\"start\", start, \"Must be a finite number.\");\n            if (!(count > 0))\n                return Enumerable.empty();\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite number.\");\n            Integer_1.default.assert(count, \"count\");\n            return new FiniteEnumerable(function () {\n                var value;\n                var c = count;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = start;\n                }, function (yielder) {\n                    var result = index++ < c\n                        && yielder.yieldReturn(value);\n                    if (result && index < count)\n                        value += step;\n                    return result;\n                }, false);\n            });\n        };\n        Enumerable.rangeDown = function (start, count, step) {\n            if (step === void 0) { step = 1; }\n            step = Math.abs(step) * -1;\n            return Enumerable.range(start, count, step);\n        };\n        Enumerable.toInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            if (!isFinite(start))\n                throw new ArgumentOutOfRangeException_1.default(\"start\", start, \"Must be a finite number.\");\n            if (!step)\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a valid value\");\n            if (!isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite number.\");\n            return new InfiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.default(function () {\n                    value = start;\n                }, function (yielder) {\n                    var current = value;\n                    value += step;\n                    return yielder.yieldReturn(current);\n                }, true);\n            });\n        };\n        Enumerable.toNegativeInfinity = function (start, step) {\n            if (start === void 0) { start = 0; }\n            if (step === void 0) { step = 1; }\n            return Enumerable.toInfinity(start, -step);\n        };\n        Enumerable.rangeTo = function (start, to, step) {\n            if (step === void 0) { step = 1; }\n            if (isNaN(to) || !isFinite(to))\n                throw new ArgumentOutOfRangeException_1.default(\"to\", to, \"Must be a finite number.\");\n            if (step && !isFinite(step))\n                throw new ArgumentOutOfRangeException_1.default(\"step\", step, \"Must be a finite non-zero number.\");\n            step = Math.abs(step);\n            return new FiniteEnumerable(function () {\n                var value;\n                return new EnumeratorBase_1.default(function () { value = start; }, start < to\n                    ?\n                        function (yielder) {\n                            var result = value <= to && yielder.yieldReturn(value);\n                            if (result)\n                                value += step;\n                            return result;\n                        }\n                    :\n                        function (yielder) {\n                            var result = value >= to && yielder.yieldReturn(value);\n                            if (result)\n                                value -= step;\n                            return result;\n                        }, false);\n            });\n        };\n        Enumerable.matches = function (input, pattern, flags) {\n            if (flags === void 0) { flags = \"\"; }\n            if (input === null || input === VOID0)\n                throw new ArgumentNullException_1.default(\"input\");\n            var type = typeof input;\n            if (type != Types_1.default.STRING)\n                throw new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\n            if (pattern instanceof RegExp) {\n                flags += (pattern.ignoreCase) ? \"i\" : \"\";\n                flags += (pattern.multiline) ? \"m\" : \"\";\n                pattern = pattern.source;\n            }\n            if (flags.indexOf(\"g\") === -1)\n                flags += \"g\";\n            return new FiniteEnumerable(function () {\n                var regex;\n                return new EnumeratorBase_1.default(function () {\n                    regex = new RegExp(pattern, flags);\n                }, function (yielder) {\n                    var match = regex.exec(input);\n                    return (match !== null) ? yielder.yieldReturn(match) : false;\n                });\n            });\n        };\n        Enumerable.generate = function (factory, count) {\n            if (count === void 0) { count = Infinity; }\n            if (isNaN(count) || count <= 0)\n                return Enumerable.empty();\n            return isFinite(count) && Integer_1.default.assert(count, \"count\")\n                ?\n                    new FiniteEnumerable(function () {\n                        var c = count;\n                        var index = 0;\n                        return new EnumeratorBase_1.default(function () {\n                            index = 0;\n                        }, function (yielder) {\n                            var current = index++;\n                            return current < c && yielder.yieldReturn(factory(current));\n                        }, false);\n                    })\n                :\n                    new InfiniteEnumerable(function () {\n                        var index = 0;\n                        return new EnumeratorBase_1.default(function () {\n                            index = 0;\n                        }, function (yielder) { return yielder.yieldReturn(factory(index++)); }, true);\n                    });\n        };\n        Enumerable.unfold = function (seed, valueFactory, skipSeed) {\n            if (skipSeed === void 0) { skipSeed = false; }\n            return new InfiniteEnumerable(function () {\n                var index = 0;\n                var value;\n                var isFirst;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    value = seed;\n                    isFirst = !skipSeed;\n                }, function (yielder) {\n                    var i = index++;\n                    if (isFirst)\n                        isFirst = false;\n                    else\n                        value = valueFactory(value, i);\n                    return yielder.yieldReturn(value);\n                }, true);\n            });\n        };\n        Enumerable.forEach = function (enumerable, action) {\n            Enumerator_1.forEach(enumerable, action);\n        };\n        Enumerable.map = function (enumerable, selector) {\n            return Enumerator_1.map(enumerable, selector);\n        };\n        Enumerable.max = function (values) {\n            return values\n                .takeUntil(function (v) { return v == +Infinity; }, true)\n                .aggregate(Functions.Greater);\n        };\n        Enumerable.min = function (values) {\n            return values\n                .takeUntil(function (v) { return v == -Infinity; }, true)\n                .aggregate(Functions.Lesser);\n        };\n        Enumerable.weave = function (enumerables) {\n            if (!enumerables)\n                throw new ArgumentNullException_1.default('enumerables');\n            return new Enumerable(function () {\n                var queue;\n                var mainEnumerator;\n                var index;\n                return new EnumeratorBase_1.default(function () {\n                    index = 0;\n                    queue = new Queue_1.default();\n                    mainEnumerator = Enumerator_1.from(enumerables);\n                }, function (yielder) {\n                    var e;\n                    if (mainEnumerator) {\n                        while (!e && mainEnumerator.moveNext()) {\n                            var c = mainEnumerator.current;\n                            e = nextEnumerator(queue, c && Enumerator_1.from(c));\n                        }\n                        if (!e)\n                            mainEnumerator = null;\n                    }\n                    while (!e && queue.count) {\n                        e = nextEnumerator(queue, queue.dequeue());\n                    }\n                    return e\n                        ? yielder.yieldReturn(e.current)\n                        : yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose.these(queue.dump());\n                    dispose_1.dispose(mainEnumerator, queue);\n                    mainEnumerator = null;\n                    queue = null;\n                });\n            });\n        };\n        Enumerable.prototype.doAction = function (action, initializer, isEndless) {\n            if (isEndless === void 0) { isEndless = this.isEndless; }\n            return _super.prototype.doAction.call(this, action, initializer, isEndless);\n        };\n        Enumerable.prototype.skip = function (count) {\n            return _super.prototype.skip.call(this, count);\n        };\n        Enumerable.prototype.skipWhile = function (predicate) {\n            this.throwIfDisposed();\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 2\n                    : 1;\n            });\n        };\n        Enumerable.prototype.takeWhile = function (predicate) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.default('predicate');\n            return this.doAction(function (element, index) {\n                return predicate(element, index)\n                    ? 1\n                    : 0;\n            }, null, null);\n        };\n        Enumerable.prototype.takeUntil = function (predicate, includeUntilValue) {\n            this.throwIfDisposed();\n            if (!predicate)\n                throw new ArgumentNullException_1.default('predicate');\n            if (!includeUntilValue)\n                return this.doAction(function (element, index) {\n                    return predicate(element, index)\n                        ? 0\n                        : 1;\n                }, null, null);\n            var found = false;\n            return this.doAction(function (element, index) {\n                if (found)\n                    return 0;\n                found = predicate(element, index);\n                return 1;\n            }, function () {\n                found = false;\n            }, null);\n        };\n        Enumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_.isEndless);\n            var index = 0;\n            dispose_1.using(_.getEnumerator(), function (e) {\n                Enumerator_1.throwIfEndless(e.isEndless);\n                while (_.throwIfDisposed() && e.moveNext()) {\n                    if (action(e.current, index++) === false)\n                        break;\n                }\n            });\n        };\n        Enumerable.prototype.toArray = function (predicate) {\n            return predicate\n                ? this.where(predicate).toArray()\n                : this.copyTo([]);\n        };\n        Enumerable.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            this.throwIfDisposed();\n            if (!target)\n                throw new ArgumentNullException_1.default(\"target\");\n            Integer_1.default.assertZeroOrGreater(index);\n            Enumerator_1.forEach(this, function (x, i) {\n                target[i + index] = x;\n            });\n            return target;\n        };\n        Enumerable.prototype.toLookup = function (keySelector, elementSelector, compareSelector) {\n            if (elementSelector === void 0) { elementSelector = Functions.Identity; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x) {\n                var key = keySelector(x);\n                var element = elementSelector(x);\n                var array = dict.getValue(key);\n                if (array !== VOID0)\n                    array.push(element);\n                else\n                    dict.addByKeyValue(key, [element]);\n            });\n            return new Lookup(dict);\n        };\n        Enumerable.prototype.toMap = function (keySelector, elementSelector) {\n            var obj = {};\n            this.forEach(function (x, i) {\n                obj[keySelector(x, i)] = elementSelector(x, i);\n            });\n            return obj;\n        };\n        Enumerable.prototype.toDictionary = function (keySelector, elementSelector, compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var dict = new Dictionary_1.default(compareSelector);\n            this.forEach(function (x, i) { return dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)); });\n            return dict;\n        };\n        Enumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this.select(selector).toArray().join(separator);\n        };\n        Enumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            if (!isFinite(count))\n                return Enumerable.empty();\n            Integer_1.default.assert(count, \"count\");\n            var c = count;\n            return new Enumerable(function () {\n                var enumerator;\n                var q;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    q = new Queue_1.default();\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        q.enqueue(enumerator.current);\n                        if (q.count > c)\n                            return yielder.yieldReturn(q.dequeue());\n                    }\n                    return false;\n                }, function () {\n                    dispose_1.dispose(enumerator, q);\n                });\n            });\n        };\n        Enumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            Integer_1.default.assert(count, \"count\");\n            return _.reverse()\n                .take(count)\n                .reverse();\n        };\n        Enumerable.prototype.where = function (predicate) {\n            return _super.prototype.where.call(this, predicate);\n        };\n        Enumerable.prototype.select = function (selector) {\n            return _super.prototype.select.call(this, selector);\n        };\n        Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {\n            return this._selectMany(collectionSelector, resultSelector);\n        };\n        Enumerable.prototype.choose = function (selector) {\n            if (selector === void 0) { selector = Functions.Identity; }\n            return this._choose(selector);\n        };\n        Enumerable.prototype.reverse = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    index = buffer.length;\n                }, function (yielder) { return index && yielder.yieldReturn(buffer[--index]); }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.shuffle = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            Enumerator_1.throwIfEndless(_._isEndless);\n            return new Enumerable(function () {\n                var buffer;\n                var capacity;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    buffer = _.toArray();\n                    capacity = len = buffer.length;\n                }, function (yielder) {\n                    if (!len)\n                        return yielder.yieldBreak();\n                    var selectedIndex = Integer_1.default.random(len);\n                    var selectedValue = buffer[selectedIndex];\n                    buffer[selectedIndex] = buffer[--len];\n                    buffer[len] = null;\n                    if (len % 32 == 0)\n                        buffer.length = len;\n                    return yielder.yieldReturn(selectedValue);\n                }, function () {\n                    buffer.length = 0;\n                });\n            }, function () {\n                disposed = true;\n            });\n        };\n        Enumerable.prototype.count = function (predicate) {\n            var count = 0;\n            this.forEach(predicate\n                ?\n                    function (x, i) {\n                        if (predicate(x, i))\n                            ++count;\n                    }\n                :\n                    function () {\n                        ++count;\n                    });\n            return count;\n        };\n        Enumerable.prototype.all = function (predicate) {\n            if (!predicate)\n                throw new ArgumentNullException_1.default(\"predicate\");\n            var result = true;\n            this.forEach(function (x, i) {\n                if (!predicate(x, i)) {\n                    result = false;\n                    return false;\n                }\n            });\n            return result;\n        };\n        Enumerable.prototype.every = function (predicate) {\n            return this.all(predicate);\n        };\n        Enumerable.prototype.any = function (predicate) {\n            if (!predicate)\n                return _super.prototype.any.call(this);\n            var result = false;\n            this.forEach(function (x, i) {\n                result = predicate(x, i);\n                return !result;\n            });\n            return result;\n        };\n        Enumerable.prototype.some = function (predicate) {\n            return this.any(predicate);\n        };\n        Enumerable.prototype.contains = function (value, compareSelector) {\n            return compareSelector\n                ? this.any(function (v) { return compareSelector(v) === compareSelector(value); })\n                : this.any(function (v) { return v === value; });\n        };\n        Enumerable.prototype.indexOf = function (value, compareSelector) {\n            var found = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element, i), compareSelector(value, i), true)) {\n                            found = i;\n                            return false;\n                        }\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true)) {\n                            found = i;\n                            return false;\n                        }\n                    });\n            return found;\n        };\n        Enumerable.prototype.lastIndexOf = function (value, compareSelector) {\n            var result = -1;\n            this.forEach(compareSelector\n                ?\n                    function (element, i) {\n                        if (Values.areEqual(compareSelector(element, i), compareSelector(value, i), true))\n                            result\n                                = i;\n                    }\n                :\n                    function (element, i) {\n                        if (Values.areEqual(element, value, true))\n                            result = i;\n                    });\n            return result;\n        };\n        Enumerable.prototype.merge = function (enumerables) {\n            return _super.prototype.merge.call(this, enumerables);\n        };\n        Enumerable.prototype.concat = function () {\n            var enumerables = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                enumerables[_i - 0] = arguments[_i];\n            }\n            return this.merge(enumerables);\n        };\n        Enumerable.prototype.intersect = function (second, compareSelector) {\n            var _ = this;\n            return new Enumerable(function () {\n                var enumerator;\n                var keys;\n                var outs;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    keys = new Dictionary_1.default(compareSelector);\n                    outs = new Dictionary_1.default(compareSelector);\n                    Enumerator_1.forEach(second, function (key) {\n                        keys.addByKeyValue(key, true);\n                    });\n                }, function (yielder) {\n                    while (enumerator.moveNext()) {\n                        var current = enumerator.current;\n                        if (!outs.containsKey(current) && keys.containsKey(current)) {\n                            outs.addByKeyValue(current, true);\n                            return yielder.yieldReturn(current);\n                        }\n                    }\n                    return yielder.yieldBreak();\n                }, function () {\n                    dispose_1.dispose(enumerator, keys, outs);\n                }, _._isEndless);\n            }, null, _._isEndless);\n        };\n        Enumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            return dispose_1.using(this.getEnumerator(), function (e1) { return dispose_1.using(Enumerator_1.from(second), function (e2) {\n                Enumerator_1.throwIfEndless(e1.isEndless && e2.isEndless);\n                while (e1.moveNext()) {\n                    if (!e2.moveNext() || !equalityComparer(e1.current, e2.current))\n                        return false;\n                }\n                return !e2.moveNext();\n            }); });\n        };\n        Enumerable.prototype.ofType = function (type) {\n            return _super.prototype.ofType.call(this, type);\n        };\n        Enumerable.prototype.except = function (second, compareSelector) {\n            return _super.prototype.except.call(this, second, compareSelector);\n        };\n        Enumerable.prototype.distinct = function (compareSelector) {\n            return _super.prototype.distinct.call(this, compareSelector);\n        };\n        Enumerable.prototype.distinctUntilChanged = function (compareSelector) {\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            return _super.prototype.distinctUntilChanged.call(this, compareSelector);\n        };\n        Enumerable.prototype.orderBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, 1);\n        };\n        Enumerable.prototype.orderUsing = function (comparison) {\n            return new OrderedEnumerable(this, null, 1, null, comparison);\n        };\n        Enumerable.prototype.orderUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this, null, -1, null, comparison);\n        };\n        Enumerable.prototype.orderByDescending = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return new OrderedEnumerable(this, keySelector, -1);\n        };\n        Enumerable.prototype.buffer = function (size) {\n            return _super.prototype.buffer.call(this, size);\n        };\n        Enumerable.prototype.groupBy = function (keySelector, elementSelector, compareSelector) {\n            var _this = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () { return _this.toLookup(keySelector, elementSelector, compareSelector)\n                .getEnumerator(); });\n        };\n        Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, compareSelector) {\n            if (resultSelector === void 0) { resultSelector = function (key, elements) { return new Grouping(key, elements); }; }\n            if (compareSelector === void 0) { compareSelector = Functions.Identity; }\n            var _ = this;\n            if (!elementSelector)\n                elementSelector = Functions.Identity;\n            return new Enumerable(function () {\n                var enumerator;\n                var key;\n                var compareKey;\n                var group;\n                var len;\n                return new EnumeratorBase_1.default(function () {\n                    enumerator = _.getEnumerator();\n                    if (enumerator.moveNext()) {\n                        key = keySelector(enumerator.current);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(enumerator.current)];\n                        len = 1;\n                    }\n                    else\n                        group = null;\n                }, function (yielder) {\n                    if (!group)\n                        return yielder.yieldBreak();\n                    var hasNext, c;\n                    while ((hasNext = enumerator.moveNext())) {\n                        c = enumerator.current;\n                        if (compareKey === compareSelector(keySelector(c)))\n                            group[len++] = elementSelector(c);\n                        else\n                            break;\n                    }\n                    var result = resultSelector(key, group);\n                    if (hasNext) {\n                        c = enumerator.current;\n                        key = keySelector(c);\n                        compareKey = compareSelector(key);\n                        group = [elementSelector(c)];\n                        len = 1;\n                    }\n                    else {\n                        group = null;\n                    }\n                    return yielder.yieldReturn(result);\n                }, function () {\n                    dispose_1.dispose(enumerator);\n                    group = null;\n                });\n            });\n        };\n        Enumerable.prototype.aggregate = function (func, seed) {\n            return this.scan(func, seed).lastOrDefault();\n        };\n        Enumerable.prototype.average = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var count = 0;\n            var sum = this.sum(function (e, i) {\n                count++;\n                return selector(e, i);\n            });\n            return (isNaN(sum) || !count)\n                ? NaN\n                : (sum / count);\n        };\n        Enumerable.prototype.max = function () {\n            return this.aggregate(Functions.Greater);\n        };\n        Enumerable.prototype.min = function () {\n            return this.aggregate(Functions.Lesser);\n        };\n        Enumerable.prototype.maxBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) > keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.minBy = function (keySelector) {\n            if (keySelector === void 0) { keySelector = Functions.Identity; }\n            return this.aggregate(function (a, b) { return (keySelector(a) < keySelector(b)) ? a : b; });\n        };\n        Enumerable.prototype.sum = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var sum = 0;\n            var sumInfinite = 0;\n            this.forEach(function (x) {\n                var value = selector(x);\n                if (isNaN(value)) {\n                    sum = NaN;\n                    return false;\n                }\n                if (isFinite(value))\n                    sum += value;\n                else\n                    sumInfinite +=\n                        value > 0 ?\n                            (+1) :\n                            (-1);\n            });\n            return isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite * Infinity) : sum);\n        };\n        Enumerable.prototype.product = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var result = 1, exists = false;\n            this.forEach(function (x, i) {\n                exists = true;\n                var value = selector(x, i);\n                if (isNaN(value)) {\n                    result = NaN;\n                    return false;\n                }\n                if (value == 0) {\n                    result = 0;\n                    return false;\n                }\n                result *= value;\n            });\n            return (exists && isNaN(result)) ? NaN : result;\n        };\n        Enumerable.prototype.quotient = function (selector) {\n            if (selector === void 0) { selector = Types_1.default.numberOrNaN; }\n            var count = 0;\n            var result = NaN;\n            this.forEach(function (x, i) {\n                var value = selector(x, i);\n                count++;\n                if (count === 1) {\n                    result = value;\n                }\n                else {\n                    if (isNaN(value) || value === 0 || !isFinite(value)) {\n                        result = NaN;\n                        return false;\n                    }\n                    result /= value;\n                }\n            });\n            if (count === 1)\n                result = NaN;\n            return result;\n        };\n        Enumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            if (!found)\n                throw new Error(\"last:No element satisfies the condition.\");\n            return value;\n        };\n        Enumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var value = undefined;\n            var found = false;\n            _.forEach(function (x) {\n                found = true;\n                value = x;\n            });\n            return (!found) ? defaultValue : value;\n        };\n        Enumerable.prototype.share = function () {\n            return _super.prototype.share.call(this);\n        };\n        Enumerable.prototype.catchError = function (handler) {\n            return _super.prototype.catchError.call(this, handler);\n        };\n        Enumerable.prototype.finallyAction = function (action) {\n            return _super.prototype.finallyAction.call(this, action);\n        };\n        Enumerable.prototype.memoize = function () {\n            var _ = this, disposed = !_.throwIfDisposed();\n            var cache;\n            var enumerator;\n            return new Enumerable(function () {\n                var index = 0;\n                return new EnumeratorBase_1.default(function () {\n                    throwIfDisposed(disposed);\n                    if (!enumerator)\n                        enumerator = _.getEnumerator();\n                    if (!cache)\n                        cache = [];\n                    index = 0;\n                }, function (yielder) {\n                    throwIfDisposed(disposed);\n                    var i = index++;\n                    if (i >= cache.length) {\n                        return (enumerator.moveNext())\n                            ? yielder.yieldReturn(cache[i] = enumerator.current)\n                            : false;\n                    }\n                    return yielder.yieldReturn(cache[i]);\n                });\n            }, function () {\n                disposed = true;\n                if (cache)\n                    cache.length = 0;\n                cache = null;\n                dispose_1.dispose(enumerator);\n                enumerator = null;\n            });\n        };\n        return Enumerable;\n    }(InfiniteEnumerable));\n    exports.Enumerable = Enumerable;\n    var FiniteEnumerable = (function (_super) {\n        __extends(FiniteEnumerable, _super);\n        function FiniteEnumerable(enumeratorFactory, finalizer) {\n            _super.call(this, enumeratorFactory, finalizer, false);\n        }\n        return FiniteEnumerable;\n    }(Enumerable));\n    exports.FiniteEnumerable = FiniteEnumerable;\n    var ArrayEnumerable = (function (_super) {\n        __extends(ArrayEnumerable, _super);\n        function ArrayEnumerable(source) {\n            _super.call(this, function () {\n                _.throwIfDisposed();\n                return new ArrayEnumerator_1.default(function () {\n                    _.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\n                    return _._source;\n                });\n            });\n            var _ = this;\n            _._disposableObjectName = \"ArrayEnumerable\";\n            _._source = source;\n        }\n        ArrayEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = null;\n        };\n        Object.defineProperty(ArrayEnumerable.prototype, \"source\", {\n            get: function () {\n                return this._source;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ArrayEnumerable.prototype.toArray = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            return Enumerator_1.toArray(_._source);\n        };\n        ArrayEnumerable.prototype.asEnumerable = function () {\n            return new ArrayEnumerable(this._source);\n        };\n        ArrayEnumerable.prototype.forEach = function (action) {\n            var _ = this;\n            _.throwIfDisposed();\n            Enumerator_1.forEach(_._source, action);\n        };\n        ArrayEnumerable.prototype.any = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len && (!predicate || _super.prototype.any.call(this, predicate));\n        };\n        ArrayEnumerable.prototype.count = function (predicate) {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len && (predicate ? _super.prototype.count.call(this, predicate) : len);\n        };\n        ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            Integer_1.default.assertZeroOrGreater(index, 'index');\n            var source = _._source;\n            return index < source.length\n                ? source[index]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.last = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return (len)\n                ? source[len - 1]\n                : _super.prototype.last.call(this);\n        };\n        ArrayEnumerable.prototype.lastOrDefault = function (defaultValue) {\n            if (defaultValue === void 0) { defaultValue = null; }\n            var _ = this;\n            _.throwIfDisposed();\n            var source = _._source, len = source.length;\n            return len\n                ? source[len - 1]\n                : defaultValue;\n        };\n        ArrayEnumerable.prototype.skip = function (count) {\n            var _ = this;\n            if (!(count > 0))\n                return _;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, count); });\n        };\n        ArrayEnumerable.prototype.takeExceptLast = function (count) {\n            if (count === void 0) { count = 1; }\n            var _ = this;\n            return _.take(_._source.length - count);\n        };\n        ArrayEnumerable.prototype.skipToLast = function (count) {\n            if (!(count > 0))\n                return Enumerable.empty();\n            var _ = this;\n            if (!isFinite(count))\n                return _;\n            var len = _._source\n                ? _._source.length\n                : 0;\n            return _.skip(len - count);\n        };\n        ArrayEnumerable.prototype.reverse = function () {\n            var _ = this;\n            return new Enumerable(function () { return new ArrayEnumerator_1.default(function () { return _._source; }, _._source\n                ? (_._source.length - 1)\n                : 0, -1); });\n        };\n        ArrayEnumerable.prototype.memoize = function () {\n            return this.asEnumerable();\n        };\n        ArrayEnumerable.prototype.sequenceEqual = function (second, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n            if (Types_1.default.isArrayLike(second))\n                return Arrays.areEqual(this.source, second, true, equalityComparer);\n            if (second instanceof ArrayEnumerable)\n                return second.sequenceEqual(this.source, equalityComparer);\n            return _super.prototype.sequenceEqual.call(this, second, equalityComparer);\n        };\n        ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {\n            if (separator === void 0) { separator = \"\"; }\n            if (selector === void 0) { selector = Functions.Identity; }\n            var s = this._source;\n            return !selector && Array.isArray(s)\n                ? s.join(separator)\n                : _super.prototype.toJoinedString.call(this, separator, selector);\n        };\n        return ArrayEnumerable;\n    }(FiniteEnumerable));\n    var Grouping = (function (_super) {\n        __extends(Grouping, _super);\n        function Grouping(_groupKey, elements) {\n            _super.call(this, elements);\n            this._groupKey = _groupKey;\n        }\n        Object.defineProperty(Grouping.prototype, \"key\", {\n            get: function () {\n                return this._groupKey;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Grouping;\n    }(ArrayEnumerable));\n    var Lookup = (function () {\n        function Lookup(_dictionary) {\n            this._dictionary = _dictionary;\n        }\n        Object.defineProperty(Lookup.prototype, \"count\", {\n            get: function () {\n                return this._dictionary.count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lookup.prototype.get = function (key) {\n            return this._dictionary.getValue(key);\n        };\n        Lookup.prototype.contains = function (key) {\n            return this._dictionary.containsKey(key);\n        };\n        Lookup.prototype.getEnumerator = function () {\n            var _ = this;\n            var enumerator;\n            return new EnumeratorBase_1.default(function () {\n                enumerator = _._dictionary.getEnumerator();\n            }, function (yielder) {\n                if (!enumerator.moveNext())\n                    return false;\n                var current = enumerator.current;\n                return yielder.yieldReturn(new Grouping(current.key, current.value));\n            }, function () {\n                dispose_1.dispose(enumerator);\n            });\n        };\n        return Lookup;\n    }());\n    var OrderedEnumerable = (function (_super) {\n        __extends(OrderedEnumerable, _super);\n        function OrderedEnumerable(source, keySelector, order, parent, comparer) {\n            if (comparer === void 0) { comparer = Values.compare; }\n            _super.call(this, null);\n            this.source = source;\n            this.keySelector = keySelector;\n            this.order = order;\n            this.parent = parent;\n            this.comparer = comparer;\n            Enumerator_1.throwIfEndless(source && source.isEndless);\n        }\n        OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, order) {\n            return new OrderedEnumerable(this.source, keySelector, order, this);\n        };\n        OrderedEnumerable.prototype.thenBy = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, 1);\n        };\n        OrderedEnumerable.prototype.thenUsing = function (comparison) {\n            return new OrderedEnumerable(this.source, null, 1, this, comparison);\n        };\n        OrderedEnumerable.prototype.thenByDescending = function (keySelector) {\n            return this.createOrderedEnumerable(keySelector, -1);\n        };\n        OrderedEnumerable.prototype.thenUsingReversed = function (comparison) {\n            return new OrderedEnumerable(this.source, null, -1, this, comparison);\n        };\n        OrderedEnumerable.prototype.getEnumerator = function () {\n            var _ = this;\n            var buffer;\n            var indexes;\n            var index = 0;\n            return new EnumeratorBase_1.default(function () {\n                index = 0;\n                buffer = Enumerable.toArray(_.source);\n                indexes = createSortContext(_).generateSortedIndexes(buffer);\n            }, function (yielder) {\n                return (index < indexes.length)\n                    ? yielder.yieldReturn(buffer[indexes[index++]])\n                    : false;\n            }, function () {\n                if (buffer)\n                    buffer.length = 0;\n                buffer = null;\n                if (indexes)\n                    indexes.length = 0;\n                indexes = null;\n            }, false);\n        };\n        OrderedEnumerable.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.source = null;\n            this.keySelector = null;\n            this.order = null;\n            this.parent = null;\n        };\n        return OrderedEnumerable;\n    }(FiniteEnumerable));\n    function nextEnumerator(queue, e) {\n        if (e) {\n            if (e.moveNext()) {\n                queue.enqueue(e);\n            }\n            else {\n                dispose_1.dispose(e);\n                e = null;\n            }\n        }\n        return e;\n    }\n    function createSortContext(orderedEnumerable, currentContext) {\n        if (currentContext === void 0) { currentContext = null; }\n        var context = new KeySortedContext_1.default(currentContext, orderedEnumerable.keySelector, orderedEnumerable.order, orderedEnumerable.comparer);\n        if (orderedEnumerable.parent)\n            return createSortContext(orderedEnumerable.parent, context);\n        return context;\n    }\n    function throwIfDisposed(disposed) {\n        if (disposed)\n            throw new ObjectDisposedException_1.default(\"Enumerable\");\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Enumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n///<reference path=\"../System/Primitive.d.ts\"/>\r\n///<reference path=\"../System/FunctionTypes.d.ts\"/>\r\n///<reference path=\"../System/Collections/Array/IArray.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerator.d.ts\"/>\r\n///<reference path=\"../System/Collections/Enumeration/IEnumerable.d.ts\"/>\r\n///<reference path=\"../System/Collections/Dictionaries/IDictionary.d.ts\"/>\r\n///<reference path=\"../System/IComparer.d.ts\"/>\r\n///<reference path=\"../System/Collections/Sorting/Order.d.ts\"/>\r\n///<reference path=\"../System/Collections/IEnumerableOrArray.d.ts\"/>\r\n'use strict'; // For compatibility with (let, const, function, class);\r\n\r\nimport * as Values from \"../System/Compare\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../System/Collections/Array/Utility\";\r\nimport {\r\n\tempty as EmptyEnumerator,\r\n\tfrom as enumeratorFrom,\r\n\tforEach,\r\n\ttoArray,\r\n\tmap,\r\n\tisEnumerable,\r\n\tthrowIfEndless\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport Type from \"../System/Types\";\r\nimport Integer from \"../System/Integer\";\r\nimport BaseFunctions from \"../System/Functions\";\r\nimport ArrayEnumerator from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport EnumeratorBase from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport Dictionary from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport Queue from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport DisposableBase from \"../System/Disposable/DisposableBase\";\r\nimport UnsupportedEnumerableException from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport ObjectDisposedException from \"../System/Disposable/ObjectDisposedException\";\r\nimport KeySortedContext from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport ArgumentNullException from \"../System/Exceptions/ArgumentNullException\";\r\nimport ArgumentOutOfRangeException from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\ntype Comparable = Primitive|IComparable<any>;\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:any = void 0;\r\nconst BREAK:(e:any)=>EnumerableAction = element => EnumerableAction.Break;\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions extends BaseFunctions\r\n{\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nvar Functions = new LinqFunctions();\r\nObject.freeze(Functions);\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n/**\r\n * Defined values for doAction.\r\n */\r\nexport const enum EnumerableAction\r\n{\r\n\tBreak  = 0,\r\n\tReturn = 1,\r\n\tSkip   = 2\r\n}\r\n\r\n/*\r\n * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\r\n * There may seem like there's extra overrides here and they may seem unnecessary.\r\n * But after closer inspection you'll see the type chain is retained and\r\n * infinite enumerables are prevented from having features that finite ones have.\r\n *\r\n * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\r\n */\r\n\r\nexport class InfiniteEnumerable<T>\r\nextends DisposableBase implements IEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\t\tthis._isEndless = true;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\tthis._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn new InfiniteEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t */\r\n\tdoAction(\r\n\t\taction:Action<T> | Predicate<T> | Selector<T, number> | Selector<T, EnumerableAction>,\r\n\t\tinitializer?:()=>void,\r\n\t\tisEndless:boolean = this.isEndless):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar actionResult = <any>action(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforce():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.doAction(BREAK)\r\n\t\t\t.getEnumerator()\r\n\t\t\t.moveNext();\r\n\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tindex<count\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn <Enumerable<T>>_.doAction((element:T, index?:number) => index<count, null, false);\r\n\t}\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tvar v = this.elementAtOrDefault(index, INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new ArgumentOutOfRangeException('index',index,\"is greater than or equal to the number of elements in source\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tInteger.assertZeroOrGreater(index,'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tvar v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn v;\r\n\t}\r\n\r\n\tfirstOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault(defaultValue:T = null):T\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te=> e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\ttraverseBreadthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>):Enumerable<T>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>):Enumerable<TNode>;\r\n\r\n\ttraverseBreadthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>,\r\n\t\tresultSelector?:(element:T, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector?:(element:TNode, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel?:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar nestLevel:number = 0;\r\n\t\t\t\tvar buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tvar next = Enumerable\r\n\t\t\t\t\t\t\t\t.from(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(childrenSelector);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>):Enumerable<T>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>):Enumerable<TNode>;\r\n\r\n\ttraverseDepthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => IEnumerableOrArray<T>,\r\n\t\tresultSelector?:(element:T, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector?:(element:TNode, nestLevel?:number) => TResult):Enumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T|TNode) => IEnumerableOrArray<TNode>,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel?:number) => any = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tvar enumeratorStack:IEnumerator<any>[] = [];\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet value = resultSelector(enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tlet e = Enumerable.fromAny<any>(childrenSelector(enumerator.current));\r\n\t\t\t\t\t\t\t\tenumerator = e ? e.getEnumerator() : EmptyEnumerator;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these(enumeratorStack);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten():Enumerable<any>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Is endless is not affirmative if false.;\r\n\r\n\t\treturn new Enumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<any>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(middleEnumerator.current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar c = enumerator.current;\r\n\t\t\t\t\t\t\t\t// Because strings are enumerable, we can get stuck in an infinite loop.\r\n\t\t\t\t\t\t\t\t// Treat strings as primitives here.\r\n\t\t\t\t\t\t\t\tvar e = !Type.isString(c) && Enumerable.fromAny(c);\r\n\t\t\t\t\t\t\t\tif(e)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmiddleEnumerator\r\n\t\t\t\t\t\t\t\t\t\t= e\r\n\t\t\t\t\t\t\t\t\t\t.selectMany(Functions.Identity)\r\n\t\t\t\t\t\t\t\t\t\t.flatten()\r\n\t\t\t\t\t\t\t\t\t\t.getEnumerator();\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(c);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(selector:(prev:T, current:T) => TSelect):Enumerable<TSelect>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TSelect>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TSelect>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumerator.moveNext();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar prev = enumerator.current;\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(selector(prev, enumerator.current));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tscan(func:(a:T, b:T) => T, seed?:T):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar isUseSeed = seed!==VOID0; // For now...\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\t\t\t\t\treturn isUseSeed\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(value = seed)\r\n\t\t\t\t\t\t\t\t: enumerator.moveNext() && yielder.yieldReturn(value\r\n\t\t\t\t\t\t\t\t= enumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(value = func(value, enumerator.current))\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\treturn enumerator.moveNext()\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(selector(enumerator.current, index++))\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n\tpublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\r\n\t\tthis IEnumerable<TSource> source,\r\n\t\tFunc<TSource, IEnumerable<TCollection>> collectionSelector,\r\n\t\tFunc<TSource, TCollection, TResult> resultSelector)\r\n\t */\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar middleEnumerator:IEnumerator<any>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = undefined;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar middleSeq = collectionSelector(enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumeratorFrom(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t\t\t\tenumerator.current, middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, middleEnumerator);\r\n\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector:(collection:T, element:TElement) => TResult):InfiniteEnumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<any>>,\r\n\t\tresultSelector?:(collection:T, element:any) => TResult):InfiniteEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tprotected _choose<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = selector(enumerator.current, index++);\r\n\t\t\t\t\t\t\tif(result!==null && result!==VOID0)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t */\r\n\tchoose():InfiniteEnumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):InfiniteEnumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):InfiniteEnumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector)\r\n\t}\r\n\r\n\twhere(predicate:Predicate<T>):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(predicate(enumerator.current, index++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):InfiniteEnumerable<TType>;\r\n\tofType<TType>(type:any):InfiniteEnumerable<TType>\r\n\t{\r\n\t\tvar typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <Enumerable<any>>this\r\n\t\t\t\t\t.where(x=>x instanceof type);\r\n\t\t}\r\n\t\treturn <Enumerable<any>>this\r\n\t\t\t.choose()\r\n\t\t\t.where(x=>(typeof x)===typeName);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tforEach(second, key => keys.addByKeyValue(key, true));\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T) => T):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn this.except(null, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged<TCompare>(compareSelector:Selector<T, TCompare> = Functions.Identity):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar key = compareSelector(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(Values.areEqual(compareKey,key))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue:T = null):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:IEnumerableOrArray<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(firstEnumerator.current, secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:IArray<IEnumerableOrArray<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index?:number) => TResult):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar secondTemp:Queue<any>;\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(firstEnumerator.current, secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondTemp);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey,TInner>;\r\n\t\t\t\tvar innerElements:TInner[] = null;\r\n\t\t\t\tvar innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements!=null)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElement = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar key = outerKeySelector(outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(outerEnumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult, TCompare>(\r\n\t\tinner:IEnumerableOrArray<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[]) => TResult,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Enumerable<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar lookup:ILookup<TKey, TInner> = null;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\tenumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\r\n\t\tif(!enumerables || enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar queue:Queue<IEnumerableOrArray<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerableOrArray<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.count)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumeratorFrom<T>(queue.dequeue()); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = null;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, queue); // Just in case this gets disposed early.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumeratorFrom(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tInteger.assertZeroOrGreater(index,'index');\r\n\t\tvar n:number = index;\r\n\r\n\t\tvar _ = this, isEndless = _._isEndless || null;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tvar secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tvar count:number = 0;\r\n\t\t\t\tvar isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumeratorFrom<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(firstEnumerator, secondEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tvar hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tvar another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, alternateEnumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):Enumerable<T>\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:any) => void):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:() => void):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tbuffer(size:number):InfiniteEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tvar _ = this, len:number;\r\n\r\n\t\treturn new Enumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar array:T[] = ArrayUtility.initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tshare():InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar sharedEnumerator:IEnumerator<T>;\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn sharedEnumerator || (sharedEnumerator = _.getEnumerator());\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(sharedEnumerator);\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class Enumerable<T>\r\nextends InfiniteEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void,\r\n\t\tisEndless:boolean = null)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t}\r\n\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\tstatic from<T>(source:IEnumerableOrArray<T>):Enumerable<T>\r\n\t{\r\n\t\tvar e = Enumerable.fromAny<T>(source);\r\n\t\tif(!e) throw new UnsupportedEnumerableException();\r\n\t\treturn e;\r\n\t}\r\n\r\n\tstatic fromAny<T>(\r\n\t\tsource:any,\r\n\t\tdefaultEnumerable:Enumerable<T> = null):Enumerable<T>\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof Enumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new Enumerable<T>(\r\n\t\t\t\t\t()=>source.getEnumerator(),\r\n\t\t\t\t\tnull, source.isEndless);\r\n\t\t}\r\n\r\n\t\treturn defaultEnumerable;\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\tstatic toArray<T>(source:IEnumerableOrArray<T>):T[]\r\n\t{\r\n\t\tif(source instanceof Enumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn toArray(source);\r\n\t}\r\n\r\n\r\n\t//////////////////////////////////////////\r\n\t// #region Static Methods...\r\n\tstatic choice<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder)=>\r\n\t\t\t\t\tyielder.yieldReturn(Integer.random.select(values)),\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic chooseFrom<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.choice(args);\r\n\t}\r\n\r\n\tstatic cycle<T>(values:IArray<T>):InfiniteEnumerable<T>\r\n\t{\r\n\t\tvar len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic cycleThrough<T>(...args:T[]):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.cycle(args);\r\n\t}\r\n\r\n\tstatic empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single static instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\tstatic repeat<T>(element:T):InfiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\tstatic repeat<T>(element:T, count:number = Infinity):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar c:number = count;\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t(yielder)=> (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t: new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\tstatic repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:(element:T) => void):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> yielder.yieldReturn(element),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfinalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\tstatic make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn Enumerable.repeat<T>(element, 1);\r\n\t}\r\n\r\n\t// start and step can be other than integer.\r\n\r\n\tstatic range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\t\t\t\tvar c:number = count; // Force integer evaluation.\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn Enumerable.range(start, count, step);\r\n\t}\r\n\r\n\t// step = -1 behaves the same as toNegativeInfinity;\r\n\tstatic toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number = 1):InfiniteEnumerable<number>\r\n\t{\r\n\t\treturn Enumerable.toInfinity(start, -step);\r\n\t}\r\n\r\n\tstatic rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n\t\t// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t(yielder:IYield<number>)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t(yielder:IYield<number>)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:any, flags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\t\tif(input===null || input===VOID0)\r\n\t\t\tthrow new ArgumentNullException(\"input\");\r\n\t\tvar type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tvar match = regex.exec(input);\r\n\t\t\t\t\t\treturn (match!==null) ? yielder.yieldReturn(match) : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic generate<T>(factory:(index?:number) => T):InfiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number):FiniteEnumerable<T>;\r\n\tstatic generate<T>(factory:(index?:number) => T, count:number = Infinity):InfiniteEnumerable<T>\r\n\t{\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t?\r\n\t\t\tnew FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar c:number = count;\r\n\t\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t:\r\n\t\t\tnew InfiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder)=> yielder.yieldReturn(factory(index++)),\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t}\r\n\r\n\tstatic unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:Selector<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar index:number = 0;\r\n\t\t\t\tvar value:T;\r\n\t\t\t\tvar isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forEach<T>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\taction:(element:T, index?:number) => any):void\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\tforEach(enumerable, action);\r\n\t}\r\n\r\n\tstatic map<T,TResult>(\r\n\t\tenumerable:IEnumerableOrArray<T>,\r\n\t\tselector:Selector<T,TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn map(enumerable, selector);\r\n\r\n\t}\r\n\r\n\t// Slightly optimized versions for numbers.\r\n\tstatic max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tstatic min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\treturn values\r\n\t\t\t.takeUntil(v=> v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Takes any set of collections of the same type and weaves them together.\r\n\t * @param enumerables\r\n\t * @returns {Enumerable<T>}\r\n\t */\r\n\tstatic weave<T>(\r\n\t\tenumerables:IEnumerableOrArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\tif(!enumerables)\r\n\t\t\tthrow new ArgumentNullException('enumerables');\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar queue:Queue<IEnumerator<T>>;\r\n\t\t\t\tvar mainEnumerator:IEnumerator<IEnumerableOrArray<T>>;\r\n\t\t\t\tvar index:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerator<T>>();\r\n\t\t\t\t\t\tmainEnumerator = enumeratorFrom(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet e:IEnumerator<T>;\r\n\r\n\t\t\t\t\t\t// First pass...\r\n\t\t\t\t\t\tif(mainEnumerator) {\r\n\t\t\t\t\t\t\twhile(!e && mainEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = mainEnumerator.current;\r\n\t\t\t\t\t\t\t\te = nextEnumerator(queue, c && enumeratorFrom(c));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!e)\r\n\t\t\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile(!e && queue.count) {\r\n\t\t\t\t\t\t\te = nextEnumerator(queue, queue.dequeue());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn e\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(e.current)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose.these(queue.dump());\r\n\t\t\t\t\t\tdispose(mainEnumerator,queue);\r\n\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\tqueue = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tdoAction(\r\n\t\taction:Action<T>|Predicate<T>|Selector<T, number>|Selector<T, EnumerableAction>,\r\n\t\tinitializer?:()=>void,\r\n\t\tisEndless:boolean = this.isEndless):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.doAction(action, initializer, isEndless);\r\n\t}\r\n\r\n// #region Indexing/Paging methods.\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.skip(count);\r\n\t}\r\n\r\n\tskipWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttakeWhile(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:Predicate<T>, includeUntilValue?:boolean):Enumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn this.doAction(\r\n\t\t\t\t(element:T, index?:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tvar found:boolean = false;\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index?:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\tvar index:number = 0;\r\n\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\tusing(\r\n\t\t\t_.getEnumerator(), e=>\r\n\t\t\t{\r\n\t\t\t\tthrowIfEndless(e.isEndless);\r\n\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(_.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(e.current, index++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:Predicate<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assertZeroOrGreater(index);\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use forEach utility instead.\r\n\t\tforEach<T>(this, (x, i)=>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t});\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoLookup<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue> = Functions.Identity,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):ILookup<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar key = keySelector(x);\r\n\t\t\t\tvar element = elementSelector(x);\r\n\r\n\t\t\t\tvar array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:Selector<T, string>,\r\n\t\telementSelector:Selector<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tvar obj:IMap<TResult> = {};\r\n\t\tthis.forEach((x, i)=>\r\n\t\t{\r\n\t\t\tobj[keySelector(x, i)] = elementSelector(x, i);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\ttoDictionary<TKey, TValue, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TValue>,\r\n\t\tcompareSelector:Selector<TKey, TCompare> = Functions.Identity):Dictionary<TKey, TValue>\r\n\t{\r\n\t\tvar dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach((x, i)=> dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\treturn this.select(selector).toArray().join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tvar c = count;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, q);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\twhere(predicate:Predicate<T>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.where(predicate);\r\n\t}\r\n\r\n\tselect<TResult>(selector:Selector<T, TResult>):Enumerable<TResult>\r\n\t{\r\n\t\treturn <Enumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TResult>>):Enumerable<TResult>;\r\n\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<TElement>>,\r\n\t\tresultSelector:(collection:T, element:TElement)=>TResult):Enumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:Selector<T, IEnumerableOrArray<any>>,\r\n\t\tresultSelector?:(collection:T, element:any)=>TResult):Enumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tchoose():Enumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):Enumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):Enumerable<any>\r\n\t{\r\n\t\treturn this._choose(selector);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=> index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar buffer:T[];\r\n\t\t\t\tvar capacity:number;\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar selectedIndex = Integer.random(len);\r\n\t\t\t\t\t\tvar selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = null; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t?\r\n\t\t\t\t(x, i) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(predicate(x, i))++count;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tvar result = true;\r\n\t\tthis.forEach((x, i) =>\r\n\t\t{\r\n\t\t\tif(!predicate(x, i))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tvar result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x, i); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate:Predicate<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\tcontains<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):boolean\r\n\t{\r\n\t\treturn compareSelector\r\n\t\t\t? this.any(v=> compareSelector(v)===compareSelector(value))\r\n\t\t\t: this.any(v=> v===value);\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element, i), compareSelector(value, i), true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\t\tif(Values.areEqual(element, value, true))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf<TCompare>(value:T, compareSelector?:Selector<T, TCompare>):number\r\n\t{\r\n\t\tvar result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t?\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(compareSelector(element, i), compareSelector(value, i), true)) result\r\n\t\t\t\t\t\t= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t:\r\n\t\t\t\t(element:T, i?:number) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(Values.areEqual(element, value, true)) result = i;\r\n\t\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tmerge(enumerables:IArray<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.merge(enumerables);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<IEnumerableOrArray<T>>):Enumerable<T>\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tintersect<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar keys:Dictionary<T,boolean>;\r\n\t\t\t\tvar outs:Dictionary<T,boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tforEach(second, key=>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar current = enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator, keys, outs);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1=> using(\r\n\t\t\t\tenumeratorFrom(second),\r\n\t\t\t\te2=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(e1.current, e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:IEnumerableOrArray<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):Enumerable<TType>;\r\n\tofType<TType>(type:any):Enumerable<TType>\r\n\t{\r\n\t\treturn <Enumerable<TType>>super.ofType(type);\r\n\t}\r\n\r\n\texcept<TCompare>(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tcompareSelector?:Selector<T, TCompare>):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.except(second, compareSelector);\r\n\t}\r\n\r\n\tdistinct(compareSelector?:(value:T)=>T):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.distinct(compareSelector);\r\n\t}\r\n\r\n\tdistinctUntilChanged<TCompare>(compareSelector:Selector<T, TCompare> = Functions.Identity):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.distinctUntilChanged(compareSelector);\r\n\t}\r\n\r\n// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new Enumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):Enumerable<T[]>\r\n\t{\r\n\t\treturn <Enumerable<T[]>>super.buffer(size);\r\n\t}\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\r\n\tgroupBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, T>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, T>>;\r\n\tgroupBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() => this.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):Enumerable<IGrouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, TCompare>):Enumerable<IGrouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement, TCompare>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => IGrouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, TCompare>\r\n\t\t\t= Functions.Identity):Enumerable<IGrouping<TKey, T>>|Enumerable<IGrouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!elementSelector) elementSelector = Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new Enumerable<IGrouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar enumerator:IEnumerator<T>;\r\n\t\t\t\tvar key:TKey;\r\n\t\t\t\tvar compareKey:TCompare;\r\n\t\t\t\tvar group:TElement[];\r\n\t\t\t\tvar len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<IGrouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkey = keySelector(enumerator.current);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(enumerator.current)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tvar hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tif(compareKey===compareSelector(keySelector(c)))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result:IGrouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdispose(enumerator);\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\taggregate(\r\n\t\tfunc:(a:T, b:T) => T,\r\n\t\tseed?:T):T\r\n\t{\r\n\t\treturn this.scan(func, seed).lastOrDefault();\r\n\t}\r\n\r\n\taverage(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar sum = this.sum((e, i)=>\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\treturn selector(e, i);\r\n\t\t});\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy<TCompare>(keySelector:Selector<T, TCompare> = Functions.Identity):T\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tvar sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite +=\r\n\t\t\t\t\t\tvalue>0 ?\r\n\t\t\t\t\t\t\t(+1) :\r\n\t\t\t\t\t\t\t(-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tvar value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:Selector<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i)=>\r\n\t\t\t{\r\n\t\t\t\tvar value = selector(x, i);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar value:T = undefined;\r\n\t\tvar found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx=>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tshare():Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.share();\r\n\t}\r\n\r\n\r\n\tcatchError(handler:(e:any)=>void):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.catchError(handler);\r\n\t}\r\n\r\n\r\n\tfinallyAction(action:()=>void):Enumerable<T>\r\n\t{\r\n\t\treturn <Enumerable<T>>super.finallyAction(action);\r\n\t}\r\n\r\n\tmemoize():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this, disposed:boolean = !_.throwIfDisposed();\r\n\r\n\t\tvar cache:T[];\r\n\t\tvar enumerator:IEnumerator<T>;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tvar index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tif(!enumerator)\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(!cache)\r\n\t\t\t\t\t\t\tcache = [];\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tvar i = index++;\r\n\r\n\t\t\t\t\t\tif(i>=cache.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t\t? yielder.yieldReturn(cache[i] = enumerator.current)\r\n\t\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(cache[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t\tif(cache)\r\n\t\t\t\t\tcache.length = 0;\r\n\t\t\t\tcache = null;\r\n\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t\tenumerator = null;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\nextends Enumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:() => void)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t}\r\n\r\n}\r\n\r\nclass ArrayEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:IArray<T>;\r\n\r\n\tconstructor(source:IArray<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Should never be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = \"ArrayEnumerable\";\r\n\t\t_._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = <any>null;\r\n\t}\r\n\r\n\tget source():IArray<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:Predicate<T> | Action<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tforEach(_._source, action);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:Predicate<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:Predicate<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\t\r\n\telementAtOrDefault(index:number, defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tInteger.assertZeroOrGreater(index,'index');\r\n\r\n\t\tvar source = _._source;\r\n\t\treturn index<source.length\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault(defaultValue:T = null):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):Enumerable<T>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.take(_._source.length - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):Enumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tvar _ = this;\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tvar len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn _.skip(len - count);\r\n\t}\r\n\r\n\treverse():Enumerable<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\treturn new Enumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(\r\n\t\t\t\t() => _._source, _._source\r\n\t\t\t\t\t? (_._source.length - 1)\r\n\t\t\t\t\t: 0, -1\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():ArrayEnumerable<T>\r\n\t{\r\n\t\treturn this.asEnumerable();\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = Functions.Identity)\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn !selector && Array.isArray(s)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IGrouping<TKey, TElement>\r\nextends Enumerable<TElement>\r\n{\r\n\tkey:TKey;\r\n}\r\n\r\nclass Grouping<TKey, TElement>\r\nextends ArrayEnumerable<TElement> implements IGrouping<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\n\r\nexport interface ILookup<TKey, TElement>\r\nextends IEnumerable<IGrouping<TKey, TElement>>\r\n{\r\n\tcount:number;\r\n\tget(key:TKey):TElement[];\r\n\tcontains(key:TKey):boolean;\r\n}\r\n\r\nclass Lookup<TKey, TElement>\r\nimplements ILookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:Dictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[]\r\n\t{\r\n\t\treturn this._dictionary.getValue(key);\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\tvar enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tvar current = enumerator.current;\r\n\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdispose(enumerator);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport interface IOrderedEnumerable<T>\r\nextends FiniteEnumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n}\r\n\r\nclass OrderedEnumerable<T,TOrderBy extends Comparable>\r\nextends FiniteEnumerable<T> implements IOrderedEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:(value:T) => TOrderBy,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T,any>,\r\n\t\tpublic comparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(null);\r\n\t\tthrowIfEndless(source && source.isEndless);\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:(value:T) => TOrderBy,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T,any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar buffer:T[];\r\n\t\tvar indexes:number[];\r\n\t\tvar index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_).generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = null;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = null;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.source = null;\r\n\t\tthis.keySelector = null;\r\n\t\tthis.order = null;\r\n\t\tthis.parent = null;\r\n\t}\r\n\r\n}\r\n\r\n// A private static helper for the weave function.\r\nfunction nextEnumerator<T>(queue:Queue<IEnumerator<T>>, e:IEnumerator<T>):IEnumerator<T> {\r\n\tif(e) {\r\n\t\tif(e.moveNext()) {\r\n\t\t\tqueue.enqueue(e);\r\n\t\t} else {\r\n\t\t\tdispose(e);\r\n\t\t\te = null;\r\n\t\t}\r\n\t}\r\n\treturn e;\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T,TOrderBy>,\r\n\tcurrentContext:IComparer<T> = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tvar context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\nfunction throwIfDisposed(disposed:boolean):void\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(\"Enumerable\");\r\n}\r\n// #endregion\r\n\r\nexport default Enumerable;\r\n"]}