{"version":3,"sources":["System/Time/TimeUnitValue.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAGH,yBAAuB,YAAY,CAAC,CAAA;IACpC,6BAA2B,gBAAgB,CAAC,CAAA;IAE5C,wBAA4B,eAAe,CAAC,CAAA;IAC5C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAKlC;QAC4B,iCAAY;QAGvC,uBAAY,KAA0B,EAAU,MAAe;YAE9D,kBAAM,OAAM,CAAC,KAAK,CAAC,IAAE,QAAQ;kBAClB,KAAK;kBACb,mBAAmB,CAAgB,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;YAJP,WAAM,GAAN,MAAM,CAAS;YAK9D,mBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC;QAED,sBAAI,gCAAK;iBAAT;gBAEC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvB,CAAC;iBAED,UAAU,CAAQ;gBAEjB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACpB,CAAC;;;WANA;QAQD,4CAAoB,GAApB;YAEC,MAAM,CAAC,mBAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,CAAC;QAGD,sBAAI,gCAAK;iBAAT;gBAEC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpB,CAAC;;;WAAA;QAED,0BAAE,GAAF,UAAG,KAA2B;YAA3B,qBAA2B,GAA3B,QAAiB,IAAI,CAAC,KAAK;YAE7B,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QAEM,kBAAI,GAAX,UAAY,KAA0B,EAAE,KAAsC;YAAtC,qBAAsC,GAAtC,QAAiB,mBAAQ,CAAC,YAAY;YAE7E,MAAM,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;QAEF,oBAAC;IAAD,CA5CA,AA4CC,CA3C2B,2BAAY,GA2CvC;IA5CD;mCA4CC,CAAA;IAED,6BAA6B,CAAe,EAAE,KAAc;QAE3D,MAAM,CAAC,mBAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}