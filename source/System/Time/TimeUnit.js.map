{"version":3,"sources":["System/Time/TimeUnit.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;IAKH,WAAY,QAAQ;QAEnB,yCAAK,CAAA;QACL,uDAAY,CAAA;QACZ,6CAAO,CAAA;QACP,6CAAO,CAAA;QACP,yCAAK,CAAA;QACL,uCAAI,CAAA;IACL,CAAC,EARW,gBAAQ,KAAR,gBAAQ,QAQnB;IARD,IAAY,QAAQ,GAAR,gBAQX,CAAA;IAED,IAAc,QAAQ,CAgErB;IAhED,WAAc,QAAQ,EACtB,CAAC;QAEA,wBACC,KAAY,EACZ,KAAsC;YAAtC,qBAAsC,GAAtC,QAAiB,QAAQ,CAAC,YAAY;YAGtC,MAAM,CAAA,CAAC,KAAK,CAAC,CACb,CAAC;gBACA,KAAK,QAAQ,CAAC,IAAI;oBACjB,KAAK,IAAI,EAAa,CAAC;gBACxB,KAAK,QAAQ,CAAC,KAAK;oBAClB,KAAK,IAAI,EAAgB,CAAC;gBAC3B,KAAK,QAAQ,CAAC,OAAO;oBACpB,KAAK,IAAI,EAAkB,CAAC;gBAC7B,KAAK,QAAQ,CAAC,OAAO;oBACpB,KAAK,IAAI,IAAuB,CAAC;gBAClC,KAAK,QAAQ,CAAC,YAAY;oBACzB,MAAM,CAAC,KAAK,CAAC;gBACd,KAAK,QAAQ,CAAC,KAAK;oBAClB,MAAM,CAAC,KAAK,GAAC,KAAqB,CAAC;gBACpC;oBACC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC;QACF,CAAC;QAtBe,uBAAc,iBAsB7B,CAAA;QAED,0BACC,EAAS,EACT,KAAc;YAEd,MAAM,CAAA,CAAC,KAAK,CAAC,CACb,CAAC;gBACA,KAAK,QAAQ,CAAC,IAAI;oBACjB,MAAM,CAAC,EAAE,GAAC,QAAoB,CAAC;gBAChC,KAAK,QAAQ,CAAC,KAAK;oBAClB,MAAM,CAAC,EAAE,GAAC,OAAqB,CAAC;gBACjC,KAAK,QAAQ,CAAC,OAAO;oBACpB,MAAM,CAAC,EAAE,GAAC,KAAuB,CAAC;gBACnC,KAAK,QAAQ,CAAC,OAAO;oBACpB,MAAM,CAAC,EAAE,GAAC,IAAuB,CAAC;gBACnC,KAAK,QAAQ,CAAC,YAAY;oBACzB,MAAM,CAAC,EAAE,CAAC;gBACX,KAAK,QAAQ,CAAC,KAAK;oBAClB,MAAM,CAAC,EAAE,GAAC,KAAqB,CAAC;gBACjC;oBACC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC;QACF,CAAC;QArBe,yBAAgB,mBAqB/B,CAAA;QAED,cAAqB,QAAsB,EAAE,IAAa;YAEzD,MAAM,CAAC,QAAQ,IAAI,gBAAgB,CAAC,QAAQ,CAAC,oBAAoB,EAAE,EAAE,IAAI,CAAC,CAAC;QAC5E,CAAC;QAHe,aAAI,OAGnB,CAAA;QAGD,qBAA4B,IAAa;YAExC,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,GAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,GAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAG,IAAI,CAAC;gBACtF,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAEtC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QANe,oBAAW,cAM1B,CAAA;IAEF,CAAC,EAhEa,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAgErB;IAED,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAExB;sBAAe,QAAQ,CAAC","file":"System/Time/TimeUnit.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Hours, Minutes, Seconds, Milliseconds, Ticks} from \"./HowMany\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\n\r\nexport enum TimeUnit\r\n{\r\n\tTicks,\r\n\tMilliseconds,\r\n\tSeconds,\r\n\tMinutes,\r\n\tHours,\r\n\tDays\r\n} // Earth Days\r\n\r\nexport module TimeUnit\r\n{\r\n\r\n\texport function toMilliseconds(\r\n\t\tvalue:number,\r\n\t\tunits:TimeUnit = TimeUnit.Milliseconds):number\r\n\t{\r\n\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\tvalue *= Hours.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\tvalue *= Minutes.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\tvalue *= Seconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\tvalue *= Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn value;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn value/Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function fromMilliseconds(\r\n\t\tms:number,\r\n\t\tunits:TimeUnit)\r\n\t{\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\treturn ms/Milliseconds.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\treturn ms/Milliseconds.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\treturn ms/Milliseconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\treturn ms/Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn ms;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn ms*Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function from(quantity:ITimeQuantity, unit:TimeUnit):number\r\n\t{\r\n\t\treturn quantity && fromMilliseconds(quantity.getTotalMilliseconds(), unit);\r\n\t}\r\n\r\n\r\n\texport function assertValid(unit:TimeUnit):boolean\r\n\t{\r\n\t\tif(isNaN(unit) || unit>TimeUnit.Days || unit<TimeUnit.Ticks || Math.floor(unit)!==unit)\r\n\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nObject.freeze(TimeUnit);\r\n\r\nexport default TimeUnit;\r\n"]}