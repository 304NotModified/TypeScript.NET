{"version":3,"sources":["System/Observable/SubscribableBase.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;IAGH,+BAA6B,+BAA+B,CAAC,CAAA;IAC7D,wBAAsB,uBAAuB,CAAC,CAAA;IAC9C,6BAA2B,gBAAgB,CAAC,CAAA;IAK5C;QAcC;YAEC,IAAI,CAAC,eAAe;kBACjB,IAAI,+BAAc,EAAmD,CAAC;QAC1E,CAAC;QAXS,0CAAe,GAAzB;YAEC,MAAM,CAAC,IAAI;iBACT,eAAe;iBACf,GAAG,CAAC,UAAA,IAAI,IAAE,OAAA,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAnC,CAAmC,CAAC,CAAC;QAClD,CAAC;QAQO,yCAAc,GAAtB,UACC,UAAsB;YAEtB,MAAM,CAAC,IAAI;iBACT,eAAe;iBACf,IAAI,CAAC,UAAA,CAAC,IAAE,OAAA,CAAC,CAAC,KAAK,CAAC,UAAU,KAAG,UAAU,EAA/B,CAA+B,CAAC,CAAC;QAC5C,CAAC;QAGD,oCAAS,GAAT,UAAU,UAAsB;YAE/B,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACrC,EAAE,CAAA,CAAC,CAAC,CAAC;gBACJ,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;YAEhB,IAAI,CAAC,GAAG,IAAI,2BAAY,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YACxC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;YAEtC,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAED,sCAAW,GAAX,UAAY,UAAsB;YAEjC,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACrC,EAAE,CAAA,CAAC,CAAC,CAAC,CACL,CAAC;gBACA,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;gBAChB,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,CAAC;QACF,CAAC;QAES,0CAAe,GAAzB,UAA0B,iBAAiC;YAAjC,iCAAiC,GAAjC,yBAAiC;YAE1D,IAAI,CAAC,GAAG,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,eAAe,CAAC;YACrC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAE,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,GAAG,iBAAiB,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAE,OAAA,CAAC,CAAC,UAAU,EAAZ,CAAY,CAAC,GAAG,IAAI,CAAC;YAC1D,EAAE,CAAC,KAAK,EAAE,CAAC;YAEX,iBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEjB,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAED,yCAAc,GAAd;YAEC,IAAI,CAAC,eAAe,EAAE,CAAC;QACxB,CAAC;QAED,kCAAO,GAAP;YAEC,IAAI,CAAC,eAAe,EAAE,CAAC;QACxB,CAAC;QAEF,uBAAC;IAAD,CA5EA,AA4EC,IAAA;IA5EY,wBAAgB,mBA4E5B,CAAA;IAED;sBAAe,gBAAgB,CAAC","file":"System/Observable/SubscribableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {dispose} from \"../Disposable/dispose\";\r\nimport {Subscription} from \"./Subscription\";\r\nimport {ILinkedNodeWithValue} from \"../Collections/ILinkedListNode\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\n\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\nexport class SubscribableBase<TSubscriber>\r\nimplements IDisposable\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]\r\n\t{\r\n\t\treturn this\r\n\t\t\t.__subscriptions\r\n\t\t\t.map(node=>node.value && node.value.subscriber);\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.__subscriptions\r\n\t\t\t= new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>\r\n\t{\r\n\t\treturn this\r\n\t\t\t.__subscriptions\r\n\t\t\t.find(n=>n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn n.value;\r\n\r\n\t\tvar s = new Subscription(_, subscriber);\r\n\t\t_.__subscriptions.addNode({value: s});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tvar s = n.value;\r\n\t\t\t_.__subscriptions.removeNode(n);\r\n\t\t\ts.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]\r\n\t{\r\n\t\tvar _ = this, _s = _.__subscriptions;\r\n\t\tvar s = _s.map(n=>n.value);\r\n\t\tvar u = returnSubscribers ? s.map(o=>o.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tdispose.these(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tdispose()\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n}\r\n\r\nexport default SubscribableBase;\r\n"]}