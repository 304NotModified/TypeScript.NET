{"version":3,"sources":["System/Observable/ObservableNodeBase.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;IAGH,+BAA2B,kBAAkB,CAAC,CAAA;IAE9C,wBAA4B,eAAe,CAAC,CAAA;IAC5C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAElC;QACQ,sCAAiB;QADzB;YACQ,8BAAiB;QAkBzB,CAAC;QAdA,mCAAM,GAAN,UAAO,KAAO;YAEb,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAED,oCAAO,GAAP,UAAQ,KAAW;YAElB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;QAED,wCAAW,GAAX;YAEC,IAAI,CAAC,YAAY,EAAE,CAAC;QACrB,CAAC;QACF,yBAAC;IAAD,CAnBA,AAmBC,CAlBO,wBAAc,GAkBrB;IAnBY,0BAAkB,qBAmB9B,CAAA;IAED;sBAAe,kBAAkB,CAAC","file":"System/Observable/ObservableNodeBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\nimport ObservableBase from \"./ObservableBase\";\r\nimport {IObserver} from \"./IObserver\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nexport class ObservableNodeBase<T>\r\nextends ObservableBase<T>\r\nimplements IObserver<T>\r\n{\r\n\r\n\tonNext(value:T):void\r\n\t{\r\n\t\tthis._onNext(value);\r\n\t}\r\n\r\n\tonError(error:Error):void\r\n\t{\r\n\t\tthis._onError(error);\r\n\t}\r\n\r\n\tonCompleted():void\r\n\t{\r\n\t\tthis._onCompleted();\r\n\t}\r\n}\r\n\r\nexport default ObservableNodeBase;"]}