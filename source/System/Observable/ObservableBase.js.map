{"version":3,"sources":["System/Observable/ObservableBase.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;IAGH,iCAA+B,oBAAoB,CAAC,CAAA;IAGpD,wBAA4B,eAAe,CAAC,CAAA;IAC5C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAIlC;QACQ,kCAA8B;QADtC;YACQ,8BAA8B;QA0BtC,CAAC;QAvBU,gCAAO,GAAjB,UAAkB,KAAO;YAExB,aAAa,CACZ,IAAI,CAAC,eAAe,EAAE,EACtB,UAAA,CAAC,IAAM,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;QACH,CAAC;QAES,iCAAQ,GAAlB,UAAmB,KAAW;YAE7B,aAAa,CACZ,IAAI,CAAC,eAAe,EAAE,EACtB,UAAA,CAAC,IAAM,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACvC,CAAC;QACH,CAAC;QAES,qCAAY,GAAtB;YAEC,aAAa,CACZ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAC1B,UAAA,CAAC,IAAM,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAC1C,CAAC;QACH,CAAC;QACF,qBAAC;IAAD,CA3BA,AA2BC,CA1BO,mCAAgB,GA0BvB;IA3BqB,sBAAc,iBA2BnC,CAAA;IAED,IAAM,sBAAsB,GAAU,uEAAuE,CAAC;IAE9G,uBACC,SAAwB,EACxB,OAA8B;QAE9B,IAAI,eAAe,GAAoC,IAAI,CAAC;QAE5D,GAAG,CAAA,CAAU,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,CAAC;YAAnB,IAAI,CAAC,kBAAA;YAER,IACA,CAAC;gBACA,OAAO,CAAC,CAAC,CAAC,CAAC;YACZ,CACA;YAAA,KAAK,CAAA,CAAC,EAAE,CAAC,CACT,CAAC;gBACA,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;gBAExC,eAAe,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC;YAC7C,CAAC;SACD;QAED,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAErB,EAAE,CAAA,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,CAAC,CAC7C,CAAC;YACA,EAAE,CAAA,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC;gBAC3B,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,eAAe,CAAC,CAAC;YACxD,IAAI;gBAAC,MAAM;oBACV,OAAO,EAAE,sBAAsB;oBAC/B,MAAM,EAAE,eAAe;iBACvB,CAAC;QACH,CAAC;IAEF,CAAC;IAED;sBAAe,cAAc,CAAC","file":"System/Observable/ObservableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n\r\nimport {SubscribableBase} from \"./SubscribableBase\";\r\nimport {IObservable} from \"./IObservable\";\r\nimport {IObserver} from \"./IObserver\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\n\r\nexport abstract class ObservableBase<T>\r\nextends SubscribableBase<IObserver<T>> implements IObservable<T>\r\n{\r\n\r\n\tprotected _onNext(value:T):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onNext && s.onNext(value); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onError(error:Error):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onError && s.onError(error); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onCompleted():void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._unsubscribeAll(true),\r\n\t\t\ts => { s.onCompleted && s.onCompleted(); }\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst OBSERVER_ERROR_MESSAGE:string = 'One or more observers had errors when attempting to pass information.';\r\n\r\nfunction processAction<T>(\r\n\tobservers:IObserver<T>[],\r\n\thandler:(s:IObserver<T>)=>void)\r\n{\r\n\tvar observersErrors:{observer:IObserver<T>,ex:any}[] = null;\r\n\r\n\tfor(let s of observers)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\thandler(s);\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tobserversErrors = observersErrors || [];\r\n\t\t\t// Don't let one error prevent others from recieving information.\r\n\t\t\tobserversErrors.push({observer: s, ex: ex});\r\n\t\t}\r\n\t}\r\n\r\n\tobservers.length = 0;\r\n\r\n\tif(observersErrors && observersErrors.length)\r\n\t{\r\n\t\tif(console && console.error)\r\n\t\t\tconsole.error(OBSERVER_ERROR_MESSAGE, observersErrors);\r\n\t\telse throw {\r\n\t\t\tmessage: OBSERVER_ERROR_MESSAGE,\r\n\t\t\terrors: observersErrors\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nexport default ObservableBase;"]}