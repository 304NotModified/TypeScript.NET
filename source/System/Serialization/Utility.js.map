{"version":3,"sources":["System/Serialization/Utility.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,sBAAmB,UAAU,CAAC,CAAA;IAC9B,0CAAwC,yCAAyC,CAAC,CAAA;IAKlF,IAAM,KAAK,GAAG,EAAE,EAAE,IAAI,GAAG,MAAM,EAAE,KAAK,GAAG,OAAO,CAAC;IAEjD,kBACC,KAA6B,EAC7B,iBAAyB;QAGzB,IAAI,CAAC,GAAQ,KAAK,CAAC;QACnB,MAAM,CAAA,CAAC,OAAO,CAAC,CAAC,CAChB,CAAC;YACA,KAAK,YAAI,CAAC,SAAS,CAAC;YACpB,KAAK,YAAI,CAAC,MAAM;gBACf,MAAM,CAAC,CAAC,CAAC;YACV,KAAK,YAAI,CAAC,OAAO;gBAChB,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;YACzB,KAAK,YAAI,CAAC,MAAM;gBACf,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;YAClB;gBAEC,EAAE,CAAA,CAAC,CAAC,KAAG,IAAI,CAAC;oBACX,MAAM,CAAC,CAAC,CAAC;gBAEV,EAAE,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;gBACtB,IAAI,CAAC,EAAE,CAAA,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC;oBAC1B,MAAM,CAAC,iBAAiB,CAAC;gBAE1B,IAAI,EAAE,GAAG,IAAI,qDAAyB,CAAC,8CAA8C,CAAC,CAAC;gBACvF,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACrB,MAAM,EAAE,CAAC;QAEX,CAAC;IAEF,CAAC;IA/Be,gBAAQ,WA+BvB,CAAA;IAED,wBAA+B,QAAY;QAC1C,MAAM,CAAC,YAAI,CAAC,eAAe,CAAgB,QAAQ,EAAC,WAAW,EAAC,YAAI,CAAC,QAAQ,CAAC,CAAC;IAChF,CAAC;IAFe,sBAAc,iBAE7B,CAAA;IAED,qBACC,KAAY,EACZ,eAAwB,EACxB,cAAkC;QAIlC,EAAE,CAAA,CAAC,KAAK,CAAC,CACT,CAAC;YACA,EAAE,CAAA,CAAC,eAAe,CAAC;gBAAC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;YAEhD,MAAM,CAAA,CAAC,KAAK,CAAC,CACb,CAAC;gBACA,KAAK,MAAM;oBACV,MAAM,CAAC,IAAI,CAAC;gBACb,KAAK,YAAI,CAAC,SAAS;oBAClB,MAAM,CAAC,SAAS,CAAC;gBAClB,KAAK,IAAI;oBACR,MAAM,CAAC,IAAI,CAAC;gBACb,KAAK,KAAK;oBACT,MAAM,CAAC,KAAK,CAAC;gBACd;oBAEC,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,EAAC,KAAK,CAAC,CAAC;oBAClD,EAAE,CAAA,CAAC,OAAO,CAAC,CAAC,CAAC;wBAEZ,EAAE,CAAA,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;4BAC3B,IAAI,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;4BAC5B,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gCAAC,MAAM,CAAC,GAAG,CAAC;wBAC5B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,IAAI,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;4BAC/B,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gCAAC,MAAM,CAAC,MAAM,CAAC;wBAClC,CAAC;oBAEF,CAAC;oBAKD,EAAE,CAAA,CAAC,cAAc,CAAC;wBAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;oBAEjD,KAAK,CAAC;YACR,CAAC;QAEF,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IAEd,CAAC;IAhDe,mBAAW,cAgD1B,CAAA","file":"System/Serialization/Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ISerializable} from \"./ISerializable\";\r\nimport {Primitive} from \"../Primitive\";\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tvar v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.UNDEFINED:\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v===null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(arguments.length>1)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tvar ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable {\r\n\treturn Type.hasMemberOfType<ISerializable>(instance,'serialize',Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn undefined;\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tvar cleaned = value.replace(/^\\s+|,|\\s+$/g,EMPTY);\r\n\t\t\t\tif(cleaned) {\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned)) {\r\n\t\t\t\t\t\tvar int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}