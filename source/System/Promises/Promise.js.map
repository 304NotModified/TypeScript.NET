{"version":3,"sources":["System/Promises/Promise.ts"],"names":[],"mappings":"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","file":"System/Promises/Promise.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n\r\n/*\r\n * Resources:\r\n * https://promisesaplus.com/\r\n * https://github.com/kriskowal/q\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ObjectDisposedException} from \"../Disposable/ObjectDisposedException\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:Promise.Resolution<T>, resolver:(v:Promise.Resolution<T>)=>any,\r\n\tpromiseFactory:(v:any)=>PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? Promise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:Promise<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p) p.resolve(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ p.reject(ex); }\r\n}\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:Promise.Fulfill<any,any>,\r\n\ttargetReject:Promise.Reject<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\tp.thenThis(onFulfilled, onRejected);\r\n\telse\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nfunction newODE()\r\n{\r\n\treturn new ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\r\n}\r\n\r\nexport class PromiseState<T>\r\nextends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:Promise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\nextends PromiseState<T> implements PromiseLike<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(Promise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * Errors are not trapped.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>;\r\n\r\n\r\n\t/**\r\n\t * Standard .then method that defers execution until resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {Promise}\r\n\t */\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tdone(\r\n\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\tonRejected?:Promise.Reject<any>):void\r\n\t{\r\n\t\tdefer(()=>this.thenThis(onFulfilled, onRejected));\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tdefer(()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\te=> reject(e));\r\n\t\t\t\t}, milliseconds)\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(this.isSettled) return this.delayFromNow(milliseconds);\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tthis.thenThis(\r\n\t\t\t\t\tv=>defer(()=>resolve(v), milliseconds),\r\n\t\t\t\t\te=>defer(()=>reject(e), milliseconds))\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t'catch'<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t'finally'<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\tfinallyThis(fin:()=>void):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tvar f = ()=>deferImmediate(fin);\r\n\t\tthis.thenThis(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T> extends PromiseBase<T>\r\n{\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T> extends Resolvable<T>\r\n{\r\n\tconstructor(state:Promise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nclass Fulfilled<T> extends Resolved<T>\r\n{\r\n\tconstructor(value?:T)\r\n\t{\r\n\t\tsuper(Promise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nclass Rejected<T> extends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(Promise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T> extends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\thandleDispatch(t,\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenThis(onFulfilled, onRejected);\r\n\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class Promise<T> extends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[];\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:Promise.Executor<T>, forceSynchronous:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, forceSynchronous);\r\n\t}\r\n\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tvar p = new Promise<TResult>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenThis(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false,\r\n\t\tthrowIfSettled:boolean = false)\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tvar state = 0;\r\n\t\tvar rejectHandler = (reason:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state== -1\r\n\t\t\t\t\t? \"Rejection called multiple times\"\r\n\t\t\t\t\t: \"Rejection called after fulfilled.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = -1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.reject(reason);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar fulfillHandler = (v:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state==1\r\n\t\t\t\t\t? \"Fulfill called multiple times\"\r\n\t\t\t\t\t: \"Fulfill called after rejection.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = 1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.resolve(v);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\r\n\t\tif(forceSynchronous)\r\n\t\t\tresolver(fulfillHandler, rejectHandler);\r\n\t\telse\r\n\t\t\tdeferImmediate(()=>resolver(fulfillHandler, rejectHandler));\r\n\r\n\t}\r\n\r\n\r\n\tprivate _emitDisposalRejection(p:PromiseBase<any>):boolean\r\n\t{\r\n\t\tvar d = p.wasDisposed;\r\n\t\tif(d) this._rejectInternal(newODE());\r\n\t\treturn d;\r\n\t}\r\n\r\n\tprivate _resolveInternal(result?:T|PromiseLike<T>):void\r\n\t{\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\t// Note: Avoid recursion if possible.\r\n\r\n\t\t// Check ahead of time for resolution and resolve appropriately\r\n\t\twhile(result instanceof PromiseBase)\r\n\t\t{\r\n\t\t\tlet r:PromiseBase<T> = <any>result;\r\n\t\t\tif(this._emitDisposalRejection(r)) return;\r\n\t\t\tswitch(r.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Pending:\r\n\t\t\t\t\tr.thenSynchronous(\r\n\t\t\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\tthis._rejectInternal(r.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\tresult = r.result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(isPromise(result))\r\n\t\t{\r\n\t\t\tresult.then(\r\n\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._state = Promise.State.Fulfilled;\r\n\r\n\t\t\tthis._result = result;\r\n\t\t\tthis._error = VOID0;\r\n\t\t\tvar o = this._waiting;\r\n\t\t\tif(o)\r\n\t\t\t{\r\n\t\t\t\tthis._waiting = VOID0;\r\n\t\t\t\tfor(let c of o)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {onFulfilled, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\t\thandleResolution(p, result, onFulfilled);\r\n\t\t\t\t}\r\n\t\t\t\to.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rejectInternal(error:any):void\r\n\t{\r\n\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\tthis._state = Promise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected) handleResolution(p, error, onRejected);\r\n\t\t\t\telse p.reject(error);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tresolve(result?:T | PromiseLike<T>, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._resolveInternal(result);\r\n\t}\r\n\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._rejectInternal(error);\r\n\t}\r\n}\r\n\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tvar pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c=>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = null;\r\n\t\t\t\t\tc.onRejected = null;\r\n\t\t\t\t\tc.promise = null;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: null,\r\n\t\t\t\tonRejected: null,\r\n\t\t\t\tpromise: null\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\t\tonRejected?:Promise.Reject<any>,\r\n\t\t\tpromise?:PromiseLike<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tvar c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled;\r\n\t\t\tc.onRejected = onRejected;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module Promise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending   = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected  = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = PromiseLike<TResult>|TResult|void;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(err?:any):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Then<T,TResult>\r\n\t{\r\n\t\t(\r\n\t\t\tonFulfilled:Fulfill<T,TResult>,\r\n\t\t\tonRejected?:Reject<TResult>):PromiseBase<TResult>\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new Promise<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any)=>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t */\r\n\texport function waitAll<T>(promises:PromiseLike<T>[]):PromiseBase<PromiseLike<T>[]>\r\n\texport function waitAll<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):PromiseBase<PromiseLike<T>[]>\r\n\texport function waitAll(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<PromiseLike<any>[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new Promise<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet len = promises.length;\r\n\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(promises);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolved = (i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(remaining)\r\n\t\t\t\t{\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onResolved(i), e=>onResolved(i));\r\n\t\t\t\telse onResolved(i);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @param promises An array of Promises.\r\n\t * @returns A new Promise.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tvar promises = first && (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v=>v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tvar len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any)=>void, v:any)=>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any)=> onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any)=> onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn target instanceof PromiseBase ? target : new PromiseWrapper(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T,TResult>(then:Then<T,TResult>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper({then: then});\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled:Promise.Fulfill<T,any>;\r\n\tonRejected:Promise.Reject<any>;\r\n\tpromise?:PromiseLike<any>;\r\n}\r\n\r\nexport default Promise;"]}