{"version":3,"sources":["System/Promises/LazyPromise.ts"],"names":[],"mappings":"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","file":"System/Promises/LazyPromise.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n */\r\n\r\nimport {Promise, PromiseBase} from \"./Promise\";\r\nimport {Closure} from \"../FunctionTypes\";\r\nimport {ICancellable} from \"../Threading/ICancellable\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * A promise that waits for the first then to trigger the resolver.\r\n */\r\nexport class LazyPromise<T> extends Promise<T>\r\n{\r\n\r\n\tconstructor(private _resolver:Promise.Executor<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_resolver) throw new ArgumentNullException(\"resolver\");\r\n\t\tthis._resolvedCalled = true;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolver = VOID0;\r\n\t}\r\n\r\n\tprivate _onThen():void\r\n\t{\r\n\t\tvar r = this._resolver;\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\tthis._resolver = VOID0;\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.resolveUsing(r);\r\n\t\t}\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T, TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis._onThen();\r\n\t\treturn super.thenSynchronous(onFulfilled, onRejected);\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis._onThen();\r\n\t\treturn super.thenThis(onFulfilled, onRejected);\r\n\t}\r\n\r\n\t// NOTE: For a LazyPromise we need to be careful not to trigger the resolve for delay.\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a minimum delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// If this is already guaranteed to resolve, the go ahead and pass to the super.\r\n\t\tif(!this._resolver || this.isSettled)\r\n\t\t\treturn super.delayFromNow(milliseconds);\r\n\r\n\t\t/*\r\n\t\t * If not triggered yet, then we create a special promise\r\n\t\t * that only requests the resolution from the parent promise\r\n\t\t * if a 'then' is called to ensure the lazy pattern.\r\n\t\t */\r\n\t\tvar pass:Closure;\r\n\t\tvar timedOut:boolean = false;\r\n\r\n\t\t// Setup the timer.\r\n\t\tvar timeout = defer(()=>\r\n\t\t\t{\r\n\t\t\t\ttimedOut = true;\r\n\t\t\t\t// If the promise was requested already go ahead and pass the request on to the parent.\r\n\t\t\t\tif(pass)\r\n\t\t\t\t\tpass();\r\n\t\t\t},\r\n\t\t\tmilliseconds);\r\n\r\n\t\treturn new LazyPromise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\t// A lazy promise only enters here if something called for a resolution.\r\n\t\t\t\tpass = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\te=> reject(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\ttimeout.dispose();\r\n\t\t\t\t\ttimeout = null;\r\n\t\t\t\t\tpass = null;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// If the timeout completed already go ahead and pass the request on to the parent.\r\n\t\t\t\tif(timedOut)\r\n\t\t\t\t\tpass();\r\n\t\t\t\t// Otherwise wait for the timeout to do it.\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// If this is already guaranteed to resolve, the go ahead and pass to the super.\r\n\t\tif(!this._resolver || this.isSettled)\r\n\t\t\treturn super.delayAfterResolve(milliseconds);\r\n\r\n\t\t/*\r\n\t\t * If not triggered yet, then we create a special promise\r\n\t\t * that only requests the resolution from the parent promise\r\n\t\t * if a 'then' is called to ensure the lazy pattern.\r\n\t\t */\r\n\t\tvar pass:Closure;\r\n\r\n\r\n\t\t// Setup the timer.\r\n\t\tvar timeout:ICancellable;\r\n\r\n\t\tvar finalize = ()=>\r\n\t\t{\r\n\t\t\tif(timeout)\r\n\t\t\t{\r\n\t\t\t\ttimeout.dispose();\r\n\t\t\t\ttimeout = null;\r\n\t\t\t}\r\n\t\t\t// If the promise was requested already go ahead and pass the request on to the parent.\r\n\t\t\tif(pass)\r\n\t\t\t\tpass();\r\n\r\n\t\t\tfinalize = null;\r\n\t\t};\r\n\r\n\t\t{\r\n\t\t\tlet detector = ()=>\r\n\t\t\t{\r\n\t\t\t\tif(finalize) // We may already be wrapped up so never mind!\r\n\t\t\t\t\ttimeout = defer(finalize, milliseconds);\r\n\t\t\t};\r\n\r\n\t\t\t// Calling super.thenThis does not trigger resolution.\r\n\t\t\t// This simply waits for resolution to happen.\r\n\t\t\t// Is effectively the timer by when resolution has occurred.\r\n\t\t\tsuper.thenThis(detector, detector);\r\n\t\t\tdetector = null;\r\n\t\t}\r\n\r\n\t\treturn new LazyPromise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\t// Because of the lazy nature of this promise, this could enter here at any time.\r\n\t\t\t\tif(this.isPending)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\tv=> defer(()=>resolve(v), milliseconds),\r\n\t\t\t\t\t\te=> defer(()=>reject(e), milliseconds)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tfinalize();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// We don't know when this resolved and could have happened anytime after calling this delay method.\r\n\t\t\t\t\tpass = ()=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\t\te=> reject(e)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Already finalized (aka resolved after a timeout)? Go now!\r\n\t\t\t\t\tif(!finalize)\r\n\t\t\t\t\t\tpass();\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t}\r\n}\r\n\r\nexport default LazyPromise;"]}