{"version":3,"sources":["System/Integer.ts"],"names":[],"mappings":"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","file":"System/Integer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"./Exceptions/ArgumentOutOfRangeException\";\r\nimport {IArray} from \"./Collections/Array/IArray\";\r\n\r\nexport function Integer(n:number):number\r\n{\r\n\treturn Math.floor(n);\r\n}\r\n\r\nexport module Integer\r\n{\r\n\texport const MAX_32_BIT:number = 2147483647;\r\n\r\n\tfunction r(maxExclusive:number):number\r\n\t{\r\n\t\treturn (Math.random()*maxExclusive) | 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a random integer from minInclusive to the maxExclusive.\r\n\t * Negative numbers are allowed.\r\n\t *\r\n\t * @param maxExclusive\r\n\t * @returns {number}\r\n\t */\r\n\texport function random(maxExclusive:number):number\r\n\t{\r\n\t\tassert(maxExclusive, 'maxExclusive');\r\n\t\treturn r(maxExclusive);\r\n\t}\r\n\r\n\texport module random\r\n\t{\r\n\t\texport function next(\r\n\t\t\tboundary:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(boundary, 'max');\r\n\t\t\tif(boundary===0) return 0;\r\n\t\t\tif(inclusive) boundary += boundary/Math.abs(boundary);\r\n\t\t\treturn r(boundary);\r\n\t\t}\r\n\r\n\t\texport function nextInRange(\r\n\t\t\tmin:number,\r\n\t\t\tmax:number,\r\n\t\t\tinclusive?:boolean):number\r\n\t\t{\r\n\t\t\tassert(min, 'min');\r\n\t\t\tassert(max, 'max');\r\n\t\t\tvar range = max - min;\r\n\t\t\tif(range===0) return min;\r\n\t\t\tif(inclusive) range += range/Math.abs(range);\r\n\t\t\treturn min + next(range);\r\n\t\t}\r\n\r\n\t\texport function select<T>(source:IArray<T>):T\r\n\t\t{\r\n\t\t\treturn source && source.length\r\n\t\t\t\t? source[r(source.length)]\r\n\t\t\t\t: void(0);\r\n\t\t}\r\n\r\n\t\texport module select\r\n\t\t{\r\n\t\t\texport function one<T>(source:IArray<T>):T\r\n\t\t\t{\r\n\t\t\t\treturn random.select(source);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport function as32Bit(n:number):number\r\n\t{\r\n\t\tvar result = n | 0;\r\n\t\treturn (n=== -1 || result!== -1) ? result : null;\r\n\t}\r\n\r\n\tconst NUMBER:string = \"number\";\r\n\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn typeof n===NUMBER && isFinite(n) && n===Math.floor(n);\r\n\t}\r\n\r\n\texport function is32Bit(n:number):boolean\r\n\t{\r\n\t\treturn n===(n | 0);\r\n\t}\r\n\r\n\r\n\texport function assert(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\texport function assertPositive(n:number, argumentName?:string):boolean\r\n\t{\r\n\t\tvar i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}