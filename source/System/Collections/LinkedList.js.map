{"version":3,"sources":["System/Collections/LinkedList.ts"],"names":[],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {ILinkedListNode, ILinkedNode, INodeWithValue} from \"./ILinkedListNode\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {ILinkedList} from \"./ILinkedList\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>,\r\n\t\tpublic next?:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:InternalNode<T>, list:LinkedList<T>):ILinkedListNode<T>\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nfunction detachExternal(node:InternalNode<any>):void\r\n{\r\n\tif(node)\r\n\t{\r\n\t\tvar e:any = node.external;\r\n\t\tif(e)\r\n\t\t{\r\n\t\t\te._list = VOID0;\r\n\t\t\te._nodeInternal = VOID0;\r\n\t\t}\r\n\t\tnode.external = VOID0;\r\n\t}\r\n}\r\n\r\nexport class LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\t_._importEntries(source);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar l = this._listInternal;\r\n\t\tthis._listInternal = null;\r\n\t\tl.dispose();\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li ? li.unsafeCount : 0;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _            = this,\r\n\t\t    equals       = _._equalityComparer,\r\n\t\t    list         = _._listInternal,\r\n\t\t    removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(equals(entry, node.value) && _._removeNodeInternal(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t});\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar list = this._listInternal;\r\n\t\tlist.forEach(node=>detachExternal(node));\r\n\t\treturn list.clear();\r\n\t}\r\n\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._listInternal.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    next   = _._listInternal && _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    prev   = _._listInternal && _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.first, this);\r\n\t}\r\n\r\n\tget firstValue():T\r\n\t{\r\n\t\tvar li = this._listInternal, node = li && li.first;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn ensureExternal(li.last, this);\r\n\t}\r\n\r\n\tget lastValue():T\r\n\t{\r\n\t\tvar li = this._listInternal, node = li && li.last;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\tvar li = this._listInternal, node = li && li.getNodeAt(index);\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\tvar li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis.assertModifiable();\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tprivate _removeNodeInternal(node:InternalNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(node && _._listInternal.removeNode(node))\r\n\t\t{\r\n\t\t\tdetachExternal(node);\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.last);\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.getNodeAt(index));\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(getInternal(node, _));\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>, IDisposable\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tprivate throwIfDetached():void\r\n\t{\r\n\t\tif(!this._list)\r\n\t\t\tthrow new Error(\"This node has been detached from its list and is no longer valid.\");\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\r\n\tremove():void\r\n\t{\r\n\t\tvar list = this._list;\r\n\t\tif(list) list.removeNode(this);\r\n\t\tthis._list = VOID0;\r\n\t\tthis._nodeInternal = VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.remove();\r\n\t}\r\n\r\n}\r\n\r\nexport default LinkedList;\r\n"]}