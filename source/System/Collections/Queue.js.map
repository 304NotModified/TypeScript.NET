{"version":3,"sources":["System/Collections/Queue.ts"],"names":[],"mappings":"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","file":"System/Collections/Queue.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport * as AU from \"./Array/Utility\";\r\nimport {Type} from \"../Types\";\r\nimport {Integer} from \"../Integer\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\nimport {NotImplementedException} from \"../Exceptions/NotImplementedException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst MINIMUM_GROW:number = 4;\r\nconst SHRINK_THRESHOLD:number = 32; // Unused?\r\n// var GROW_FACTOR: number = 200;  // double each time\r\nconst GROW_FACTOR_HALF:number = 100;\r\nconst DEFAULT_CAPACITY:number = MINIMUM_GROW;\r\nvar emptyArray:any[] = [];\r\n\r\nexport class Queue<T>\r\nextends CollectionBase<T>\r\n{\r\n\r\n\tprivate _array:T[];\r\n\tprivate _head:number;       // First valid element in the queue\r\n\tprivate _tail:number;       // Last valid element in the queue\r\n\tprivate _size:number;       // Number of elements.\r\n\tprivate _capacity:number;   // Maps to _array.length;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T> | number,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\tif(!source)\r\n\t\t\t_._array = emptyArray;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(Type.isNumber(source))\r\n\t\t\t{\r\n\t\t\t\tvar capacity = <number>source;\r\n\t\t\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\t\t\t_._array = capacity\r\n\t\t\t\t\t? AU.initialize<T>(capacity)\r\n\t\t\t\t\t: emptyArray;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvar se = <IEnumerableOrArray<T>> source;\r\n\t\t\t\t_._array = AU.initialize<T>(\r\n\t\t\t\t\tType.isArrayLike(se)\r\n\t\t\t\t\t\t? se.length\r\n\t\t\t\t\t\t: DEFAULT_CAPACITY\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_._importEntries(se);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._capacity = _._array.length;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tprotected _addInternal(item:T):boolean\r\n\t{\r\n\t\tvar _ = this, array = _._array, size = _._size, len = _._capacity;\r\n\t\tif(size==len)\r\n\t\t{\r\n\t\t\tvar newCapacity = len*GROW_FACTOR_HALF;\r\n\t\t\tif(newCapacity<len + MINIMUM_GROW)\r\n\t\t\t\tnewCapacity = len + MINIMUM_GROW;\r\n\r\n\t\t\t_.setCapacity(newCapacity);\r\n\t\t\tarray = _._array;\r\n\t\t\tlen = _._capacity;\r\n\t\t}\r\n\r\n\t\tvar tail = _._tail;\r\n\t\tarray[tail] = item;\r\n\t\t_._tail = (tail + 1)%len;\r\n\t\t_._size = size + 1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(item:T, max?:number):number\r\n\t{\r\n\t\tthrow new NotImplementedException(\r\n\t\t\t\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\r\n\t\t\t\" since it would require destroying the underlying array to remove the item.\"\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\r\n\t\tif(head<tail)\r\n\t\t\tAU.clear(array, head, tail);\r\n\t\telse\r\n\t\t{\r\n\t\t\tAU.clear(array, head, array.length - head);\r\n\t\t\tAU.clear(array, 0, tail);\r\n\t\t}\r\n\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\t_.trimExcess();\r\n\r\n\t\treturn size;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar _ = this;\r\n\t\tif(_._array!=emptyArray)\r\n\t\t{\r\n\t\t\t_._array.length = _._capacity = 0;\r\n\t\t\t_._array = emptyArray;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Dequeues entries into an array.\r\n\t */\r\n\tdump(max:number = Infinity):T[]\r\n\t{\r\n\t\tvar _ = this, result:T[] = [];\r\n\r\n\t\tif(isFinite(max))\r\n\t\t{\r\n\t\t\tInteger.assertZeroOrGreater(max);\r\n\t\t\tif(max!==0)\r\n\t\t\t{\r\n\t\t\t\twhile(max-- && _._size)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\twhile(_._size)\r\n\t\t\t{\r\n\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.trimExcess();\r\n\t\t_._signalModification();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):number\r\n\t{\r\n\t\treturn super.forEach(action, true);\r\n\t}\r\n\r\n\tsetCapacity(capacity:number):void\r\n\t{\r\n\r\n\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\tvar _ = this, array = _._array, len = _._capacity;\r\n\r\n\t\tif(capacity==len)\r\n\t\t\treturn;\r\n\r\n\t\tvar head = _._head, tail = _._tail, size = _._size;\r\n\r\n\t\t// Special case where we can simply extend the length of the array. (JavaScript only)\r\n\t\tif(array!=emptyArray && capacity>len && head<tail)\r\n\t\t{\r\n\t\t\tarray.length = _._capacity = capacity;\r\n\t\t\t_._version++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We create a new array because modifying an existing one could be slow.\r\n\t\tvar newArray:T[] = AU.initialize<T>(capacity);\r\n\t\tif(size>0)\r\n\t\t{\r\n\t\t\tif(head<tail)\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, size);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, len - head);\r\n\t\t\t\tAU.copyTo(array, newArray, 0, len - head, tail);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._array = newArray;\r\n\t\t_._capacity = capacity;\r\n\t\t_._head = 0;\r\n\t\t_._tail = (size==capacity) ? 0 : size;\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tenqueue(item:T):void\r\n\t{\r\n\t\tthis.add(item);\r\n\t}\r\n\r\n\r\n\tprotected _dequeueInternal(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._size==0)\r\n\t\t{\r\n\t\t\tif(throwIfEmpty)\r\n\t\t\t\tthrow new InvalidOperationException(\"Cannot dequeue an empty queue.\");\r\n\t\t\treturn void 0;\r\n\t\t}\r\n\r\n\t\tvar array = _._array, head = _._head;\r\n\r\n\t\tvar removed = _._array[head];\r\n\t\tarray[head] = null;\r\n\t\t_._head = (head + 1)%_._capacity;\r\n\r\n\t\t_._size--;\r\n\r\n\t\t_._incrementModified();\r\n\r\n\t\treturn removed;\r\n\t}\r\n\r\n\tdequeue(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\t// A single dequeue shouldn't need update recursion tracking...\r\n\t\tvar modified = !!_._size;\r\n\t\tvar v = this._dequeueInternal(throwIfEmpty);\r\n\r\n\t\t// This may preemptively trigger the _onModified.\r\n\t\tif(modified && _._size<_._capacity/2)\r\n\t\t\t_.trimExcess(SHRINK_THRESHOLD);\r\n\r\n\t\t_._signalModification();\r\n\t\treturn v;\r\n\t}\r\n\r\n\r\n\ttryDequeue(out:(value:T)=>void):boolean\r\n\t{\r\n\t\tif(!this._size) return false;\r\n\t\tvar d = this.dequeue();\r\n\t\tif(out) out(d);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate _getElement(index:number):T\r\n\t{\r\n\t\tassertIntegerZeroOrGreater(index, \"index\");\r\n\r\n\t\tvar _ = this;\r\n\t\treturn _._array[(_._head + index)%_._capacity];\r\n\t}\r\n\r\n\tpeek():T\r\n\t{\r\n\t\tif(this._size==0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot call peek on an empty queue.\");\r\n\r\n\t\treturn this._array[this._head];\r\n\t}\r\n\r\n\ttrimExcess(threshold?:number):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar size = _._size;\r\n\t\tif(size<Math.floor(_._capacity*0.9) && (isNaN(threshold) || threshold<size))\r\n\t\t\t_.setCapacity(size);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar index:number;\r\n\t\tvar version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index==_._size)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(_._getElement(index++));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction assertZeroOrGreater(value:number, property:string):void\r\n{\r\n\tif(value<0)\r\n\t\tthrow new ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\r\n\r\n}\r\n\r\nfunction assertIntegerZeroOrGreater(value:number, property:string):void\r\n{\r\n\tInteger.assert(value, property);\r\n\tassertZeroOrGreater(value, property);\r\n}\r\n\r\nexport default Queue;\r\n"]}