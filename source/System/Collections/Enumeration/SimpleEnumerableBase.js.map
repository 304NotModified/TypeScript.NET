{"version":3,"sources":["System/Collections/Enumeration/SimpleEnumerableBase.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IASH,+BAA6B,kBAAkB,CAAC,CAAA;IAGhD,IAAM,KAAK,GAAO,KAAK,CAAC,CAAC;IAEzB;QAMC;YAEC,IAAI,CAAC,KAAK,EAAE,CAAC;QACd,CAAC;QAED,sBAAI,yCAAO;iBAAX;gBAEC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACtB,CAAC;;;WAAA;QAKS,6CAAc,GAAxB;YACC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;YACpB,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,KAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;QAED,wCAAS,GAAT;YAEC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAED,mCAAI,GAAJ;YAEC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE;kBACnB,IAAI,+BAAc,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,CAAC,MAAM,CAAC;kBAC7C,+BAAc,CAAC,IAAI,CAAC;QACxB,CAAC;QAID,wCAAQ,GAAR,UAAS,KAAU;YAElB,IACA,CAAC;gBACA,MAAM,CAAC,KAAK,KAAG,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE;sBACvC,IAAI,+BAAc,CAAC,KAAK,EAAC,KAAK,EAAC,IAAI,CAAC;sBACpC,+BAAc,CAAC,IAAI,CAAC;YACxB,CAAC;oBAED,CAAC;gBACA,IAAI,CAAC,OAAO,EAAE,CAAC;YAChB,CAAC;QACF,CAAC;QAED,oCAAK,GAAL;YAEC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QAED,sCAAO,GAAP;YAEC,IAAI,CAAC,KAAK,EAAE,CAAC;QACd,CAAC;QAES,2CAAY,GAAtB;YACC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC;QAED,sBAAI,2CAAS;iBAAb;gBAEC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YAC5B,CAAC;;;WAAA;QACF,2BAAC;IAAD,CAzEA,AAyEC,IAAA;IAzEqB,4BAAoB,uBAyEzC,CAAA;IAED;sBAAe,oBAAoB,CAAC","file":"System/Collections/Enumeration/SimpleEnumerableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport abstract class SimpleEnumerableBase<T> implements IEnumerator<T>\r\n{\r\n\r\n\tprotected _current:T;\r\n\tprotected _index:number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tget current():T\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tprotected abstract canMoveNext():boolean;\r\n\tabstract moveNext():boolean;\r\n\r\n\tprotected incrementIndex():number {\r\n\t\tlet i = this._index;\r\n\t\tthis._index = i = i===VOID0 ? 0 : (i+1);\r\n\t\treturn i;\r\n\t}\r\n\r\n\tnextValue():T\r\n\t{\r\n\t\tthis.moveNext();\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this._current,this._index)\r\n\t\t\t: IteratorResult.Done;\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value!==VOID0 && this.canMoveNext()\r\n\t\t\t\t? new IteratorResult(value,VOID0,true)\r\n\t\t\t\t: IteratorResult.Done;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean {\r\n\t\treturn this.canMoveNext();\r\n\t}\r\n\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default SimpleEnumerableBase;\r\n"]}