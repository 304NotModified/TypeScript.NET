{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAIH,qCAAmC,wBAAwB,CAAC,CAAA;IAC5D,wBAA4B,kBAAkB,CAAC,CAAA;IAC/C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAElC,IAAM,KAAK,GAAO,KAAK,CAAC,CAAC;IAQzB;QAA2C,sCAAuB;QAMjE,4BAAoB,SAAsB,EAAU,UAAmB;YAEtE,iBAAO,CAAC;YAFW,cAAS,GAAT,SAAS,CAAa;YAAU,eAAU,GAAV,UAAU,CAAS;QAGvE,CAAC;QAES,wCAAW,GAArB;YAEC,MAAM,CAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC;QAC7B,CAAC;QAED,qCAAQ,GAAR,UAAS,KAAU;YAElB,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;YACpB,EAAE,CAAA,CAAC,CAAC,CAAC,CACL,CAAC;gBACA,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;gBACpD,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC;gBACrB,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC;oBAAC,CAAC,CAAC,OAAO,EAAE,CAAC;gBACvB,IAAI;oBAAC,MAAM,CAAC,IAAI,CAAC;YAClB,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED,oCAAO,GAAP;YAEC,gBAAK,CAAC,OAAO,WAAE,CAAC;YAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACxB,CAAC;QAES,yCAAY,GAAtB;YAEC,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,gBAAK,CAAC,YAAY,WAAE,CAAC;QAChD,CAAC;QACF,yBAAC;IAAD,CAxCA,AAwCC,CAxC0C,2CAAoB,GAwC9D;IAxCY,0BAAkB,qBAwC9B,CAAA;IAED;sBAAe,kBAAkB,CAAC","file":"System/Collections/Enumeration/IteratorEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(private _iterator:IIterator<T>, private _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tvar r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._iterator = VOID0;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}