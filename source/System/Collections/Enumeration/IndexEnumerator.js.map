{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,+BAA6B,kBAAkB,CAAC,CAAA;IAChD,wBAA4B,kBAAkB,CAAC,CAAA;IAC/C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAElC;QAAwC,mCAAiB;QAGxD,yBACC,aAAuG;YAGvG,IAAI,MAA0F,CAAC;YAC/F,kBACC;gBAEC,MAAM,GAAG,aAAa,EAAE,CAAC;gBACzB,EAAE,CAAA,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAC3B,CAAC;oBACA,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;oBACxB,EAAE,CAAA,CAAC,GAAG,GAAC,CAAC,CAAC;wBACR,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAEnD,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBACjB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;oBAE9C,EAAE,CAAA,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,KAAG,CAAC,CAAC;wBACzB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;oBAC5D,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;oBAC7B,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC;wBACX,OAAO,GAAG,CAAC,CAAC;oBACb,IAAI,CAAC,EAAE,CAAA,CAAC,OAAO,IAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;wBACpC,MAAM,IAAI,KAAK,CAAC,yCAAyC,GAAG,OAAO,GAAG,gBAAgB,CAAC,CAAC;oBACzF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;oBAEzB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;oBACvB,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;wBACR,IAAI,GAAG,CAAC,CAAC;oBACV,IAAI,CAAC,EAAE,CAAA,CAAC,IAAI,IAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBAC9B,MAAM,IAAI,KAAK,CAAC,sCAAsC,GAAG,IAAI,GAAG,gBAAgB,CAAC,CAAC;oBACnF,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACpB,CAAC;YACF,CAAC,EAED,UAAC,OAAO;gBAEP,IAAI,GAAG,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;gBACxD,EAAE,CAAA,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;oBACrB,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBAC7B,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC7B,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC;gBAC9B,MAAM,CAAC,CAAC,OAAO,GAAC,GAAG,IAAI,OAAO,IAAE,CAAC,CAAC;sBAC/B,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;sBAC3C,OAAO,CAAC,UAAU,EAAE,CAAC;YACzB,CAAC,EAED;gBAEC,EAAE,CAAA,CAAC,MAAM,CAAC,CACV,CAAC;oBACA,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;gBACtB,CAAC;YACF,CAAC,CACD,CAAC;YACF,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACzB,CAAC;QACF,sBAAC;IAAD,CA7DA,AA6DC,CA7DuC,+BAAc,GA6DrD;IA7DY,uBAAe,kBA6D3B,CAAA;IAED;sBAAe,eAAe,CAAC","file":"System/Collections/Enumeration/IndexEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {EnumeratorBase} from \"./EnumeratorBase\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nexport class IndexEnumerator<T> extends EnumeratorBase<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsourceFactory:() => { source: { [index: number]: T }; pointer?: number; length: number; step?: number })\r\n\t{\r\n\r\n\t\tvar source:{ source: { [index: number]: T }; pointer?: number; length: number; step?: number };\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = sourceFactory();\r\n\t\t\t\tif(source && source.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar len = source.length;\r\n\t\t\t\t\tif(len<0) // Null is allowed but will exit immediately.\r\n\t\t\t\t\t\tthrow new Error(\"length must be zero or greater\");\r\n\r\n\t\t\t\t\tif(!isFinite(len))\r\n\t\t\t\t\t\tthrow new Error(\"length must finite number\");\r\n\r\n\t\t\t\t\tif(len && source.step===0)\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (0).\");\r\n\t\t\t\t\tvar pointer = source.pointer;\r\n\t\t\t\t\tif(!pointer)\r\n\t\t\t\t\t\tpointer = 0;\r\n\t\t\t\t\telse if(pointer!=Math.floor(pointer))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n\t\t\t\t\tsource.pointer = pointer;\r\n\r\n\t\t\t\t\tvar step = source.step;\r\n\t\t\t\t\tif(!step)\r\n\t\t\t\t\t\tstep = 1;\r\n\t\t\t\t\telse if(step!=Math.floor(step))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n\t\t\t\t\tsource.step = step;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tvar len = (source && source.source) ? source.length : 0;\r\n\t\t\t\tif(!len || isNaN(len))\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\tvar current = source.pointer;\r\n\t\t\t\tsource.pointer += source.step;\r\n\t\t\t\treturn (current<len && current>=0)\r\n\t\t\t\t\t? yielder.yieldReturn(source.source[current])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(source)\r\n\t\t\t\t{\r\n\t\t\t\t\tsource.source = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis._isEndless = false;\r\n\t}\r\n}\r\n\r\nexport default IndexEnumerator;"]}