{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,wBAAuB,eAAe,CAAC,CAAA;IAGvC,+BAA6B,kBAAkB,CAAC,CAAA;IAChD,wBAA4B,kBAAkB,CAAC,CAAA;IAC/C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAElC,IAAM,KAAK,GAAO,KAAK,CAAC,CAAC;IAEzB;QACQ,uCAA8B;QADtC;YACQ,8BAA8B;YAG7B,WAAM,GAAU,CAAC,CAAC;YAClB,SAAI,GAAgB,EAAE,CAAC;QAwHhC,CAAC;QAtHU,uCAAS,GAAnB,UAAoB,GAAU;YAE7B,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;kBAC1B,IAAI,GAAG;gBACT,GAAG,EAAE,GAAG;gBACR,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;aACzB,CAAA;QACF,CAAC;QAED,yCAAW,GAAX,UAAY,GAAU;YAErB,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,IAAI,GAAG,KAAG,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAC3D,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;QAED,2CAAa,GAAb,UAAc,KAAY;YAEzB,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAC9B,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,GAA8C,kBAAQ,CAAC;YACjF,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CACnB,CAAC;gBACA,EAAE,CAAA,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;oBACpD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAGD,sCAAQ,GAAR,UAAS,GAAU;YAElB,EAAE,CAAA,CAAC,GAAG,KAAG,IAAI,IAAI,GAAG,KAAG,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAC3D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;QAES,+CAAiB,GAA3B,UAA4B,GAAU,EAAE,KAAY;YAEnD,IAAI,CAAC,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,EAAE,CAAA,CAAC,GAAG,KAAG,KAAK,CAAC,CACf,CAAC;gBAEA,EAAE,CAAA,CAAC,KAAK,KAAG,KAAK,CAAC,CACjB,CAAC;oBACA,EAAE,CAAA,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAClB,CAAC;wBACA,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;wBAChB,CAAC,CAAC,MAAM,EAAE,CAAC;oBACZ,CAAC;gBACF,CAAC;gBACD,IAAI,CACJ,CAAC;oBACA,EAAE,CAAA,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;wBAC3B,CAAC,CAAC,MAAM,EAAE,CAAC;oBACZ,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAClB,CAAC;gBAED,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAGD,uCAAS,GAAT,UAAU,MAAmB;YAE5B,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,MAAM,CAAC,CAAC,CAAC,YAAY,CACpB;gBAEC,IAAI,OAAO,GAAW,KAAK,CAAC;gBAC5B,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CACtB,CAAC;oBACA,EAAE,CAAA,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC7D,OAAO,GAAG,IAAI,CAAC;gBACjB,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC;YAChB,CAAC,CACD,CAAC;QACH,CAAC;QAED,mCAAK,GAAL,UAAM,QAA8C;YAEnD,IAAI,CAAC,GAAG,IAAI,EAAE,MAAM,GAAgB,EAAE,CAAC;YACvC,EAAE,CAAA,CAAC,CAAC,CAAC,MAAM,CAAC;gBAAC,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,CACnC,CAAC;oBACA,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAC9B,CAAC;wBACA,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACxB,EAAE,CAAA,CAAC,QAAQ,CAAC;4BACX,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;wBAC9B,EAAE,CAAA,CAAC,KAAK,KAAG,KAAK,CAAC;4BAChB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBACtB,CAAC;gBACF,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAES,qCAAO,GAAjB;YAEC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QAES,uCAAS,GAAnB;YAEC,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC;YAC3B,IAAI,MAAM,GAAS,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAC9C,CAAC;gBACA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAES,sCAAQ,GAAlB;YAEC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAGF,0BAAC;IAAD,CA7HA,AA6HC,CA5HO,+BAAc,GA4HrB;IA7HY,2BAAmB,sBA6H/B,CAAA;IAED;sBAAe,mBAAmB,CAAC","file":"System/Collections/Dictionaries/StringKeyDictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {IStringKeyDictionary, IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {DictionaryBase} from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport class StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\r\n\tprivate _count:number = 0;\r\n\tprivate _map:IMap<TValue> = {};\r\n\r\n\tprotected _getEntry(key:string):IKeyValuePair<string,TValue>\r\n\t{\r\n\t\treturn !this.containsKey(key)\r\n\t\t\t? null : {\r\n\t\t\tkey: key,\r\n\t\t\tvalue: this.getValue(key)\r\n\t\t}\r\n\t}\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this._count) return false;\r\n\t\treturn (key) in (this._map);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tif(!this._count) return false;\r\n\t\tvar map = this._map, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && equal(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this._count) return VOID0;\r\n\t\treturn this._map[key];\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:string, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key) in (map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t_._count--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!map.hasOwnProperty(key))\r\n\t\t\t\t\t_._count++;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tvar _ = this, result:IMap<TValue> = {};\r\n\t\tif(_._count) for(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tvar value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\treturn Object.keys(this._map);\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tif(!this._count) return [];\r\n\t\tvar result:any[] = Object.keys(this._map);\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tresult[i] = this._map[result[i]];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default StringKeyDictionary;\r\n"]}