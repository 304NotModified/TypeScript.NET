{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.ts"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {Functions} from \"../../Functions\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {LinkedNodeList} from \"../LinkedNodeList\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {ILinkedNode} from \"../ILinkedListNode\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport DictionaryBase from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n\r\nexport interface IHashEntry<TKey, TValue>\r\nextends ILinkedNode<IHashEntry<TKey, TValue>>, IKeyValuePair<TKey,TValue>\r\n{\r\n\r\n}\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements IHashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key?:TKey,\r\n\t\tpublic value?:TValue,\r\n\t\tpublic previous?:IHashEntry<TKey, TValue>,\r\n\t\tpublic next?:IHashEntry<TKey, TValue>)\r\n\t{ }\r\n}\r\n\r\n\r\nvar linkedListPool:ObjectPool<LinkedNodeList<any>>;\r\nfunction linkedNodeList():LinkedNodeList<any>;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):void;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):LinkedNodeList<any>\r\n{\r\n\tif(!linkedListPool)\r\n\t\tlinkedListPool\r\n\t\t\t= new ObjectPool<LinkedNodeList<any>>(20, ()=>new LinkedNodeList<any>(), r=>r.clear());\r\n\tif(!recycle) return linkedListPool.take();\r\n\tlinkedListPool.add(recycle);\r\n}\r\n\r\n// static utility methods\r\nfunction callHasOwnProperty(target:any, key:string)\r\n{\r\n\treturn Object.prototype.hasOwnProperty.call(target, key);\r\n}\r\n\r\nconst NULL = \"null\", GET_HASH_CODE = \"getHashCode\";\r\nfunction getHashString(obj:any):string\r\n{\r\n\tif(obj===null) return NULL;\r\n\tif(obj===VOID0) return Type.UNDEFINED;\r\n\r\n\t// See IHashable.\r\n\tif(Type.hasMemberOfType(obj, GET_HASH_CODE, Type.FUNCTION))\r\n\t{\r\n\t\treturn obj.getHashCode();\r\n\t}\r\n\r\n\treturn (typeof obj.toString==Type.FUNCTION)\r\n\t\t? obj.toString()\r\n\t\t: Object.prototype.toString.call(obj);\r\n}\r\n\r\n\r\nexport class Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\t// Retains the order...\r\n\tprivate _entries:LinkedNodeList<IHashEntry<TKey, TValue>>;\r\n\tprivate _buckets:IMap<LinkedNodeList<IHashEntry<TKey, IHashEntry<TKey, TValue>>>>;\r\n\r\n\tconstructor(\r\n\t\tprivate _keyComparer:Selector<TKey,any> = Functions.Identity)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._entries = linkedNodeList();\r\n\t\tthis._buckets = {};\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._entries.unsafeCount;\r\n\t}\r\n\r\n\r\n\tprivate _getBucket(\r\n\t\thash:string,\r\n\t\tcreateIfMissing?:boolean):LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>\r\n\t{\r\n\t\tif(hash===null || hash===VOID0 || !createIfMissing && !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar buckets = this._buckets;\r\n\t\tvar bucket = callHasOwnProperty(buckets, hash) ? buckets[hash] : VOID0;\r\n\r\n\t\tif(createIfMissing && !bucket)\r\n\t\t\tbuckets[hash]\r\n\t\t\t\t= bucket\r\n\t\t\t\t= linkedNodeList();\r\n\r\n\t\treturn bucket;\r\n\t}\r\n\r\n\tprivate _getBucketEntry(\r\n\t\tkey:TKey,\r\n\t\thash?:string,\r\n\t\tbucket?:LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>):IHashEntry<TKey,IHashEntry<TKey,TValue>>\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tvar _          = this,\r\n\t\t    comparer   = _._keyComparer,\r\n\t\t    compareKey = comparer(key);\r\n\r\n\t\tif(!bucket) bucket = _._getBucket(hash || getHashString(compareKey));\r\n\r\n\t\treturn bucket && bucket\r\n\t\t\t\t.find(e=>comparer(e.key)===compareKey);\r\n\t}\r\n\r\n\tprotected _getEntry(key:TKey):IHashEntry<TKey,TValue>\r\n\t{\r\n\t\tvar e = this._getBucketEntry(key);\r\n\t\treturn e && e.value;\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue\r\n\t{\r\n\t\tvar e = this._getEntry(key);\r\n\t\treturn e ? e.value : VOID0;\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\tvar _           = this,\r\n\t\t    buckets     = _._buckets,\r\n\t\t    entries     = _._entries,\r\n\t\t    comparer    = _._keyComparer,\r\n\t\t    compareKey  = comparer(key),\r\n\t\t    hash        = getHashString(compareKey),\r\n\t\t    bucket      = _._getBucket(hash),\r\n\t\t    bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\r\n\r\n\t\t// Entry exits? Delete or update\r\n\t\tif(bucketEntry)\r\n\t\t{\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tlet x = bucket.removeNode(bucketEntry),\r\n\t\t\t\t    y = entries.removeNode(bucketEntry.value);\r\n\r\n\t\t\t\tif(x && !bucket.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t\t\tbucket = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(x!==y) throw \"Entries and buckets are out of sync.\";\r\n\r\n\t\t\t\tif(x) return true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We don't expose the internal hash entries so replacing the value is ok.\r\n\t\t\t\tvar old = bucketEntry.value.value;\r\n\t\t\t\tbucketEntry.value.value = value;\r\n\t\t\t\treturn !areEqual(value, old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse if(value!==VOID0)\r\n\t\t{\r\n\t\t\tif(!bucket) bucket = _._getBucket(hash, true);\r\n\t\t\tlet entry = new HashEntry(key, value);\r\n\t\t\tentries.addNode(entry);\r\n\t\t\tbucket.addNode(new HashEntry(key, entry));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar _ = this, buckets = _._buckets;\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t{\r\n\t\t\t\tlet bucket = buckets[key];\r\n\t\t\t\tdelete buckets[key];\r\n\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _._entries.clear();\r\n\t}\r\n\r\n\t/*\r\n\t * Note: super.getEnumerator() works perfectly well,\r\n\t * but enumerating the internal linked node list is much more efficient.\r\n\t */\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tvar _ = this, ver:number, currentEntry:IHashEntry<TKey, TValue>;\r\n\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tver = _._version;\r\n\t\t\t\tcurrentEntry = _._entries.first;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.assertVersion(ver);\r\n\t\t\t\t\tvar result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tvar _ = this, result:TKey[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tvar _ = this, result:TValue[] = [];\r\n\t\tvar e = _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n\r\nexport default Dictionary;"]}