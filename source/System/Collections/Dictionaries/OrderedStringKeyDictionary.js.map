{"version":3,"sources":["System/Collections/Dictionaries/OrderedStringKeyDictionary.ts"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/OrderedStringKeyDictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport * as ArrayUtility from \"../Array/Utility\";\r\nimport {StringKeyDictionary} from \"./StringKeyDictionary\";\r\nimport {ArgumentOutOfRangeException} from \"../../Exceptions/ArgumentOutOfRangeException\";\r\nimport {IOrderedDictionary} from \"./IDictionary\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport class OrderedStringKeyDictionary<TValue>\r\nextends StringKeyDictionary<TValue> implements IOrderedDictionary<string, TValue>\r\n{\r\n\r\n\t// noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _order:string[] = []; // Maintains indexes.\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tindexOfKey(key:string):number\r\n\t{\r\n\t\tvar o = this._order;\r\n\t\treturn o.length ? o.indexOf(key, 0) : -1;\r\n\t}\r\n\r\n\tgetValueByIndex(index:number):TValue\r\n\t{\r\n\t\tvar o = this._order;\r\n\t\treturn index<o.length ? this.getValue(o[index]) : VOID0;\r\n\t}\r\n\r\n\t// adding keepIndex allows for clearing a value while still retaining it's index.\r\n\tsetValue(key:string, value:TValue, keepIndex?:boolean):boolean\r\n\t{\r\n\t\t// TODO: This may be inefficient and could be improved.\r\n\t\tvar _ = this, exists = _.indexOfKey(key)!= -1;\r\n\t\tif(!exists && (value!==VOID0 || keepIndex))\r\n\t\t\t_._order.push(key);\r\n\t\telse if(exists && value===VOID0 && !keepIndex)\r\n\t\t\tArrayUtility.remove(_._order, key);\r\n\r\n\t\treturn super.setValue(key, value);\r\n\t}\r\n\r\n\tsetByIndex(index:number, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, order = _._order;\r\n\t\tif(index<0)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is less than zero.');\r\n\t\tif(index>=order.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('index', index, 'Is greater than the count.');\r\n\t\treturn _.setValue(order[index], value);\r\n\t}\r\n\r\n\t// importValues([x,y,z]);\r\n\timportValues(values:TValue[]):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let i = 0; i<values.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_.setByIndex(i, values[i]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t// setValues(x,y,z);\r\n\tsetValues(...values:TValue[]):boolean\r\n\t{\r\n\t\treturn this.importValues(values);\r\n\t}\r\n\r\n\tremoveByIndex(index:number):boolean\r\n\t{\r\n\t\treturn this.setByIndex(index, VOID0);\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\tvar _ = this, o = _._order;\r\n\t\treturn o.length && o.filter(key=> _.containsKey(key)) || [];\r\n\t}\r\n\r\n}\r\n\r\nexport default OrderedStringKeyDictionary;\r\n"]}