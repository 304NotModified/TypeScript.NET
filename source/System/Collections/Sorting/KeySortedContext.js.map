{"version":3,"sources":["System/Collections/Sorting/KeySortedContext.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,IAAY,MAAM,WAAM,eAAe,CAAC,CAAA;IACxC,4BAA0B,eAAe,CAAC,CAAA;IAC1C,0BAAwB,iBAAiB,CAAC,CAAA;IAK1C,wBAA4B,kBAAkB,CAAC,CAAA;IAC/C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAElC;QAAkE,oCAAc;QAE/E,0BACC,IAAiB,EACP,YAA6B,EACvC,KAA6B,EAC7B,QAAuC;YADvC,qBAA6B,GAA7B,SAA6B;YAC7B,wBAAuC,GAAvC,WAAyB,MAAM,CAAC,OAAO;YAEvC,kBAAM,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YAJnB,iBAAY,GAAZ,YAAY,CAAiB;QAKxC,CAAC;QAED,kCAAO,GAAP,UAAQ,CAAG,EAAE,CAAG;YAEf,IAAI,CAAC,GAAG,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,YAAY,CAAC;YAClC,EAAE,CAAA,CAAC,CAAC,EAAE,IAAI,EAAE,IAAE,qBAAS,CAAC,QAAQ,CAAC;gBAAC,MAAM,CAAC,gBAAK,CAAC,OAAO,YAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAE7D,IAAI,CAAC,GAAG,MAAM,CAAC,OAAO,CAAM,EAAE,CAAC,CAAC,CAAC,EAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,EAAE,CAAA,CAAC,CAAC,IAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,CAAC,CAAC,MAAM,GAAC,CAAC,CAAC;QACnB,CAAC;QACF,uBAAC;IAAD,CApBA,AAoBC,CApBiE,yBAAW,GAoB5E;IApBY,wBAAgB,mBAoB5B,CAAA;IAED;sBAAe,gBAAgB,CAAC","file":"System/Collections/Sorting/KeySortedContext.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport * as Values from \"../../Compare\";\r\nimport {SortContext} from \"./SortContext\";\r\nimport {Functions} from \"../../Functions\";\r\nimport {Comparison, Selector} from \"../../FunctionTypes\";\r\nimport {Comparable} from \"../../IComparable\";\r\nimport {IComparer} from \"../../IComparer\";\r\nimport {Order} from \"./Order\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nexport class KeySortedContext<T, TKey extends Comparable> extends SortContext<T>\r\n{\r\n\tconstructor(\r\n\t\tnext:IComparer<T>,\r\n\t\tprotected _keySelector:Selector<T,TKey>,\r\n\t\torder:Order = Order.Ascending,\r\n\t\tcomparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(next, comparer, order);\r\n\t}\r\n\r\n\tcompare(a:T, b:T):number\r\n\t{\r\n\t\tvar _ = this, ks = _._keySelector;\r\n\t\tif(!ks || ks==Functions.Identity) return super.compare(a, b);\r\n\t\t// We force <any> here since it can be a Primitive or IComparable<any>\r\n\t\tvar d = Values.compare(<any>ks(a), <any>ks(b));\r\n\t\tif(d==0 && _._next) return _._next.compare(a, b);\r\n\t\treturn _._order*d;\r\n\t}\r\n}\r\n\r\nexport default KeySortedContext;"]}