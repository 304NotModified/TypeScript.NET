{"version":3,"sources":["System/Threading/Tasks/Task.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,gCAA8B,mBAAmB,CAAC,CAAA;IAClD,sCAAoC,wCAAwC,CAAC,CAAA;IAE7E,qBAAmB,YAAY,CAAC,CAAA;IAGhC,wBAA4B,kBAAkB,CAAC,CAAA;IAC/C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAMlC;QAA6B,wBAAe;QAI3C,cAAY,YAAoB;YAE/B,iBAAO,CAAC;YACR,EAAE,CAAA,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,IAAI,6CAAqB,CAAC,cAAc,CAAC,CAAC;YAClE,IAAI,CAAC,OAAO,GAAG,IAAI,WAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC;QAES,yBAAU,GAApB;YAEC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC;QAES,wBAAS,GAAnB;YAEC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC3B,CAAC;QAES,uBAAQ,GAAlB;YAEC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;YACrB,MAAM,CAAC,CAAC,IAAI;gBACV,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE;gBACxB,MAAM,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;gBAC3C,KAAK,EAAE,CAAC,CAAC,KAAK;aACd,CAAC;QACJ,CAAC;QAGD,oBAAK,GAAL,UAAM,KAAa;YAElB,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,EAAE,IAAE,CAAkB,CAAC,CACxC,CAAC;gBACA,gBAAK,CAAC,KAAK,YAAC,KAAK,CAAC,CAAC;YACpB,CAAC;QACF,CAAC;QAED,+BAAgB,GAAhB;YAEC,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,EAAE,IAAE,CAAkB,CAAC,CACxC,CAAC;gBACA,gBAAK,CAAC,gBAAgB,WAAE,CAAC;YAC1B,CAAC;QACF,CAAC;QAED,sBAAI,uBAAK;iBAAT;gBAEC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC;;;WAAA;QAED,sBAAI,wBAAM;iBAAV;gBAEC,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACzB,CAAC;;;WAAA;QAED,sBAAI,uBAAK;iBAAT;gBAEC,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAC3B,CAAC;;;WAAA;QAES,yBAAU,GAApB;YAEC,gBAAK,CAAC,UAAU,WAAE,CAAC;YACnB,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;YAErB,EAAE,CAAA,CAAC,CAAC,CAAC,CACL,CAAC;gBACA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,CAAC;QACF,CAAC;QACF,WAAC;IAAD,CA7EA,AA6EC,CA7E4B,iCAAe,GA6E3C;IA7EY,YAAI,OA6EhB,CAAA;IAED;sBAAe,IAAI,CAAC","file":"System/Threading/Tasks/Task.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Func} from \"../../FunctionTypes\";\r\nimport {Lazy} from \"../../Lazy\";\r\nimport {ITaskState} from \"./ITaskState\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified synchronous (but deferrable) version of Task<T>\r\n * Asynchronous operations should use Promise<T>.\r\n */\r\nexport class Task<T> extends TaskHandlerBase\r\n{\r\n\tprivate _result:Lazy<T>;\r\n\r\n\tconstructor(valueFactory:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!valueFactory) throw new ArgumentNullException('valueFactory');\r\n\t\tthis._result = new Lazy(valueFactory, false);\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._result.getValue();\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result.value; // This will detect any potential recursion.\r\n\t}\r\n\r\n\tprotected getState():ITaskState<T>\r\n\t{\r\n\t\tvar r = this._result;\r\n\t\treturn r && {\r\n\t\t\t\tstatus: this.getStatus(),\r\n\t\t\t\tresult: r.isValueCreated ? r.value : void 0,\r\n\t\t\t\terror: r.error\r\n\t\t\t};\r\n\t}\r\n\r\n\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.start(defer);\r\n\t\t}\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.runSynchronously();\r\n\t\t}\r\n\t}\r\n\r\n\tget state():ITaskState<T>\r\n\t{\r\n\t\treturn this.getState();\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.runSynchronously();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._result.error;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar r = this._result;\r\n\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\tthis._result = null;\r\n\t\t\tr.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Task;"]}