{"version":3,"sources":["System/Threading/Tasks/TaskHandlerBase.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,+BAA6B,iCAAiC,CAAC,CAAA;IAG/D,wBAA4B,kBAAkB,CAAC,CAAA;IAC/C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAKlC;QAA8C,mCAAc;QAI3D;YAEC,iBAAO,CAAC;YACR,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,CAAkB,CAAA;QAClC,CAAC;QAID,sBAAI,wCAAW;iBAAf;gBAEC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;YAC1B,CAAC;;;WAAA;QAMD,+BAAK,GAAL,UAAM,KAAa;YAElB,IAAI,CAAC,eAAe,EAAE,CAAC;YAEvB,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,OAAO,GAAG,CAAuB,CAAC;YACvC,EAAE,CAAA,CAAC,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC,CAAC;gBAAC,KAAK,GAAG,CAAC,CAAC;YACzB,EAAE,CAAA,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAClB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QACtE,CAAC;QAED,0CAAgB,GAAhB;YAEC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAES,mCAAS,GAAnB;YAEC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,sBAAI,mCAAM;iBAAV;gBAEC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACzB,CAAC;;;WAAA;QAGc,wBAAQ,GAAvB,UAAwB,CAAiB;YAExC,CAAC,CAAC,MAAM,EAAE,CAAC;YACX,CAAC,CAAC,OAAO,GAAG,CAAkB,CAAC;YAC/B,IACA,CAAC;gBACA,CAAC,CAAC,UAAU,EAAE,CAAC;gBACf,CAAC,CAAC,OAAO,GAAG,CAA0B,CAAC;YACxC,CACA;YAAA,KAAK,CAAA,CAAC,EAAE,CAAC,CACT,CAAC;gBACA,CAAC,CAAC,OAAO,GAAG,CAAkB,CAAC;YAChC,CAAC;QACF,CAAC;QAIS,oCAAU,GAApB;YAEC,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACrB,CAAC;QAED,gCAAM,GAAN;YAEC,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;YACzB,EAAE,CAAA,CAAC,EAAE,CAAC,CACN,CAAC;gBACA,YAAY,CAAC,EAAE,CAAC,CAAC;gBACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,OAAO,GAAG,CAAoB,CAAC;gBACpC,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAGF,sBAAC;IAAD,CAvFA,AAuFC,CAvF6C,+BAAc,GAuF3D;IAvFqB,uBAAe,kBAuFpC,CAAA;IAED;sBAAe,eAAe,CAAC","file":"System/Threading/Tasks/TaskHandlerBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ICancellable} from \"../ICancellable\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simple class for handling potentially repeated executions either deferred or immediate.\r\n */\r\nexport abstract class TaskHandlerBase extends DisposableBase implements ICancellable\r\n{\r\n\tprivate _status:TaskStatus;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._timeoutId = null;\r\n\t\tthis._status = TaskStatus.Created\r\n\t}\r\n\r\n\tprivate _timeoutId:any;\r\n\r\n\tget isScheduled():boolean\r\n\t{\r\n\t\treturn !!this._timeoutId;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules/Reschedules triggering the task.\r\n\t * @param defer Optional time to wait until triggering.\r\n\t */\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.cancel();\r\n\t\tthis._status = TaskStatus.WaitingToRun;\r\n\t\tif(!(defer>0)) defer = 0;\r\n\t\tif(isFinite(defer))\r\n\t\t\tthis._timeoutId = setTimeout(TaskHandlerBase._handler, defer, this);\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tTaskHandlerBase._handler(this);\r\n\t}\r\n\r\n\tprotected getStatus():TaskStatus\r\n\t{\r\n\t\treturn this._status;\r\n\t}\r\n\r\n\tget status():TaskStatus\r\n\t{\r\n\t\treturn this.getStatus();\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static _handler(d:TaskHandlerBase):void\r\n\t{\r\n\t\td.cancel();\r\n\t\td._status = TaskStatus.Running;\r\n\t\ttry\r\n\t\t{\r\n\t\t\td._onExecute();\r\n\t\t\td._status = TaskStatus.RanToCompletion;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\td._status = TaskStatus.Faulted;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract _onExecute():void;\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tthis._status = null;\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._timeoutId;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._timeoutId = null;\r\n\t\t\tthis._status = TaskStatus.Cancelled;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default TaskHandlerBase;"]}