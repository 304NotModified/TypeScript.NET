{"version":3,"sources":["System/Disposable/DisposableBase.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,wCAAsC,2BAA2B,CAAC,CAAA;IAGlE;QAGC,wBAAoB,WAAuB;YAAvB,gBAAW,GAAX,WAAW,CAAY;YAInC,kBAAa,GAAW,KAAK,CAAC;QAFtC,CAAC;QAID,sBAAI,uCAAW;iBAAf;gBAEC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;YAC3B,CAAC;;;WAAA;QAKS,wCAAe,GAAzB,UACC,OAAe,EACf,UAA8C;YAA9C,0BAA8C,GAA9C,aAAoB,IAAI,CAAC,qBAAqB;YAE9C,EAAE,CAAA,CAAC,IAAI,CAAC,aAAa,CAAC;gBACrB,MAAM,IAAI,iDAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YACxD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAGD,gCAAO,GAAP;YAEC,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CACpB,CAAC;gBAGA,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC;gBACvB,IACA,CAAC;oBACA,CAAC,CAAC,UAAU,EAAE,CAAC;gBAChB,CAAC;wBAED,CAAC;oBACA,EAAE,CAAA,CAAC,CAAC,CAAC,WAAW,CAAC,CACjB,CAAC;wBACA,CAAC,CAAC,WAAW,EAAE,CAAC;wBAChB,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;oBACxB,CAAC;gBACF,CAAC;YACF,CAAC;QACF,CAAC;QAGS,mCAAU,GAApB,cAA8B,CAAC;QAEhC,qBAAC;IAAD,CArDA,AAqDC,IAAA;IArDqB,sBAAc,iBAqDnC,CAAA;IAED;sBAAe,cAAc,CAAC","file":"System/Disposable/DisposableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ObjectDisposedException} from \"./ObjectDisposedException\";\r\nimport {IDisposableAware} from \"./IDisposableAware\";\r\n\r\nexport abstract class DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tconstructor(private __finalizer?:() => void)\r\n\t{\r\n\t}\r\n\r\n\tprivate __wasDisposed:boolean = false;\r\n\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this.__wasDisposed;\r\n\t}\r\n\r\n\t// Allow for simple override of name.\r\n\tprotected _disposableObjectName:string;\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):boolean\r\n\t{\r\n\t\tif(this.__wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_.__wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_.__wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_.__finalizer) // Private finalizer...\r\n\t\t\t\t{\r\n\t\t\t\t\t_.__finalizer();\r\n\t\t\t\t\t_.__finalizer = void 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Placeholder for overrides.\r\n\tprotected _onDispose():void { }\r\n\r\n}\r\n\r\nexport default DisposableBase;"]}