{"version":3,"sources":["System/Disposable/dispose.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAEH,sBAAmB,UAAU,CAAC,CAAA;IAW9B;QAAwB,qBAA4B;aAA5B,WAA4B,CAA5B,sBAA4B,CAA5B,IAA4B;YAA5B,oCAA4B;;QAGnD,oBAAoB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAJe,eAAO,UAItB,CAAA;IAED,IAAc,OAAO,CAyCpB;IAzCD,WAAc,OAAO,EAAC,CAAC;QAEtB;YAAyB,qBAA4B;iBAA5B,WAA4B,CAA5B,sBAA4B,CAA5B,IAA4B;gBAA5B,oCAA4B;;YACpD,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC;QAFe,gBAAQ,WAEvB,CAAA;QASD;YAAiC,qBAA4B;iBAA5B,WAA4B,CAA5B,sBAA4B,CAA5B,IAA4B;gBAA5B,oCAA4B;;YAG5D,MAAM,CAAC,oBAAoB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;QAJe,wBAAgB,mBAI/B,CAAA;QAQD,eAAsB,WAAyB,EAAE,cAAuB;YAEvE,MAAM,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM;kBACrC,oBAAoB,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,cAAc,CAAC;kBACzD,IAAI,CAAC;QACT,CAAC;QALe,aAAK,QAKpB,CAAA;QAED,IAAc,KAAK,CAOlB;QAPD,WAAc,KAAK,EAAC,CAAC;YACpB,kBAAyB,WAAyB,EAAE,KAAgB;gBAAhB,qBAAgB,GAAhB,SAAgB;gBACnE,EAAE,CAAA,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtC,EAAE,CAAA,CAAC,CAAC,CAAC,KAAK,IAAE,CAAC,CAAC,CAAC;wBAAC,KAAK,GAAG,CAAC,CAAC;oBAC1B,UAAU,CAAC,oBAAoB,EAAC,KAAK,EAAC,WAAW,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;gBAClE,CAAC;YACF,CAAC;YALe,cAAQ,WAKvB,CAAA;QACF,CAAC,EAPa,KAAK,GAAL,aAAK,KAAL,aAAK,QAOlB;IAEF,CAAC,EAzCa,OAAO,GAAP,eAAO,KAAP,eAAO,QAyCpB;IAiBD,eACC,UAAsB,EACtB,OAA2C;QAE3C,IACA,CAAC;YACA,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC;gBAED,CAAC;YACA,aAAa,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC;IACF,CAAC;IAZe,aAAK,QAYpB,CAAA;IAOD,uBACC,UAAsB,EACtB,cAAsB;QAEtB,EAAE,CAAA,CAAC,UAAU,IAAI,YAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,CAClE,CAAC;YACA,EAAE,CAAA,CAAC,cAAc,CAAC,CAClB,CAAC;gBACA,IACA,CAAC;oBACA,UAAU,CAAC,OAAO,EAAE,CAAC;gBACtB,CACA;gBAAA,KAAK,CAAA,CAAC,EAAE,CAAC,CACT,CAAC;oBACA,MAAM,CAAC,EAAE,CAAC;gBACX,CAAC;YACF,CAAC;YACD,IAAI;gBACH,UAAU,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAKD,8BACC,WAAyB,EACzB,cAAsB,EACtB,KAAgB;QAAhB,qBAAgB,GAAhB,SAAgB;QAEhB,IAAI,UAAgB,CAAC;QACrB,IAAI,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC;QAE7B,GAAG,CAAA,CAAC,EAAE,KAAK,GAAC,GAAG,EAAE,KAAK,EAAE,EACxB,CAAC;YACA,IAAI,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YAC9B,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;gBAAC,QAAQ,CAAC;YACnB,EAAE,CAAA,CAAC,cAAc,CAAC,CAClB,CAAC;gBACA,IAAI,EAAE,GAAG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnC,EAAE,CAAA,CAAC,EAAE,CAAC,CACN,CAAC;oBACA,EAAE,CAAA,CAAC,CAAC,UAAU,CAAC;wBAAC,UAAU,GAAG,EAAE,CAAC;oBAChC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACrB,CAAC;YACF,CAAC;YACD,IAAI,CACJ,CAAC;gBACA,IAAI,OAAO,GAAG,KAAK,CAAC;gBACpB,IACA,CAAC;oBACA,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;oBAC3B,OAAO,GAAG,IAAI,CAAC;gBAChB,CAAC;wBAGD,CAAC;oBACA,EAAE,CAAA,CAAC,CAAC,OAAO,IAAI,KAAK,GAAG,CAAC,GAAC,GAAG,CAAC,CAC7B,CAAC;wBAGA,oBAAoB,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;oBACrD,CAAC;gBACF,CAAC;gBAED,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC;oBAAC,KAAK,CAAC;YACpB,CAAC;QACF,CAAC;QAED,MAAM,CAAC,UAAU,CAAC;IACnB,CAAC;IAED;sBAAe,OAAO,CAAC","file":"System/Disposable/dispose.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {IDisposable} from \"./IDisposable\";\r\n\r\n/**\r\n * Takes any number of disposables as arguments and attempts to dispose them.\r\n * Any exceptions thrown within a dispose are not trapped.\r\n * Use 'disposeWithoutException' to automatically trap exceptions.\r\n *\r\n * Can accept <any> and will ignore objects that don't have a dispose() method.\r\n * @param disposables\r\n */\r\nexport function dispose(...disposables:IDisposable[]):void\r\n{\r\n\t// The disposables arguments array is effectively localized so it's safe.\r\n\tdisposeTheseInternal(disposables, false);\r\n}\r\n\r\nexport module dispose {\r\n\r\n\texport function deferred(...disposables:IDisposable[]):void {\r\n\t\tthese.deferred(disposables);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Takes any number of disposables and traps any errors that occur when disposing.\r\n\t * Returns an array of the exceptions thrown.\r\n\t * @param disposables\r\n\t * @returns {any[]} Returns an array of exceptions that occurred, if there are any.\r\n\t */\r\n\texport function withoutException(...disposables:IDisposable[]):any[]\r\n\t{\r\n\t\t// The disposables arguments array is effectively localized so it's safe.\r\n\t\treturn disposeTheseInternal(disposables, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an array of disposable objects and ensures they are disposed.\r\n\t * @param disposables\r\n\t * @param trapExceptions If true, prevents exceptions from being thrown when disposing.\r\n\t * @returns {any[]} If 'trapExceptions' is true, returns an array of exceptions that occurred, if there are any.\r\n\t */\r\n\texport function these(disposables:IDisposable[], trapExceptions?:boolean):any[]\r\n\t{\r\n\t\treturn disposables && disposables.length\r\n\t\t\t? disposeTheseInternal(disposables.slice(), trapExceptions)\r\n\t\t\t: null;\r\n\t}\r\n\r\n\texport module these {\r\n\t\texport function deferred(disposables:IDisposable[], delay:number = 0):void {\r\n\t\t\tif(disposables && disposables.length) {\r\n\t\t\t\tif(!(delay>=0)) delay = 0;\r\n\t\t\t\tsetTimeout(disposeTheseInternal,delay,disposables.slice(), true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Just like in C# this 'using' function will ensure the passed disposable is disposed when the closure has finished.\r\n *\r\n * Usage:\r\n * ```typescript\r\n * using(new DisposableObject(),(myObj)=>{\r\n     *   // do work with myObj\r\n     * });\r\n * // myObj automatically has it's dispose method called.\r\n * ```\r\n *\r\n * @param disposable Object to be disposed.\r\n * @param closure Function call to execute.\r\n * @returns {TReturn} Returns whatever the closure's return value is.\r\n */\r\nexport function using<TDisposable extends IDisposable,TReturn>(\r\n\tdisposable:TDisposable,\r\n\tclosure:(disposable:TDisposable) => TReturn):TReturn\r\n{\r\n\ttry\r\n\t{\r\n\t\treturn closure(disposable);\r\n\t}\r\n\tfinally\r\n\t{\r\n\t\tdisposeSingle(disposable, false);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * This private function makes disposing more robust for when there's no type checking.\r\n * If trapExceptions is 'true' it catches and returns any exception instead of throwing.\r\n */\r\nfunction disposeSingle(\r\n\tdisposable:IDisposable,\r\n\ttrapExceptions:boolean):any\r\n{\r\n\tif(disposable && Type.of(disposable).member('dispose').isFunction)\r\n\t{\r\n\t\tif(trapExceptions)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tdisposable.dispose();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\treturn ex;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tdisposable.dispose();\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * This dispose method assumes it's working on a local copy and is unsafe for external use.\r\n */\r\nfunction disposeTheseInternal(\r\n\tdisposables:IDisposable[],\r\n\ttrapExceptions:boolean,\r\n\tindex:number = 0):any[]\r\n{\r\n\tvar exceptions:any[];\r\n\tvar len = disposables.length;\r\n\r\n\tfor(; index<len; index++)\r\n\t{\r\n\t\tvar next = disposables[index];\r\n\t\tif(!next) continue;\r\n\t\tif(trapExceptions)\r\n\t\t{\r\n\t\t\tvar ex = disposeSingle(next, true);\r\n\t\t\tif(ex)\r\n\t\t\t{\r\n\t\t\t\tif(!exceptions) exceptions = [];\r\n\t\t\t\texceptions.push(ex);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar success = false;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tdisposeSingle(next, false);\r\n\t\t\t\tsuccess = true;\r\n\t\t\t}\r\n\t\t\t\t// Don't trap the exception in order to allow it to propagate the stack trace.\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(!success && index + 1<len)\r\n\t\t\t\t{\r\n\t\t\t\t\t/* If code is 'continued' by the debugger,\r\n\t\t\t\t\t * need to ensure the rest of the disposables are cared for. */\r\n\t\t\t\t\tdisposeTheseInternal(disposables, false, index + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Just in case...  Should never happen, but asserts the intention.\r\n\t\t\tif(!success) break;\r\n\t\t}\r\n\t}\r\n\r\n\treturn exceptions;\r\n}\r\n\r\nexport default dispose;"]}