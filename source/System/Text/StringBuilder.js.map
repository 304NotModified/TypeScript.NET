{"version":3,"sources":["System/Text/StringBuilder.ts"],"names":[],"mappings":"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","file":"System/Text/StringBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/string-concatenation-looped\r\n * http://jsperf.com/adding-strings-to-an-array\r\n * http://jsperf.com/string-concatenation-versus-array-operations-with-join\r\n *\r\n * It is clearly inefficient to use a StringBuilder or LinkedList to build a string when you have a small set of string portions.\r\n * StringBuilder will really show it's benefit likely somewhere above 1000 items.\r\n *****************************/\r\n\r\n\r\nexport class StringBuilder implements IDisposable\r\n\t// Adding IDisposable allows for use with System.using();\r\n\t// ... and since this may end up being a large array container, might be a good idea to allow for flexible cleanup.\r\n{\r\n\t//noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _partArray:any[];\r\n\tprivate _latest:string; // AKA persistentString\r\n\r\n\tconstructor(...initial:any[])\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._latest = null;\r\n\t\t_._partArray = [];\r\n\t\t_.appendThese(initial);\r\n\t}\r\n\r\n\tprivate appendSingle(item:any):void\r\n\t{\r\n\t\tif(item!==null && item!==VOID0)\r\n\t\t{\r\n\t\t\tvar _ = this;\r\n\t\t\t_._latest = null;\r\n\t\t\tswitch(typeof item)\r\n\t\t\t{\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\titem = item.toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t_._partArray.push(item); // Other primitive types can keep their format since a number or boolean is a smaller footprint than a string.\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tappendThese(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(s=> _.appendSingle(s));\r\n\t\treturn _;\r\n\t}\r\n\r\n\tappend(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendThese(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLine(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendLines(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLines(items:any[]):StringBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\titems.forEach(\r\n\t\t\ti=>\r\n\t\t\t{\r\n\t\t\t\tif(i!==null && i!==VOID0)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.appendSingle(i);\r\n\t\t\t\t\t_._partArray.push(\"\\r\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn _;\r\n\t}\r\n\r\n\t/** /// These methods can only efficiently be added if not using a single array.\r\n\t insert(index: number, value: string, count: number = 1): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\r\n\t remove(startIndex:number, length:number): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\t /**/\r\n\r\n\tget isEmpty()\r\n\t{\r\n\t\treturn this._partArray.length===0;\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\tvar latest = this._latest;\r\n\t\tif(!latest===null)\r\n\t\t\tthis._latest = latest = this._partArray.join();\r\n\r\n\t\treturn latest;\r\n\t}\r\n\r\n\tjoin(delimiter:string):string\r\n\t{\r\n\t\treturn this._partArray.join(delimiter);\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tthis._partArray.length = 0;\r\n\t\tthis._latest = null;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n}\r\n\r\nexport default StringBuilder;"]}