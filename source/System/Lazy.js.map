{"version":3,"sources":["System/Lazy.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAIH,6BAA2B,gBAAgB,CAAC,CAAA;IAC5C,wBAA4B,YAAY,CAAC,CAAA;IACzC,IAAM,SAAS,GAAG,iBAAe,CAAC;IAIlC;QAA6B,wBAAe;QAG3C,cAAY,YAAoB,EAAE,cAA8B,EAAE,UAA0B;YAA1D,8BAA8B,GAA9B,sBAA8B;YAAE,0BAA0B,GAA1B,kBAA0B;YAE3F,kBAAM,YAAY,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;YAChD,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC;YACpC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC9B,CAAC;QAED,sBAAI,gCAAc;iBAAlB;gBAEC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;YAC/B,CAAC;;;WAAA;QAED,sBAAI,uBAAK;iBAAT;gBAEC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC;;;WAAA;QAED,qBAAM,GAAN,UAAO,KAAa;YAEnB,MAAM,CAAC,IAAI,IAAE,KAAK,CAAC;QACpB,CAAC;QAED,0BAAW,GAAX,UAAY,KAAa;YAExB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,KAAG,KAAK,CAAC,KAAK,CAAC;QACvD,CAAC;QAEF,WAAC;IAAD,CA9BA,AA8BC,CA9B4B,2BAAY,GA8BxC;IA9BY,YAAI,OA8BhB,CAAA;IAED;QAAuC,kCAAO;QAE7C,wBAAY,YAAoB,EAAE,cAA8B;YAA9B,8BAA8B,GAA9B,sBAA8B;YAE/D,kBAAM,YAAY,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC;QACF,qBAAC;IAAD,CANA,AAMC,CANsC,IAAI,GAM1C;IANY,sBAAc,iBAM1B,CAAA;IAED;sBAAe,IAAI,CAAC","file":"System/Lazy.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ILazy} from \"./ILazy\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ResolverBase} from \"./ResolverBase\";\r\nimport __extendsImport from \"../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// We need a non-resettable lazy to ensure it can be passed safely around.\r\nexport class Lazy<T> extends ResolverBase<T> implements ILazy<T>\r\n{\r\n\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, allowReset);\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t\tthis._isValueCreated = false;\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn !!this._isValueCreated;\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n\r\n}\r\n\r\nexport class ResettableLazy<T> extends Lazy<T>\r\n{\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, true);\r\n\t}\r\n}\r\n\r\nexport default Lazy;"]}