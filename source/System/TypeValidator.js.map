{"version":3,"sources":["System/TypeValidator.ts"],"names":[],"mappings":"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","file":"System/TypeValidator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n */\r\n\r\n/**\r\n * A descriptor is simply a JSON tree that either has an actual value or a type that identifies what the expect type should be at that leaf in the tree.\r\n *\r\n * var descriptor = {\r\n *      a : Object,\r\n *      b : String,\r\n *      c : {\r\n *          d : true ,\r\n *          e : Array,\r\n *          f : []\r\n *      },\r\n *      g : \"literal\"\r\n * }\r\n */\r\n\r\nimport {TypeInfo} from \"./Types\";\r\nimport {areEqual} from \"./Compare\";\r\nimport __extendsImport from \"../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\nexport class TypeInfoHelper extends TypeInfo\r\n{\r\n\r\n\tprivate _value:any;\r\n\r\n\tconstructor(value:any)\r\n\t{\r\n\t\tsuper(value, ()=>this._value = value);\r\n\r\n\t}\r\n\r\n\tcontains<TDescriptor>(descriptor:any):this is TDescriptor\r\n\t{\r\n\r\n\t\tlet value = this._value;\r\n\r\n\t\tif(value===descriptor)\r\n\t\t\treturn true;\r\n\r\n\t\tswitch(descriptor)\r\n\t\t{\r\n\t\t\tcase Function:\r\n\t\t\t\treturn this.isFunction;\r\n\t\t\tcase Object:\r\n\t\t\t\treturn this.isObject;\r\n\t\t\tcase Array:\r\n\t\t\t\treturn this.isArray;\r\n\t\t\tcase String:\r\n\t\t\t\treturn this.isString;\r\n\t\t\tcase Number:\r\n\t\t\t\treturn this.isNumber;\r\n\t\t\tcase Boolean:\r\n\t\t\t\treturn this.isBoolean;\r\n\t\t}\r\n\r\n\t\tif(this.type != typeof descriptor || this.isPrimitive && !areEqual(value,descriptor))\r\n\t\t\treturn false;\r\n\r\n\t\t// Check array contents and confirm intersections.\r\n\t\tif(this.isArray && Array.isArray(descriptor))\r\n\t\t{\r\n\t\t\tlet max = Math.min(descriptor.length, value.length);\r\n\r\n\t\t\tfor(let i = 0; i<max; i++)\r\n\t\t\t{\r\n\t\t\t\tif(areInvalid(value[i], descriptor[i]))\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(this.isObject)\r\n\t\t{\r\n\t\t\tlet targetKeys = Object.keys(value);\r\n\t\t\tlet dKeys = Object.keys(descriptor);\r\n\r\n\t\t\t// Quick check...\r\n\t\t\tif(dKeys.length>targetKeys.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t// Quick check #2...\r\n\t\t\tfor(let key of dKeys)\r\n\t\t\t{\r\n\t\t\t\tif(targetKeys.indexOf(key)== -1)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Final pass with recursive...\r\n\t\t\tfor(let key of dKeys)\r\n\t\t\t{\r\n\t\t\t\tif(areInvalid(value[key], descriptor[key]))\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nfunction areInvalid(v:any, d:any)\r\n{\r\n\tif(!areEqual(v, d))\r\n\t{\r\n\t\tlet memberType = new TypeInfoHelper(v);\r\n\t\tif(!memberType.contains(d))\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport class TypeValidator<T> {\r\n\tconstructor(private _typeDescriptor:any) {\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\tisSubsetOf(o:any):o is T {\r\n\t\tvar t = new TypeInfoHelper(o);\r\n\t\treturn t.contains(this._typeDescriptor);\r\n\t}\r\n}\r\n\r\nexport default TypeValidator;\r\n\r\n"]}