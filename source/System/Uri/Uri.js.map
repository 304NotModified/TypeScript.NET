{"version":3,"sources":["System/Uri/Uri.ts"],"names":[],"mappings":"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","file":"System/Uri/Uri.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport * as QueryParams from \"./QueryParams\";\r\nimport * as QueryParam from \"./QueryParam\";\r\nimport * as UriComponent from \"./UriComponent\";\r\nimport * as Scheme from \"./Scheme\";\r\nimport {SchemeValue} from \"./SchemeValue\";\r\nimport {trim} from \"../Text/Utility\";\r\nimport {Exception} from \"../Exception\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {IUri} from \"./IUri\";\r\nimport {IMap} from \"../Collections/Dictionaries/IDictionary\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {StringKeyValuePair} from \"../KeyValuePair\";\r\nimport {IEquatable} from \"../IEquatable\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\n/**\r\n * Provides an read-only model representation of a uniform resource identifier (URI) and easy access to the parts of the URI.\r\n *\r\n * The read-only model (frozen) is easier for debugging than exposing accessors for each property.\r\n * ICloneable&lt;Uri&gt; is not used to prevent unnecessary copying of values that won't change.\r\n */\r\nexport class Uri implements IUri, IEquatable<IUri>\r\n{\r\n\r\n\tscheme:SchemeValue;\r\n\tuserInfo:string;\r\n\thost:string;\r\n\tport:number;\r\n\tpath:string;\r\n\tquery:string;\r\n\tfragment:string;\r\n\r\n\tqueryParams:IMap<Primitive|Primitive[]>;\r\n\r\n\t/**\r\n\t * @param scheme The user name, password, or other user-specific information associated with the specified URI.\r\n\t * @param userInfo The host component of this instance.\r\n\t * @param host The port number of this URI.\r\n\t * @param port The absolute path of the URI.\r\n\t * @param path The absolute path of the URI.\r\n\t * @param query Any query information included in the specified URI.\r\n\t * @param fragment The escaped URI fragment.\r\n\t */\r\n\tconstructor(\r\n\t\tscheme:SchemeValue,\r\n\t\tuserInfo:string,\r\n\t\thost:string,\r\n\t\tport:number,\r\n\t\tpath:string,\r\n\t\tquery?:QueryParam.Convertible,\r\n\t\tfragment?:string)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.scheme = getScheme(scheme) || null;\r\n\t\t_.userInfo = userInfo || null;\r\n\t\t_.host = host || null;\r\n\r\n\t\t_.port = getPort(port);\r\n\r\n\t\t_.authority = _.getAuthority() || null;\r\n\r\n\t\t_.path = path || null;\r\n\r\n\r\n\t\tif(!Type.isString(query))\r\n\t\t\tquery = QueryParams.encode(<UriComponent.Map|StringKeyValuePair<Primitive>[]>query);\r\n\r\n\t\t_.query = formatQuery(<string>query) || null;\r\n\t\tObject.freeze(_.queryParams\r\n\t\t\t= _.query\r\n\t\t\t? QueryParams.parseToMap(_.query)\r\n\t\t\t: {});\r\n\r\n\t\t_.pathAndQuery = _.getPathAndQuery() || null;\r\n\r\n\t\t_.fragment = formatFragment(fragment) || null;\r\n\r\n\t\t// This should validate the uri...\r\n\t\t_.absoluteUri = _.getAbsoluteUri();\r\n\r\n\t\t_.baseUri = _.absoluteUri.replace(/[?#].*/, '');\r\n\r\n\t\t// Intended to be read-only.  Call .toMap() to get a writable copy.\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\t/**\r\n\t *  Compares the values of another IUri via toString comparison.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:IUri):boolean\r\n\t{\r\n\t\treturn this===other || this.absoluteUri==Uri.toString(other);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Parses or clones values from existing Uri values.\r\n\t * @param uri\r\n\t * @param defaults\r\n\t * @returns {Uri}\r\n\t */\r\n\tstatic from(uri:string|IUri, defaults?:IUri):Uri\r\n\t{\r\n\t\tvar u = (!uri || Type.isString(uri))\r\n\t\t\t? Uri.parse(<string>uri) : <IUri>uri;\r\n\r\n\t\treturn new Uri(\r\n\t\t\tu.scheme || defaults && defaults.scheme,\r\n\t\t\tu.userInfo || defaults && defaults.userInfo,\r\n\t\t\tu.host || defaults && defaults.host,\r\n\t\t\tisNaN(u.port) ? defaults && defaults.port : u.port,\r\n\t\t\tu.path || defaults && defaults.path,\r\n\t\t\tu.query || defaults && defaults.query,\r\n\t\t\tu.fragment || defaults && defaults.fragment\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param throwIfInvalid Defaults to true.\r\n\t * @returns {IUri} Returns a map of the values or *null* if invalid and *throwIfInvalid* is <b>false</b>.\r\n\t */\r\n\tstatic parse(url:string, throwIfInvalid:boolean = true):IUri\r\n\t{\r\n\t\tvar result:IUri = null;\r\n\t\tvar ex = tryParse(url, (out)=> {result = out;});\r\n\t\tif(throwIfInvalid && ex) throw ex;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param out A delegate to capture the value.\r\n\t * @returns {boolean} True if valid.  False if invalid.\r\n\t */\r\n\tstatic tryParse(url:string, out:(result:IUri)=>void):boolean\r\n\t{\r\n\t\treturn !tryParse(url, out); // return type is Exception.\r\n\t}\r\n\r\n\tstatic copyOf(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(map);\r\n\t}\r\n\r\n\tcopyTo(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(this, map);\r\n\t}\r\n\r\n\tupdateQuery(query:QueryParam.Convertible):Uri\r\n\t{\r\n\t\tvar map = this.toMap();\r\n\t\tmap.query = <any>query;\r\n\t\treturn Uri.from(map);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAbsoluteUri():string\r\n\t{\r\n\t\treturn uriToString(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAuthority():string\r\n\t{\r\n\t\treturn getAuthority(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getPathAndQuery():string\r\n\t{\r\n\t\treturn getPathAndQuery(this);\r\n\t}\r\n\r\n\t/**\r\n\t * The absolute URI.\r\n\t */\r\n\tabsoluteUri:string;\r\n\r\n\t/**\r\n\t * Gets the Domain Name System (DNS) host name or IP address and the port number for a server.\r\n\t */\r\n\tauthority:string;\r\n\r\n\t/**\r\n\t * Gets the path and Query properties separated by a question mark (?).\r\n\t */\r\n\tpathAndQuery:string;\r\n\r\n\t/**\r\n\t * Gets the full path without the query or fragment.\r\n\t */\r\n\tbaseUri:string;\r\n\r\n\t/**\r\n\t * The segments that represent a path.<br/>\r\n\t * https://msdn.microsoft.com/en-us/library/system.uri.segments%28v=vs.110%29.aspx\r\n\t *\r\n\t * <h5><b>Example:</b></h5>\r\n\t * If the path value equals: ```/tree/node/index.html```<br/>\r\n\t * The result will be: ```['/','tree/','node/','index.html']```\r\n\t * @returns {string[]}\r\n\t */\r\n\tget pathSegments():string[]\r\n\t{\r\n\t\treturn this.path.match(/^[/]|[^/]*[/]|[^/]+$/g);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a writable copy.\r\n\t * @returns {IUri}\r\n\t */\r\n\ttoMap():IUri\r\n\t{\r\n\t\treturn this.copyTo({});\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} The full absolute uri.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.absoluteUri;\r\n\t}\r\n\r\n\t/**\r\n\t * Properly converts an existing URI to a string.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic toString(uri:IUri):string\r\n\t{\r\n\t\treturn uri instanceof Uri\r\n\t\t\t? (<Uri>uri).absoluteUri\r\n\t\t\t: uriToString(uri);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the authority segment of an URI.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getAuthority(uri:IUri):string\r\n\t{\r\n\t\treturn getAuthority(uri);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport enum Fields {\r\n\tscheme,\r\n\tuserInfo,\r\n\thost,\r\n\tport,\r\n\tpath,\r\n\tquery,\r\n\tfragment\r\n}\r\nObject.freeze(Fields);\r\n\r\nfunction copyUri(from:IUri, to?:IUri)\r\n{\r\n\tvar i = 0, field:string;\r\n\tif(!to) to = {};\r\n\twhile(field = Fields[i++])\r\n\t{\r\n\t\tvar value = (<any>from)[field];\r\n\t\tif(value) (<any>to)[field] = value;\r\n\t}\r\n\treturn to;\r\n}\r\n\r\nconst SLASH = '/', SLASH2 = '//', QM = QueryParams.Separator.Query, HASH = '#', EMPTY = '', AT = '@';\r\n\r\nfunction getScheme(scheme:string):SchemeValue\r\n{\r\n\tvar s:any = scheme;\r\n\tif(Type.isString(s))\r\n\t{\r\n\t\tif(!s) return null;\r\n\t\ts = trim(s).toLowerCase().replace(/[^a-z0-9+.-]+$/g, EMPTY);\r\n\t\tif(!s) return null;\r\n\t\tif(Scheme.isValid(s)) return s;\r\n\t} else {\r\n\t\tif(s===null || s===undefined) return s;\r\n\t}\r\n\tthrow new ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\r\n}\r\n\r\nfunction getPort(port:number|string):number\r\n{\r\n\tif(port===0) return <number>port;\r\n\tif(!port) return null;\r\n\tvar p:number;\r\n\r\n\tif(Type.isNumber(port, true))\r\n\t{\r\n\t\tp = <number>port;\r\n\t\tif(p>=0 && isFinite(p))\r\n\t\t\treturn p;\r\n\t}\r\n\telse if(Type.isString(port) && (p = parseInt(<string>port)) && !isNaN(p))\r\n\t{\r\n\t\treturn getPort(p);\r\n\t}\r\n\r\n\tthrow new ArgumentException(\"port\", \"invalid value\");\r\n}\r\n\r\nfunction getAuthority(uri:IUri):string\r\n{\r\n\r\n\tif(!uri.host)\r\n\t{\r\n\t\tif(uri.userInfo)\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include user info when there is no host.');\r\n\r\n\t\tif(Type.isNumber(uri.port, false))\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include a port when there is no host.');\r\n\t}\r\n\r\n\t/*\r\n\t * [//[user:password@]host[:port]]\r\n\t */\r\n\r\n\tvar result = uri.host || EMPTY;\r\n\r\n\tif(result)\r\n\t{\r\n\t\tif(uri.userInfo) result = uri.userInfo + AT + result;\r\n\t\tif(!isNaN(uri.port)) result += ':' + uri.port;\r\n\t\tresult = SLASH2 + result;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction formatQuery(query:string):string\r\n{\r\n\treturn query && ((query.indexOf(QM)!==0 ? QM : EMPTY) + query);\r\n}\r\n\r\nfunction formatFragment(fragment:string):string\r\n{\r\n\treturn fragment && ((fragment.indexOf(HASH)!==0 ? HASH : EMPTY) + fragment);\r\n}\r\n\r\nfunction getPathAndQuery(uri:IUri):string\r\n{\r\n\r\n\tvar path  = uri.path,\r\n\t    query = uri.query;\r\n\r\n\treturn EMPTY\r\n\t\t+ (path || EMPTY)\r\n\t\t+ (formatQuery(query) || EMPTY);\r\n\r\n}\r\n\r\nfunction uriToString(uri:IUri):string\r\n{\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\t// {scheme}{authority}{path}{query}{fragment}\r\n\r\n\tvar scheme       = getScheme(uri.scheme),\r\n\t    authority    = getAuthority(uri),\r\n\t    pathAndQuery = getPathAndQuery(uri),\r\n\t    fragment     = formatFragment(uri.fragment);\r\n\r\n\tvar part1 = EMPTY\r\n\t\t+ ((scheme && (scheme + ':')) || EMPTY)\r\n\t\t+ (authority || EMPTY);\r\n\r\n\tvar part2 = EMPTY\r\n\t\t+ (pathAndQuery || EMPTY)\r\n\t\t+ (fragment || EMPTY);\r\n\r\n\tif(part1 && part2 && scheme && !authority)\r\n\t\tthrow new ArgumentException('authority', \"Cannot format schemed Uri with missing authority.\");\r\n\r\n\tif(part1 && pathAndQuery && pathAndQuery.indexOf(SLASH)!==0)\r\n\t\tpart2 = SLASH + part2;\r\n\r\n\treturn part1 + part2;\r\n\r\n}\r\n\r\n\r\nfunction tryParse(url:string, out:(result:IUri)=>void):Exception\r\n{\r\n\tif(!url)\r\n\t\treturn new ArgumentException('url', 'Nothing to parse.');\r\n\r\n\r\n\t// Could use a regex here, but well follow some rules instead.\r\n\t// The intention is to 'gather' the pieces.  This isn't validation (yet).\r\n\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\tvar i:number, result:IUri = {};\r\n\r\n\t// Anything after the first # is the fragment.\r\n\ti = url.indexOf(HASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.fragment = url.substring(i + 1) || VOID0;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Anything after the first ? is the query.\r\n\ti = url.indexOf(QM);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.query = url.substring(i + 1) || VOID0;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Guarantees a separation.\r\n\ti = url.indexOf(SLASH2);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar scheme = trim(url.substring(0, i)), c = /:$/;\r\n\t\tif(!c.test(scheme))\r\n\t\t\treturn new ArgumentException('url', 'Scheme was improperly formatted');\r\n\r\n\t\tscheme = trim(scheme.replace(c, EMPTY));\r\n\t\ttry\r\n\t\t{\r\n\t\t\tresult.scheme = getScheme(scheme) || VOID0;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn ex;\r\n\t\t}\r\n\r\n\t\turl = url.substring(i + 2);\r\n\t}\r\n\r\n\t// Find any path information.\r\n\ti = url.indexOf(SLASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.path = url.substring(i);\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Separate user info.\r\n\ti = url.indexOf(AT);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.userInfo = url.substring(0, i) || VOID0;\r\n\t\turl = url.substring(i + 1);\r\n\t}\r\n\r\n\t// Remaining is host and port.\r\n\ti = url.indexOf(':');\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar port = parseInt(trim(url.substring(i + 1)));\r\n\t\tif(isNaN(port))\r\n\t\t\treturn new ArgumentException('url', 'Port was invalid.');\r\n\r\n\t\tresult.port = port;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\turl = trim(url);\r\n\tif(url)\r\n\t\tresult.host = url;\r\n\r\n\tout(copyUri(result));\r\n\r\n\t// null is good! (here)\r\n\treturn null;\r\n\r\n}\r\n\r\nexport default Uri;"]}