{"version":3,"sources":["System/Uri/QueryBuilder.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;IAGH,sBAAmB,UAAU,CAAC,CAAA;IAC9B,2CAAyC,wDAAwD,CAAC,CAAA;IAClG,2BAAsC,uCAAuC,CAAC,CAAA;IAG9E,IAAY,WAAW,WAAM,eAAe,CAAC,CAAA;IAC7C,wBAA4B,eAAe,CAAC,CAAA;IAC5C,IAAM,SAAS,GAAG,iBAAe,CAAC;IAQlC;QAAkC,gCAAmE;QAGpG,sBACC,KAA4B,EAC5B,YAA2B;YAA3B,4BAA2B,GAA3B,mBAA2B;YAE3B,iBAAO,CAAC;YAER,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QACvC,CAAC;QAGM,iBAAI,GAAX,UACC,KAA4B,EAC5B,YAA2B;YAA3B,4BAA2B,GAA3B,mBAA2B;YAE3B,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAC9C,CAAC;QAED,kCAAW,GAAX,UACC,KAA4B,EAC5B,YAA2B;YAA3B,4BAA2B,GAA3B,mBAA2B;YAG3B,EAAE,CAAA,CAAC,YAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACxB,CAAC;gBACA,IAAI,CAAC,gBAAgB,CAAS,KAAK,EAAE,YAAY,CAAC,CAAC;YACpD,CAAC;YACD,IAAI,CAAC,EAAE,CAAA,CAAC,oCAAuB,CAAC,KAAK,CAAC,CAAC,CACvC,CAAC;gBACA,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;YACD,IAAI,CACJ,CAAC;gBACA,IAAI,CAAC,SAAS,CAAmB,KAAK,CAAC,CAAC;YACzC,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QASD,uCAAgB,GAAhB,UACC,MAAa,EACb,WAA0B,EAC1B,YAA2B;YAD3B,2BAA0B,GAA1B,kBAA0B;YAC1B,4BAA2B,GAA3B,mBAA2B;YAE3B,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,WAAW,CAAC,KAAK,CAAC,MAAM,EACvB,UAAC,GAAG,EAAE,KAAK;gBAEV,EAAE,CAAA,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CACtB,CAAC;oBACA,IAAI,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAC3B,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAClB,IAAI;wBACH,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAqB,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;gBACrD,CAAC;gBACD,IAAI;oBACH,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACzB,CAAC,EACD,WAAW,EACX,YAAY,CAAC,CAAC;YAEf,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAMD,6BAAM,GAAN,UAAO,gBAAyB;YAE/B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;QACnD,CAAC;QAED,+BAAQ,GAAR;YAEC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACtB,CAAC;QACF,mBAAC;IAAD,CAvFA,AAuFC,CAvFiC,uDAA0B,GAuF3D;IAvFY,oBAAY,eAuFxB,CAAA;IAED;sBAAe,YAAY,CAAC","file":"System/Uri/QueryBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport {OrderedStringKeyDictionary} from \"../Collections/Dictionaries/OrderedStringKeyDictionary\";\r\nimport {isEnumerableOrArrayLike} from \"../Collections/Enumeration/Enumerator\";\r\nimport * as UriComponent from \"./UriComponent\";\r\nimport * as QueryParam from \"./QueryParam\";\r\nimport * as QueryParams from \"./QueryParams\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport class QueryBuilder extends OrderedStringKeyDictionary<UriComponent.Value|UriComponent.Value[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query, decodeValues);\r\n\t}\r\n\r\n\r\n\tstatic init(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(isEnumerableOrArrayLike(query))\r\n\t\t{\r\n\t\t\tthis.importEntries(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<UriComponent.Map>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tQueryParams.parse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar prev = _.getValue(key);\r\n\t\t\t\t\tif(Array.isArray(prev))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponent.Value>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\treturn QueryParams.encode(this, prefixIfNotEmpty);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n\r\nexport default QueryBuilder;\r\n"]}