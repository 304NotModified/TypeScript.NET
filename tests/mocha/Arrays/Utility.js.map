{"version":3,"sources":["arrays/utility.ts"],"names":["initTestArray","testLength"],"mappings":"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","file":"Arrays/Utility.js","sourcesContent":["///<reference path=\"../import\"/>\r\n\r\nimport * as Arrays from '../../../source/System/Collections/Array/Compare';\r\nimport * as ArrayUtility from '../../../source/System/Collections/Array/Utility';\r\nvar assert = require('../../../node_modules/assert/assert');\r\n\r\n\r\ndescribe(\"System/Collections/Array/Utility\", ()=>\r\n{\r\n\r\n\t// Min/Max tests...\r\n\tconst minA = -10, maxA = 2000;\r\n\r\n\tfunction initTestArray() {\r\n\t\treturn [5, minA, -1, maxA, -2, NaN, 20]\r\n\t}\r\n\r\n\tdescribe(\".initialize(length)\", ()=>\r\n\t{\r\n\t\tfunction testLength(len:number):void\r\n\t\t{\r\n\t\t\tit(\"should be length \" + len, ()=>\r\n\t\t\t{\r\n\t\t\t\tlen = 100;\r\n\t\t\t\tvar a = ArrayUtility.initialize(len);\r\n\t\t\t\tassert.equal(a.length, len, \".length should be \" + len);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\ttestLength(100);\r\n\t\ttestLength(100000);\r\n\t});\r\n\r\n\r\n\tdescribe(\".copy(source) & .equals(old,new)\", ()=>\r\n\t{\r\n\t\tit(\"should equal\", ()=>\r\n\t\t{\r\n\t\t\tvar s1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n\t\t\tvar s2 = ArrayUtility.copy(s1);\r\n\t\t\tassert.ok(Arrays.areEqual(s1, s2));\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".contains(source,value)\", ()=>\r\n\t{\r\n\t\tvar a = initTestArray();\r\n\t\tit(\"should return true for a value contained\", ()=>\r\n\t\t{\r\n\t\t\tassert.ok(ArrayUtility.contains(a, -1));\r\n\t\t});\r\n\t\tit(\"should return false for a value that is not present\", ()=>\r\n\t\t{\r\n\t\t\tassert.ok(!ArrayUtility.contains(a, -9876));\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe(\".findIndex(source,of)\", ()=>\r\n\t{\r\n\t\tvar a = initTestArray();\r\n\t\tit(\"should find and return the correct index\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(ArrayUtility.findIndex(a, (v:number)=>v== -1), 2);\r\n\t\t});\r\n\t\tit(\"should return -1 when the value is not present\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(ArrayUtility.findIndex(a, (v:number)=> v== -9876), -1);\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe(\".register(target,value)\", ()=>\r\n\t{\r\n\t\tit(\"should add a value that isn't present\", ()=>\r\n\t\t{\r\n\t\t\tvar a = initTestArray();\r\n\t\t\tvar len = a.length;\r\n\t\t\tassert.ok(ArrayUtility.register(a, -9876));\r\n\t\t\tassert.equal(a.length, len + 1);\r\n\t\t});\r\n\r\n\t\tit(\"should not add a value that is present\", ()=>\r\n\t\t{\r\n\t\t\tvar a = initTestArray();\r\n\t\t\tvar len = a.length;\r\n\t\t\tassert.ok(!ArrayUtility.register(a, -1));\r\n\t\t\tassert.equal(a.length, len);\r\n\t\t});\r\n\t});\r\n\r\n\r\n\tdescribe(\".remove(target,value)\", ()=>\r\n\t{\r\n\t\tit(\"should remove the item/value request and return the number of instances removed\", ()=>\r\n\t\t{\r\n\t\t\tvar s = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n\t\t\tvar len = s.length;\r\n\r\n\t\t\tassert.equal(ArrayUtility.remove(s, 9), 1, \"Only 9 removed once\");\r\n\t\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\t\tassert.equal(s[1], 8, \"Index [1] is now 8\");\r\n\t\t\tlen = s.length;\r\n\r\n\t\t\tassert.equal(ArrayUtility.remove(s, 2), 2, \"2 removed twice\");\r\n\t\t\tassert.equal(s.length, len - 2, \".length should be less by two\");\r\n\t\t\tassert.equal(s[7], 1, \"Index [7] is now 1\");\r\n\t\t\tassert.equal(s[10], 3, \"Index [10] is now 3\");\r\n\t\t\tlen = s.length;\r\n\r\n\t\t\tassert.equal(ArrayUtility.remove(s, 15), 0, \"15 does not exist\");\r\n\t\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t\t\tlen = s.length;\r\n\r\n\t\t\tassert.ok(ArrayUtility.removeIndex(s, 5), \"Index [5] removed\");\r\n\t\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\t\tlen = s.length;\r\n\r\n\t\t\tassert.ok(!ArrayUtility.removeIndex(s, 15), \"Index [15] doesn't exist\");\r\n\t\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t\t});\r\n\r\n\t});\r\n\r\n\t/*\tUtility.applyTo skipped.\r\n\t It has too many permutations while being a straight forward function. */\r\n\r\n\r\n\tdescribe(\".repeat(value,count)\", ()=>\r\n\t{\r\n\t\tit(\"should correctly repeat the value requested\", ()=>\r\n\t\t{\r\n\t\t\tvar value = 10, count = 3;\r\n\t\t\tvar r = ArrayUtility.repeat(value, count);\r\n\t\t\tassert.ok(r.length==count, \".length should be 3\");\r\n\t\t\tfor(let i = 0; i<count; i++)\r\n\t\t\t{\r\n\t\t\t\tassert.equal(r[i], value);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n});\r\n"]}