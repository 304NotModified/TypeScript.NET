{"version":3,"sources":["arrays/procedure.ts"],"names":["procedureShouldBe"],"mappings":"AAAA,gCAAgC;;;;;;;;;IAEhC,IAAY,cAAc,WAAM,oDAAoD,CAAC,CAAA;IACrF,IAAI,MAAM,GAAG,OAAO,CAAC,qCAAqC,CAAC,CAAC;IAE5D,QAAQ,CAAC,oCAAoC,EAAE;QAE9C,IACC,IAAI,GAAM,CAAC,EAAE,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG,QAAQ,EAC7D,CAAC,GAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,EAC1C,CAAC,GAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EACrD,GAAG,GAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAC5C,OAAO,GAAG,GAAG,GAAC,CAAC,EACf,OAAO,GAAG,CAAC,GAAC,IAAI,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC;QAGpC,2BACC,MAAe,EACf,KAAY,EACZ,CAA6C;YAE7CA,EAAEA,CAACA,eAAeA,EAAEA;gBAEnBA,MAAMA,CAACA,EAAEA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,KAAKA,CAACA,CAACA,CAACA,CAACA;YACpCA,CAACA,CAACA,CAACA;YACHA,EAAEA,CAACA,YAAYA,GAAGA,KAAKA,EAAEA;gBAExBA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,IAAIA,CAACA,EAAEA,KAAKA,CAACA,CAACA;YACtCA,CAACA,CAACA,CAACA;QACJA,CAACA;QAED,QAAQ,CAAC,cAAc,EAAE;YAExB,iBAAiB,CAAC,CAAC,EAAE,GAAG,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,kBAAkB,EAAE;YAE5B,iBAAiB,CAAC,CAAC,EAAE,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAGH,QAAQ,CAAC,kBAAkB,EAAE;YAE5B,iBAAiB,CAAC,CAAC,EAAE,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAGH,QAAQ,CAAC,cAAc,EAAE;YAExB,QAAQ,CAAC,GAAG,EAAE;gBAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,GAAG,EAAE;gBAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,cAAc,EAAE;YAExB,QAAQ,CAAC,GAAG,EAAE;gBAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,GAAG,EAAE;gBAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","file":"Arrays/Procedure.js","sourcesContent":["///<reference path=\"../import\"/>\r\n\r\nimport * as ArrayProcedure from '../../../source/System/Collections/Array/Procedure';\r\nvar assert = require('../../../node_modules/assert/assert');\r\n\r\ndescribe(\"System/Collections/Array/Procedure\", ()=>\r\n{\r\n\tconst\r\n\t\tminA    = -10, maxA = 2000, minB = -Infinity, maxB = Infinity,\r\n\t\ta       = [5, minA, -1, maxA, -2, NaN, 20],\r\n\t\tb       = [5, 2000, maxB, -1, NaN, -10, minB, -2, 20],\r\n\t\tsum     = 5 + minA + (-1) + maxA + (-2) + 20,\r\n\t\taverage = sum/6, // Not including NaN\r\n\t\tproduct = 5*minA*(-1)*maxA*(-2)*20;\r\n\r\n\r\n\tfunction procedureShouldBe(\r\n\t\tsource:number[],\r\n\t\tvalue:number,\r\n\t\tp:(array:number[], ignoreNaN:boolean)=>number)\r\n\t{\r\n\t\tit('should be NaN', ()=>\r\n\t\t{\r\n\t\t\tassert.ok(isNaN(p(source, false)));\r\n\t\t});\r\n\t\tit('should be ' + value, ()=>\r\n\t\t{\r\n\t\t\tassert.equal(p(source, true), value);\r\n\t\t});\r\n\t}\r\n\r\n\tdescribe(\".sum(source)\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(a, sum, ArrayProcedure.sum);\r\n\t});\r\n\r\n\tdescribe(\".average(source)\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(a, average, ArrayProcedure.average);\r\n\t});\r\n\r\n\r\n\tdescribe(\".product(source)\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(a, product, ArrayProcedure.product);\r\n\t});\r\n\r\n\r\n\tdescribe(\".min(source)\", ()=>\r\n\t{\r\n\t\tdescribe(\"a\", ()=>\r\n\t\t{\r\n\t\t\tprocedureShouldBe(a, minA, ArrayProcedure.min);\r\n\t\t});\r\n\r\n\t\tdescribe(\"b\", ()=>\r\n\t\t{\r\n\t\t\tprocedureShouldBe(b, minB, ArrayProcedure.min);\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe(\".max(source)\", ()=>\r\n\t{\r\n\t\tdescribe(\"a\", ()=>\r\n\t\t{\r\n\t\t\tprocedureShouldBe(a, maxA, ArrayProcedure.max);\r\n\t\t});\r\n\r\n\t\tdescribe(\"b\", ()=>\r\n\t\t{\r\n\t\t\tprocedureShouldBe(b, maxB, ArrayProcedure.max);\r\n\t\t});\r\n\t});\r\n\r\n});\r\n"]}