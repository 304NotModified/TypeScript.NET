{"version":3,"sources":["System.Linq/Enumerable.ts"],"names":[],"mappings":"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","file":"System.Linq/Enumerable.js","sourcesContent":["///<reference path=\"../import.d.ts\"/>\r\n\r\nimport {contains, repeat} from \"../../../dist/commonjs/System/Collections/Array/Utility\";\r\nimport * as Procedure from \"../../../dist/commonjs/System/Collections/Array/Procedure\";\r\nimport Enumerable from \"../../../dist/commonjs/System.Linq/Linq\";\r\nimport Functions from \"../../../dist/commonjs/System/Functions\";\r\nimport {EmptyEnumerator} from \"../../../dist/commonjs/System/Collections/Enumeration/EmptyEnumerator\";\r\nimport {List} from \"../../../dist/commonjs/System/Collections/List\";\r\nimport {ILinqEnumerable} from \"../../../dist/commonjs/System.Linq/Enumerable\";\r\nimport * as assert from \"assert\";\r\n\r\n\r\ninterface TestItem\r\n{\r\n\ta:number;\r\n\tb:number;\r\n\tc:string;\r\n\tchildren?:TestItem[];\r\n}\r\n\r\n\r\nconst source:TestItem[] = Object.freeze([\r\n\t{\r\n\t\ta: 1,\r\n\t\tb: 2,\r\n\t\tc: \"a\",\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\ta: 1,\r\n\t\t\t\tb: 2,\r\n\t\t\t\tc: \"a\",\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ta: 1,\r\n\t\t\t\t\t\tb: 2,\r\n\t\t\t\t\t\tc: \"a\",\r\n\t\t\t\t\t\tchildren: []\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ta: 1,\r\n\t\t\t\t\t\tb: 1,\r\n\t\t\t\t\t\tc: \"b\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ta: 1,\r\n\t\t\t\t\t\tb: 3,\r\n\t\t\t\t\t\tc: \"c\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ta: 1,\r\n\t\t\t\tb: 1,\r\n\t\t\t\tc: \"b\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ta: 1,\r\n\t\t\t\tb: 3,\r\n\t\t\t\tc: \"c\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\ta: 1,\r\n\t\tb: 1,\r\n\t\tc: \"b\",\r\n\t},\r\n\t{\r\n\t\ta: 1,\r\n\t\tb: 3,\r\n\t\tc: \"c\"\r\n\t},\r\n\t{\r\n\t\ta: 2,\r\n\t\tb: 2,\r\n\t\tc: \"d\"\r\n\t},\r\n\t{\r\n\t\ta: 2,\r\n\t\tb: 1,\r\n\t\tc: \"e\"\r\n\t},\r\n\t{\r\n\t\ta: 2,\r\n\t\tb: 3,\r\n\t\tc: \"f\"\r\n\t}\r\n]);\r\n\r\n// Compile test:\r\nfunction compileTest():ILinqEnumerable<TestItem>\r\n{\r\n\tvar list = new List(source);\r\n\treturn list.linq.orderBy(v=>v.a)\r\n\t\t.takeWhile((g, i)=>i<5);\r\n}\r\n\r\n\r\nconst sourceMany:Enumerable<string> = Enumerable.from(Object.freeze([\r\n\t\"a,b,c,d,e\",\r\n\tnull,\r\n\t\"f,g,h,i,j\",\r\n\t\"k,l,m,n,o\",\r\n\t\"p,q,r,s,t\",\r\n\t\"u,v,w,x,y\",\r\n]));\r\nconst sourceManyFlat = \"abcdefghijklmnopqrstuvwxy\";\r\n\r\nvar sourceArrayEnumerable = Enumerable.from(source),\r\n    sourceEnumerable      = new Enumerable(()=>sourceArrayEnumerable.getEnumerator());\r\n\r\ndescribe(\".force()\", ()=>\r\n{\r\n\tit(\"should not throw\", ()=>\r\n\t{\r\n\t\tassert.doesNotThrow(()=> { sourceEnumerable.force() });\r\n\t});\r\n});\r\n\r\ndescribe(\".count()\", ()=>\r\n{\r\n\tit(\"should match count to length\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.count(), source.length);\r\n\t\tassert.equal(sourceEnumerable.count(), source.length);\r\n\t\tassert.equal(Enumerable.from([]).count(), 0);\r\n\t\tassert.equal(Enumerable.empty().count(), 0);\r\n\t\tassert.equal(sourceArrayEnumerable.count(e=>e.a===1), 3);\r\n\t});\r\n});\r\n\r\ndescribe(\".source\", ()=>\r\n{\r\n\tit(\"should equal the original\", ()=>\r\n\t{\r\n\t\tassert.equal(source, (<any>(sourceArrayEnumerable)).source);\r\n\t});\r\n});\r\n\r\ndescribe(\".memoize()\", ()=>\r\n{\r\n\tit(\"should cache the values as it goes for reuse later\", ()=>\r\n\t{\r\n\t\tvar source = sourceEnumerable;\r\n\t\tvar A = source.memoize();\r\n\r\n\t\tsource.memoize().dispose(); // Covers else condition.\r\n\r\n\t\tvar sum = A.sum(o=>o.a);\r\n\r\n\t\tassert.equal(sum, source.sum(o=>o.a), \"Values must be equal after memoize pass 1.\");\r\n\r\n\t\tsum = A.sum(o=>o.b);\r\n\t\tassert.equal(sum, source.sum(o=>o.b), \"Values must be equal after memoize pass 2.\");\r\n\t\tA.dispose(); // Disposing this memoized source should not affect other tests.\r\n\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\t// Should throw after disposal.\r\n\t\t\tA.force();\r\n\t\t});\r\n\r\n\t\tA = sourceArrayEnumerable.memoize();\r\n\t\tA.dispose();\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\t// Should throw after disposal.\r\n\t\t\tA.force();\r\n\t\t});\r\n\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".choose(predicate)\", ()=>\r\n{\r\n\tit(\"should filter out null and undefined values.\", ()=>\r\n\t{\r\n\t\tvar other = <TestItem[]>[null, void(0)];\r\n\t\tassert.equal(sourceArrayEnumerable\r\n\t\t\t.concat(other)\r\n\t\t\t.choose()\r\n\t\t\t.select(s=>s.a)\r\n\t\t\t.where(s=>s===1)\r\n\t\t\t.count(), 3);\r\n\r\n\t\tassert.equal(sourceArrayEnumerable\r\n\t\t\t.concat(other)\r\n\t\t\t.choose((e:TestItem, i:number)=>\r\n\t\t\t{\r\n\t\t\t\treturn <TestItem>(i%2 ? e : null);\r\n\t\t\t})\r\n\t\t\t.count(), 3);\r\n\r\n\t\tsourceArrayEnumerable\r\n\t\t\t.concat(other)\r\n\t\t\t.choose()\r\n\t\t\t.dispose();\r\n\r\n\t});\r\n});\r\n\r\ndescribe(\".where(predicate).memoize()\", ()=>\r\n{\r\n\tit(\"should cache the values as it goes for reuse later\", ()=>\r\n\t{\r\n\r\n\t\tvar source = sourceArrayEnumerable.where(i => i.a==1);\r\n\r\n\t\tvar sum:number, A = source;\r\n\r\n\t\tsum = A.sum(o=>o.a);\r\n\r\n\t\tassert.equal(sum, source.sum(o=>o.a), \"Values must be equal after where pass 1.\");\r\n\r\n\t\tsum = A.sum(o=>o.b);\r\n\t\tassert.equal(sum, source.sum(o=>o.b), \"Values must be equal after where pass 2.\");\r\n\r\n\r\n\t\tA = source.memoize();\r\n\r\n\t\tsum = A.sum(o=>o.a);\r\n\r\n\t\tassert.equal(sum, source.sum(o=>o.a), \"Values must be equal after memoize pass 1.\");\r\n\r\n\t\tsum = A.sum(o=>o.b);\r\n\t\tassert.equal(sum, source.sum(o=>o.b), \"Values must be equal after memoize pass 2.\");\r\n\r\n\t\tsource.dispose();\r\n\t});\r\n});\r\n\r\ndescribe(\".orderBy(selector)\", ()=>\r\n{\r\n\tit(\"should order ascending based upon the selector\", ()=>\r\n\t{\r\n\t\tvar source = sourceArrayEnumerable.reverse();\r\n\t\tassert.equal(source.first().c, \"f\");\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".orderBy(selector)\", ()=>\r\n{\r\n\tit(\"should order ascending based upon the selector\", ()=>\r\n\t{\r\n\r\n\t\tvar source = sourceArrayEnumerable.reverse();\r\n\r\n\t\tvar A = source.orderBy(o=>o.a).toArray();\r\n\t\tfor(let i = 0; i<3; i++)\r\n\t\t{\r\n\t\t\tassert.equal(A[i].a, 1, \"First three 'a' values should be 1 when ordered by 'a'.\");\r\n\t\t}\r\n\t\tfor(let i = 3; i<6; i++)\r\n\t\t{\r\n\t\t\tassert.equal(A[i].a, 2, \"Last three 'a' values should be 2 when ordered by 'a'.\");\r\n\t\t}\r\n\r\n\t\tvar B = source.orderBy(o=> o.b).toArray();\r\n\t\tfor(let i = 0; i<2; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 1, \"First two 'b' values should be 1 when ordered by 'b'.\");\r\n\t\t}\r\n\t\tfor(let i = 2; i<4; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 2, \"Second two 'b' values should be 2 when ordered by 'b'.\");\r\n\t\t}\r\n\t\tfor(let i = 4; i<6; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 3, \"Last two 'b' values should be 3 when ordered by 'b'.\");\r\n\t\t}\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".orderByDescending(selector)\", ()=>\r\n{\r\n\tit(\"should order descending based upon the selector\", ()=>\r\n\t{\r\n\r\n\r\n\t\tvar source = sourceArrayEnumerable.reverse();\r\n\r\n\t\tvar A = source.orderByDescending((o:TestItem)=> o.a).toArray();\r\n\t\tfor(let i = 0; i<3; i++)\r\n\t\t{\r\n\t\t\tassert.equal(A[i].a, 2, \"First three 'a' values should be 2 when ordered by 'a'.\");\r\n\t\t}\r\n\t\tfor(let i = 3; i<6; i++)\r\n\t\t{\r\n\t\t\tassert.equal(A[i].a, 1, \"Last three 'a' values should be 1 when ordered by 'a'.\");\r\n\t\t}\r\n\r\n\t\tvar B = source.orderByDescending((o:TestItem)=> o.b).toArray();\r\n\t\tfor(let i = 0; i<2; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 3, \"First two 'b' values should be 3 when ordered by 'b'.\");\r\n\t\t}\r\n\t\tfor(let i = 2; i<4; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 2, \"Second two 'b' values should be 2 when ordered by 'b'.\");\r\n\t\t}\r\n\t\tfor(let i = 4; i<6; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 1, \"Last two 'b' values should be 1 when ordered by 'b'.\");\r\n\t\t}\r\n\t});\r\n});\r\n\r\ndescribe(\".orderBy(selector).thenBy(selector)\", ()=>\r\n{\r\n\tit(\"should order by one then the other\", ()=>\r\n\t{\r\n\r\n\r\n\t\tvar B = sourceArrayEnumerable\r\n\t\t\t.orderBy(o => o.b)\r\n\t\t\t.thenBy(o => o.c)\r\n\t\t\t.toArray();\r\n\r\n\t\tfor(let i = 0; i<2; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 1, \"First two 'b' values should be 1 when ordered by 'b'.\");\r\n\t\t}\r\n\t\tfor(let i = 2; i<4; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 2, \"Second two 'b' values should be 2 when ordered by 'b'.\");\r\n\t\t}\r\n\t\tfor(let i = 4; i<6; i++)\r\n\t\t{\r\n\t\t\tassert.equal(B[i].b, 3, \"Last two 'b' values should be 3 when ordered by 'b'.\");\r\n\t\t}\r\n\r\n\t\tassert.equal(B[0].c, \"b\");\r\n\t\tassert.equal(B[1].c, \"e\");\r\n\r\n\t\tassert.equal(B[2].c, \"a\");\r\n\t\tassert.equal(B[3].c, \"d\");\r\n\r\n\t\tassert.equal(B[4].c, \"c\");\r\n\t\tassert.equal(B[5].c, \"f\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".select(b)\", ()=>\r\n{\r\n\r\n\tvar b = sourceArrayEnumerable.select(e=>e.b);\r\n\tdescribe(\".distinct()\", ()=>\r\n\t{\r\n\t\tvar d = b.distinct();\r\n\t\tdescribe(\".orderBy()\", ()=>\r\n\t\t{\r\n\t\t\tit(\"should be 1,2,3\", ()=>\r\n\t\t\t{\r\n\t\t\t\tvar s = d.orderBy();\r\n\t\t\t\tassert.equal(s.count(), 3);\r\n\t\t\t\tassert.equal(s.sum(), 6);\r\n\t\t\t\tassert.equal(s.elementAt(0), 1);\r\n\t\t\t\tassert.equal(s.elementAt(1), 2);\r\n\t\t\t\tassert.equal(s.elementAt(2), 3);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tdescribe(\".orderByDescending()\", ()=>\r\n\t\t{\r\n\t\t\tit(\"should be 1,2,3\", ()=>\r\n\t\t\t{\r\n\t\t\t\tvar s = d.orderByDescending();\r\n\t\t\t\tassert.equal(s.count(), 3);\r\n\t\t\t\tassert.equal(s.sum(), 6);\r\n\t\t\t\tassert.equal(s.elementAt(0), 3);\r\n\t\t\t\tassert.equal(s.elementAt(1), 2);\r\n\t\t\t\tassert.equal(s.elementAt(2), 1);\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe(\".distinctUntilChanged()\", ()=>\r\n\t{\r\n\t\tit(\"should be as expected\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(b.distinctUntilChanged().toJoinedString(), \"213213\");\r\n\t\t\tassert.equal(b.distinctUntilChanged(v=>Math.max(v, 2)).toJoinedString(), \"2323\");\r\n\t\t\tassert.equal(b.distinctUntilChanged(v=>Math.min(v, 2)).toJoinedString(), \"21313\");\r\n\t\t\tassert.equal(b.orderBy().distinctUntilChanged().toJoinedString(), \"123\");\r\n\t\t});\r\n\t});\r\n});\r\n\r\ndescribe(\".groupBy(selector)\", ()=>\r\n{\r\n\tit(\"should group by key provided by the selector\", ()=>\r\n\t{\r\n\r\n\r\n\t\tvar A_distinct = sourceArrayEnumerable\r\n\t\t\t.select(o=>o.a).distinct();\r\n\t\tvar A = sourceArrayEnumerable\r\n\t\t\t.groupBy(o=>o.a);\r\n\r\n\t\tassert.equal(A_distinct.count(), A.count(), \"Number of groups should match distinct values.\");\r\n\r\n\t\tvar B = sourceArrayEnumerable\r\n\t\t\t.groupBy(o=>o.b);\r\n\r\n\t\tvar C = sourceArrayEnumerable\r\n\t\t\t.groupBy(o=>o.b, null, Functions.Identity);\r\n\r\n\t\tvar D = sourceArrayEnumerable\r\n\t\t\t.groupBy(o=>o.b, Functions.Identity, Functions.Identity);\r\n\r\n\r\n\t\tassert.ok(B.first().sequenceEqual(C.first()));\r\n\t\tassert.ok(C.first().sequenceEqual(D.first()));\r\n\r\n\t\tvar B_distinct = sourceArrayEnumerable\r\n\t\t\t.select(o=>o.b).distinct();\r\n\r\n\t\tassert.equal(B_distinct.count(), B.count(), \"Number of groups should match distinct values.\");\r\n\r\n\r\n\t\tconst COMPANY_A = \"Microsoft\", COMPANY_B = \"Hell Corp.\";\r\n\t\tvar objArray = [\r\n\t\t\t{Name: \"John\", Id: 0, Salary: 1300.00, Company: COMPANY_A},\r\n\t\t\t{Name: \"Peter\", Id: 1, Salary: 4800.50, Company: COMPANY_A},\r\n\t\t\t{Name: \"Sandra\", Id: 2, Salary: 999.99, Company: COMPANY_A},\r\n\t\t\t{Name: \"Me\", Id: 3, Salary: 1000000000.00, Company: COMPANY_B}\r\n\t\t];\r\n\t\tvar groups = Enumerable.from(objArray).groupBy(x => x.Company);\r\n\t\tvar companies = groups.select(x => x.key).toArray();\r\n\r\n\t\tassert.equal(companies.length, 2, \"2 groups expected.\");\r\n\t\tassert.ok(contains(companies, COMPANY_A), \"Expect \" + COMPANY_A);\r\n\t\tassert.ok(contains(companies, COMPANY_B), \"Expect \" + COMPANY_B);\r\n\t\tvar group_A = groups.where(g=>g.key==COMPANY_A).single();\r\n\t\tvar group_B = groups.where(g=>g.key==COMPANY_B).single();\r\n\t\tassert.equal(group_A.count(), 3, \"Expected count of 3.\");\r\n\t\tassert.equal(group_A.sum(x => x.Salary), 7100.49, \"Expected sum to be correct.\");\r\n\t\tassert.equal(group_B.count(), 1, \"Expected count of 1.\");\r\n\t\tassert.equal(group_B.sum(x => x.Salary), 1000000000.00, \"Expected sum to be correct.\");\r\n\t});\r\n});\r\n\r\ndescribe(\".take(count)\", ()=>\r\n{\r\n\tit(\"count should match number taken\", ()=>\r\n\t{\r\n\t\tvar e = sourceArrayEnumerable.take(2);\r\n\t\tassert.equal(e.count(), 2);\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".takeWhile(predicate)\", ()=>\r\n{\r\n\tit(\"should take while predicate returns true\", ()=>\r\n\t{\r\n\t\tvar e = sourceArrayEnumerable.takeWhile(v=>v.a==1);\r\n\t\tassert.equal(e.count(), 3, \"count should match number taken\");\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".takeUntil(predicate,includeUntil)\", ()=>\r\n{\r\n\tit(\"should take until predicate returns true\", ()=>\r\n\t{\r\n\t\tvar e = sourceArrayEnumerable.takeUntil(v=>v.a==2);\r\n\t\tassert.equal(e.count(), 3, \"count should match number taken\");\r\n\t});\r\n\r\n\tit(\"should take until predicate returns true and include value matched\", ()=>\r\n\t{\r\n\t\tvar e = sourceArrayEnumerable.takeUntil(v=>v.a==2, true);\r\n\t\tassert.equal(e.count(), 4, \"count should match number taken\");\r\n\t\tassert.equal(e.last().c, \"d\");\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".takeExceptLast(count)\", ()=>\r\n{\r\n\tit(\"should take the first ones minus the last\", ()=>\r\n\t{\r\n\t\tvar test = (s:Enumerable<TestItem>)=>\r\n\t\t{\r\n\t\t\tvar e = s.takeExceptLast(2);\r\n\t\t\tassert.equal(e.count(), 4);\r\n\t\t\tassert.equal(e.count(), 4, \"count should match number taken\");\r\n\t\t\tassert.equal(e.last().c, \"d\");\r\n\t\t\tvar e = s.takeExceptLast();\r\n\t\t\tassert.equal(e.count(), 5);\r\n\t\t\tassert.equal(e.count(), 5, \"count should match number taken\");\r\n\t\t\tassert.equal(e.last().c, \"e\");\r\n\t\t};\r\n\t\ttest(sourceArrayEnumerable);\r\n\t\ttest(sourceEnumerable);\r\n\t});\r\n\r\n});\r\n\r\n// Inverse of takeExceptLast\r\ndescribe(\".skipToLast(count)\", ()=>\r\n{\r\n\tit(\"should take the last items based on the count\", ()=>\r\n\t{\r\n\t\tvar test = (s:Enumerable<TestItem>)=>\r\n\t\t{\r\n\t\t\tvar e = s.skipToLast(2);\r\n\t\t\tassert.equal(e.count(), 2, \"count should match number taken\");\r\n\t\t\tassert.equal(e.first().c, \"e\");\r\n\t\t\tassert.equal(e.last().c, \"f\");\r\n\r\n\t\t\te = s.skipToLast(0);\r\n\t\t\tassert.equal(e.count(), 0);\r\n\t\t\te = s.skipToLast(Infinity);\r\n\t\t\tassert.equal(e.count(), 6);\r\n\t\t};\r\n\t\ttest(sourceArrayEnumerable);\r\n\t\ttest(sourceEnumerable);\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".skip(count)\", ()=>\r\n{\r\n\tit(\"count should match total less skipped\", ()=>\r\n\t{\r\n\t\tvar test = (s:Enumerable<TestItem>)=>\r\n\t\t{\r\n\t\t\tvar e = s.skip(2);\r\n\t\t\tassert.equal(e.count(), 4);\r\n\t\t\tassert.equal(e.first().c, \"c\");\r\n\t\t\tassert.equal(e.last().c, \"f\");\r\n\t\t};\r\n\t\ttest(sourceArrayEnumerable);\r\n\t\ttest(sourceEnumerable);\r\n\r\n\t\tassert.equal(sourceArrayEnumerable.skip(0), sourceArrayEnumerable)\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".skipWhile(predicate)\", ()=>\r\n{\r\n\tit(\"should skip while predicate returns true\", ()=>\r\n\t{\r\n\t\tvar e = sourceArrayEnumerable.skipWhile(v=>v.a==1);\r\n\t\tassert.equal(e.count(), 3, \"count should match number taken\");\r\n\t\tassert.equal(e.first().c, \"d\");\r\n\t\tassert.equal(e.last().c, \"f\");\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".select(selector)\", ()=>\r\n{\r\n\r\n\tit(\"should use appropriate selection mechanism\", ()=>\r\n\t{\r\n\t\tvar test = (s:Enumerable<TestItem>)=>\r\n\t\t{\r\n\t\t\tvar e = s.select(e=>e.c);\r\n\t\t\tassert.equal(e.count(), 6);\r\n\t\t\tassert.equal(e.first(), \"a\");\r\n\t\t\tassert.equal(e.last(), \"f\");\r\n\t\t};\r\n\t\ttest(sourceArrayEnumerable);\r\n\t\ttest(sourceEnumerable);\r\n\t});\r\n\r\n\tit(\"should use appropriate selection mechanism\", ()=>\r\n\t{\r\n\t\tvar test = (s:Enumerable<TestItem>)=>\r\n\t\t{\r\n\t\t\tvar e = s.select((e, i)=>i);\r\n\t\t\tassert.equal(e.count(), 6);\r\n\t\t\tassert.equal(e.first(), 0);\r\n\t\t\tassert.equal(e.last(), 5);\r\n\t\t};\r\n\t\ttest(sourceArrayEnumerable);\r\n\t\ttest(sourceEnumerable);\r\n\t});\r\n});\r\n\r\ndescribe(\".shuffle()\", ()=>\r\n{\r\n\tit(\"should randomize the enumerable\", ()=>\r\n\t{\r\n\t\tvar e = sourceArrayEnumerable.shuffle();\r\n\t\tassert.equal(e.count(v=>v.a==1), 3);\r\n\t\te.dispose();\r\n\t\tassert.throws(()=>e.count());\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".every(predicate)\", ()=>\r\n{\r\n\tit(\"should determine if every element matches the criteria\", ()=>\r\n\t{\r\n\t\tvar test = (s:Enumerable<TestItem>)=>\r\n\t\t{\r\n\t\t\tassert.ok(!s.every(v=>v.a==1));\r\n\t\t};\r\n\t\ttest(sourceArrayEnumerable);\r\n\t\ttest(sourceEnumerable);\r\n\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".any(predicate)\", ()=>\r\n{\r\n\tit(\"should determine if every element matches the criteria\", ()=>\r\n\t{\r\n\t\tvar test = (s:Enumerable<TestItem>)=>\r\n\t\t{\r\n\t\t\tassert.ok(s.some(v=>v.a==1));\r\n\t\t\tassert.ok(!s.isEmpty());\r\n\t\t};\r\n\t\ttest(sourceArrayEnumerable);\r\n\t\ttest(sourceEnumerable);\r\n\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".empty()\", ()=>\r\n{\r\n\r\n\tvar source = Enumerable.empty();\r\n\r\n\r\n\tdescribe(\".singleOrDefault()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should be defaulted\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(source.singleOrDefault(), null);\r\n\t\t\tassert.equal(source.singleOrDefault(-1), -1);\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".single()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should throw\", ()=>\r\n\t\t{\r\n\t\t\tassert.throws(()=>\r\n\t\t\t{\r\n\t\t\t\tsource.single();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".first()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should throw\", ()=>\r\n\t\t{\r\n\t\t\tassert.throws(()=>\r\n\t\t\t{\r\n\t\t\t\tsource.first();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".firstOrDefault()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should be defaulted\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(source.firstOrDefault(), null);\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".last()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should throw\", ()=>\r\n\t\t{\r\n\t\t\tassert.throws(()=>\r\n\t\t\t{\r\n\t\t\t\tsource.last();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".lastOrDefault()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should be defaulted\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(source.lastOrDefault(), null);\r\n\t\t\tvar d = 1;\r\n\t\t\tassert.equal(source.lastOrDefault(d), d);\r\n\t\t});\r\n\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".last()\", ()=>\r\n{\r\n\r\n\tit(\"should match last\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.last().c, \"f\");\r\n\t});\r\n\r\n\tit(\"should throw\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>Enumerable.from([]).last());\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".lastOrDefault()\", ()=>\r\n{\r\n\r\n\tit(\"should match last\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.lastOrDefault().c, \"f\");\r\n\t});\r\n\r\n\tit(\"should be defaulted\", ()=>\r\n\t{\r\n\t\tassert.equal(Enumerable.from([]).lastOrDefault(\"f\"), \"f\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".from(x)\", ()=>\r\n{\r\n\tit(\"should throw if not enumerable\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>Enumerable.from(<any>1));\r\n\t});\r\n});\r\n\r\ndescribe(\".fromAny(x,default)\", ()=>\r\n{\r\n\tit(\"should return the default if not enumerable\", ()=>\r\n\t{\r\n\t\tassert.equal(Enumerable.fromAny(1), null);\r\n\t});\r\n});\r\n\r\ndescribe(\".fromAny(x,default)\", ()=>\r\n{\r\n\tit(\"should return an enumerable from an enumerable\", ()=>\r\n\t{\r\n\t\tassert.ok(Enumerable.fromAny(sourceArrayEnumerable) instanceof Enumerable);\r\n\t});\r\n\tit(\"should return an enumerable from an array\", ()=>\r\n\t{\r\n\t\tassert.ok(Enumerable.fromAny(source) instanceof Enumerable);\r\n\t});\r\n\tit(\"should return an enumerable from an IEnumerable\", ()=>\r\n\t{\r\n\t\tvar e = Enumerable.fromAny({getEnumerator: ()=> { return EmptyEnumerator; }});\r\n\t\te.getEnumerator();\r\n\t\tassert.ok(e instanceof Enumerable);\r\n\t});\r\n});\r\n\r\ndescribe(\".from([1])\", ()=>\r\n{\r\n\r\n\tlet source = new Enumerable(()=>Enumerable.from([1]).getEnumerator());\r\n\r\n\tdescribe(\".singleOrDefault()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should return single value\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(source.single(), 1);\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".singleOrDefault()\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should return single value\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(source.singleOrDefault(), 1);\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".elementAt(x)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should throw if no more\", ()=>\r\n\t\t{\r\n\t\t\tassert.throws(()=>source.elementAt(2));\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".elementAtOrDefault (x)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should be defaulted\", ()=>\r\n\t\t{\r\n\t\t\tassert.equal(source.elementAtOrDefault(2, -1), -1);\r\n\t\t\tassert.equal(source.elementAtOrDefault(2), null);\r\n\t\t});\r\n\r\n\t\tit(\"should throw\", ()=>\r\n\t\t{\r\n\t\t\tassert.throws(()=> {source.elementAtOrDefault(NaN)});\r\n\t\t\tassert.throws(()=> {source.elementAtOrDefault(-1)});\r\n\t\t\tassert.throws(()=> {source.elementAtOrDefault(Infinity)});\r\n\t\t});\r\n\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".elementAt(x)\", ()=>\r\n{\r\n\tit(\"should return the indexed element\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceEnumerable.elementAt(2), source[2]);\r\n\t\tassert.equal(sourceArrayEnumerable.elementAt(2), source[2]);\r\n\t});\r\n\r\n\tit(\"should throw\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>sourceArrayEnumerable.elementAt(-1));\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".elementAtOrDefault (x)\", ()=>\r\n{\r\n\tit(\"should return the indexed element\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceEnumerable.elementAtOrDefault(2), source[2]);\r\n\t\tassert.equal(sourceArrayEnumerable.elementAtOrDefault(2), source[2]);\r\n\t\tvar d = {};\r\n\t\tassert.equal(sourceArrayEnumerable.elementAtOrDefault(10, <any>d), d);\r\n\t});\r\n\r\n\tit(\"should throw\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>sourceArrayEnumerable.elementAtOrDefault(-1));\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".min()\", ()=>\r\n{\r\n\tit(\"should return the minimum of the selected\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.b).min(), 1);\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.c).min(), \"a\");\r\n\t});\r\n});\r\n\r\ndescribe(\".max()\", ()=>\r\n{\r\n\tit(\"should return the maximum of the selected\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.b).max(), 3);\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.c).max(), \"f\");\r\n\r\n\r\n\t});\r\n});\r\n\r\ndescribe(\".minBy(selector)\", ()=>\r\n{\r\n\tit(\"should return the minimum of the selected\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.minBy(e=>e.b).b, 1);\r\n\t\tassert.equal(sourceArrayEnumerable.minBy(e=>e.c).c, \"a\");\r\n\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.b).minBy(), 1);\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.c).minBy(), \"a\");\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".maxBy(selector)\", ()=>\r\n{\r\n\tit(\"should return the maximum of the selected\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.maxBy(e=>e.b).b, 3);\r\n\t\tassert.equal(sourceArrayEnumerable.maxBy(e=>e.c).c, \"f\");\r\n\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.b).maxBy(), 3);\r\n\t\tassert.equal(sourceArrayEnumerable.select(e=>e.c).maxBy(), \"f\");\r\n\r\n\t});\r\n});\r\n\r\ndescribe(\".concat(...)\", ()=>\r\n{\r\n\tit(\"should remain the same\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.merge(null).count(), 6);\r\n\t\tassert.equal(sourceArrayEnumerable.merge([]).count(), 6);\r\n\t});\r\n\tit(\"should combine two into one\", ()=>\r\n\t{\r\n\t\tassert.equal(sourceArrayEnumerable.concat(sourceArrayEnumerable).count(), 12);\r\n\t});\r\n});\r\n\r\ndescribe(\".selectMany(...)\", ()=>\r\n{\r\n\tit(\"should select the sub values\", ()=>\r\n\t{\r\n\t\tfunction test(values:Enumerable<string>)\r\n\t\t{\r\n\t\t\tassert.equal(values.count(), 25);\r\n\t\t\tassert.equal(values.toJoinedString(), sourceManyFlat);\r\n\t\t}\r\n\r\n\t\tvar split:(s:string)=>string[] = (s)=>s && s.split(\",\");\r\n\t\tvar sm:(s:string,e:string)=>string = (c, e)=>e;\r\n\r\n\t\tvar a = sourceMany.selectMany(split);\r\n\t\ttest(a);\r\n\t\tvar b = sourceMany.selectMany(split, sm);\r\n\t\ttest(b);\r\n\r\n\t\tassert.equal(Enumerable.from(<string[]>[]).selectMany(split).count(), 0);\r\n\r\n\t\tvar iSource = Enumerable.toInfinity().selectMany(s=>repeat(\"\" + s, s));\r\n\t\tassert.equal(iSource.take(10).toJoinedString(), \"1223334444\");\r\n\r\n\t\tvar s = sourceMany.select(s=>s.length);\r\n\t\ts.dispose();\r\n\t\tassert.throws(()=>s.toArray());\r\n\t});\r\n});\r\n\r\ndescribe(\".traverseBreadthFirst()\", ()=>\r\n{\r\n\tit(\"walk the tree in proper order\", ()=>\r\n\t{\r\n\t\tvar tree = sourceEnumerable\r\n\t\t\t.traverseBreadthFirst(e=>e.children),\r\n\t\t    c    = tree.select(e=>e.c);\r\n\r\n\t\tassert.equal(c.elementAt(2), \"c\");\r\n\t\tassert.equal(c.elementAt(6), \"a\");\r\n\t\tassert.equal(c.count(), 12);\r\n\r\n\t\tassert.equal(Enumerable.empty<TestItem>().traverseBreadthFirst(\r\n\t\t\te=>e.children, Functions.Identity).count(), 0);\r\n\t});\r\n});\r\n\r\ndescribe(\".traverseDepthFirst()\", ()=>\r\n{\r\n\tit(\"walk the tree in proper order\", ()=>\r\n\t{\r\n\t\tvar tree = sourceEnumerable\r\n\t\t\t.traverseDepthFirst(e=>e.children),\r\n\t\t    c    = tree.select(e=>e.c);\r\n\r\n\t\tassert.equal(c.elementAt(2), \"a\");\r\n\t\tassert.equal(c.elementAt(6), \"c\");\r\n\t\tassert.equal(c.count(), 12);\r\n\r\n\t\tassert.equal(Enumerable.empty<TestItem>().traverseDepthFirst(\r\n\t\t\te=>e.children, Functions.Identity).count(), 0);\r\n\t});\r\n});\r\n\r\ndescribe(\".flatten()\", ()=>\r\n{\r\n\tit(\"should convert deep enumerable to flat one\", ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tsourceMany\r\n\t\t\t\t.choose()\r\n\t\t\t\t.select(s=>s.split(','))\r\n\t\t\t\t.concat([[\"z\"]])\r\n\t\t\t\t.flatten()\r\n\t\t\t\t.toJoinedString(),\r\n\t\t\tsourceManyFlat + \"z\");\r\n\t});\r\n});\r\n\r\ndescribe(\".ofType(type)\", ()=>\r\n{\r\n\r\n\tvar source = Enumerable.from(<any[]>[\r\n\t\t1,\r\n\t\t\"a\",\r\n\t\ttrue,\r\n\t\t[],\r\n\t\t[],\r\n\t\t2,\r\n\t\t\"b\",\r\n\t\t[],\r\n\t\tfalse,\r\n\t\tfunction() {},\r\n\t\t3,\r\n\t\t\"c\",\r\n\t\t[],\r\n\t\t\"d\",\r\n\t\t\"e\",\r\n\t\tnull,\r\n\t\tundefined\r\n\t]);\r\n\r\n\tit(\"should select only the type requested\", ()=>\r\n\t{\r\n\t\tassert.equal(source.ofType(Number).count(), 3);\r\n\t\tassert.equal(source.ofType(String).count(), 5);\r\n\t\tassert.equal(source.ofType(Boolean).count(), 2);\r\n\t\tassert.equal(source.ofType(Function).count(), 1);\r\n\t\tassert.equal(source.ofType(Array).count(), 4);\r\n\t});\r\n});\r\n\r\ndescribe(\".buffer(size)\", ()=>\r\n{\r\n\tit(\"should return arrays at the size provided\", ()=>\r\n\t{\r\n\t\tvar s2 = sourceEnumerable.buffer(2);\r\n\t\tassert.equal(s2.first().length, 2);\r\n\t\tassert.equal(s2.count(), 3);\r\n\r\n\t});\r\n\r\n\tit(\"should throw for invalid sizes\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>sourceEnumerable.buffer(-1));\r\n\t\tassert.throws(()=>sourceEnumerable.buffer(Infinity));\r\n\t});\r\n});\r\n\r\ndescribe(\".share()\", ()=>\r\n{\r\n\r\n\tit(\"should share an enumerator\", ()=>\r\n\t{\r\n\t\tvar s = sourceEnumerable.select(e=>e.c).share();\r\n\t\tvar e1 = s.getEnumerator();\r\n\t\tvar e2 = s.getEnumerator();\r\n\r\n\t\te1.moveNext();\r\n\t\tassert.equal(e1.current, \"a\");\r\n\t\tassert.equal(e2.current, \"a\");\r\n\t\te2.moveNext();\r\n\t\tassert.equal(e1.current, \"b\");\r\n\t\tassert.equal(e2.current, \"b\");\r\n\r\n\t});\r\n\r\n});\r\n\r\nvar mathTree      = sourceEnumerable.traverseDepthFirst(e=>e.children),\r\n    mathTreeArray = mathTree.select(e=>e.b).toArray();\r\n\r\ndescribe(\".sum()\", ()=>\r\n{\r\n\tit(\"should render the sum value\", ()=>\r\n\t{\r\n\t\tvar v = Procedure.sum(mathTreeArray);\r\n\r\n\t\tassert.equal(Enumerable.empty().sum(), 0);\r\n\t\tassert.equal(mathTree.select(e=>e.b).sum(), v);\r\n\t\tassert.equal(mathTree.select(e=>e.b).concat([Infinity, -Infinity]).sum(), v);\r\n\t\tassert.equal(mathTree.select(e=>e.b).concat([\r\n\t\t\tInfinity,\r\n\t\t\tInfinity,\r\n\t\t\t-Infinity\r\n\t\t]).sum(), Infinity);\r\n\t\tassert.equal(mathTree.select(e=>e.b).concat([\r\n\t\t\tInfinity,\r\n\t\t\t-Infinity,\r\n\t\t\t-Infinity\r\n\t\t]).sum(), -Infinity);\r\n\t\tassert.ok(isNaN(mathTree.select(e=>e.b).concat([NaN]).sum()));\r\n\t\tassert.equal(mathTree.sum(e=>e.b), v);\r\n\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".product()\", ()=>\r\n{\r\n\tit(\"should render the product value\", ()=>\r\n\t{\r\n\t\tvar v = Procedure.product(mathTreeArray);\r\n\r\n\t\tassert.equal(mathTree.select(e=>e.b).product(), v);\r\n\t\tassert.ok(isNaN(mathTree.select(e=>e.b).concat([NaN]).product()));\r\n\t\tassert.equal(mathTree.select(e=>e.b).concat([0]).product(), 0);\r\n\t\tassert.equal(mathTree.product(e=>e.b), v);\r\n\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".quotient()\", ()=>\r\n{\r\n\tit(\"should render the quotient value\", ()=>\r\n\t{\r\n\t\tvar v = Procedure.quotient(mathTreeArray);\r\n\r\n\t\tassert.equal(mathTree.select(e=>e.b).quotient(), v);\r\n\t\tassert.ok(isNaN(mathTree.select(e=>e.b).concat([NaN]).quotient()));\r\n\t\tassert.ok(isNaN(mathTree.select(e=>e.b).take(1).quotient()));\r\n\t\tassert.equal(mathTree.quotient(e=>e.b), v);\r\n\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".average()\", ()=>\r\n{\r\n\tit(\"should render the average value\", ()=>\r\n\t{\r\n\t\tvar tree = sourceEnumerable\r\n\t\t\t.traverseDepthFirst(e=>e.children);\r\n\t\tvar v = Procedure.average(mathTreeArray);\r\n\r\n\t\tassert.equal(mathTree.select(e=>e.b).average(), v);\r\n\t\tassert.ok(isNaN(mathTree.select(e=>e.b).concat([NaN]).average()));\r\n\t\tassert.equal(mathTree.average(e=>e.b), v);\r\n\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".weave(enumerables)\", ()=>\r\n{\r\n\r\n\tit(\"should weave in order\", ()=>\r\n\t{\r\n\t\tlet w = Enumerable.weave([\r\n\t\t\t[\"a\", \"d\"],\r\n\t\t\t[\"b\", \"e\", \"g\", \"i\"],\r\n\t\t\t[\"c\", \"f\", \"h\"]\r\n\t\t]);\r\n\r\n\t\tassert.equal(w.count(),9);\r\n\t\tassert.equal(w.toJoinedString(),\"abcdefghi\");\r\n\r\n\t\tassert.equal(\r\n\t\t\tEnumerable.weave([\r\n\t\t\t\t[1, 2, 3, 4, 5, 6, 7]\r\n\t\t\t]).count(), 7);\r\n\r\n\t});\r\n\r\n\tit(\"should throw\",()=>{\r\n\t\tassert.throws(()=>Enumerable.weave(null));\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\"xxx\",()=>{\r\n\r\n\tit(\"yyy\",()=>{\r\n\t\tvar r = Enumerable.from([1,2,3,4,5,6])\r\n\t\t\t.skip(1)\r\n\t\t\t.takeExceptLast(2)\r\n\t\t\t.toArray();\r\n\r\n\t\tassert.equal(r[0],2);\r\n\t\tassert.equal(r[1],3);\r\n\t\tassert.equal(r[2],4);\r\n\t})\r\n\r\n});"]}