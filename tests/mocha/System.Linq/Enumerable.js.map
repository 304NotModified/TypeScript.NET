{"version":3,"sources":["system.linq/enumerable.ts"],"names":[],"mappings":"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","file":"System.Linq/Enumerable.js","sourcesContent":["///<reference path=\"../import.d.ts\"/>\r\n\r\nimport {contains} from '../../../source/System/Collections/Array/Utility';\r\nimport Enumerable from '../../../source/System.Linq/Linq';\r\nvar assert = require('../../../node_modules/assert/assert');\r\n\r\n\r\ninterface TestItem\r\n{\r\n\ta:number;\r\n\tb:number;\r\n\tc:string;\r\n}\r\n\r\n\r\nconst source:{a:number,b:number,c:string}[] = Object.freeze([\r\n\t{\r\n\t\ta: 1,\r\n\t\tb: 2,\r\n\t\tc: \"a\"\r\n\t},\r\n\t{\r\n\t\ta: 1,\r\n\t\tb: 1,\r\n\t\tc: \"b\"\r\n\t},\r\n\t{\r\n\t\ta: 1,\r\n\t\tb: 3,\r\n\t\tc: \"c\"\r\n\t},\r\n\t{\r\n\t\ta: 2,\r\n\t\tb: 2,\r\n\t\tc: \"d\"\r\n\t},\r\n\t{\r\n\t\ta: 2,\r\n\t\tb: 1,\r\n\t\tc: \"e\"\r\n\t},\r\n\t{\r\n\t\ta: 2,\r\n\t\tb: 3,\r\n\t\tc: \"f\"\r\n\t}\r\n]);\r\n\r\nvar sourceEnumerable = Enumerable.fromArray(source);\r\n\r\nit(\".memoize()\", ()=>\r\n{\r\n\r\n\tvar source = sourceEnumerable;\r\n\tvar A = source.memoize();\r\n\r\n\tvar sum = A.sum(o=>o.a);\r\n\r\n\tassert.equal(sum, source.sum(o=>o.a), \"Values must be equal after memoize pass 1.\");\r\n\r\n\tsum = A.sum(o=>o.b);\r\n\tassert.equal(sum, source.sum(o=>o.b), \"Values must be equal after memoize pass 2.\");\r\n});\r\n\r\nit(\".where(predicate).memoize()\", ()=>\r\n{\r\n\tvar source = sourceEnumerable.where(i => i.a==1);\r\n\r\n\tvar sum:number, A = source;\r\n\r\n\tsum = A.sum(o=>o.a);\r\n\r\n\tassert.equal(sum, source.sum(o=>o.a), \"Values must be equal after where pass 1.\");\r\n\r\n\tsum = A.sum(o=>o.b);\r\n\tassert.equal(sum, source.sum(o=>o.b), \"Values must be equal after where pass 2.\");\r\n\r\n\r\n\tA = source.memoize();\r\n\r\n\tsum = A.sum(o=>o.a);\r\n\r\n\tassert.equal(sum, source.sum(o=>o.a), \"Values must be equal after memoize pass 1.\");\r\n\r\n\tsum = A.sum(o=>o.b);\r\n\tassert.equal(sum, source.sum(o=>o.b), \"Values must be equal after memoize pass 2.\");\r\n\r\n});\r\n\r\nit(\".orderBy(selector)\", ()=>\r\n{\r\n\r\n\tvar source = sourceEnumerable.reverse();\r\n\r\n\tvar A = source.orderBy(o=>o.a).toArray();\r\n\tfor(let i = 0; i<3; i++)\r\n\t{\r\n\t\tassert.equal(A[i].a, 1, \"First three 'a' values should be 1 when ordered by 'a'.\");\r\n\t}\r\n\tfor(let i = 3; i<6; i++)\r\n\t{\r\n\t\tassert.equal(A[i].a, 2, \"Last three 'a' values should be 2 when ordered by 'a'.\");\r\n\t}\r\n\r\n\tvar B = source.orderBy(o=> o.b).toArray();\r\n\tfor(let i = 0; i<2; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 1, \"First two 'b' values should be 1 when ordered by 'b'.\");\r\n\t}\r\n\tfor(let i = 2; i<4; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 2, \"Second two 'b' values should be 2 when ordered by 'b'.\");\r\n\t}\r\n\tfor(let i = 4; i<6; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 3, \"Last two 'b' values should be 3 when ordered by 'b'.\");\r\n\t}\r\n\r\n});\r\n\r\n\r\nit(\".orderByDescending(selector)\", ()=>\r\n{\r\n\r\n\tvar source = sourceEnumerable.reverse();\r\n\r\n\tvar A = source.orderByDescending((o:TestItem)=> o.a).toArray();\r\n\tfor(let i = 0; i<3; i++)\r\n\t{\r\n\t\tassert.equal(A[i].a, 2, \"First three 'a' values should be 2 when ordered by 'a'.\");\r\n\t}\r\n\tfor(let i = 3; i<6; i++)\r\n\t{\r\n\t\tassert.equal(A[i].a, 1, \"Last three 'a' values should be 1 when ordered by 'a'.\");\r\n\t}\r\n\r\n\tvar B = source.orderByDescending((o:TestItem)=> o.b).toArray();\r\n\tfor(let i = 0; i<2; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 3, \"First two 'b' values should be 3 when ordered by 'b'.\");\r\n\t}\r\n\tfor(let i = 2; i<4; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 2, \"Second two 'b' values should be 2 when ordered by 'b'.\");\r\n\t}\r\n\tfor(let i = 4; i<6; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 1, \"Last two 'b' values should be 1 when ordered by 'b'.\");\r\n\t}\r\n\r\n});\r\n\r\nit(\".orderBy(selector).thenBy(selector)\", ()=>\r\n{\r\n\r\n\tvar B = sourceEnumerable\r\n\t\t.orderBy(o => o.b)\r\n\t\t.thenBy(o => o.c)\r\n\t\t.toArray();\r\n\r\n\tfor(let i = 0; i<2; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 1, \"First two 'b' values should be 1 when ordered by 'b'.\");\r\n\t}\r\n\tfor(let i = 2; i<4; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 2, \"Second two 'b' values should be 2 when ordered by 'b'.\");\r\n\t}\r\n\tfor(let i = 4; i<6; i++)\r\n\t{\r\n\t\tassert.equal(B[i].b, 3, \"Last two 'b' values should be 3 when ordered by 'b'.\");\r\n\t}\r\n\r\n\tassert.equal(B[0].c, \"b\");\r\n\tassert.equal(B[1].c, \"e\");\r\n\r\n\tassert.equal(B[2].c, \"a\");\r\n\tassert.equal(B[3].c, \"d\");\r\n\r\n\tassert.equal(B[4].c, \"c\");\r\n\tassert.equal(B[5].c, \"f\");\r\n\r\n\r\n});\r\n\r\n\r\nit(\".groupBy(selector)\", ()=>\r\n{\r\n\tvar A_distinct = sourceEnumerable\r\n\t\t.select(o=>o.a).distinct();\r\n\tvar A = sourceEnumerable\r\n\t\t.groupBy(o=>o.a);\r\n\r\n\tassert.equal(A_distinct.count(), A.count(), \"Number of groups should match distinct values.\");\r\n\r\n\tvar B = sourceEnumerable\r\n\t\t.groupBy(o=>o.b);\r\n\tvar B_distinct = sourceEnumerable\r\n\t\t.select(o=>o.b).distinct();\r\n\r\n\tassert.equal(B_distinct.count(), B.count(), \"Number of groups should match distinct values.\");\r\n\r\n\r\n\tconst COMPANY_A = \"Microsoft\", COMPANY_B = \"Hell Corp.\";\r\n\tvar objArray = [\r\n\t\t{ Name: \"John\", Id: 0, Salary: 1300.00, Company: COMPANY_A },\r\n\t\t{ Name: \"Peter\", Id: 1, Salary: 4800.50, Company: COMPANY_A },\r\n\t\t{ Name: \"Sandra\", Id: 2, Salary: 999.99, Company: COMPANY_A },\r\n\t\t{ Name: \"Me\", Id: 3, Salary: 1000000000.00, Company: COMPANY_B }\r\n\t];\r\n\tvar groups = Enumerable.from(objArray).groupBy(x => x.Company);\r\n\tvar companies = groups.select(x => x.key).toArray();\r\n\r\n\tassert.equal(companies.length,2, \"2 groups expected.\");\r\n\tassert.ok(contains(companies,COMPANY_A), \"Expect \"+COMPANY_A);\r\n\tassert.ok(contains(companies,COMPANY_B), \"Expect \"+COMPANY_B);\r\n\tvar group_A = groups.where(g=>g.key==COMPANY_A).single();\r\n\tvar group_B = groups.where(g=>g.key==COMPANY_B).single();\r\n\tassert.equal(group_A.count(),3, \"Expected count of 3.\");\r\n\tassert.equal(group_A.sum(x => x.Salary),7100.49, \"Expected sum to be correct.\");\r\n\tassert.equal(group_B.count(),1, \"Expected count of 1.\");\r\n\tassert.equal(group_B.sum(x => x.Salary),1000000000.00, \"Expected sum to be correct.\");\r\n\r\n});\r\n"]}