{"version":3,"sources":["integer.ts"],"names":[],"mappings":"AAAA,kCAAkC;;;;;;;;;IAElC,wBAAoB,6BAA6B,CAAC,CAAA;IAClD,IAAI,MAAM,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC;IAGzD,IAAM,UAAU,GAAG,MAAM,EAAE,QAAQ,GAAG,EAAE,CAAC;IAEzC,QAAQ,CAAC,gBAAgB,EAAE;QAE1B,QAAQ,CAAC,iBAAiB,EAAE;YAE3B,EAAE,CAAC,yDAAyD,EAAE;gBAE7D,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,UAAU,CAAC,EACnB,QAAQ,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAGH,QAAQ,CAAC,YAAY,EAAE;YAEtB,EAAE,CAAC,+CAA+C,EAAE;gBACnD,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,EAAE,CAAC,UAAU,CAAC,EACtB,KAAK,CAAC,CAAC;YACT,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2CAA2C,EAAE;gBAC/C,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,EACpB,IAAI,CAAC,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAGH,QAAQ,CAAC,gBAAgB,EAAE;YAE1B,EAAE,CAAC,+CAA+C,EAAE;gBACnD,MAAM,CAAC,MAAM,CAAC;oBAEb,iBAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2CAA2C,EAAE;gBAC/C,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EACxB,IAAI,CAAC,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","file":"Integer.js","sourcesContent":["///<reference path=\"import.d.ts\"/>\r\n\r\nimport Integer from '../../source/System/Integer';\r\nvar assert = require('../../node_modules/assert/assert');\r\n\r\n\r\nconst TEST_FLOAT = 10.915, TEST_INT = 10;\r\n\r\ndescribe('System/Integer', ()=>\r\n{\r\n\tdescribe('.convert(value)', ()=>\r\n\t{\r\n\t\tit('should convert float number to integer without rounding', ()=>\r\n\t\t{\r\n\t\t\tassert.equal(\r\n\t\t\t\tInteger(TEST_FLOAT),\r\n\t\t\t\tTEST_INT);\r\n\t\t});\r\n\t});\r\n\r\n\r\n\tdescribe('.is(value)', ()=>\r\n\t{\r\n\t\tit('should detect a number that is not an integer', ()=> {\r\n\t\t\tassert.equal(\r\n\t\t\t\tInteger.is(TEST_FLOAT),\r\n\t\t\t\tfalse);\r\n\t\t});\r\n\r\n\t\tit('should detect a number that is an integer', ()=> {\r\n\t\t\tassert.equal(\r\n\t\t\t\tInteger.is(TEST_INT),\r\n\t\t\t\ttrue);\r\n\t\t});\r\n\t});\r\n\r\n\r\n\tdescribe('.assert(value)', ()=>\r\n\t{\r\n\t\tit('should detect a number that is not an integer', ()=> {\r\n\t\t\tassert.throws(()=>\r\n\t\t\t{\r\n\t\t\t\tInteger.assert(TEST_FLOAT);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('should detect a number that is an integer', ()=> {\r\n\t\t\tassert.equal(\r\n\t\t\t\tInteger.assert(TEST_INT),\r\n\t\t\t\ttrue);\r\n\t\t});\r\n\t});\r\n\r\n});\r\n\r\n"]}