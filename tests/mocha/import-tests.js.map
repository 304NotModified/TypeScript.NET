{"version":3,"sources":["import-tests.ts"],"names":[],"mappings":";;;;;;;;;IAEA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;IAEzB,IAAM,IAAI,GAAG,gBAAgB,CAAC;IAE9B,oBAAoB,IAAW,EAAE,GAAW;QAE3C,MAAM,CAAC,EAAE;aACP,WAAW,CAAC,IAAI,CAAC;aACjB,MAAM,CAAC,UAAC,IAAI;YACb,OAAA,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;mBACtD,EAAE,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,MAAM,EAAE;QAD1C,CAC0C,CAAC,CAAC;IAC9C,CAAC;IAED,0BAA0B,IAAW;QAEpC,MAAM,CAAC,EAAE;aACP,WAAW,CAAC,IAAI,CAAC;aACjB,MAAM,CAAC,UAAC,IAAI,IAAG,OAAA,EAAE,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,EAA5C,CAA4C,CAAC,CAAC;IAChE,CAAC;IAED,yBAAyB,IAAgB,EAAE,WAA2B,EAAE,IAAgB;QAA/D,oBAAgB,GAAhB,SAAgB;QAAE,2BAA2B,GAA3B,mBAA2B;QAAE,oBAAgB,GAAhB,SAAgB;QAEvF,IAAI,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;QAC1B,EAAE,CAAA,CAAC,WAAW,CAAC;YAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrC,gBAAgB,CAAC,IAAI,GAAG,OAAO,CAAC;aAC9B,IAAI,EAAE;aACN,OAAO,CAAC,UAAC,OAAO;YAEhB,QAAQ,CAAC,OAAO,GAAG,GAAG,EAAE;gBAEvB,eAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,GAAG,GAAG,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEJ,EAAE,CAAA,CAAC,WAAW,CAAC,CACf,CAAC;YACA,IAAI,KAAK,GAAG,UAAU,CAAC,IAAI,GAAG,OAAO,EAAE,KAAK,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;YAEpE,KAAK;iBACH,IAAI,EAAE;iBACN,OAAO,CAAC,UAAC,QAAQ;gBAEjB,IAAI,QAAQ,GAAG,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC;gBACxC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBAE3B,IAAI,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBAEzC,IAAI,CAAC,GAAG;oBAEP,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC;gBAC1B,CAAC,CAAC;gBAGF,EAAE,CAAA,CAAC,KAAK,IAAE,CAAC,IAAI,IAAI,IAAE,IAAI,CAAC;oBAAC,CAAC,EAAE,CAAC;gBAC/B,IAAI;oBAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAExB,CAAC,CAAC,CAAC;QACL,CAAC;IAEF,CAAC;IACD,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAChC,eAAe,EAAE,CAAC","file":"import-tests.js","sourcesContent":["///<reference path=\"import\"/>\r\n\r\nimport * as fs from \"fs\";\r\n\r\nconst root = \"./tests/mocha/\";\r\n\r\nfunction getFilesAt(path:string, ext?:string):string[]\r\n{\r\n\treturn fs\r\n\t\t.readdirSync(path)\r\n\t\t.filter((name)=>\r\n\t\t(!ext || name.lastIndexOf(ext)==name.length - ext.length)\r\n\t\t&& fs.statSync(path + '/' + name).isFile());\r\n}\r\n\r\nfunction getDirectoriesAt(path:string):string[]\r\n{\r\n\treturn fs\r\n\t\t.readdirSync(path)\r\n\t\t.filter((name)=>fs.statSync(path + '/' + name).isDirectory());\r\n}\r\n\r\nfunction importRecursive(path:string = \"\", importFiles:boolean = false, base:string = \"\")\r\n{\r\n\tvar dirPath = base + path;\r\n\tif(importFiles) console.log(dirPath);\r\n\tgetDirectoriesAt(root + dirPath)\r\n\t\t.sort()\r\n\t\t.forEach((dirname)=>\r\n\t\t{\r\n\t\t\tdescribe(dirname + '/', ()=>\r\n\t\t\t{\r\n\t\t\t\timportRecursive(dirname, true, dirPath + '/');\r\n\t\t\t});\r\n\t\t});\r\n\r\n\tif(importFiles)\r\n\t{\r\n\t\tvar files = getFilesAt(root + dirPath, '.js'), count = files.length;\r\n\r\n\t\tfiles\r\n\t\t\t.sort()\r\n\t\t\t.forEach((filename)=>\r\n\t\t\t{\r\n\t\t\t\tvar filePath = dirPath + '/' + filename;\r\n\t\t\t\tconsole.log(\" \", filename);\r\n\r\n\t\t\t\tvar name = filename.replace(/\\.js$/, '');\r\n\r\n\t\t\t\tvar i = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\trequire('./' + filePath);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Allows for simple default instead of recursive.\r\n\t\t\t\tif(count==1 && name==path) i();\r\n\t\t\t\telse describe(name, i);\r\n\r\n\t\t\t});\r\n\t}\r\n\r\n}\r\nconsole.log(\"Importing Tests:\");\r\nimportRecursive();\r\n"]}