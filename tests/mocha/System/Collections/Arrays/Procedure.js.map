{"version":3,"sources":["system/collections/arrays/procedure.ts"],"names":["procedureShouldBe"],"mappings":";;;;;;;;IAEA,IAAY,cAAc,WAAM,0DAA0D,CAAC,CAAA;IAC3F,IAAI,MAAM,GAAG,OAAO,CAAC,2CAA2C,CAAC,CAAC;IAGlE,IACA,IAAI,GAAM,CAAC,EAAE,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG,QAAQ,EAC7D,CAAC,GAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,EAC1C,CAAC,GAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EACrD,GAAG,GAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAC5C,OAAO,GAAG,GAAG,GAAC,CAAC,EACf,OAAO,GAAG,CAAC,GAAC,IAAI,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,IAAI,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC;IAGnC,2BACC,MAAe,EACf,KAAY,EACZ,CAA6C;QAE7CA,EAAEA,CAACA,eAAeA,EAAEA;YAEnBA,MAAMA,CAACA,EAAEA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,KAAKA,CAACA,CAACA,CAACA,CAACA;QACpCA,CAACA,CAACA,CAACA;QACHA,EAAEA,CAACA,YAAYA,GAAGA,KAAKA,EAAEA;YAExBA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,IAAIA,CAACA,EAAEA,KAAKA,CAACA,CAACA;QACtCA,CAACA,CAACA,CAACA;IACJA,CAACA;IAED,QAAQ,CAAC,cAAc,EAAE;QAExB,iBAAiB,CAAC,CAAC,EAAE,GAAG,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE;QAE5B,iBAAiB,CAAC,CAAC,EAAE,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,kBAAkB,EAAE;QAE5B,iBAAiB,CAAC,CAAC,EAAE,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,cAAc,EAAE;QAExB,QAAQ,CAAC,GAAG,EAAE;YAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE;QAExB,QAAQ,CAAC,GAAG,EAAE;YAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YAEb,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"System/Collections/Arrays/Procedure.js","sourcesContent":["///<reference path=\"../../../import\"/>\r\n\r\nimport * as ArrayProcedure from '../../../../../source/System/Collections/Array/Procedure';\r\nvar assert = require('../../../../../node_modules/assert/assert');\r\n\r\n\r\nconst\r\nminA    = -10, maxA = 2000, minB = -Infinity, maxB = Infinity,\r\na       = [5, minA, -1, maxA, -2, NaN, 20],\r\nb       = [5, 2000, maxB, -1, NaN, -10, minB, -2, 20],\r\nsum     = 5 + minA + (-1) + maxA + (-2) + 20,\r\naverage = sum/6, // Not including NaN\r\nproduct = 5*minA*(-1)*maxA*(-2)*20;\r\n\r\n\r\nfunction procedureShouldBe(\r\n\tsource:number[],\r\n\tvalue:number,\r\n\tp:(array:number[], ignoreNaN:boolean)=>number)\r\n{\r\n\tit('should be NaN', ()=>\r\n\t{\r\n\t\tassert.ok(isNaN(p(source, false)));\r\n\t});\r\n\tit('should be ' + value, ()=>\r\n\t{\r\n\t\tassert.equal(p(source, true), value);\r\n\t});\r\n}\r\n\r\ndescribe(\".sum(source)\", ()=>\r\n{\r\n\tprocedureShouldBe(a, sum, ArrayProcedure.sum);\r\n});\r\n\r\ndescribe(\".average(source)\", ()=>\r\n{\r\n\tprocedureShouldBe(a, average, ArrayProcedure.average);\r\n});\r\n\r\n\r\ndescribe(\".product(source)\", ()=>\r\n{\r\n\tprocedureShouldBe(a, product, ArrayProcedure.product);\r\n});\r\n\r\n\r\ndescribe(\".min(source)\", ()=>\r\n{\r\n\tdescribe(\"a\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(a, minA, ArrayProcedure.min);\r\n\t});\r\n\r\n\tdescribe(\"b\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(b, minB, ArrayProcedure.min);\r\n\t});\r\n});\r\n\r\ndescribe(\".max(source)\", ()=>\r\n{\r\n\tdescribe(\"a\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(a, maxA, ArrayProcedure.max);\r\n\t});\r\n\r\n\tdescribe(\"b\", ()=>\r\n\t{\r\n\t\tprocedureShouldBe(b, maxB, ArrayProcedure.max);\r\n\t});\r\n});\r\n"]}