{"version":3,"sources":["System/Collections/Arrays/Utility.ts"],"names":[],"mappings":"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","file":"System/Collections/Arrays/Utility.js","sourcesContent":["///<reference path=\"../../../import\"/>\r\n\r\nimport * as Arrays from \"../../../../../source/System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../../../../../source/System/Collections/Array/Utility\";\r\nimport Stopwatch from \"../../../../../source/System/Diagnostics/Stopwatch\";\r\nimport LinkedList from \"../../../../../source/System/Collections/LinkedList\";\r\nvar assert = require('../../../../../node_modules/assert/assert');\r\n\r\n\r\n// Min/Max tests...\r\nconst minA = -10, maxA = 2000;\r\n\r\nfunction initTestArray()\r\n{\r\n\treturn [5, minA, -1, maxA, -2, NaN, 20]\r\n}\r\n\r\ndescribe(\".initialize(length)\", ()=>\r\n{\r\n\tfunction testLength(len:number):void\r\n\t{\r\n\t\tit(\"should be length \" + len, ()=>\r\n\t\t{\r\n\t\t\tlen = 100;\r\n\t\t\tvar a = ArrayUtility.initialize(len);\r\n\t\t\tassert.equal(a.length, len, \".length should be \" + len);\r\n\t\t});\r\n\t}\r\n\r\n\ttestLength(100);\r\n\ttestLength(100000);\r\n});\r\n\r\n\r\ndescribe(\".copy(source) & .equals(old,new)\", ()=>\r\n{\r\n\tit(\"should equal\", ()=>\r\n\t{\r\n\t\tvar s1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n\t\tvar s2 = ArrayUtility.copy(s1);\r\n\t\tassert.ok(Arrays.areEqual(s1, s2));\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".contains(source,value)\", ()=>\r\n{\r\n\tvar a = initTestArray();\r\n\tit(\"should return true for a value contained\", ()=>\r\n\t{\r\n\t\tassert.ok(ArrayUtility.contains(a, -1));\r\n\t});\r\n\tit(\"should return false for a value that is not present\", ()=>\r\n\t{\r\n\t\tassert.ok(!ArrayUtility.contains(a, -9876));\r\n\t});\r\n});\r\n\r\ndescribe(\".findIndex(source,of)\", ()=>\r\n{\r\n\tvar a = initTestArray();\r\n\tit(\"should find and return the correct index\", ()=>\r\n\t{\r\n\t\tassert.equal(ArrayUtility.findIndex(a, (v:number)=>v== -1), 2);\r\n\t});\r\n\tit(\"should return -1 when the value is not present\", ()=>\r\n\t{\r\n\t\tassert.equal(ArrayUtility.findIndex(a, (v:number)=> v== -9876), -1);\r\n\t});\r\n});\r\n\r\ndescribe(\".register(target,value)\", ()=>\r\n{\r\n\tit(\"should add a value that isn't present\", ()=>\r\n\t{\r\n\t\tvar a = initTestArray();\r\n\t\tvar len = a.length;\r\n\t\tassert.ok(ArrayUtility.register(a, -9876));\r\n\t\tassert.equal(a.length, len + 1);\r\n\t});\r\n\r\n\tit(\"should not add a value that is present\", ()=>\r\n\t{\r\n\t\tvar a = initTestArray();\r\n\t\tvar len = a.length;\r\n\t\tassert.ok(!ArrayUtility.register(a, -1));\r\n\t\tassert.equal(a.length, len);\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".remove(target,value)\", ()=>\r\n{\r\n\tit(\"should remove the item/value request and return the number of instances removed\", ()=>\r\n\t{\r\n\t\tvar s = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n\t\tvar len = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 9), 1, \"Only 9 removed once\");\r\n\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\tassert.equal(s[1], 8, \"Index [1] is now 8\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 2), 2, \"2 removed twice\");\r\n\t\tassert.equal(s.length, len - 2, \".length should be less by two\");\r\n\t\tassert.equal(s[7], 1, \"Index [7] is now 1\");\r\n\t\tassert.equal(s[10], 3, \"Index [10] is now 3\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 15), 0, \"15 does not exist\");\r\n\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.ok(ArrayUtility.removeIndex(s, 5), \"Index [5] removed\");\r\n\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.ok(!ArrayUtility.removeIndex(s, 15), \"Index [15] doesn't exist\");\r\n\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t});\r\n\r\n});\r\n\r\n/*\tUtility.applyTo skipped.\r\n It has too many permutations while being a straight forward function. */\r\n\r\n\r\ndescribe(\".repeat(value,count)\", ()=>\r\n{\r\n\tit(\"should correctly repeat the value requested\", ()=>\r\n\t{\r\n\t\tvar value = 10, count = 3;\r\n\t\tvar r = ArrayUtility.repeat(value, count);\r\n\t\tassert.ok(r.length==count, \".length should be 3\");\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tassert.equal(r[i], value);\r\n\t\t}\r\n\t});\r\n});\r\n\r\nfunction measureRepeated(closure:()=>void):number {\r\n\tconst repeat = 50;\r\n\tvar ms = 0;\r\n\r\n\tfor(let i=0;i<repeat; i++) {\r\n\t\tms += Stopwatch.measure(closure).total.milliseconds;\r\n\t}\r\n\r\n\treturn ms;\r\n}\r\n\r\nfunction outputMeasured(suffix:string,closure:()=>void):void {\r\n\tit(measureRepeated(closure)+\" milliseconds: \"+suffix, ()=>{\r\n\t\tassert.ok(true);\r\n\t});\r\n}\r\n\r\n/*\r\n * The below code proves (for Node.js and Mocha) that best practice with arrays is:\r\n * 1) Initialize them.  Set their capacity when constructed or set the length before iterating.\r\n * 2) Standard for loops are typically compiler optimized well and i++ may be compiler optimized as well (better than ++i).\r\n */\r\n//\r\n// describe(\"Array Performance\", ()=>\r\n// {\r\n// \tconst max = 1000000;\r\n// \toutputMeasured(\"Array.push(i)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta.push(i);\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// /*\r\n// \t// Proven to be terrible!\r\n// \toutputMeasured(\"Array.forEach (preset capacity ++i)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\ta.length = max;\r\n// \t\ta.forEach((v,i)=>{\r\n// \t\t\ta[i] = v;\r\n// \t\t});\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});*/\r\n//\r\n// \toutputMeasured(\"Array[i] = i (preset capacity i++)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = new Array<number>(max);\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i (preset length)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\ta.length = max;\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i (for reverse no-init)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\tfor(let i=max-1;i>=0; i--) {\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i (for reverse)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = new Array<number>(max);\r\n// \t\tfor(let i=max-1;i>=0; i--) {\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[m] = m (while reverse)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = new Array<number>(max);\r\n// \t\tlet m = max;\r\n// \t\twhile(m--) {\r\n// \t\t\ta[m] = m;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"LinkedList.add(i)\", ()=>\r\n// \t{\r\n// \t\tlet a = new LinkedList<number>();\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta.add(i);\r\n// \t\t}\r\n// \t});\r\n//\r\n//\r\n//\r\n// \toutputMeasured(\"LinkedListNode.next = next\", ()=>\r\n// \t{\r\n// \t\tlet root:LinkedNextNode = { value: -1, next:null };\r\n// \t\tlet next = root;\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\tnext = next.next = { value: i, next:null };\r\n// \t\t}\r\n// \t\treturn root;\r\n// \t});\r\n//\r\n//\r\n// });\r\n//\r\n// interface LinkedNextNode {\r\n// \tvalue:number;\r\n// \tnext:LinkedNextNode;\r\n// }"]}