{"version":3,"sources":["System/Collections/Arrays/Utility.ts"],"names":[],"mappings":"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","file":"Utility.js","sourcesContent":["///<reference types=\"assert\"/>\r\nimport assert = require(\"assert\");\r\n\r\nimport * as Arrays from \"../../../../../dist/commonjs/System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../../../../../dist/commonjs/System/Collections/Array/Utility\";\r\nimport Stopwatch from \"../../../../../dist/commonjs/System/Diagnostics/Stopwatch\";\r\nimport {IArray} from \"../../../../../dist/commonjs/System/Collections/Array/IArray\";\r\n\r\n\r\n// Min/Max tests...\r\nconst minA = -10, maxA = 2000;\r\n\r\nfunction initTestArray()\r\n{\r\n\treturn [5, minA, -1, maxA, -2, NaN, 20]\r\n}\r\n\r\ndescribe(\".initialize(length)\", ()=>\r\n{\r\n\tfunction testLength(len:number):void\r\n\t{\r\n\t\tit(\"should be length \" + len, ()=>\r\n\t\t{\r\n\t\t\tvar a = ArrayUtility.initialize(len);\r\n\t\t\tassert.equal(a.length, len, \".length should be \" + len);\r\n\t\t});\r\n\t}\r\n\r\n\ttestLength(100);\r\n\ttestLength(100000);\r\n});\r\n\r\n\r\ndescribe(\".copy(source) & .equals(old,new)\", ()=>\r\n{\r\n\tit(\"should equal\", ()=>\r\n\t{\r\n\t\tvar s1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3],\r\n\t\t    s2 = ArrayUtility.copy(s1),\r\n\t\t    s3 = ArrayUtility.copy(s1, 1),\r\n\t\t    s4 = ArrayUtility.copy(s1, 1, 3),\r\n\t\t    s5 = ArrayUtility.copy(null);\r\n\t\tassert.ok(Arrays.areEqual(s1, s2));\r\n\t\tassert.equal(s5, null);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".copyTo(source,destination)\", ()=>\r\n{\r\n\tit(\"should throw for invalid parameter\", ()=>\r\n\t{\r\n\t\tassert.throws(()=> {ArrayUtility.copyTo(null, null);});\r\n\t\tassert.throws(()=> {ArrayUtility.copyTo([], null);});\r\n\t\tassert.throws(()=> {ArrayUtility.copyTo([1], [], -1);});\r\n\t\tassert.throws(()=> {ArrayUtility.copyTo([1], [], 2);});\r\n\t\tassert.throws(()=> {ArrayUtility.copyTo([1], {length: -1});});\r\n\t\tassert.throws(()=> {ArrayUtility.copyTo([1], [], 0, 0, 5);});\r\n\t});\r\n});\r\n\r\ndescribe(\".indexOf(source,value)\", ()=>\r\n{\r\n\tvar a = initTestArray();\r\n\tit(\"should return true for a value contained\", ()=>\r\n\t{\r\n\t\tassert.notEqual(ArrayUtility.indexOf(a, -1), -1);\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".contains(source,value)\", ()=>\r\n{\r\n\tvar a = initTestArray();\r\n\tit(\"should return true for a value contained\", ()=>\r\n\t{\r\n\t\tassert.ok(ArrayUtility.contains(a, -1));\r\n\t});\r\n\tit(\"should return false for a value that is not present\", ()=>\r\n\t{\r\n\t\tassert.ok(!ArrayUtility.contains(a, -9876));\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".replace(source,oldValue,newValue)\", ()=>\r\n{\r\n\tvar a = initTestArray();\r\n\ta.push(5);\r\n\tit(\"should properly replace items with max\", ()=>\r\n\t{\r\n\t\tassert.equal(ArrayUtility.replace(null, 5, 6), 0);\r\n\t\tassert.equal(ArrayUtility.replace([], 5, 6), 0);\r\n\t\tassert.equal(ArrayUtility.replace(a, 5, 6), 2);\r\n\t\tassert.ok(ArrayUtility.contains(a, 6));\r\n\t\tassert.equal(ArrayUtility.replace(a, 6, 5, 1), 1);\r\n\t\tassert.ok(ArrayUtility.contains(a, 6));\r\n\t\tassert.ok(ArrayUtility.contains(a, 5));\r\n\r\n\t});\r\n\tit(\"should throw for invalid parameter\", ()=>\r\n\t{\r\n\t\tassert.throws(()=> {ArrayUtility.replace([4, 5, 6], 5, 6, -5);});\r\n\t});\r\n});\r\n\r\ndescribe(\".findIndex(source,of)\", ()=>\r\n{\r\n\tvar a = initTestArray(), b:IArray<number> = {0: 3, 1: 1, 2: 2, length: 3};\r\n\tit(\"should find and return the correct index\", ()=>\r\n\t{\r\n\t\tassert.equal(ArrayUtility.findIndex(a, (v:number)=>v== -1), 2);\r\n\t});\r\n\tit(\"should find and return the correct index\", ()=>\r\n\t{\r\n\t\tassert.equal(ArrayUtility.findIndex(b, (v:number)=>v==1), 1);\r\n\t});\r\n\tit(\"should return -1 when the value is not present\", ()=>\r\n\t{\r\n\t\tassert.equal(ArrayUtility.findIndex(a, (v:number)=> v== -9876), -1);\r\n\t});\r\n\r\n\tit(\"should throw for invalid parameter\", ()=>\r\n\t{\r\n\t\tassert.throws(()=> {ArrayUtility.findIndex(null, ()=>true)});\r\n\t\tassert.throws(()=> {ArrayUtility.findIndex(a, null)});\r\n\t});\r\n});\r\n\r\ndescribe(\".register(target,value)\", ()=>\r\n{\r\n\tit(\"should add a value that isn't present\", ()=>\r\n\t{\r\n\t\tvar a = initTestArray();\r\n\t\tvar len = a.length;\r\n\t\tassert.ok(ArrayUtility.register(a, -9876));\r\n\t\tassert.equal(a.length, len + 1);\r\n\t});\r\n\r\n\tit(\"should not add a value that is present\", ()=>\r\n\t{\r\n\t\tvar a = initTestArray();\r\n\t\tvar len = a.length;\r\n\t\tassert.ok(!ArrayUtility.register(a, -1));\r\n\t\tassert.equal(a.length, len);\r\n\t});\r\n\r\n\tit(\"should throw for invalid parameter\", ()=>\r\n\t{\r\n\t\tassert.throws(()=> {ArrayUtility.register(null, -1, ()=>true)});\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".remove(target,value)\", ()=>\r\n{\r\n\tit(\"should remove the item/value request and return the number of instances removed\", ()=>\r\n\t{\r\n\t\tvar s = [10, 9, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 3];\r\n\t\tvar len = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 9, 1), 1, \"Only 9 removed once\");\r\n\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\tassert.equal(ArrayUtility.remove(s, 9, 3), 2, \"Remaining 9s removed.\");\r\n\t\tassert.equal(s[1], 8, \"Index [1] is now 8\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 2), 2, \"2 removed twice\");\r\n\t\tassert.equal(s.length, len - 2, \".length should be less by two\");\r\n\t\tassert.equal(s[7], 1, \"Index [7] is now 1\");\r\n\t\tassert.equal(s[10], 3, \"Index [10] is now 3\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 15), 0, \"15 does not exist\");\r\n\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.ok(ArrayUtility.removeIndex(s, 5), \"Index [5] removed\");\r\n\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 3, null), 3, \"All 3s removed.\");\r\n\t\tassert.equal(s.length, len - 3, \".length should be the same\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.ok(!ArrayUtility.removeIndex(s, 15), \"Index [15] doesn't exist\");\r\n\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t});\r\n\r\n\tit(\"should assert invalid parameters\", ()=>\r\n\t{\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tArrayUtility.removeIndex(null, 0);\r\n\t\t});\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tArrayUtility.removeIndex([1, 2], -1);\r\n\t\t});\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tArrayUtility.remove([1, 2], 1, -2);\r\n\t\t});\r\n\t});\r\n\r\n});\r\n\r\n/*\tUtility.applyTo skipped.\r\n It has too many permutations while being a straight forward function. */\r\n\r\n\r\ndescribe(\".updateRange(value,count)\", ()=>\r\n{\r\n\tit(\"should correctly overwrite the value requested\", ()=>\r\n\t{\r\n\r\n\t\tvar value = 10, count = 3, r = [1, 2, 3];\r\n\t\tassert.doesNotThrow(()=> {ArrayUtility.updateRange(null, value)});\r\n\t\tArrayUtility.updateRange(r, value);\r\n\r\n\t\tassert.equal(r.length, count, \".length should be 3\");\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tassert.equal(r[i], value);\r\n\t\t}\r\n\r\n\t\tArrayUtility.clear(r);\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tassert.equal(r[i], null);\r\n\t\t}\r\n\t});\r\n\r\n\tit(\"should throw for invalid parameter stop less than start\", ()=>\r\n\t{\r\n\t\tassert.throws(()=> {ArrayUtility.updateRange([1, 2, 3], 4, 2, 1);})\r\n\t})\r\n});\r\n\r\ndescribe(\".applyTo(source,action)\", ()=>\r\n{\r\n\tit(\"should correctly overwrite the values\", ()=>\r\n\t{\r\n\r\n\t\tvar value = 10, count = 3, r = [1, 2, 3];\r\n\t\tassert.doesNotThrow(()=> {ArrayUtility.applyTo(null, ()=>null)});\r\n\t\tArrayUtility.applyTo(r, ()=>null);\r\n\t\tassert.equal(r.length, count, \".length should be 3\");\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tassert.equal(r[i], null);\r\n\t\t}\r\n\t});\r\n});\r\n\r\n\r\ndescribe(\".applyTo(source,action)\", ()=>\r\n{\r\n\tit(\"should correctly overwrite the values\", ()=>\r\n\t{\r\n\r\n\t\tvar count = 0, r = [1, 2, 3];\r\n\t\tassert.doesNotThrow(()=> {ArrayUtility.forEach(null, ()=>true)});\r\n\t\tArrayUtility.forEach(r, (n, i)=>\r\n\t\t{\r\n\t\t\tassert.equal(count, i, \"count should be \" + i);\r\n\t\t\tcount++;\r\n\t\t\treturn i ? false : true;\r\n\t\t});\r\n\t\tassert.equal(count, 2, \"count should be 2\");\r\n\t});\r\n});\r\n\r\ndescribe(\".repeat(value,count)\", ()=>\r\n{\r\n\tit(\"should correctly repeat the value requested\", ()=>\r\n\t{\r\n\t\tvar value = 10, count = 3;\r\n\t\tvar r = ArrayUtility.repeat(value, count);\r\n\t\tassert.equal(r.length, count, \".length should be 3\");\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tassert.equal(r[i], value);\r\n\t\t}\r\n\t});\r\n\r\n\tit(\"should throw for invalid parameter\", ()=>\r\n\t{\r\n\t\tassert.throws(()=> {ArrayUtility.repeat(1, -2);})\r\n\t})\r\n});\r\n\r\ndescribe(\".rangeUntil(first,until,step)\", ()=>\r\n{\r\n\tit(\"should correctly increase the value requested\", ()=>\r\n\t{\r\n\t\tvar first = 10, count = 3, step = 2, until = first + count*step;\r\n\t\tvar r = ArrayUtility.rangeUntil(first, until, 2);\r\n\t\tassert.equal(r.length, count, \".length should be 3\");\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tassert.equal(r[i], first + i*2);\r\n\t\t}\r\n\t});\r\n\r\n\tit(\"should throw for invalid parameter\", ()=>\r\n\t{\r\n\t\tassert.throws(()=> {ArrayUtility.rangeUntil(Infinity, 10);});\r\n\t\tassert.throws(()=> {ArrayUtility.rangeUntil(NaN, 10);});\r\n\t\tassert.throws(()=> {ArrayUtility.rangeUntil(1, NaN);});\r\n\t\tassert.throws(()=> {ArrayUtility.rangeUntil(1, Infinity);});\r\n\t\tassert.throws(()=> {ArrayUtility.range(1, -1);});\r\n\t\tassert.throws(()=> {ArrayUtility.rangeUntil(1, 5, 0);});\r\n\t});\r\n});\r\n\r\ndescribe(\".flatten(source,recurseDepth)\",()=>{\r\n\tit(\"should convert multi dimensional array tree to a flat one\",()=>{\r\n\t\tvar len = initTestArray().length;\r\n\t\tvar a = [[initTestArray(),initTestArray()],initTestArray()];\r\n\t\tvar b = ArrayUtility.flatten(a,3);\r\n\t\tassert.equal(b.length,len*3);\r\n\t});\r\n\r\n\tit(\"should reduce multi dimensional array tree\",()=>{\r\n\t\tvar len = initTestArray().length;\r\n\t\tvar a = [[initTestArray(),initTestArray()],initTestArray()];\r\n\t\tvar b = ArrayUtility.flatten(a);\r\n\t\tassert.equal(b.length,len+2);\r\n\t})\r\n\r\n});\r\n\r\nfunction measureRepeated(closure:()=>void):number\r\n{\r\n\tconst repeat = 50;\r\n\tvar ms = 0;\r\n\r\n\tfor(let i = 0; i<repeat; i++)\r\n\t{\r\n\t\tms += Stopwatch.measure(closure).total.milliseconds;\r\n\t}\r\n\r\n\treturn ms;\r\n}\r\n\r\nfunction outputMeasured(suffix:string, closure:()=>void):void\r\n{\r\n\tit(measureRepeated(closure) + \" milliseconds: \" + suffix, ()=>\r\n\t{\r\n\t\tassert.ok(true);\r\n\t});\r\n}\r\n\r\n/*\r\n * The below code proves (for Node.js and Mocha) that best practice with arrays is:\r\n * 1) Initialize them.  Set their capacity when constructed or set the length before iterating.\r\n * 2) Standard for loops are typically compiler optimized well and i++ may be compiler optimized as well (better than ++i).\r\n */\r\n//\r\n// describe(\"Array Performance\", ()=>\r\n// {\r\n// \tconst max = 1000000;\r\n// \toutputMeasured(\"Array.push(i)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta.push(i);\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// /*\r\n// \t// Proven to be terrible!\r\n// \toutputMeasured(\"Array.forEach (preset capacity ++i)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\ta.length = max;\r\n// \t\ta.forEach((v,i)=>{\r\n// \t\t\ta[i] = v;\r\n// \t\t});\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});*/\r\n//\r\n// \toutputMeasured(\"Array[i] = i (preset capacity i++)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = new Array<number>(max);\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i (preset length)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\ta.length = max;\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i (for reverse no-init)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = [];\r\n// \t\tfor(let i=max-1;i>=0; i--) {\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[i] = i (for reverse)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = new Array<number>(max);\r\n// \t\tfor(let i=max-1;i>=0; i--) {\r\n// \t\t\ta[i] = i;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"Array[m] = m (while reverse)\", ()=>\r\n// \t{\r\n// \t\tlet a:number[] = new Array<number>(max);\r\n// \t\tlet m = max;\r\n// \t\twhile(m--) {\r\n// \t\t\ta[m] = m;\r\n// \t\t}\r\n// \t\t// To ensure compiler doesn't dismiss the array, must consume the array at least once.\r\n// \t\treturn a[max-1];\r\n// \t});\r\n//\r\n// \toutputMeasured(\"LinkedList.add(i)\", ()=>\r\n// \t{\r\n// \t\tlet a = new LinkedList<number>();\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\ta.add(i);\r\n// \t\t}\r\n// \t});\r\n//\r\n//\r\n//\r\n// \toutputMeasured(\"LinkedListNode.next = next\", ()=>\r\n// \t{\r\n// \t\tlet root:LinkedNextNode = { value: -1, next:null };\r\n// \t\tlet next = root;\r\n// \t\tfor(let i = 0; i<max; i++)\r\n// \t\t{\r\n// \t\t\tnext = next.next = { value: i, next:null };\r\n// \t\t}\r\n// \t\treturn root;\r\n// \t});\r\n//\r\n//\r\n// });\r\n//\r\n// interface LinkedNextNode {\r\n// \tvalue:number;\r\n// \tnext:LinkedNextNode;\r\n// }"]}