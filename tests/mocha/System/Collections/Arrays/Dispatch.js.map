{"version":3,"sources":["System/Collections/Arrays/Dispatch.ts"],"names":[],"mappings":";;;;;;;;;IAEA,yBAAuC,yDAAyD,CAAC,CAAA;IACjG,IAAI,MAAM,GAAG,OAAO,CAAC,2CAA2C,CAAC,CAAC;IAElE,EAAE,CAAC,gCAAgC,EAAE;QAEpC,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG;YACP,UAAC,CAAQ;gBAER,MAAM,IAAI,CAAC,CAAC;YACb,CAAC;YACD,UAAC,CAAQ;gBAER,MAAM,IAAI,CAAC,CAAC;YACb,CAAC;YACD,IAAI;SACJ,CAAC;QAGF,mBAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAChB,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAE1B,MAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,iBAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,iBAAM,CAAC,IAAI,EAAC,EAAE,CAAC,CAAC;QAChB,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,GAAG;QACP,UAAC,CAAQ;YAER,MAAM,OAAO,CAAC;QACf,CAAC;KACD,CAAC;IAEF,EAAE,CAAC,yBAAyB,EAAC;QAC5B,MAAM,CAAC,MAAM,CAAC;YAEb,mBAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC;YAEb,iBAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,oBAAoB,EAAC;QACvB,MAAM,CAAC,YAAY,CAAC;YAEnB,mBAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;YACtB,mBAAQ,CAAC,CAAC,EAAE,EAAE,EAAC,UAAA,GAAG,IAAE,OAAA,MAAM,CAAC,KAAK,CAAC,GAAG,EAAC,OAAO,CAAC,EAAzB,CAAyB,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC;YAEnB,iBAAM,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;YACpB,iBAAM,CAAC,CAAC,EAAE,EAAE,EAAC,UAAA,GAAG,IAAE,OAAA,MAAM,CAAC,KAAK,CAAC,GAAG,EAAC,OAAO,CAAC,EAAzB,CAAyB,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"System/Collections/Arrays/Dispatch.js","sourcesContent":["///<reference path=\"../../../import\"/>\r\n\r\nimport {dispatch, mapped, unsafe} from \"../../../../../source/System/Collections/Array/Dispatch\";\r\nvar assert = require('../../../../../node_modules/assert/assert');\r\n\r\nit(\"should apply closures in order\", ()=>\r\n{\r\n\tvar result = 0;\r\n\tvar a = [\r\n\t\t(p:number)=>\r\n\t\t{\r\n\t\t\tresult += p;\r\n\t\t},\r\n\t\t(p:number)=>\r\n\t\t{\r\n\t\t\tresult *= p;\r\n\t\t},\r\n\t\tnull\r\n\t];\r\n\r\n\r\n\tdispatch(a, 10);\r\n\tassert.equal(result, 100);\r\n\r\n\tassert.equal(mapped(null, 20), null);\r\n\tassert.equal(mapped([], 20).length, 0);\r\n\tassert.equal(mapped(a, 20).length, 3);\r\n\tunsafe(null,10);\r\n\tassert.equal(result, 2400);\r\n});\r\n\r\nvar b = [\r\n\t(p:number)=>\r\n\t{\r\n\t\tthrow \"error\";\r\n\t}\r\n];\r\n\r\nit(\"should propagate errors\",()=>{\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tdispatch(b, 10);\r\n\t});\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tmapped(b, 10);\r\n\t});\r\n});\r\n\r\n\r\nit(\"should trap errors\",()=>{\r\n\tassert.doesNotThrow(()=>\r\n\t{\r\n\t\tdispatch(b, 10, true);\r\n\t\tdispatch(b, 10,err=>assert.equal(err,'error'));\r\n\t});\r\n\r\n\tassert.doesNotThrow(()=>\r\n\t{\r\n\t\tmapped(b, 10, true);\r\n\t\tmapped(b, 10,err=>assert.equal(err,'error'));\r\n\t});\r\n});"]}