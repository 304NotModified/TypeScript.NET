{"version":3,"sources":["system/collections/icollection.ts"],"names":["General","assertIsNumber","assertAdding","assertCopyToClear","assertRemoving","Collection","StringCollection","NumberCollection","InstanceCollection"],"mappings":"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A,EAAEA,+DAA+DA,CAACA,CAACA;YAG1FA,GAAGA,CAAAA,CAAUA,UAACA,EAAVA,aAAKA,EAALA,IAAUA,CAACA;gBAAXA,IAAIA,CAACA,GAAIA,CAACA,IAALA;gBAAOA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;aAAAA;YACzBA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,CAACA,MAAMA,EAAEA,oEAAoEA,CAACA,CAACA;QACvGA,CAACA,CAACA,CAACA;IAEJA,CAACA;IAED,wBAA2B,CAAgB;QAE1CC,EAAEA,CAACA,iBAAiBA,EAAEA;YAGrBA,IAAIA,KAAYA,CAACA;YACjBA,cAAcA,CAACA,KAAKA,GAAGA,CAACA,CAACA,KAAKA,CAACA,CAACA;YAChCA,EAAEA,CAAAA,CAACA,CAACA,CAACA,KAAKA,GAACA,CAACA,CAACA;gBAACA,MAAMA,wDAAwDA,CAACA;YAE7EA,IAAIA,CAACA,GAAOA,EAAEA,CAACA;YACfA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;YACZA,cAAcA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA;YAExBA,IACAA,CAACA;gBACAA,GAAGA,CAAAA,CAAUA,UAACA,EAAVA,aAAKA,EAALA,IAAUA,CAACA;oBAAXA,IAAIA,CAACA,GAAIA,CAACA,IAALA;oBAERA,KAAKA,IAAIA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBACrBA,cAAcA,CAACA,CAACA,CAACA,KAAKA,EAAEA,gBAAgBA,CAACA,CAACA;oBAC1CA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,KAAKA,EAAEA,KAAKA,EAAEA,0CAA0CA,CAACA,CAACA;oBACzEA,MAAMA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,EAAEA,wCAAwCA,CAACA,CAACA;iBACpEA;YACFA,CACAA;YAAAA,KAAKA,CAAAA,CAACA,EAAEA,CAACA,CACTA,CAACA;gBACAA,EAAEA,CAAAA,CAACA,CAACA,EAAEA,CAACA,YAAUA,CAACA,iCAAuBA,CAACA,CAACA,CAC3CA,CAACA;gBAEDA,CAACA;gBACDA,IAAIA,CACJA,CAACA;oBACAA,MAAMA,EAAEA,CAACA;gBACVA,CAACA;YACFA,CAACA;QACFA,CAACA,CAACA,CAACA;IAEJA,CAACA;IAED,oBACC,IAAW,EACX,UAAyB,EACzB,YAAgB;QAEhBC,EAAEA,CAAAA,CAACA,YAAYA,CAACA,OAAOA,CAACA,IAAIA,CAACA,IAAGA,CAACA,CAACA,CAACA;YAClCA,MAAMA,qFAAqFA,CAACA;QAM7FA,QAAQA,CAACA,IAAIA,EAAEA;YAEdA,YAAYA,CAACA,UAAUA,EAAEA,YAAYA,CAACA,CAACA;YACvCA,iBAAiBA,CAACA,UAAUA,CAACA,CAACA;YAC9BA,cAAcA,CAACA,UAAUA,CAACA,CAACA;YAC3BA,EAAEA,CAACA,sCAAsCA,EAAEA;gBAE1CA,MAAMA,CAACA,EAAEA,CAACA,CAACA,UAAUA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACvCA,CAACA,CAACA,CAAAA;QAEHA,CAACA,CAACA,CAACA;IAEJA,CAACA;IAxBe,kBAAU,aAwBzB,CAAA;IAED,0BACC,IAAW,EACX,UAA8B;QAI9BC,UAAUA,CAACA,IAAIA,GAAGA,GAAGA,GAAGA,SAASA,EAAEA,UAAUA,EAAEA;YAC9CA,EAAEA;YACFA,OAAOA;YACPA,OAAOA;YACPA,OAAOA;YACPA,OAAOA;SACPA,CAACA,CAAAA;IAGHA,CAACA;IAfe,wBAAgB,mBAe/B,CAAA;IAED,0BACC,IAAW,EACX,UAA8B;QAG9BC,UAAUA,CAACA,IAAIA,GAAGA,GAAGA,GAAGA,SAASA,EAAEA,UAAUA,EAAEA;YAC9CA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,GAAGA;SACHA,CAACA,CAACA;IAGJA,CAACA;IAjBe,wBAAgB,mBAiB/B,CAAA;IAED,4BACC,IAAW,EACX,UAA8B;QAE9BC,IAAIA,MAAMA,GAAGA,EAAEA,CAACA;QAEhBA,UAAUA,CAACA,IAAIA,GAAGA,GAAGA,GAAGA,SAASA,EAAEA,UAAUA,EAAEA;YAC9CA,SAASA;YACTA,EAAEA;YACFA,MAAMA;YACNA,EAAEA;YACFA,MAAMA;SACNA,CAACA,CAAAA;IACHA,CAACA;IAbe,0BAAkB,qBAajC,CAAA","file":"System/Collections/ICollection.js","sourcesContent":["///<reference path=\"../../import.d.ts\"/>\r\n///<reference path=\"../../../../source/System/Collections/ICollection.d.ts\"/>\r\n\r\nimport * as Text from '../../../../source/System/Text/Utility';\r\nimport * as AU from '../../../../source/System/Collections/Array/Utility';\r\nimport NotImplementedException from '../../../../source/System/Exceptions/NotImplementedException';\r\nvar assert = require('../../../../node_modules/assert/assert');\r\n\r\n/*\r\n * This is a reusable set of unit test for use with any ICollection to ensure all features of that ICollection function properly.\r\n */\r\n\r\nexport function General<T>(\r\n\tcollection:ICollection<string>):void\r\n{\r\n\tvar count = collection.count;\r\n\r\n\tdescribe(\".count\", ()=>\r\n\t{\r\n\t\tassertIsNumber(count);\r\n\t});\r\n}\r\n\r\nfunction assertIsNumber(value:any, message:string = \"should be a real number\")\r\n{\r\n\tassert.ok(!isNaN(value), message);\r\n}\r\n\r\nfunction assertAdding<T>(c:ICollection<T>, a:T[])\r\n{\r\n\tit(\".add(value)\", ()=>\r\n\t{\r\n\t\tvar count:number;\r\n\t\tfor(let v of a)\r\n\t\t{\r\n\t\t\tassertIsNumber(count = c.count, \"before adding\");\r\n\t\t\tc.add(v);\r\n\t\t\tassertIsNumber(c.count, \"after adding\");\r\n\t\t\tassert.equal(c.count, count + 1, \"count should have incremented\");\r\n\t\t\tassert.ok(c.contains(v), \"'value' must exist after adding\");\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction assertCopyToClear<T>(c:ICollection<T>)\r\n{\r\n\tit(\".copyTo(other) & .clear()\", ()=>\r\n\t{\r\n\t\tvar count:number = c.count;\r\n\t\tassertIsNumber(count);\r\n\t\tif(count<2) throw \"Can't assert '.copyTo()' or '.clear()' without at least (2) entries.\";\r\n\r\n\t\tvar a:T[] = [];\r\n\r\n\t\tc.copyTo(a);\r\n\t\tassertIsNumber(c.count, 'count');\r\n\t\tassert.equal(a.length, count, \"An empty array's length should match the count if copied to.\");\r\n\t\tc.clear();\r\n\t\tassert.equal(c.count, 0, \"A collection's count should be zero after calling '.clear()'.\");\r\n\r\n\t\t// Restore contents.\r\n\t\tfor(let v of a) c.add(v);\r\n\r\n\t\tvar extraSize = 10;\r\n\t\tvar b = AU.initialize<T>(count + extraSize);\r\n\r\n\t\tc.copyTo(b, 1);\r\n\t\tassert.equal(b.length, count + extraSize, \"An array's length should be equal to it's original length if the count added does not exceed the length.\");\r\n\t\tc.copyTo(b, count + extraSize - 1);\r\n\t\tassert.equal(b.length, 2*count + extraSize - 1, \"An array's length should be equal to index+count if the count exceeds the length.\");\r\n\t\tc.clear();\r\n\t\tassert.equal(c.count, 0, \"A collection's count should be zero after calling '.clear()'.\");\r\n\r\n\t\t// Restore contents.\r\n\t\tfor(let v of a) c.add(v);\r\n\t\tassert.equal(c.count, a.length, \"A collection's count should be equal to the number of items added.\");\r\n\t});\r\n\r\n}\r\n\r\nfunction assertRemoving<T>(c:ICollection<T>)\r\n{\r\n\tit(\".remove(values)\", ()=>\r\n\t{\r\n\r\n\t\tvar count:number;\r\n\t\tassertIsNumber(count = c.count);\r\n\t\tif(c.count<2) throw \"Can't assert '.remove()' without at least (2) entries.\";\r\n\r\n\t\tvar a:T[] = [];\r\n\t\tc.copyTo(a);\r\n\t\tassertIsNumber(c.count);\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfor(let v of a)\r\n\t\t\t{\r\n\t\t\t\tcount -= c.remove(v); // More than one instance can exist and it should remove both.\r\n\t\t\t\tassertIsNumber(c.count, \"after removing\");\r\n\t\t\t\tassert.equal(c.count, count, \"'count' should increment after removing.\");\r\n\t\t\t\tassert.ok(!c.contains(v), \"'value' must not exist after removing.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tif((ex)instanceof(NotImplementedException))\r\n\t\t\t{\r\n\t\t\t\t//console.log(ex);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow ex;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n}\r\n\r\nexport function Collection<T>(\r\n\tname:string,\r\n\tcollection:ICollection<T>,\r\n\tsourceValues:T[]):void\r\n{\r\n\tif(sourceValues.indexOf(null)!= -1)\r\n\t\tthrow \"Source values should not contain null as checking against null is one of the tests.\";\r\n\r\n\t/* The following tests inherently test:\r\n\t - count\r\n\t - contains\r\n\t */\r\n\tdescribe(name, ()=>\r\n\t{\r\n\t\tassertAdding(collection, sourceValues);\r\n\t\tassertCopyToClear(collection);\r\n\t\tassertRemoving(collection);\r\n\t\tit(\"equality comparison should be strict\", ()=>\r\n\t\t{\r\n\t\t\tassert.ok(!collection.contains(null));\r\n\t\t})\r\n\r\n\t});\r\n\r\n}\r\n\r\nexport function StringCollection(\r\n\tname:string,\r\n\tcollection:ICollection<string>):void\r\n{\r\n\r\n\t//noinspection SpellCheckingInspection\r\n\tCollection(name + '<' + 'string>', collection, [\r\n\t\t\"\",\r\n\t\t\"lorem\",\r\n\t\t\"ipsum\",\r\n\t\t\"dolem\",\r\n\t\t\"ipsum\" // Have a repeated entry to test removing multiple.\r\n\t])\r\n\r\n\r\n}\r\n\r\nexport function NumberCollection(\r\n\tname:string,\r\n\tcollection:ICollection<number>):void\r\n{\r\n\t//noinspection SpellCheckingInspection\r\n\tCollection(name + '<' + 'number>', collection, [\r\n\t\t0,\r\n\t\t1,\r\n\t\t1, // Have a repeated entry to test removing multiple.\r\n\t\t2,\r\n\t\t3,\r\n\t\t5,\r\n\t\t8,\r\n\t\tNaN // Must be able to reconginze NaN\r\n\t]);\r\n\r\n\r\n}\r\n\r\nexport function InstanceCollection(\r\n\tname:string,\r\n\tcollection:ICollection<Object>):void\r\n{\r\n\tvar repeat = {};\r\n\t//noinspection SpellCheckingInspection\r\n\tCollection(name + '<' + 'Object>', collection, [\r\n\t\tundefined,\r\n\t\t{},\r\n\t\trepeat,\r\n\t\t{},\r\n\t\trepeat // Have a repeated entry to test removing multiple.\r\n\t])\r\n}\r\n\r\n"]}