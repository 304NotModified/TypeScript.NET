{"version":3,"sources":["System/Collections/LinkedList.ts"],"names":[],"mappings":";;;;;;;;;IAEA,IAAY,gBAAgB,WAAM,eAAe,CAAC,CAAA;IAClD,2BAAuB,kDAAkD,CAAC,CAAA;IAC1E,wBAAuB,qDAAqD,CAAC,CAAA;IAC7E,IAAI,MAAM,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;IAE/D,IAAM,UAAU,GAAG,YAAY,CAAC;IAChC,gBAAgB,CAAC,gBAAgB,CAAC,UAAU,EAAC,IAAI,oBAAU,EAAU,CAAC,CAAC;IACvE,gBAAgB,CAAC,gBAAgB,CAAC,UAAU,EAAC,IAAI,oBAAU,EAAU,CAAC,CAAC;IACvE,gBAAgB,CAAC,kBAAkB,CAAC,UAAU,EAAC,IAAI,oBAAU,EAAU,CAAC,CAAC;IAEzE,QAAQ,CAAC,wBAAwB,EAAE;QAElC,IAAI,KAAK,GAAY,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,KAAK,GAAY,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QACvD,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;QACrD,IAAI,IAAI,GAAG,IAAI,oBAAU,CAAS,KAAK,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QAExB,IAAI,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,IAAI,GAAG,YAAY,CAAC,MAAM,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAI3B,EAAE,CAAC,qCAAqC,EAAE;YAEzC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC3B,MAAM,CAAC,EAAE,CAAC,kBAAQ,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE;YAExD,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC3B,MAAM,CAAC,EAAE,CAAC,kBAAQ,CAAC,YAAY,EAAC,KAAK,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC;QAC7F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE;YAEvD,MAAM,CAAC,KAAK,CAAC,IAAI,GAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,kBAAQ,CAAC,YAAY,EAAC,KAAK,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;IAGJ,CAAC,CAAC,CAAC","file":"System/Collections/LinkedList.js","sourcesContent":["///<reference path=\"../../import.d.ts\"/>\r\n\r\nimport * as ICollectionTests from \"./ICollection\";\r\nimport LinkedList from \"../../../../source/System/Collections/LinkedList\";\r\nimport {areEqual} from \"../../../../source/System/Collections/Array/Compare\";\r\nvar assert = require('../../../../node_modules/assert/assert');\r\n\r\nconst CLASS_NAME = 'LinkedList';\r\nICollectionTests.StringCollection(CLASS_NAME,new LinkedList<string>());\r\nICollectionTests.NumberCollection(CLASS_NAME,new LinkedList<number>());\r\nICollectionTests.InstanceCollection(CLASS_NAME,new LinkedList<Object>());\r\n\r\ndescribe('.addAfter & .addBefore', ()=>\r\n{\r\n\tvar part1:number[] = [1,2,3], part2:number[] = [5,6,7];\r\n\tvar parts = part1.concat(part2), len1 = parts.length;\r\n\tvar list = new LinkedList<number>(parts);\r\n\tvar list1 = list.toArray();\r\n\tvar count1 = list.count;\r\n\r\n\tvar partsSpliced = part1.concat([4]).concat(part2);\r\n\tvar len2 = partsSpliced.length;\r\n\tlist.find(5).addBefore(4);\r\n\tvar count2 = list.count;\r\n\tvar list2 = list.toArray();\r\n\tlist.find(6).addAfter(6.5);\r\n\tvar count3 = list.count;\r\n\tvar list3 = list.toArray();\r\n\r\n\r\n\t\r\n\tit('should match expected initial count', ()=>\r\n\t{\r\n\t\tassert.equal(len1, count1);\r\n\t\tassert.ok(areEqual(parts,list1));\r\n\t});\r\n\r\n\tit('should match expected count after inserting before', ()=>\r\n\t{\r\n\t\tassert.equal(len2, count2);\r\n\t\tassert.ok(areEqual(partsSpliced,list2), partsSpliced.join(',') + \" != \" + list2.join(',') );\r\n\t});\r\n\r\n\tit('should match expected count after inserting after', ()=>\r\n\t{\r\n\t\tassert.equal(len2+1, count3);\r\n\t\tassert.ok(areEqual(partsSpliced,list2), list3.join(',') );\r\n\t});\r\n\r\n\r\n});"]}