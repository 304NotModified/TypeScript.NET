{"version":3,"sources":["System/Collections/Enumeration/Enumerator.ts"],"names":[],"mappings":"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","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["///<reference path=\"../../../import.d.ts\"/>\r\n\r\nimport {TypeInfo} from \"../../../../../source/System/Types\";\r\nimport Queue from \"../../../../../source/System/Collections/Queue\";\r\nimport * as Enumerator from \"../../../../../source/System/Collections/Enumeration/Enumerator\";\r\nimport {IArray} from \"../../../../../source/System/Collections/Array/IArray\";\r\nimport {IEnumerator} from \"../../../../../source/System/Collections/Enumeration/IEnumerator\";\r\nvar assert = require('../../../../../node_modules/assert/assert');\r\n\r\nconst VOID0:any = void(0);\r\n\r\ndescribe(\".from(source)\",()=>{\r\n\r\n\tit(\"null should use an empty enumerator\",()=>{\r\n\t\tvar test = Enumerator.from(null), count = 0;\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(test.current,VOID0);\r\n\t\tassert.equal(test.nextValue(),VOID0);\r\n\t\tassert.equal(test.next().done,true);\r\n\t\tassert.equal(count,0);\r\n\t\ttest.reset();\r\n\t\ttest.dispose();\r\n\t});\r\n\r\n\tit(\"primitive values should throw\",()=>{\r\n\t\tassert.throws(()=>Enumerator.from(<any>1));\r\n\t});\r\n\r\n\tit(\"non enumerable objects should throw\",()=>{\r\n\t\tassert.throws(()=>Enumerator.from(<any>{}));\r\n\t});\r\n\r\n\tit(\"functions should be treated as generators\",()=>{\r\n\t\tvar e = Enumerator.from((prev:number,i:number)=>(prev || 1)+i);\r\n\t\tfunction pass(e:IEnumerator<number>){\r\n\t\t\tassert.equal(e.nextValue(),1);\r\n\t\t\tassert.equal(e.nextValue(),2);\r\n\t\t\tassert.equal(e.nextValue(),4);\r\n\t\t\tassert.equal(e.nextValue(),7);\r\n\t\t\tassert.equal(e.nextValue(),11);\r\n\t\t\tassert.equal(e.nextValue(),16);\r\n\t\t}\r\n\t\tpass(e);\r\n\t\te.reset();\r\n\t\tpass(e);\r\n\t\te.dispose();\r\n\t\tassert.ok(!e.moveNext());\r\n\t\tassert.equal(e.nextValue(),void 0);\r\n\t});\r\n\r\n\tit(\"IEnumerable should enumerate\",()=>{\r\n\t\tvar a = [0,1,2,3,4];\r\n\t\tvar len = a.length, count = 0;\r\n\t\tvar q = new Queue(a);\r\n\t\tvar type = new TypeInfo(q);\r\n\t\ttype.member(\"getEnumerator\");\r\n\t\t// Creates an enumerable.\r\n\t\tvar test = Enumerator.from({getEnumerator:()=>Enumerator.from(a)});\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n\tit(\"arrays should enumerate\",()=>{\r\n\t\tvar a = [0,1,2,3,4];\r\n\t\tvar type = new TypeInfo(a);\r\n\t\ttype.member(\"length\");\r\n\t\tvar len = a.length, count = 0;\r\n\t\tvar test = Enumerator.from(a);\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n\tit(\"strings should enumerate\",()=>{\r\n\t\tvar a = \"01234\";\r\n\t\tvar type = new TypeInfo(a);\r\n\t\ttype.member(\"length\");\r\n\t\tvar len = a.length, count = 0;\r\n\t\tvar test = Enumerator.from(a);\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n\tit(\"array like objects should enumerate\",()=>{\r\n\t\tvar a:IArray<number> = {0:0,1:1,2:2,3:3,4:4,length:5};\r\n\t\tvar type = new TypeInfo(a);\r\n\t\ttype.member(\"length\");\r\n\t\tvar len = a.length, count = 0;\r\n\t\tvar test = Enumerator.from(a);\r\n\t\twhile(test.moveNext()) {\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassert.equal(count,len);\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".forEach(source)\",()=>\r\n{\r\n\tconst blankAction:(n:any,i:number)=>void = (n,i)=>{};\r\n\r\n\tit(\"null values ignored\", ()=>\r\n\t{\r\n\t\tassert.doesNotThrow(()=>{\r\n\t\t\tassert.equal(Enumerator.forEach(null,blankAction),-1);\r\n\t\t});\r\n\t});\r\n\r\n\tit(\"non-enumerable values ignored\", ()=>\r\n\t{\r\n\t\tassert.doesNotThrow(()=>{\r\n\t\t\tassert.equal(Enumerator.forEach(<any>{},blankAction),-1);\r\n\t\t});\r\n\t\tassert.doesNotThrow(()=>{\r\n\t\t\tassert.equal(Enumerator.forEach(<any>1,blankAction),-1);\r\n\t\t});\r\n\t});\r\n\r\n});\r\n"]}