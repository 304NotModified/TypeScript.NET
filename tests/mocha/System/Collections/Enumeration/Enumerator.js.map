{"version":3,"sources":["system/collections/enumeration/enumerator.ts"],"names":[],"mappings":";;;;;;;;;IAEA,sBAAuB,oCAAoC,CAAC,CAAA;IAC5D,sBAAkB,gDAAgD,CAAC,CAAA;IACnE,IAAY,UAAU,WAAM,iEAAiE,CAAC,CAAA;IAC9F,IAAI,MAAM,GAAG,OAAO,CAAC,2CAA2C,CAAC,CAAC;IAElE,EAAE,CAAC,oBAAoB,EAAC;QACvB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,IAAI,eAAK,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,IAAI,GAAG,IAAI,gBAAQ,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC7B,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,OAAM,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;YACvB,KAAK,EAAE,CAAC;QACT,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAC;QACjB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QACpB,IAAI,IAAI,GAAG,IAAI,gBAAQ,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC;QAC9B,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,EAAC,aAAa,EAAC,cAAI,OAAA,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAlB,CAAkB,EAAC,CAAC,CAAC;QACnE,OAAM,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;YACvB,KAAK,EAAE,CAAC;QACT,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAC;QAClB,IAAI,CAAC,GAAkB,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,MAAM,EAAC,CAAC,EAAC,CAAC;QACtD,IAAI,IAAI,GAAG,IAAI,gBAAQ,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC;QAC9B,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,OAAM,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;YACvB,KAAK,EAAE,CAAC;QACT,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["///<reference path=\"../../../import.d.ts\"/>\r\n\r\nimport {TypeInfo} from '../../../../../source/System/Types';\r\nimport Queue from '../../../../../source/System/Collections/Queue';\r\nimport * as Enumerator from '../../../../../source/System/Collections/Enumeration/Enumerator';\r\nvar assert = require('../../../../../node_modules/assert/assert');\r\n\r\nit(\".from(IEnumerable)\",()=>{\r\n\tvar a = [0,1,2,3,4];\r\n\tvar len = a.length, count = 0;\r\n\tvar q = new Queue(a);\r\n\tvar type = new TypeInfo(q);\r\n\ttype.member(\"getEnumerator\");\r\n\tvar test = Enumerator.from(q);\r\n\twhile(test.moveNext()) {\r\n\t\tcount++;\r\n\t}\r\n\tassert.equal(count,len);\r\n});\r\n\r\nit(\".from(Array)\",()=>{\r\n\tvar a = [0,1,2,3,4];\r\n\tvar type = new TypeInfo(a);\r\n\ttype.member(\"length\");\r\n\tvar len = a.length, count = 0;\r\n\tvar test = Enumerator.from({getEnumerator:()=>Enumerator.from(a)});\r\n\twhile(test.moveNext()) {\r\n\t\tcount++;\r\n\t}\r\n\tassert.equal(count,len);\r\n});\r\n\r\nit(\".from(IArray)\",()=>{\r\n\tvar a:IArray<number> = {0:0,1:1,2:2,3:3,4:4,length:5};\r\n\tvar type = new TypeInfo(a);\r\n\ttype.member(\"length\");\r\n\tvar len = a.length, count = 0;\r\n\tvar test = Enumerator.from(a);\r\n\twhile(test.moveNext()) {\r\n\t\tcount++;\r\n\t}\r\n\tassert.equal(count,len);\r\n});\r\n\r\n"]}