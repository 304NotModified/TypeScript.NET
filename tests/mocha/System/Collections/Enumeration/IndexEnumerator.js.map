{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.ts"],"names":[],"mappings":"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","file":"IndexEnumerator.js","sourcesContent":["///<reference types=\"assert\"/>\r\nimport assert = require(\"assert\");\r\nimport IndexEnumerator from \"../../../../../dist/commonjs/System/Collections/Enumeration/IndexEnumerator\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\n\r\nconst a:{ [index:number]:number } = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4};\r\n\r\n\r\nit(\"should ignore null sources\", ()=>\r\n{\r\n\r\n\tassert.doesNotThrow(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: null,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 0\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n\tassert.doesNotThrow(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: null,\r\n\t\t\t\tlength: 3,\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.dispose();\r\n\t});\r\n\r\n});\r\n\r\n\r\nit(\"should throw for invalid step\", ()=>\r\n{\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 0\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 1.2\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n});\r\n\r\nit(\"should throw for invalid pointer\", ()=>\r\n{\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1.3,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 1\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n});\r\n\r\nit(\"should throw for invalid length\", ()=>\r\n{\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: -1,\r\n\t\t\t\tstep: 1\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n});\r\n\r\nit(\"should enumerate by 1 with no step\",()=>{\r\n\r\n\r\n\tvar a = [0,1,2,3,4];\r\n\tvar len = a.length, count = 0;\r\n\tvar test = new IndexEnumerator(()=>\r\n\t{\r\n\t\treturn {\r\n\t\t\tsource: [0,1,2,3,4],\r\n\t\t\tlength: 5,\r\n\t\t}\r\n\t});\r\n\tvar last:number = null;\r\n\twhile(test.moveNext()) {\r\n\t\tcount++;\r\n\t\tlast = test.current;\r\n\t}\r\n\tassert.equal(count,len);\r\n\tassert.equal(last,4);\r\n\ttest.dispose();\r\n});"]}