{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.ts"],"names":[],"mappings":"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","file":"System/Collections/Enumeration/IndexEnumerator.js","sourcesContent":["///<reference path=\"../../../import.d.ts\"/>\r\n\r\nimport IndexEnumerator from \"../../../../../source/System/Collections/Enumeration/IndexEnumerator\";\r\nvar assert = require('../../../../../node_modules/assert/assert');\r\n\r\nconst VOID0:any = void(0);\r\n\r\n\r\nconst a:{ [index:number]:number } = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4};\r\n\r\n\r\nit(\"should ignore null sources\", ()=>\r\n{\r\n\r\n\tassert.doesNotThrow(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: null,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 0\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n\tassert.doesNotThrow(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: null,\r\n\t\t\t\tlength: 3,\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.dispose();\r\n\t});\r\n\r\n});\r\n\r\n\r\nit(\"should throw for invalid step\", ()=>\r\n{\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 0\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 1.2\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n});\r\n\r\nit(\"should throw for invalid pointer\", ()=>\r\n{\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1.3,\r\n\t\t\t\tlength: 3,\r\n\t\t\t\tstep: 1\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n});\r\n\r\nit(\"should throw for invalid length\", ()=>\r\n{\r\n\r\n\tassert.throws(()=>\r\n\t{\r\n\t\tvar i = new IndexEnumerator(()=>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tsource: a,\r\n\t\t\t\tpointer: 1,\r\n\t\t\t\tlength: -1,\r\n\t\t\t\tstep: 1\r\n\t\t\t}\r\n\t\t});\r\n\t\ti.moveNext();\r\n\t});\r\n\r\n});\r\n\r\nit(\"should enumerate by 1 with no step\",()=>{\r\n\r\n\r\n\tvar a = [0,1,2,3,4];\r\n\tvar len = a.length, count = 0;\r\n\tvar test = new IndexEnumerator(()=>\r\n\t{\r\n\t\treturn {\r\n\t\t\tsource: [0,1,2,3,4],\r\n\t\t\tlength: 5,\r\n\t\t}\r\n\t});\r\n\tvar last:number = null;\r\n\twhile(test.moveNext()) {\r\n\t\tcount++;\r\n\t\tlast = test.current;\r\n\t}\r\n\tassert.equal(count,len);\r\n\tassert.equal(last,4);\r\n\ttest.dispose();\r\n});"]}