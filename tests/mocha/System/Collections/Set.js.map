{"version":3,"sources":["System/Collections/Set.ts"],"names":[],"mappings":";;;;;;;;;IAGA,IAAY,gBAAgB,WAAM,eAAe,CAAC,CAAA;IAClD,oBAAgB,2CAA2C,CAAC,CAAA;IAC5D,IAAI,MAAM,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;IAG/D,gBAAgB,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,EAAE,IAAI,aAAG,EAAU,EAAE;QAClE,EAAE;QACF,OAAO;QACP,OAAO;QACP,OAAO;KACP,CAAC,CAAC;IAEH,gBAAgB,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,EAAE,IAAI,aAAG,EAAU,EAAE;QAClE,CAAC;QACD,CAAC;QACD,CAAC;QACD,CAAC;QACD,CAAC;QACD,CAAC;QACD,EAAE;QACF,EAAE;KACF,CAAC,CAAC;IAGH,gBAAgB,CAAC,UAAU,CAAC,MAAM,GAAG,YAAY,EAAE,IAAI,aAAG,EAAa,EAAE;QACxE,CAAC;QACD,CAAC;QACD,CAAC;QACD,CAAC;QACD,CAAC;QACD,CAAC;QACD,EAAE;QACF,EAAE;QACF,EAAE;QACF,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,KAAK;KAEL,CAAC,CAAC;IAEH,IAAI,gBAAgB,GAAG;QACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI;KACvD,CAAC;IACF,IAAI,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvC,IAAI,QAAQ,GAAG,gBAAgB,CAAC,KAAK,EAAE,CAAC;IACxC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,IAAI,kBAAkB,GAAG,CAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,SAAS,CAAC,CAAC;IAGhD,EAAE,CAAC,2BAA2B,EAAE;QAE/B,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;QAE7C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAE1B,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,cAAc,EAAE;QAGxB,EAAE,CAAC,+EAA+E,EAAE;YAEnF,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAC7C,IAAI,CAAC,GAAG,gBAAgB,CAAC,KAAK,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;YAEd,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;YACrF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,kCAAkC,CAAC,CAAC;YAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,mCAAmC,CAAC,CAAC;YAChF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE;QAG3B,EAAE,CAAC,mEAAmE,EAAE;YAEvE,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAE7C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,iDAAiD,CAAC,CAAC;YACxG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;YAC9E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,uBAAuB,EAAE;QAGjC,EAAE,CAAC,mEAAmE,EAAE;YAEvE,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAE7C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE,KAAK,EAAE,2DAA2D,CAAC,CAAC;YACzH,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,iCAAiC,CAAC,CAAC;YACpF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE;QAGzB,EAAE,CAAC,yEAAyE,EAAE;YAE7E,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAE7C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,iDAAiD,CAAC,CAAC;YACtG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,iCAAiC,CAAC,CAAC;YAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,kCAAkC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,qBAAqB,EAAE;QAG/B,EAAE,CAAC,gEAAgE,EAAE;YAEpE,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAE7C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,KAAK,EAAE,2DAA2D,CAAC,CAAC;YACvH,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,iCAAiC,CAAC,CAAC;YACnF,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,kCAAkC,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE;QAGzB,EAAE,CAAC,iDAAiD,EAAE;YAErD,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAC7C,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC,GAAG,CAAC,CAAC,CAAC;YAEtB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE;QAG5B,EAAE,CAAC,iDAAiD,EAAE;YAErD,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAC7C,CAAC,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;YAEpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE;QAGxB,EAAE,CAAC,iDAAiD,EAAE;YAErD,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAC7C,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YAChB,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;YAEhC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE;QAGlC,EAAE,CAAC,uCAAuC,EAAE;YAE3C,IAAI,CAAC,GAAG,IAAI,aAAG,CAAY,gBAAgB,CAAC,CAAC;YAC7C,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YAChB,CAAC,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;YAE1C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","file":"System/Collections/Set.js","sourcesContent":["///<reference path=\"../../import.d.ts\"/>\r\n///<reference path=\"../../../../source/System/Primitive.d.ts\"/>\r\n\r\nimport * as ICollectionTests from \"./ICollection\";\r\nimport Set from \"../../../../source/System/Collections/Set\";\r\nvar assert = require('../../../../node_modules/assert/assert');\r\n\r\n//noinspection SpellCheckingInspection\r\nICollectionTests.Collection('Set<' + 'string>', new Set<string>(), [\r\n\t\"\",\r\n\t\"lorem\",\r\n\t\"ipsum\",\r\n\t\"dolem\"\r\n]);\r\n\r\nICollectionTests.Collection('Set<' + 'number>', new Set<number>(), [\r\n\t0,\r\n\t1,\r\n\t2,\r\n\t3,\r\n\t5,\r\n\t7,\r\n\t11,\r\n\t13\r\n]);\r\n\r\n\r\nICollectionTests.Collection('Set<' + 'Primitive>', new Set<Primitive>(), [\r\n\t0,\r\n\t1,\r\n\t2,\r\n\t3,\r\n\t5,\r\n\t7,\r\n\t11,\r\n\t13,\r\n\t\"\",\r\n\t\"0\",\r\n\t\"1\",\r\n\t\"2\",\r\n\t\"3\",\r\n\t\"5\",\r\n\t\"7\",\r\n\t\"11\",\r\n\t\"13\",\r\n\ttrue,\r\n\tfalse\r\n\r\n]);\r\n\r\nvar sourcePrimitives = [\r\n\t1, 2, 1, \"1\", true, false, \"hello\", \"hello\", \"hi\", true\r\n];\r\nvar subset = sourcePrimitives.slice(4);\r\nvar superset = sourcePrimitives.slice();\r\nsuperset.push(\"NO\");\r\nvar otherWithIntersect = [1,\"1\",4000,\"goodbye\"];\r\n\r\n\r\nit(\"should not repeat entries\", ()=>\r\n{\r\n\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\tassert.equal(s.count, 7);\r\n\r\n});\r\n\r\n\r\ndescribe(\".setEquals()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should equal to the same set and not equal for different sets\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\t\tvar v = sourcePrimitives.slice();\r\n\t\tv[8] = \"hola\";\r\n\r\n\t\tassert.equal(s.setEquals(sourcePrimitives), true, \"Exact same set should be equal.\");\r\n\t\tassert.equal(s.setEquals(subset), false, \"Smaller set should not be equal.\");\r\n\t\tassert.equal(s.setEquals(superset), false, \"Larger set should not be a equal.\");\r\n\t\tassert.equal(s.setEquals(v), false, \"Similar set should not be a equal.\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".isSupersetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a super set of any equal or smaller set\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isSupersetOf(sourcePrimitives), true, \"Exact same set should be a superset and subset.\");\r\n\t\tassert.equal(s.isSupersetOf(subset), true, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isSupersetOf(superset), false, \"Larger set should not be a subset.\");\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".isProperSupersetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a super set of any smaller matching set\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isProperSupersetOf(sourcePrimitives), false, \"Exact same set should not be a proper superset or subset.\");\r\n\t\tassert.equal(s.isProperSupersetOf(subset), true, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isProperSupersetOf(superset), false, \"Larger set should not be a subset.\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".isSubsetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a sub set of any equal or larger matching set\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isSubsetOf(sourcePrimitives), true, \"Exact same set should be a superset and subset.\");\r\n\t\tassert.equal(s.isSubsetOf(subset), false, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isSubsetOf(superset), true, \"Larger set should be a superset.\");\r\n\t});\r\n\r\n});\r\n\r\n\r\ndescribe(\".isProperSubsetOf()\", ()=>\r\n{\r\n\r\n\tit(\"the current set should be a sub set of any larger matching set\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\r\n\t\tassert.equal(s.isProperSubsetOf(sourcePrimitives), false, \"Exact same set should not be a proper superset or subset.\");\r\n\t\tassert.equal(s.isProperSubsetOf(subset), false, \"Smaller set should be a subset.\");\r\n\t\tassert.equal(s.isProperSubsetOf(superset), true, \"Larger set should be a superset.\");\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".exceptWith()\", ()=>\r\n{\r\n\r\n\tit(\"should remove the specified items fromt the set\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\t\ts.exceptWith([1,\"1\"]);\r\n\r\n\t\tassert.equal(s.count, 5);\r\n\t\tassert.equal(s.contains(1), false);\r\n\t\tassert.equal(s.contains(\"1\"), false);\r\n\t\tassert.equal(s.contains(\"hello\"), true);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".intersectWith()\", ()=>\r\n{\r\n\r\n\tit(\"should only leave the intersecting items behind\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\t\ts.intersectWith(otherWithIntersect);\r\n\r\n\t\tassert.equal(s.count, 2);\r\n\t\tassert.equal(s.contains(1), true);\r\n\t\tassert.equal(s.contains(\"1\"), true);\r\n\t\tassert.equal(s.contains(\"hello\"), false);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".unionWith()\", ()=>\r\n{\r\n\r\n\tit(\"should only leave the intersecting items behind\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\t\tvar c = s.count;\r\n\t\ts.unionWith(otherWithIntersect);\r\n\r\n\t\tassert.equal(s.count, c+2);\r\n\t\tassert.equal(s.contains(4000), true);\r\n\t\tassert.equal(s.contains(\"goodbye\"), true);\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\".symmetricExceptWith()\", ()=>\r\n{\r\n\r\n\tit(\"should only leave unique items behind\", ()=>\r\n\t{\r\n\t\tvar s = new Set<Primitive>(sourcePrimitives);\r\n\t\tvar c = s.count;\r\n\t\ts.symmetricExceptWith(otherWithIntersect);\r\n\r\n\t\tassert.equal(s.count, c-2+2);\r\n\t\tassert.equal(s.contains(4000), true);\r\n\t\tassert.equal(s.contains(\"goodbye\"), true);\r\n\t\tassert.equal(s.contains(1), false);\r\n\t\tassert.equal(s.contains(\"1\"), false);\r\n\t});\r\n\r\n});"]}