{"version":3,"sources":["System/TypeValidator.ts"],"names":[],"mappings":"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","file":"System/TypeValidator.js","sourcesContent":["///<reference path=\"../import.d.ts\"/>\r\n\r\nimport {TypeInfoHelper, TypeValidator} from \"../../../source/System/TypeValidator\";\r\nvar assert = require('../../../node_modules/assert/assert');\r\n\r\nconst example = new TypeInfoHelper({\r\n\ta: {},\r\n\tb: \"hello\",\r\n\tc: 1,\r\n\td: true,\r\n\te: {\r\n\t\tf: \"whatever\",\r\n\t\tg: false,\r\n\t\th: [\r\n\t\t\t0,\r\n\t\t\t1,\r\n\t\t\t\"2\"\r\n\t\t]\r\n\t},\r\n\ti: \"noise\"\r\n});\r\n\r\ndescribe('.contains(descriptor)', ()=>\r\n{\r\n\tit('should detect a positive match', ()=>\r\n\t{\r\n\t\tassert.ok(example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: Array\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tassert.ok(example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: [\r\n\t\t\t\t\tNumber,\r\n\t\t\t\t\tNumber,\r\n\t\t\t\t\tString\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tassert.ok(example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: [\r\n\t\t\t\t\tNumber,\r\n\t\t\t\t\tNumber,\r\n\t\t\t\t\tString\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\ti: \"noise\"\r\n\t\t}));\r\n\r\n\t\tassert.ok(example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: [\r\n\t\t\t\t\tNumber\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}))\r\n\t});\r\n\r\n\tit('should detect a negative match', ()=>\r\n\t{\r\n\t\tassert.ok(!example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: [\r\n\t\t\t\t\tNumber,\r\n\t\t\t\t\tBoolean,\r\n\t\t\t\t\tString\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tassert.ok(!example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: [\r\n\t\t\t\t\tString\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\r\n\t\tassert.ok(!example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: [\r\n\t\t\t\t\tNumber\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\ti: \"goo\"\r\n\t\t}));\r\n\r\n\t\tassert.ok(!example.contains({\r\n\t\t\ta: Object,\r\n\t\t\tb: String,\r\n\t\t\tc: Number,\r\n\t\t\td: Boolean,\r\n\t\t\te: {\r\n\t\t\t\tf: String,\r\n\t\t\t\tg: Boolean,\r\n\t\t\t\th: [\r\n\t\t\t\t\tNumber\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\ti: Boolean\r\n\t\t}));\r\n\t});\r\n});\r\n\r\ndescribe(\"Example\", ()=>\r\n\t\tit(\"should work\", ()=>\r\n\t\t{\r\n\r\n\t\t\t// Step 1: Declare the expected type/interface.\r\n\t\t\tinterface MyType\r\n\t\t\t{\r\n\t\t\t\ta:Object,\r\n\t\t\t\tb:String,\r\n\t\t\t\tc:Number,\r\n\t\t\t\td:Boolean,\r\n\t\t\t\te:{\r\n\t\t\t\t\tf:String,\r\n\t\t\t\t\tg:Boolean,\r\n\t\t\t\t\th:[\r\n\t\t\t\t\t\tNumber,\r\n\t\t\t\t\t\tBoolean,\r\n\t\t\t\t\t\tString\r\n\t\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Step 2: Copy the interface as an actual object and <type> the validator\r\n\t\t\tconst MyTypeValidator\r\n\t\t\t\t      = new TypeValidator<MyType>(\r\n\t\t\t\t{\r\n\t\t\t\t\ta: Object,\r\n\t\t\t\t\tb: String,\r\n\t\t\t\t\tc: Number,\r\n\t\t\t\t\td: Boolean,\r\n\t\t\t\t\te: {\r\n\t\t\t\t\t\tf: String,\r\n\t\t\t\t\t\tg: Boolean,\r\n\t\t\t\t\t\th: [\r\n\t\t\t\t\t\t\tNumber,\r\n\t\t\t\t\t\t\tBoolean,\r\n\t\t\t\t\t\t\tString\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\t// Step 3: validate as many times as you want:\r\n\t\t\tvar myItem = {\r\n\t\t\t\ta: {},\r\n\t\t\t\tb: \"hello\",\r\n\t\t\t\tc: 1,\r\n\t\t\t\td: true,\r\n\t\t\t\te: {\r\n\t\t\t\t\tf: \"whatever\",\r\n\t\t\t\t\tg: false,\r\n\t\t\t\t\th: [\r\n\t\t\t\t\t\t0,\r\n\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\"2\"\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\ti: \"noise\"\r\n\t\t\t};\r\n\r\n\t\t\t// no compile-time type errors!\r\n\t\t\tif(MyTypeValidator.isSubsetOf(myItem))\r\n\t\t\t{\r\n\t\t\t\tassert.equal(myItem.e.h.length, 3);\r\n\t\t\t\tassert.equal(myItem.b, \"hello\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tassert.ok(false, \"Should have validated ok.\");\r\n\t\t\t}\r\n\r\n\t\t\tassert.ok(!MyTypeValidator.isSubsetOf(true));\r\n\t\t\tassert.ok(!MyTypeValidator.isSubsetOf(\"no\"));\r\n\t\t\tassert.ok(!MyTypeValidator.isSubsetOf({\r\n\t\t\t\ta:{},\r\n\t\t\t\tb:\"hello\"\r\n\t\t\t}));\r\n\r\n\t\t})\r\n);\r\n"]}