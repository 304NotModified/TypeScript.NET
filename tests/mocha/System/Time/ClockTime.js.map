{"version":3,"sources":["System/Time/ClockTime.ts"],"names":[],"mappings":";AACA,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClC,0BAAsB,iDAAiD,CAAC,CAAA;AAExE,wBAAoB,0CAA0C,CAAC,CAAA;AAG/D,IACA,IAAI,GAAU,iBAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EACjC,IAAI,GAAU,iBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAChC,MAAM,GAAQ,iBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAChC,MAAM,GAAQ,iBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAChC,WAAW,GAAG,iBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAEnC,IAAI,EAAE,GAAG,IAAI,mBAAS,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;AAC1D,IAAI,EAAE,GAAG,IAAI,mBAAS,CACrB,IAAI,GAAC,QAAoB;MACvB,IAAI,GAAC,OAAqB;MAC1B,MAAM,GAAC,KAAuB;MAC9B,MAAM,GAAC,IAAuB;MAC9B,WAAW,CAAC,CAAC;AAEhB,EAAE,CAAC,iCAAiC,EAAE;IAErC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,4BAA4B,EAAE;IAEhC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC","file":"ClockTime.js","sourcesContent":["///<reference types=\"assert\"/>\r\nimport assert = require(\"assert\");\r\nimport ClockTime from \"../../../../dist/commonjs/System/Time/ClockTime\";\r\nimport {Milliseconds} from \"../../../../dist/commonjs/System/Time/HowMany\";\r\nimport Integer from \"../../../../dist/commonjs/System/Integer\";\r\n\r\n\r\nconst\r\ndays        = Integer.random(365),\r\nhour        = Integer.random(24),\r\nminute      = Integer.random(60),\r\nsecond      = Integer.random(60),\r\nmillisecond = Integer.random(1000);\r\n\r\nvar c1 = new ClockTime(hour, minute, second, millisecond);\r\nvar c2 = new ClockTime(\r\n\tdays*Milliseconds.Per.Day\r\n\t+ hour*Milliseconds.Per.Hour\r\n\t+ minute*Milliseconds.Per.Minute\r\n\t+ second*Milliseconds.Per.Second\r\n\t+ millisecond);\r\n\r\nit('should match constructor values', ()=>\r\n{\r\n\tassert.equal(c1.hour, hour);\r\n\tassert.equal(c1.minute, minute);\r\n\tassert.equal(c1.second, second);\r\n\tassert.equal(c1.millisecond, millisecond);\r\n});\r\n\r\nit('should match summed values', ()=>\r\n{\r\n\tassert.equal(c2.days, days);\r\n\tassert.equal(c2.hour, hour);\r\n\tassert.equal(c2.minute, minute);\r\n\tassert.equal(c2.second, second);\r\n\tassert.equal(c2.millisecond, millisecond);\r\n});\r\n"]}