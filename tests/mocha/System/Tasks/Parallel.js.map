{"version":3,"sources":["System/Tasks/Parallel.ts"],"names":[],"mappings":";AAEA,yBAAqB,2DAA2D,CAAC,CAAA;AACjF,0BAAsB,wDAAwD,CAAC,CAAA;AAC/E,wBAAoB,mDAAmD,CAAC,CAAA;AACxE,0BAAkB,8DAA8D,CAAC,CAAA;AACjF,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAElC,EAAE,CAAC,0CAA0C,EAAE;IAE9C,cAAc,CAAQ;QAErB,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,kBAAQ;SACb,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC;SACvB,IAAI,CACJ,UAAA,MAAM,IAAE,OAAA,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,EAApC,CAAoC,EAC5C,UAAA,KAAK,IAAE,OAAA,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,EAAhB,CAAgB,CACvB,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,gCAAgC,EAAE;IAGpC,cAAc,KAAY;QAEzB,IAAM,GAAG,GAAG,SAAS,CAAC;QACtB,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,GAAG,GAAG,EAAE,CAAC,GAAC,IAAI,EAAE,CAAC,EAAE,EAClD,CAAC;YACA,KAAK,IAAI,CAAC,CAAC;QACZ,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAE1B,OAAO,CAAC,GAAG,CAAC,0BAA0B,EACrC,mBAAS,CAAC,OAAO,CAChB;QAEC,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,CAAC,EAAE,CAAC,EAAE,EACvB,CAAC;YACA,iBAAiB,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;IACF,CAAC,CAAC;SACD,KAAK,CAAC,YAAY,CAAC,CAAC;IAEvB,IAAI,EAAE,GAAG,mBAAS,CAAC,QAAQ,EAAE,CAAC;IAC9B,MAAM,CAAC,iBAAO;SACZ,GAAG,CACH,kBAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,EAC1B,kBAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,EAC1B,kBAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,EAC1B,kBAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAC1B;SACA,IAAI,CACJ,UAAA,OAAO,IAAE,OAAA,MAAM,CAAC,KAAK,CAAC,eAAG,CAAC,OAAO,CAAC,EAAE,iBAAiB,CAAC,EAA7C,CAA6C,EACtD,UAAA,KAAK,IAAE,OAAA,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,EAAhB,CAAgB,CACvB;SACA,WAAW,CACX,cAAI,OAAA,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,EAAE,CAAC,mBAAmB,CAAC,EAA5D,CAA4D,CAAC,CAAC;AAErE,CAAC,CAAC,CAAC","file":"System/Tasks/Parallel.js","sourcesContent":["///<reference path=\"../../import.d.ts\"/>\r\n\r\nimport Parallel from \"../../../../dist/commonjs/System/Threading/Tasks/Parallel\";\r\nimport Stopwatch from \"../../../../dist/commonjs/System/Diagnostics/Stopwatch\";\r\nimport Promise from \"../../../../dist/commonjs/System/Promises/Promise\";\r\nimport {sum} from \"../../../../dist/commonjs/System/Collections/Array/Procedure\";\r\nimport assert = require('assert');\r\n\r\nit(\"should return the expected concatenation\", ()=>\r\n{\r\n\tfunction test(x:string):string\r\n\t{\r\n\t\treturn \"hello: \" + x;\r\n\t}\r\n\r\n\treturn Parallel\r\n\t\t.startNew(\"there\", test)\r\n\t\t.then(\r\n\t\t\tresult=>assert.equal(result, \"hello: there\"),\r\n\t\t\terror=>assert.ok(false)\r\n\t\t);\r\n\r\n});\r\n\r\nit(\"should return the expected sum\", ()=>\r\n{\r\n\r\n\tfunction test(start:number):number\r\n\t{\r\n\t\tconst max = 100000000;\r\n\t\tfor(let i = start, stop = start + max; i<stop; i++)\r\n\t\t{\r\n\t\t\tstart += i;\r\n\t\t}\r\n\t\treturn start;\r\n\t}\r\n\r\n\tvar synchronousResult = 0;\r\n\r\n\tconsole.log(\"\\nSynchronous time (ms):\",\r\n\t\tStopwatch.measure(\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i<4; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tsynchronousResult += test(i);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.total.milliseconds);\r\n\r\n\tvar sw = Stopwatch.startNew();\r\n\treturn Promise\r\n\t\t.all(\r\n\t\t\tParallel.startNew(0, test),\r\n\t\t\tParallel.startNew(1, test),\r\n\t\t\tParallel.startNew(2, test),\r\n\t\t\tParallel.startNew(3, test)\r\n\t\t)\r\n\t\t.then(\r\n\t\t\tresults=>assert.equal(sum(results), synchronousResult),\r\n\t\t\terror=>assert.ok(false)\r\n\t\t)\r\n\t\t.finallyThis(\r\n\t\t\t()=>console.log(\"\\nParallel time (ms):\", sw.elapsedMilliseconds));\r\n\r\n});"]}