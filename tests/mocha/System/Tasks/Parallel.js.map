{"version":3,"sources":["System/Tasks/Parallel.ts"],"names":[],"mappings":";AAEA,yBAAqB,2DAA2D,CAAC,CAAA;AACjF,0BAAsB,wDAAwD,CAAC,CAAA;AAC/E,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAEjC,EAAE,CAAC,0CAA0C,EAAE;IAE9C,MAAM,CAAC,kBAAQ;SACb,QAAQ,CAAC,OAAO,EAAE,UAAA,CAAC,IAAE,OAAA,SAAS,GAAG,CAAC,EAAb,CAAa,CAAC;SACnC,IAAI,CACJ,UAAA,MAAM,IAAE,OAAA,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,EAApC,CAAoC,EAC5C,UAAA,KAAK,IAAE,OAAA,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,EAAhB,CAAgB,CACvB,CAAC;AAEJ,CAAC,CAAC,CAAC;AAEH,cAAc,KAAY;IAEzB,IAAM,GAAG,GAAG,QAAQ,CAAC;IACrB,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,GAAG,GAAG,EAAE,CAAC,GAAC,IAAI,EAAE,CAAC,EAAE,EAClD,CAAC;QACA,KAAK,IAAI,CAAC,CAAC;IACZ,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACd,CAAC;AAED,IAAI,iBAAiB,GAAG,CAAC,CAAC;AAC1B,IAAI,IAAI,GAAY,EAAE,CAAC;AACvB,EAAE,CAAC,2BAA2B,EAAC;IAE7B,mBAAS,CAAC,OAAO,CAChB;QAEC,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,EAAE,EAAE,CAAC,EAAE,EACxB,CAAC;YACA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACb,iBAAiB,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;IACF,CAAC,CAAC,CAED;AACJ,CAAC,CAAC,CAAC;AAEH,eAAe,MAAa;IAE3B,EAAE,CAAC,iDAA+C,MAAM,MAAG,EAAE;QAI5D,MAAM,CAAC,kBAAQ;aACb,cAAc,CAAC,MAAM,CAAC;aACtB,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;aACf,QAAQ,CAAC,UAAA,MAAM,IAAE,OAAA,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAf,CAAe,EAChC,UAAA,KAAK,IAAE,OAAA,MAAM,CAAC,EAAE,CAAC,KAAK,EAAC,iBAAiB,CAAC,EAAlC,CAAkC,CAAC;aAC1C,MAAM,CAAC,UAAC,CAAC,EAAC,CAAC,IAAG,OAAA,CAAC,GAAC,CAAC,EAAH,CAAG,EAAC,CAAC,CAAC;aACpB,IAAI,CACJ,UAAA,MAAM,IAAE,OAAA,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,iBAAiB,CAAC,EAAvC,CAAuC,EAC/C,UAAA,KAAK,IAAE,OAAA,MAAM,CAAC,EAAE,CAAC,KAAK,EAAC,KAAK,CAAC,EAAtB,CAAsB,CAC7B,CAGA;IAEH,CAAC,CAAC,CAAC;AACJ,CAAC;AAKD,KAAK,CAAC,CAAC,CAAC,CAAC;AACT,KAAK,CAAC,CAAC,CAAC,CAAC;AACT,KAAK,CAAC,CAAC,CAAC,CAAC","file":"System/Tasks/Parallel.js","sourcesContent":["///<reference path=\"../../import.d.ts\"/>\r\n\r\nimport Parallel from \"../../../../dist/commonjs/System/Threading/Tasks/Parallel\";\r\nimport Stopwatch from \"../../../../dist/commonjs/System/Diagnostics/Stopwatch\";\r\nimport * as assert from 'assert';\r\n\r\nit(\"should return the expected concatenation\", ()=>\r\n{\r\n\treturn Parallel\r\n\t\t.startNew(\"there\", x=>\"hello: \" + x)\r\n\t\t.then(\r\n\t\t\tresult=>assert.equal(result, \"hello: there\"),\r\n\t\t\terror=>assert.ok(false)\r\n\t\t);\r\n\r\n});\r\n\r\nfunction test(start:number):number\r\n{\r\n\tconst max = 30000000;\r\n\tfor(let i = start, stop = start + max; i<stop; i++)\r\n\t{\r\n\t\tstart += i;\r\n\t}\r\n\treturn start;\r\n}\r\n\r\nvar synchronousResult = 0;\r\nvar data:number[] = [];\r\nit(\"should work synchronously\",()=>{\r\n\t// console.log(\"\\nSynchronous time (ms):\",\r\n\t\tStopwatch.measure(\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i<20; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tdata.push(i);\r\n\t\t\t\t\tsynchronousResult += test(i);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t// .total.milliseconds)\r\n\t\t\t;\r\n});\r\n\r\nfunction setup(maxCon:number):void\r\n{\r\n\tit(`should return the expected sum (concurrency ${maxCon})`, function()\r\n\t{\r\n\t\t//this.timeout(3000);\r\n\t\t//var sw = Stopwatch.startNew();\r\n\t\treturn Parallel\r\n\t\t\t.maxConcurrency(maxCon)\r\n\t\t\t.map(data, test)\r\n\t\t\t.thenThis(result=>assert.ok(true),\r\n\t\t\t\terror=>assert.ok(false,\"mapping failed!\"))\r\n\t\t\t.reduce((p,c)=>p+c,0)\r\n\t\t\t.then(\r\n\t\t\t\tresult=>assert.equal(result, synchronousResult),\r\n\t\t\t\terror=>assert.ok(false,error)\r\n\t\t\t)\r\n\t\t\t// .finallyThis(\r\n\t\t\t// \t()=>console.log(`\\n(${maxCon}) Parallel time (ms):`, sw.elapsedMilliseconds))\r\n\t\t\t;\r\n\r\n\t});\r\n}\r\n\r\n// setup(15);\r\n// setup(10);\r\n//setup(7);\r\nsetup(1);\r\nsetup(2);\r\nsetup(3);\r\n"]}