{"version":3,"sources":["System/Integer.ts"],"names":[],"mappings":"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","file":"System/Integer.js","sourcesContent":["///<reference path=\"../import.d.ts\"/>\r\n\r\nimport Integer from \"../../../source/System/Integer\";\r\nvar assert = require('../../../node_modules/assert/assert');\r\n\r\n\r\nconst TEST_FLOAT = 10.915, TEST_INT = 10, MAX = 9007199254740991;\r\n\r\ndescribe('(value)', ()=>\r\n{\r\n\tit('should convert float number to integer without rounding', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger(TEST_FLOAT),\r\n\t\t\tTEST_INT);\r\n\t});\r\n});\r\n\r\ndescribe('.as32Bit(value)', ()=>\r\n{\r\n\tit('should convert float number to integer without rounding', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.as32Bit(TEST_FLOAT),\r\n\t\t\tTEST_INT);\r\n\t});\r\n\r\n\tit('should return null if not 32', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.as32Bit(MAX),\r\n\t\t\tnull);\r\n\t});\r\n});\r\n\r\ndescribe('.is(value)', ()=>\r\n{\r\n\tit('should detect a number that is not an integer', ()=>\r\n\t{\r\n\t\tfunction baseTests(fn:(n:number)=>boolean):void {\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(<any>\"1\"),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(<any>\"test\"),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(NaN),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(Infinity),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-Infinity),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(TEST_FLOAT),\r\n\t\t\t\tfalse);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-TEST_FLOAT),\r\n\t\t\t\tfalse);\r\n\t\t}\r\n\r\n\t\tbaseTests(Integer.is);\r\n\t\tbaseTests(Integer.is32Bit);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is32Bit(Integer.MAX_32_BIT+1),\r\n\t\t\tfalse);\r\n\t});\r\n\r\n\tit('should detect a number that is an integer', ()=>\r\n\t{\r\n\t\tfunction baseTests(fn:(n:number)=>boolean):void {\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-0),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-TEST_INT),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(TEST_INT),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(Integer.MAX_32_BIT),\r\n\t\t\t\ttrue);\r\n\r\n\t\t\tassert.equal(\r\n\t\t\t\tfn(-Integer.MAX_32_BIT),\r\n\t\t\t\ttrue);\r\n\t\t}\r\n\r\n\t\tbaseTests(Integer.is);\r\n\t\tbaseTests(Integer.is32Bit);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(Integer.MAX_32_BIT+1),\r\n\t\t\ttrue);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(-MAX),\r\n\t\t\ttrue);\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(MAX),\r\n\t\t\ttrue);\r\n\r\n\t});\r\n});\r\n\r\n\r\ndescribe('.assert(value)', ()=>\r\n{\r\n\tit('should detect a number that is not an integer', ()=>\r\n\t{\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tInteger.assert(TEST_FLOAT);\r\n\t\t});\r\n\t});\r\n\r\n\tit('should detect a number that is an integer', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.assert(TEST_INT),\r\n\t\t\ttrue);\r\n\t});\r\n});\r\n"]}