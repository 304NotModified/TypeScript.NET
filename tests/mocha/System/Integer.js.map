{"version":3,"sources":["system/integer.ts"],"names":[],"mappings":"AAAA,qCAAqC;;;;;;;;;IAErC,wBAAoB,gCAAgC,CAAC,CAAA;IACrD,IAAI,MAAM,GAAG,OAAO,CAAC,qCAAqC,CAAC,CAAC;IAG5D,IAAM,UAAU,GAAG,MAAM,EAAE,QAAQ,GAAG,EAAE,CAAC;IAEzC,QAAQ,CAAC,iBAAiB,EAAE;QAE3B,EAAE,CAAC,yDAAyD,EAAE;YAE7D,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,UAAU,CAAC,EACnB,QAAQ,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,YAAY,EAAE;QAEtB,EAAE,CAAC,+CAA+C,EAAE;YAEnD,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,EAAE,CAAC,UAAU,CAAC,EACtB,KAAK,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE;YAE/C,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,EACpB,IAAI,CAAC,CAAC;QACR,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAGH,QAAQ,CAAC,gBAAgB,EAAE;QAE1B,EAAE,CAAC,+CAA+C,EAAE;YAEnD,MAAM,CAAC,MAAM,CAAC;gBAEb,iBAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE;YAE/C,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EACxB,IAAI,CAAC,CAAC;QACR,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"System/Integer.js","sourcesContent":["///<reference path=\"../import.d.ts\"/>\r\n\r\nimport Integer from '../../../source/System/Integer';\r\nvar assert = require('../../../node_modules/assert/assert');\r\n\r\n\r\nconst TEST_FLOAT = 10.915, TEST_INT = 10;\r\n\r\ndescribe('.convert(value)', ()=>\r\n{\r\n\tit('should convert float number to integer without rounding', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger(TEST_FLOAT),\r\n\t\t\tTEST_INT);\r\n\t});\r\n});\r\n\r\n\r\ndescribe('.is(value)', ()=>\r\n{\r\n\tit('should detect a number that is not an integer', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(TEST_FLOAT),\r\n\t\t\tfalse);\r\n\t});\r\n\r\n\tit('should detect a number that is an integer', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(TEST_INT),\r\n\t\t\ttrue);\r\n\t});\r\n});\r\n\r\n\r\ndescribe('.assert(value)', ()=>\r\n{\r\n\tit('should detect a number that is not an integer', ()=>\r\n\t{\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tInteger.assert(TEST_FLOAT);\r\n\t\t});\r\n\t});\r\n\r\n\tit('should detect a number that is an integer', ()=>\r\n\t{\r\n\t\tassert.equal(\r\n\t\t\tInteger.assert(TEST_INT),\r\n\t\t\ttrue);\r\n\t});\r\n});\r\n\r\n"]}