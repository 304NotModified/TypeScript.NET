{"version":3,"sources":["System/Diagnostics/Stopwatch.ts"],"names":[],"mappings":";;;;;;;;;IAGA,0BAAsB,iDAAiD,CAAC,CAAA;IACxE,IAAI,MAAM,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;IAI/D,EAAE,CAAC,0BAA0B,EAAC;QAC7B,MAAM,CAAC,EAAE,CAAC,mBAAS,CAAC,OAAO,CAAC;YAC3B,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gBAC3B,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;QACF,CAAC,CAAC,CAAC,YAAY,GAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAC;QAErE,MAAM,CAAC,EAAE,CAAC,mBAAS,CAAC,wBAAwB,EAAE,GAAC,CAAC,CAAC,CAAC;QAClD,IAAI,EAAE,GAAG,IAAI,mBAAS,EAAE,CAAC;QACzB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,sBAAsB,EAAC,CAAC,CAAC,CAAC;QAC1C,EAAE,GAAG,mBAAS,CAAC,QAAQ,EAAE,CAAC;QAC1B,EAAE,CAAC,KAAK,EAAE,CAAC;QACX,EAAE,CAAC,GAAG,EAAE,CAAC;QACT,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,mBAAmB,IAAE,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,IAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QACxB,EAAE,CAAC,IAAI,EAAE,CAAC;QACV,EAAE,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QACzB,EAAE,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QACxB,EAAE,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC","file":"System/Diagnostics/Stopwatch.js","sourcesContent":["\r\n///<reference path=\"../../import.d.ts\"/>\r\n\r\nimport Stopwatch from \"../../../../source/System/Diagnostics/Stopwatch\";\r\nvar assert = require('../../../../node_modules/assert/assert');\r\n\r\n\r\n\r\nit(\"should measure a closure\",()=>{\r\n\tassert.ok(Stopwatch.measure(()=>{\r\n\t\tfor(let i = 0;i<100000;i++){\r\n\t\t\tnew Array(100);\r\n\t\t}\r\n\t}).milliseconds>0);\r\n});\r\n\r\nit(\"should start, stop, and reset with isRunning correctly reflected\",()=>\r\n{\r\n\tassert.ok(Stopwatch.getTimestampMilliseconds()>0);\r\n\tvar sw = new Stopwatch();\r\n\tassert.equal(sw.elapsed.milliseconds,0);\r\n\tassert.equal(sw.lap().milliseconds,0);\r\n\tassert.equal(sw.currentLap.milliseconds,0);\r\n\tassert.equal(sw.currentLapMilliseconds,0);\r\n\tsw = Stopwatch.startNew();\r\n\tsw.start();\r\n\tsw.lap();\r\n\tassert.ok(sw.elapsedMilliseconds>=0);\r\n\tassert.ok(sw.currentLap.milliseconds>=0);\r\n\tassert.ok(sw.isRunning);\r\n\tsw.stop();\r\n\tsw.stop();\r\n\tassert.ok(!sw.isRunning);\r\n\tsw.start();\r\n\tassert.ok(sw.isRunning);\r\n\tsw.reset();\r\n\tassert.ok(!sw.isRunning);\r\n});\r\n"]}