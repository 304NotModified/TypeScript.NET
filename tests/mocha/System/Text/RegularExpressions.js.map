{"version":3,"sources":["System/Text/RegularExpressions.ts"],"names":[],"mappings":"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","file":"System/Text/RegularExpressions.js","sourcesContent":["///<reference path=\"../../import.d.ts\"/>\r\n\r\nimport RegexMatchEnumerator from \"../../../../source/System/Text/RegexMatchEnumerator\";\r\nimport Regex, {Match} from \"../../../../source/System/Text/RegularExpressions\";\r\nconst assert = require('../../../../node_modules/assert/assert');\r\n\r\nconst str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\nconst regex = new Regex(\"(?<first>[A-E]+)\", [\"i\"]);\r\nconst regex2 = new Regex(/([A-E]+)/im);\r\nconst regex3 = new Regex(/([A-E]+)/);\r\nconst regex4 = new Regex(/A\tB C D  E/,\"i\",\"w\");\r\nconst pattern = \"([A-E]+)\";\r\n\r\ndescribe(\"Regex\", ()=>\r\n{\r\n\r\n\tdescribe(\"new\", ()=>\r\n\t{\r\n\t\tit(\"should throw\", ()=>\r\n\t\t{\r\n\t\t\tassert.throws(()=>new Regex(null));\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe(\".isMatch(input)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should indicate true for match\", ()=>\r\n\t\t{\r\n\t\t\tassert.ok(regex.isMatch(str));\r\n\t\t\tassert.ok(Regex.isMatch(str, pattern, [\"i\"]));\r\n\t\t});\r\n\r\n\t\tit(\"should indicate false for non-match\", ()=>\r\n\t\t{\r\n\t\t\tassert.ok(!regex.isMatch(\"ZYXWV\"));\r\n\t\t\tassert.ok(!Regex.isMatch(\"ZYXWV\", pattern, [\"i\"]));\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".match(input)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should match correctly\", ()=>\r\n\t\t{\r\n\r\n\t\t\tvar m = regex.match(str);\r\n\t\t\tassert.equal(m.value, \"ABCDE\");\r\n\t\t\tassert.equal(m.index, 0);\r\n\t\t\tassert.equal(m.namedGroups[\"first\"].value, \"ABCDE\");\r\n\r\n\t\t\tm = regex.match(str, 20);\r\n\t\t\tassert.equal(m.value, \"abcde\");\r\n\t\t\tassert.equal(m.index, 26);\r\n\t\t\tassert.equal(m.namedGroups[\"first\"].value, \"abcde\");\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".matches(input)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should capture all instances\", ()=>\r\n\t\t{\r\n\t\t\tfunction check(m:Match[]):void {\r\n\t\t\t\tassert.equal(m.length, 2);\r\n\t\t\t\tassert.equal(m[0].value, \"ABCDE\");\r\n\t\t\t\tassert.equal(m[0].index, 0);\r\n\t\t\t\tassert.equal(m[1].value, \"abcde\");\r\n\t\t\t\tassert.equal(m[1].index, 26);\r\n\t\t\t}\r\n\t\t\tcheck(regex.matches(str));\r\n\t\t\tcheck(regex4.matches(str));\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".replace(input, x)\", ()=>\r\n\t{\r\n\r\n\t\tit(\"should replace requested instances\", ()=>\r\n\t\t{\r\n\t\t\t//noinspection SpellCheckingInspection\r\n\t\t\tassert.equal(regex.replace(str, \"XXX\"), \"XXXFGHIJKLMNOPQRSTUVWXYZXXXfghijklmnopqrstuvwxyz\");\r\n\t\t\tassert.equal(Regex.replace(str, pattern, \"XXX\",['i']), \"XXXFGHIJKLMNOPQRSTUVWXYZXXXfghijklmnopqrstuvwxyz\");\r\n\t\t\t//noinspection SpellCheckingInspection\r\n\t\t\tassert.equal(regex.replace(str, \"\"), \"FGHIJKLMNOPQRSTUVWXYZfghijklmnopqrstuvwxyz\");\r\n\t\t\tassert.equal(regex.replace(str, null), str);\r\n\t\t\t//noinspection SpellCheckingInspection\r\n\t\t\tassert.equal(regex.replace(str, (x,i)=>i), \"0FGHIJKLMNOPQRSTUVWXYZ1fghijklmnopqrstuvwxyz\");\r\n\t\t});\r\n\r\n\t});\r\n\r\n});\r\n\r\ndescribe(\"RegexMatchEnumerator\",()=>{\r\n\tit(\"should enumerate properly\",()=>{\r\n\t\tvar m = RegexMatchEnumerator(str,regex);\r\n\t\tfunction check(v:Match, value:string, index:number):void{\r\n\t\t\tassert.equal(v.value, value);\r\n\t\t\tassert.equal(v.index, index);\r\n\t\t}\r\n\t\tcheck(m.nextValue(),\"ABCDE\",0);\r\n\t\tcheck(m.nextValue(),\"abcde\",26);\r\n\t\tassert.ok(!m.moveNext());\r\n\t})\r\n});\r\n"]}