{"version":3,"sources":["System/Text/RegularExpressions.ts"],"names":[],"mappings":";;;;;;;;;IAEA,IAAM,MAAM,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;IAEjE,mCAAkB,mDAAmD,CAAC,CAAA;IAEtE,IAAM,GAAG,GAAG,sDAAsD,CAAC;IACnE,IAAM,KAAK,GAAG,IAAI,4BAAK,CAAC,kBAAkB,EAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAElD,QAAQ,CAAC,OAAO,EAAC;QAEhB,QAAQ,CAAC,eAAe,EAAC;YAExB,EAAE,CAAC,wBAAwB,EAAC;gBAE3B,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;gBAC9B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAC;YAE1B,EAAE,CAAC,8BAA8B,EAAC;gBAEjC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;gBACjC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;gBACtD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;gBACjC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","file":"System/Text/RegularExpressions.js","sourcesContent":["///<reference path=\"../../import.d.ts\"/>\r\n\r\nconst assert = require('../../../../node_modules/assert/assert');\r\n\r\nimport Regex from \"../../../../source/System/Text/RegularExpressions\";\r\n\r\nconst str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\nconst regex = new Regex(\"(?<first>[A-E]+)\",[\"i\"]);\r\n\r\ndescribe(\"Regex\",()=>{\r\n\r\n\tdescribe(\".match(input)\",()=>{\r\n\r\n\t\tit(\"should match correctly\",()=>{\r\n\r\n\t\t\tvar m = regex.match(str);\r\n\t\t\tassert.equal(m.value,\"ABCDE\");\r\n\t\t\tassert.equal(m.namedGroups[\"first\"].value,\"ABCDE\");\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe(\".matches(input)\",()=>{\r\n\r\n\t\tit(\"should capture all instances\",()=>{\r\n\r\n\t\t\tvar m = regex.matches(str);\r\n\t\t\tassert.equal(m.length,2);\r\n\t\t\tassert.equal(m[0].value,\"ABCDE\");\r\n\t\t\tassert.equal(m[0].namedGroups[\"first\"].value,\"ABCDE\");\r\n\t\t\tassert.equal(m[1].value,\"abcde\");\r\n\t\t\tassert.equal(m[1].namedGroups[\"first\"].value,\"abcde\");\r\n\t\t});\r\n\r\n\t});\r\n\r\n});\r\n"]}