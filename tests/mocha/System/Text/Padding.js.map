{
  "version": 3,
  "sources": [
    "System/Text/Padding.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;IAEA,wBAAgC,wCAAwC,CAAC,CAAA;IACzE,IAAI,MAAM,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;IAE/D,QAAQ,CAAC,YAAY,EAAE;QAEtB,EAAE,CAAC,wBAAwB,EAAE;YAE5B,MAAM,CAAC,KAAK,CAAC,iBAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,iBAAO,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,iBAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,iBAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,iBAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE;QAEvB,EAAE,CAAC,yBAAyB,EAAE;YAE7B,MAAM,CAAC,KAAK,CAAC,kBAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,kBAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,kBAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC,kBAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,kBAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC",
  "file": "System/Text/Padding.js",
  "sourcesContent": [
    "///<reference path=\"../../import.d.ts\"/>\r\n\r\nimport {padRight, padLeft} from \"../../../../source/System/Text/Padding\";\r\nvar assert = require('../../../../node_modules/assert/assert');\r\n\r\ndescribe('.padLeft()', ()=>\r\n{\r\n\tit(\"should pad to the left\", ()=>\r\n\t{\r\n\t\tassert.equal(padLeft(\"X\", 3, \"Y\"), \"YYX\");\r\n\t\tassert.equal(padLeft(\"X\", 3), \"  X\");\r\n\t\tassert.equal(padLeft(1, 3, 0), \"001\");\r\n\t\tassert.equal(padLeft(1, 3), \"001\");\r\n\t\tassert.equal(padLeft(1, 3, 2), \"221\");\r\n\t});\r\n});\r\n\r\ndescribe('.padRight()', ()=>\r\n{\r\n\tit(\"should pad to the right\", ()=>\r\n\t{\r\n\t\tassert.equal(padRight(\"X\", 3, \"Y\"), \"XYY\");\r\n\t\tassert.equal(padRight(\"X\", 3), \"X  \");\r\n\t\tassert.equal(padRight(1, 3, 0), \"100\");\r\n\t\tassert.equal(padRight(1, 3), \"100\");\r\n\t\tassert.equal(padRight(1, 3, 2), \"122\");\r\n\t});\r\n});\r\n"
  ]
}