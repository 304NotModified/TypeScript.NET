{"version":3,"sources":["collections/icollection.ts"],"names":["General","assertIsNumber","assertAdding","assertCopyToClear","assertRemoving","Collection","StringCollection","NumberCollection","InstanceCollection"],"mappings":"AAAA,0EAA0E;AAC1E,wDAAwD;AACxD,iCAAiC;;;;;;;;;IAEjC,IAAY,IAAI,WAAM,4BAA4B,CAAC,CAAA;IACnD,IAAY,EAAE,WAAM,yCAAyC,CAAC,CAAA;IAC9D,wCAAoC,kDAAkD,CAAC,CAAA;IAMvF,iBACC,IAAW,EACX,UAA8B;QAE9BA,IAAIA,KAAKA,GAAGA,UAAUA,CAACA,KAAKA,CAACA;QAE7BA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,GAAGA,QAAQA,EAAEA,UAASA,MAAkBA;YAEtD,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,yBAAyB,CAAC,CAAC;QACrD,CAAC,CAACA,CAACA;IACJA,CAACA;IAVe,eAAO,UAUtB,CAAA;IAED,wBAAwB,MAAkB,EAAE,KAAS,EAAE,IAAW;QAEjEC,MAAMA,CAACA,EAAEA,CAACA,CAACA,KAAKA,CAACA,KAAKA,CAACA,EAAEA,IAAIA,CAACA,MAAMA,CAACA,8BAA8BA,EAAEA,IAAIA,CAACA,CAACA,CAACA;IAC7EA,CAACA;IAED,sBAAyB,MAAkB,EAAE,CAAgB,EAAE,CAAK;QAEnEC,IAAIA,KAAYA,CAACA;QACjBA,GAAGA,CAAAA,CAAUA,UAACA,EAAVA,aAAKA,EAALA,IAAUA,CAACA;YAAXA,IAAIA,CAACA,GAAIA,CAACA,IAALA;YAERA,cAAcA,CAACA,MAAMA,EAAEA,KAAKA,GAAGA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA;YACjDA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;YACTA,cAAcA,CAACA,MAAMA,EAAEA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA;YACzCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,KAAKA,EAAEA,KAAKA,GAAGA,CAACA,EAAEA,wCAAwCA,CAACA,CAACA;YAC3EA,MAAMA,CAACA,EAAEA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,EAAEA,kCAAkCA,CAACA,CAACA;SAC7DA;IACFA,CAACA;IAED,2BAA8B,MAAkB,EAAE,CAAgB;QAEjEC,IAAIA,KAAYA,CAACA;QACjBA,cAAcA,CAACA,MAAMA,EAAEA,KAAKA,GAAGA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA;QACjDA,EAAEA,CAAAA,CAACA,CAACA,CAACA,KAAKA,GAACA,CAACA,CAACA;YAACA,MAAMA,sEAAsEA,CAACA;QAE3FA,IAAIA,CAACA,GAAOA,EAAEA,CAACA;QAEfA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;QACZA,cAAcA,CAACA,MAAMA,EAAEA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA;QACzCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,KAAKA,EAAEA,8DAA8DA,CAACA,CAACA;QAC9FA,CAACA,CAACA,KAAKA,EAAEA,CAACA;QACVA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,EAAEA,+DAA+DA,CAACA,CAACA;QAG1FA,GAAGA,CAAAA,CAAUA,UAACA,EAAVA,aAAKA,EAALA,IAAUA,CAACA;YAAXA,IAAIA,CAACA,GAAIA,CAACA,IAALA;YAAOA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;SAAAA;QAEzBA,IAAIA,SAASA,GAAGA,EAAEA,CAACA;QACnBA,IAAIA,CAACA,GAAGA,EAAEA,CAACA,UAAUA,CAAIA,KAAKA,GAAGA,SAASA,CAACA,CAACA;QAE5CA,CAACA,CAACA,MAAMA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACfA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,KAAKA,GAAGA,SAASA,EAAEA,0GAA0GA,CAACA,CAACA;QACtJA,CAACA,CAACA,MAAMA,CAACA,CAACA,EAAEA,KAAKA,GAAGA,SAASA,GAAGA,CAACA,CAACA,CAACA;QACnCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,CAACA,GAACA,KAAKA,GAAGA,SAASA,GAAGA,CAACA,EAAEA,mFAAmFA,CAACA,CAACA;QACrIA,CAACA,CAACA,KAAKA,EAAEA,CAACA;QACVA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,EAAEA,+DAA+DA,CAACA,CAACA;QAG1FA,GAAGA,CAAAA,CAAUA,UAACA,EAAVA,aAAKA,EAALA,IAAUA,CAACA;YAAXA,IAAIA,CAACA,GAAIA,CAACA,IAALA;YAAOA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;SAAAA;QACzBA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,KAAKA,EAAEA,CAACA,CAACA,MAAMA,EAAEA,oEAAoEA,CAACA,CAACA;IACvGA,CAACA;IAED,wBAA2B,MAAkB,EAAE,CAAgB;QAE9DC,IAAIA,KAAYA,CAACA;QACjBA,cAAcA,CAACA,MAAMA,EAAEA,KAAKA,GAAGA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA;QACjDA,EAAEA,CAAAA,CAACA,CAACA,CAACA,KAAKA,GAACA,CAACA,CAACA;YAACA,MAAMA,wDAAwDA,CAACA;QAE7EA,IAAIA,CAACA,GAAOA,EAAEA,CAACA;QACfA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;QACZA,cAAcA,CAACA,MAAMA,EAAEA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA;QAEzCA,IACAA,CAACA;YACAA,GAAGA,CAAAA,CAAUA,UAACA,EAAVA,aAAKA,EAALA,IAAUA,CAACA;gBAAXA,IAAIA,CAACA,GAAIA,CAACA,IAALA;gBAERA,KAAKA,IAAIA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBACrBA,cAAcA,CAACA,MAAMA,EAAEA,CAACA,CAACA,KAAKA,EAAEA,OAAOA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,KAAKA,EAAEA,KAAKA,EAAEA,0CAA0CA,CAACA,CAACA;gBACzEA,MAAMA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,EAAEA,wCAAwCA,CAACA,CAACA;aACpEA;QACFA,CACAA;QAAAA,KAAKA,CAAAA,CAACA,EAAEA,CAACA,CACTA,CAACA;YACAA,EAAEA,CAAAA,CAACA,EAAEA,YAAYA,iCAAuBA,CAACA,CACzCA,CAACA;gBACAA,OAAOA,CAACA,GAAGA,CAACA,EAAEA,CAACA,CAACA;YACjBA,CAACA;YACDA,IAAIA,CACJA,CAACA;gBACAA,MAAMA,EAAEA,CAACA;YACVA,CAACA;QACFA,CAACA;IAEFA,CAACA;IAED,oBACC,IAAW,EACX,UAAyB,EACzB,YAAgB;QAEhBC,EAAEA,CAAAA,CAACA,YAAYA,CAACA,OAAOA,CAACA,IAAIA,CAACA,IAAGA,CAACA,CAACA,CAACA;YAClCA,MAAMA,qFAAqFA,CAACA;QAM7FA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,EAAEA,UAASA,MAAkBA;YAE3C,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;YAC/C,iBAAiB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACtC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACnC,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,oCAAoC,CAAC,CAAC;QAC7E,CAAC,CAACA,CAACA;IAEJA,CAACA;IApBe,kBAAU,aAoBzB,CAAA;IAED,0BACC,IAAW,EACX,UAA8B;QAI9BC,UAAUA,CAACA,IAAIA,GAAGA,GAAGA,GAAGA,SAASA,EAAEA,UAAUA,EAAEA;YAC9CA,EAAEA;YACFA,OAAOA;YACPA,OAAOA;YACPA,OAAOA;YACPA,OAAOA;SACPA,CAACA,CAAAA;IAGHA,CAACA;IAfe,wBAAgB,mBAe/B,CAAA;IAED,0BACC,IAAW,EACX,UAA8B;QAG9BC,UAAUA,CAACA,IAAIA,GAAGA,GAAGA,GAAGA,SAASA,EAAEA,UAAUA,EAAEA;YAC9CA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,CAACA;YACDA,GAAGA;SACHA,CAACA,CAACA;IAGJA,CAACA;IAjBe,wBAAgB,mBAiB/B,CAAA;IAED,4BACC,IAAW,EACX,UAA8B;QAE9BC,IAAIA,MAAMA,GAAGA,EAAEA,CAACA;QAEhBA,UAAUA,CAACA,IAAIA,GAAGA,GAAGA,GAAGA,SAASA,EAAEA,UAAUA,EAAEA;YAC9CA,SAASA;YACTA,EAAEA;YACFA,MAAMA;YACNA,EAAEA;YACFA,MAAMA;SACNA,CAACA,CAAAA;IACHA,CAACA;IAbe,0BAAkB,qBAajC,CAAA","file":"Collections/ICollection.js","sourcesContent":["///<reference path=\"../../../source/System/Collections/ICollection.d.ts\"/>\r\n///<reference path=\"../../../typings/qunit/qunit.d.ts\"/>\r\n///<amd-dependency path=\"QUnit\"/>\r\n\r\nimport * as Text from 'source/System/Text/Utility';\r\nimport * as AU from 'source/System/Collections/Array/Utility';\r\nimport NotImplementedException from 'source/System/Exceptions/NotImplementedException';\r\n\r\n/*\r\n * This is a reusable set of unit test for use with any ICollection to ensure all features of that ICollection function properly.\r\n */\r\n\r\nexport function General<T>(\r\n\tname:string,\r\n\tcollection:ICollection<string>):void\r\n{\r\n\tvar count = collection.count;\r\n\r\n\tQUnit.test(name + \".count\", function(assert:QUnitAssert)\r\n\t{\r\n\t\tassert.ok(!isNaN(count), \"Count must be a number.\");\r\n\t});\r\n}\r\n\r\nfunction assertIsNumber(assert:QUnitAssert, value:any, name:string)\r\n{\r\n\tassert.ok(!isNaN(value), Text.format(\"'{0}' must be a real number.\", name));\r\n}\r\n\r\nfunction assertAdding<T>(assert:QUnitAssert, c:ICollection<T>, a:T[])\r\n{\r\n\tvar count:number;\r\n\tfor(let v of a)\r\n\t{\r\n\t\tassertIsNumber(assert, count = c.count, 'count');\r\n\t\tc.add(v);\r\n\t\tassertIsNumber(assert, c.count, 'count');\r\n\t\tassert.equal(c.count, count + 1, \"'count' should increment after adding.\");\r\n\t\tassert.ok(c.contains(v), \"'value' must exist after adding.\");\r\n\t}\r\n}\r\n\r\nfunction assertCopyToClear<T>(assert:QUnitAssert, c:ICollection<T>)\r\n{\r\n\tvar count:number;\r\n\tassertIsNumber(assert, count = c.count, 'count');\r\n\tif(c.count<2) throw \"Can't assert '.copyTo()' or '.clear()' without at least (2) entries.\";\r\n\r\n\tvar a:T[] = [];\r\n\r\n\tc.copyTo(a);\r\n\tassertIsNumber(assert, c.count, 'count');\r\n\tassert.equal(a.length, count, \"An empty array's length should match the count if copied to.\");\r\n\tc.clear();\r\n\tassert.equal(c.count, 0, \"A collection's count should be zero after calling '.clear()'.\");\r\n\r\n\t// Restore contents.\r\n\tfor(let v of a) c.add(v);\r\n\r\n\tvar extraSize = 10;\r\n\tvar b = AU.initialize<T>(count + extraSize);\r\n\r\n\tc.copyTo(b, 1);\r\n\tassert.equal(b.length, count + extraSize, \"An array's length should be equal to it's original length if the count added does not exceed the length.\");\r\n\tc.copyTo(b, count + extraSize - 1);\r\n\tassert.equal(b.length, 2*count + extraSize - 1, \"An array's length should be equal to index+count if the count exceeds the length.\");\r\n\tc.clear();\r\n\tassert.equal(c.count, 0, \"A collection's count should be zero after calling '.clear()'.\");\r\n\r\n\t// Restore contents.\r\n\tfor(let v of a) c.add(v);\r\n\tassert.equal(c.count, a.length, \"A collection's count should be equal to the number of items added.\");\r\n}\r\n\r\nfunction assertRemoving<T>(assert:QUnitAssert, c:ICollection<T>)\r\n{\r\n\tvar count:number;\r\n\tassertIsNumber(assert, count = c.count, 'count');\r\n\tif(c.count<2) throw \"Can't assert '.remove()' without at least (2) entries.\";\r\n\r\n\tvar a:T[] = [];\r\n\tc.copyTo(a);\r\n\tassertIsNumber(assert, c.count, 'count');\r\n\r\n\ttry\r\n\t{\r\n\t\tfor(let v of a)\r\n\t\t{\r\n\t\t\tcount -= c.remove(v); // More than one instance can exist and it should remove both.\r\n\t\t\tassertIsNumber(assert, c.count, 'count');\r\n\t\t\tassert.equal(c.count, count, \"'count' should increment after removing.\");\r\n\t\t\tassert.ok(!c.contains(v), \"'value' must not exist after removing.\");\r\n\t\t}\r\n\t}\r\n\tcatch(ex)\r\n\t{\r\n\t\tif(ex instanceof NotImplementedException)\r\n\t\t{\r\n\t\t\tconsole.log(ex);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport function Collection<T>(\r\n\tname:string,\r\n\tcollection:ICollection<T>,\r\n\tsourceValues:T[]):void\r\n{\r\n\tif(sourceValues.indexOf(null)!= -1)\r\n\t\tthrow \"Source values should not contain null as checking against null is one of the tests.\";\r\n\r\n\t/* The following tests inherently test:\r\n\t - count\r\n\t - contains\r\n\t */\r\n\tQUnit.test(name, function(assert:QUnitAssert)\r\n\t{\r\n\t\tassertAdding(assert, collection, sourceValues);\r\n\t\tassertCopyToClear(assert, collection);\r\n\t\tassertRemoving(assert, collection);\r\n\t\tassert.ok(!collection.contains(null), 'Equality comparison is not strict.');\r\n\t});\r\n\r\n}\r\n\r\nexport function StringCollection(\r\n\tname:string,\r\n\tcollection:ICollection<string>):void\r\n{\r\n\r\n\t//noinspection SpellCheckingInspection\r\n\tCollection(name + '<' + 'string>', collection, [\r\n\t\t\"\",\r\n\t\t\"lorem\",\r\n\t\t\"ipsum\",\r\n\t\t\"dolem\",\r\n\t\t\"ipsum\" // Have a repeated entry to test removing multiple.\r\n\t])\r\n\r\n\r\n}\r\n\r\nexport function NumberCollection(\r\n\tname:string,\r\n\tcollection:ICollection<number>):void\r\n{\r\n\t//noinspection SpellCheckingInspection\r\n\tCollection(name + '<' + 'number>', collection, [\r\n\t\t0,\r\n\t\t1,\r\n\t\t1, // Have a repeated entry to test removing multiple.\r\n\t\t2,\r\n\t\t3,\r\n\t\t5,\r\n\t\t8,\r\n\t\tNaN // Must be able to reconginze NaN\r\n\t]);\r\n\r\n\r\n}\r\n\r\nexport function InstanceCollection(\r\n\tname:string,\r\n\tcollection:ICollection<Object>):void\r\n{\r\n\tvar repeat = {};\r\n\t//noinspection SpellCheckingInspection\r\n\tCollection(name + '<' + 'Object>', collection, [\r\n\t\tundefined,\r\n\t\t{},\r\n\t\trepeat,\r\n\t\t{},\r\n\t\trepeat // Have a repeated entry to test removing multiple.\r\n\t])\r\n}\r\n\r\n"]}