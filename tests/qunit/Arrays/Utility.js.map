{"version":3,"sources":["arrays/utility.ts"],"names":["run"],"mappings":"AAAA,wDAAwD;AACxD,iCAAiC;;;;;;;;;IAEjC,IAAY,MAAM,WAAM,yCAAyC,CAAC,CAAA;IAClE,IAAY,YAAY,WAAM,yCAAyC,CAAC,CAAA;IAExE;QAEIA,IAAIA,IAAIA,GAAGA,CAACA,EAAEA,EAAEA,IAAIA,GAAGA,IAAIA,CAACA;QAE5BA,IAAIA,CAACA,GAAGA,CAACA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA,EAAEA,IAAIA,EAAEA,CAACA,CAACA,EAAEA,GAAGA,EAAEA,EAAEA,CAACA,CAACA;QAEzCA,KAAKA,CAACA,IAAIA,CAACA,0BAA0BA,EAAEA,UAACA,MAAkBA;YACtDA,IAAIA,GAAUA,CAACA;YAEfA,GAAGA,GAAGA,GAAGA,CAACA;YACVA,IAAIA,CAACA,GAAGA,YAAYA,CAACA,UAAUA,CAACA,GAAGA,CAACA,CAACA;YACrCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,GAAGA,EAAEA,oBAAoBA,GAAGA,GAAGA,CAACA,CAACA;YAExDA,GAAGA,GAAGA,MAAMA,CAACA;YACbA,IAAIA,CAACA,GAAGA,YAAYA,CAACA,UAAUA,CAACA,GAAGA,CAACA,CAACA;YACrCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,GAAGA,EAAEA,oBAAoBA,GAAGA,GAAGA,CAACA,CAACA;QAE5DA,CAACA,CAACA,CAACA;QAGHA,KAAKA,CAACA,IAAIA,CAACA,2BAA2BA,EAAEA,UAACA,MAAkBA;YACvDA,IAAIA,EAAEA,GAAGA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACrDA,IAAIA,EAAEA,GAAGA,YAAYA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;YAE/BA,MAAMA,CAACA,EAAEA,CAACA,MAAMA,CAACA,QAAQA,CAACA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA;QACvCA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,wBAAwBA,EAAEA,UAACA,MAAkBA;YACpDA,MAAMA,CAACA,EAAEA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA;YACxCA,MAAMA,CAACA,EAAEA,CAACA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA,CAACA;QAChDA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,yBAAyBA,EAAEA,UAACA,MAAkBA;YACrDA,MAAMA,CAACA,KAAKA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA,EAAEA,UAACA,CAAQA;gBAC5CA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACnBA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACPA,MAAMA,CAACA,KAAKA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA,EAAEA,UAACA,CAAQA;gBAC5CA,MAAMA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA;YACtBA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;QACZA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,wBAAwBA,EAAEA,UAACA,MAAkBA;YACpDA,IAAIA,CAACA,GAAGA,YAAYA,CAACA,IAAIA,CAACA,CAACA,CAACA,EAAEA,GAAGA,GAAGA,CAACA,CAACA,MAAMA,CAACA;YAC7CA,MAAMA,CAACA,EAAEA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,EAAEA,CAACA,IAAIA,CAACA,CAACA,CAACA;YAC3CA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,MAAMA,EAAEA,GAAGA,GAAGA,CAACA,CAACA,CAACA;YAChCA,GAAGA,GAAGA,CAACA,CAACA,MAAMA,CAACA;YAEfA,MAAMA,CAACA,EAAEA,CAACA,CAACA,YAAYA,CAA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","file":"Arrays/Utility.js","sourcesContent":["///<reference path=\"../../../typings/qunit/qunit.d.ts\"/>\r\n///<amd-dependency path=\"QUnit\"/>\r\n\r\nimport * as Arrays from 'source/System/Collections/Array/Compare';\r\nimport * as ArrayUtility from 'source/System/Collections/Array/Utility';\r\n\r\nexport default function run() {\r\n    // Min/Max tests...\r\n    var minA = -10, maxA = 2000;\r\n\r\n    var a = [5, minA, -1, maxA, -2, NaN, 20];\r\n\r\n    QUnit.test(\"Array/Utility.initialize\", (assert:QUnitAssert)=> {\r\n        var len:number;\r\n\r\n        len = 100;\r\n        var a = ArrayUtility.initialize(len);\r\n        assert.equal(a.length, len, \".length should be \" + len);\r\n\r\n        len = 100000;\r\n        var b = ArrayUtility.initialize(len);\r\n        assert.equal(b.length, len, \".length should be \" + len);\r\n\r\n    });\r\n\r\n\r\n    QUnit.test(\"Array/Utility.copy/equals\", (assert:QUnitAssert)=> {\r\n        var s1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n        var s2 = ArrayUtility.copy(s1);\r\n\r\n        assert.ok(Arrays.areEqual(s1, s2));\r\n    });\r\n\r\n    QUnit.test(\"Array/Utility.contains\", (assert:QUnitAssert)=> {\r\n        assert.ok(ArrayUtility.contains(a, -1));\r\n        assert.ok(!ArrayUtility.contains(a, -9876));\r\n    });\r\n\r\n    QUnit.test(\"Array/Utility.findIndex\", (assert:QUnitAssert)=> {\r\n        assert.equal(ArrayUtility.findIndex(a, (v:number)=> {\r\n            return v == -1;\r\n        }), 2);\r\n        assert.equal(ArrayUtility.findIndex(a, (v:number)=> {\r\n            return v == -9876;\r\n        }), -1);\r\n    });\r\n\r\n    QUnit.test(\"Array/Utility.register\", (assert:QUnitAssert)=> {\r\n        var s = ArrayUtility.copy(a), len = s.length;\r\n        assert.ok(ArrayUtility.register(s, -9876));\r\n        assert.equal(s.length, len + 1);\r\n        len = s.length;\r\n\r\n        assert.ok(!ArrayUtility.register(s, -1));\r\n        assert.equal(s.length, len);\r\n    });\r\n\r\n\r\n    /*\tUtility.applyTo skipped.\r\n     It has too many permutations while being a straight forward function. */\r\n\r\n    QUnit.test(\"Array/Utility.remove\", (assert:QUnitAssert)=> {\r\n        var s = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n        var len = s.length;\r\n\r\n        assert.equal(ArrayUtility.remove(s, 9), 1, \"Only 9 removed once\");\r\n        assert.equal(s.length, len - 1, \".length should be less by one\");\r\n        assert.equal(s[1], 8, \"Index [1] is now 8\");\r\n        len = s.length;\r\n\r\n        assert.equal(ArrayUtility.remove(s, 2), 2, \"2 removed twice\");\r\n        assert.equal(s.length, len - 2, \".length should be less by two\");\r\n        assert.equal(s[7], 1, \"Index [7] is now 1\");\r\n        assert.equal(s[10], 3, \"Index [10] is now 3\");\r\n        len = s.length;\r\n\r\n        assert.equal(ArrayUtility.remove(s, 15), 0, \"15 does not exist\");\r\n        assert.equal(s.length, len, \".length should be the same\");\r\n        len = s.length;\r\n\r\n        assert.ok(ArrayUtility.removeIndex(s, 5), \"Index [5] removed\");\r\n        assert.equal(s.length, len - 1, \".length should be less by one\");\r\n        len = s.length;\r\n\r\n        assert.ok(!ArrayUtility.removeIndex(s, 15), \"Index [15] doesn't exist\");\r\n        assert.equal(s.length, len, \".length should be the same\");\r\n    });\r\n\r\n\r\n    QUnit.test(\"Array/Utility.repeat\", (assert:QUnitAssert)=> {\r\n        var value = 10, count = 3;\r\n        var r = ArrayUtility.repeat(value, count);\r\n        assert.ok(r.length == count, \".length should be 3\");\r\n        for(let i = 0; i < count; i++)\r\n            assert.equal(r[i], value);\r\n    });\r\n\r\n\r\n}\r\n"]}