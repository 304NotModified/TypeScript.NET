{"version":3,"sources":["Arrays/Utility.ts"],"names":[],"mappings":"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","file":"Utility.js","sourcesContent":["///<reference types=\"qunit\"/>\r\n///<amd-dependency path=\"QUnit\"/>\r\nimport * as Arrays from \"../../../dist/amd/System/Collections/Array/Compare\";\r\nimport * as ArrayUtility from \"../../../dist/amd/System/Collections/Array/Utility\";\r\n\r\nexport default function run()\r\n{\r\n\t// Min/Max tests...\r\n\tconst minA = -10, maxA = 2000;\r\n\r\n\tconst a = [5, minA, -1, maxA, -2, NaN, 20];\r\n\r\n\tQUnit.test(\"Array/Utility.initialize\", assert =>\r\n\t{\r\n\t\tlet len:number;\r\n\r\n\t\tlen = 100;\r\n\t\tconst a = ArrayUtility.initialize(len);\r\n\t\tassert.equal(a.length, len, \".length should be \" + len);\r\n\r\n\t\tlen = 100000;\r\n\t\tconst b = ArrayUtility.initialize(len);\r\n\t\tassert.equal(b.length, len, \".length should be \" + len);\r\n\r\n\t});\r\n\r\n\r\n\tQUnit.test(\"Array/Utility.copy/equals\", assert =>\r\n\t{\r\n\t\tconst s1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n\t\tconst s2 = ArrayUtility.copy(s1);\r\n\r\n\t\tassert.ok(Arrays.areEqual(s1, s2));\r\n\t});\r\n\r\n\tQUnit.test(\"Array/Utility.contains\", assert =>\r\n\t{\r\n\t\tassert.ok(ArrayUtility.contains(a, -1));\r\n\t\tassert.ok(!ArrayUtility.contains(a, -9876));\r\n\t});\r\n\r\n\tQUnit.test(\"Array/Utility.findIndex\", assert =>\r\n\t{\r\n\t\tassert.equal(ArrayUtility.findIndex(a, (v:number) => v== -1), 2);\r\n\t\tassert.equal(ArrayUtility.findIndex(a, (v:number) => v== -9876), -1);\r\n\t});\r\n\r\n\tQUnit.test(\"Array/Utility.register\", assert =>\r\n\t{\r\n\t\tconst s = ArrayUtility.copy(a);\r\n\t\tlet len = s.length;\r\n\t\tassert.ok(ArrayUtility.register(s, -9876));\r\n\t\tassert.equal(s.length, len + 1);\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.ok(!ArrayUtility.register(s, -1));\r\n\t\tassert.equal(s.length, len);\r\n\t});\r\n\r\n\r\n\t/*\tUtility.applyTo skipped.\r\n\t It has too many permutations while being a straight forward function. */\r\n\r\n\tQUnit.test(\"Array/Utility.remove\", assert =>\r\n\t{\r\n\t\tconst s = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n\t\tlet len = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 9), 1, \"Only 9 removed once\");\r\n\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\tassert.equal(s[1], 8, \"Index [1] is now 8\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 2), 2, \"2 removed twice\");\r\n\t\tassert.equal(s.length, len - 2, \".length should be less by two\");\r\n\t\tassert.equal(s[7], 1, \"Index [7] is now 1\");\r\n\t\tassert.equal(s[10], 3, \"Index [10] is now 3\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.equal(ArrayUtility.remove(s, 15), 0, \"15 does not exist\");\r\n\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.ok(ArrayUtility.removeIndex(s, 5), \"Index [5] removed\");\r\n\t\tassert.equal(s.length, len - 1, \".length should be less by one\");\r\n\t\tlen = s.length;\r\n\r\n\t\tassert.ok(!ArrayUtility.removeIndex(s, 15), \"Index [15] doesn't exist\");\r\n\t\tassert.equal(s.length, len, \".length should be the same\");\r\n\t});\r\n\r\n\r\n\tQUnit.test(\"Array/Utility.repeat\", assert =>\r\n\t{\r\n\t\tconst value = 10, count = 3;\r\n\t\tconst r = ArrayUtility.repeat(value, count);\r\n\t\tassert.ok(r.length==count, \".length should be 3\");\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tassert.equal(r[i], value);\r\n\t\t}\r\n\t});\r\n\r\n\r\n}\r\n"]}