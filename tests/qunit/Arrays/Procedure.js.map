{"version":3,"sources":["Arrays/Procedure.ts"],"names":[],"mappings":"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","file":"Arrays/Procedure.js","sourcesContent":["///<reference path=\"../../../typings/qunit/qunit.d.ts\"/>\r\n///<amd-dependency path=\"QUnit\"/>\r\n\r\nimport * as ArrayProcedure from 'source/System/Collections/Array/Procedure';\r\n\r\nexport default function run() {\r\n    // Min/Max tests...\r\n    var minA = -10, maxA = 2000,\r\n        minB = -Infinity, maxB = Infinity;\r\n\r\n    var a       = [5, minA, -1, maxA, -2, NaN, 20],\r\n        sum     = 5 + minA + -1 + maxA + -2 + 20,\r\n        average = sum/6, // Not including NaN\r\n        product = 5*minA* -1*maxA* -2*20;\r\n\r\n    var b = [5, 2000, maxB, -1, NaN, -10, minB, -2, 20];\r\n\r\n\r\n    QUnit.test(\"Array/Procedure.sum\", function (assert:QUnitAssert) {\r\n        assert.ok(isNaN(ArrayProcedure.sum(a, false)), \"Sum should be NaN\");\r\n        assert.equal(ArrayProcedure.sum(a, true), sum, \"Sum should be \" + sum);\r\n    });\r\n\r\n    QUnit.test(\"Array/Procedure.average\", function (assert:QUnitAssert) {\r\n        assert.ok(isNaN(ArrayProcedure.average(a, false)), \"Average should be NaN\");\r\n        assert.equal(ArrayProcedure.average(a, true), average, \"Average should be \" + average);\r\n    });\r\n\r\n\r\n    QUnit.test(\"Array/Procedure.product\", function (assert:QUnitAssert) {\r\n        assert.ok(isNaN(ArrayProcedure.product(a, false)), \"Product should be NaN\");\r\n        assert.equal(ArrayProcedure.product(a, true), product, \"Product should be \" + product);\r\n    });\r\n\r\n\r\n    QUnit.test(\"Array/Procedure.min\", function (assert:QUnitAssert) {\r\n        assert.ok(isNaN(ArrayProcedure.min(a, false)), \"Min value should be NaN\");\r\n        assert.equal(ArrayProcedure.min(a, true), minA, \"Min value should be \" + minA);\r\n        assert.equal(ArrayProcedure.min(b, true), minB, \"Min value should be \" + minB);\r\n    });\r\n\r\n    QUnit.test(\"Array/Procedure.max\", function (assert:QUnitAssert) {\r\n        assert.ok(isNaN(ArrayProcedure.max(a, false)), \"Min value should be NaN\");\r\n        assert.equal(ArrayProcedure.max(a, true), maxA, \"Min value should be \" + maxA);\r\n        assert.equal(ArrayProcedure.max(b, true), maxB, \"Min value should be \" + maxB);\r\n    });\r\n\r\n}\r\n"]}