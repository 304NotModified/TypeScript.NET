{"version":3,"sources":["integer.ts"],"names":["run"],"mappings":"AAAA,qDAAqD;AACrD,iCAAiC;;IAKjC;QAGCA,IAAMA,UAAUA,GAAGA,MAAMA,EAAEA,QAAQA,GAAGA,EAAEA,CAACA;QAEzCA,KAAKA,CAACA,IAAIA,CAACA,kBAAkBA,EAAEA,UAACA,MAAkBA;YAGjDA,MAAMA,CAACA,KAAKA,CACXA,iBAAOA,CAACA,UAAUA,CAACA,EACnBA,QAAQA,EACRA,0DAA0DA,CAACA,CAACA;QAE9DA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,aAAaA,EAAEA,UAACA,MAAkBA;YAG5CA,MAAMA,CAACA,KAAKA,CACXA,iBAAOA,CAACA,EAAEA,CAACA,UAAUA,CAACA,EACtBA,KAAKA,EACLA,gDAAgDA,CAACA,CAACA;YAEnDA,MAAMA,CAACA,KAAKA,CACXA,iBAAOA,CAACA,EAAEA,CAACA,QAAQA,CAACA,EACpBA,IAAIA,EACJA,4CAA4CA,CAACA,CAACA;QAEhDA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,iBAAiBA,EAAEA,UAACA,MAAkBA;YAGhDA,MAAMA,CAACA,KAAKA,CACXA,iBAAOA,CAACA,MAAMA,CAACA,QAAQA,CAACA,EACxBA,IAAIA,EACJA,4CAA4CA,CAACA,CAACA;YAE/CA,MAAMA,CAACA,MAAMA,CAACA;gBAEbA,iBAAOA,CAACA,MAAMA,CAACA,UAAUA,CAACA,CAACA;YAC5BA,CAACA,CAACA,CAACA;QAEJA,CAACA,CAACA,CAACA;IACJA,CAACA;IA5CD;yBA4CC,CAAA","file":"Integer.js","sourcesContent":["///<reference path='../../typings/qunit/qunit.d.ts'/>\r\n///<amd-dependency path='QUnit'/>\r\n\r\nimport Integer from 'source/System/Integer';\r\n\r\n\r\nexport default function run()\r\n{\r\n\r\n\tconst TEST_FLOAT = 10.915, TEST_INT = 10;\r\n\r\n\tQUnit.test('Integer: convert', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger(TEST_FLOAT),\r\n\t\t\tTEST_INT,\r\n\t\t\t'Should convert float number to integer without rounding.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Integer: is', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(TEST_FLOAT),\r\n\t\t\tfalse,\r\n\t\t\t'Should detect a number that is not an integer.');\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(TEST_INT),\r\n\t\t\ttrue,\r\n\t\t\t'Should detect a number that is an integer.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Integer: assert', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.assert(TEST_INT),\r\n\t\t\ttrue,\r\n\t\t\t'Should detect a number that is an integer.');\r\n\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tInteger.assert(TEST_FLOAT);\r\n\t\t});\r\n\r\n\t});\r\n}\r\n"]}