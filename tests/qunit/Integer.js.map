{"version":3,"sources":["integer.ts"],"names":[],"mappings":";;;;;;;;;IAGA,wBAAoB,uBAAuB,CAAC,CAAA;IAG5C;QAGC,IAAM,UAAU,GAAG,MAAM,EAAE,QAAQ,GAAG,EAAE,CAAC;QAEzC,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAC,MAAkB;YAGjD,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,UAAU,CAAC,EACnB,QAAQ,EACR,0DAA0D,CAAC,CAAC;QAE9D,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,UAAC,MAAkB;YAG5C,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,EAAE,CAAC,UAAU,CAAC,EACtB,KAAK,EACL,gDAAgD,CAAC,CAAC;YAEnD,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,EACpB,IAAI,EACJ,4CAA4C,CAAC,CAAC;QAEhD,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAC,MAAkB;YAGhD,MAAM,CAAC,KAAK,CACX,iBAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EACxB,IAAI,EACJ,4CAA4C,CAAC,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC;gBAEb,iBAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;IACJ,CAAC;IA5CD;yBA4CC,CAAA","file":"Integer.js","sourcesContent":["///<reference path='../../typings/qunit/qunit.d.ts'/>\r\n///<amd-dependency path='QUnit'/>\r\n\r\nimport Integer from 'source/System/Integer';\r\n\r\n\r\nexport default function run()\r\n{\r\n\r\n\tconst TEST_FLOAT = 10.915, TEST_INT = 10;\r\n\r\n\tQUnit.test('Integer: convert', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger(TEST_FLOAT),\r\n\t\t\tTEST_INT,\r\n\t\t\t'Should convert float number to integer without rounding.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Integer: is', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(TEST_FLOAT),\r\n\t\t\tfalse,\r\n\t\t\t'Should detect a number that is not an integer.');\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.is(TEST_INT),\r\n\t\t\ttrue,\r\n\t\t\t'Should detect a number that is an integer.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Integer: assert', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tInteger.assert(TEST_INT),\r\n\t\t\ttrue,\r\n\t\t\t'Should detect a number that is an integer.');\r\n\r\n\t\tassert.throws(()=>\r\n\t\t{\r\n\t\t\tInteger.assert(TEST_FLOAT);\r\n\t\t});\r\n\r\n\t});\r\n}\r\n"]}