{"version":3,"sources":["uri.ts"],"names":["run"],"mappings":";;;;;;;;IAGA,oBAAgB,uBAAuB,CAAC,CAAA;IAGxC;QAGCA,IAAIA,QAAQA,GAAQA;YACnBA,MAAMA,EAACA,MAAMA;YACbA,QAAQA,EAACA,mBAAmBA;YAC5BA,IAAIA,EAACA,YAAYA;YACjBA,IAAIA,EAACA,IAAIA;YACTA,IAAIA,EAACA,uBAAuBA;YAC5BA,KAAKA,EAACA,sCAAsCA;YAC5CA,QAAQA,EAACA,OAAOA;SAChBA,CAACA;QACFA,IAAIA,QAAQA,GAAUA,EAAEA;cACrBA,QAAQA,CAACA,MAAMA,GAAGA,KAAKA;cACvBA,QAAQA,CAACA,QAAQA,GAAGA,GAAGA;cACvBA,QAAQA,CAACA,IAAIA;cACbA,GAAGA,GAAGA,QAAQA,CAACA,IAAIA;cACnBA,QAAQA,CAACA,IAAIA;cACbA,QAAQA,CAACA,KAAKA;cACdA,QAAQA,CAACA,QAAQA,CAACA;QAErBA,KAAKA,CAACA,IAAIA,CAACA,kBAAkBA,EAAEA,UAACA,MAAkBA;YAEjDA,MAAMA,CAACA,KAAKA,CACXA,aAAGA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,WAAWA,EAC9BA,QAAQA,EACRA,0CAA0CA,CAACA,CAACA;QAE9CA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,qBAAqBA,EAAEA,UAACA,MAAkBA;YAEpDA,MAAMA,CAACA,KAAKA,CACXA,aAAGA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,MAAMA,CAACA,QAAQA,CAACA,EACnCA,IAAIA,EACJA,+CAA+CA,CAACA,CAACA;QAEnDA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,YAAYA,EAAEA,UAACA,MAAkBA;YAG3CA,MAAMA,CAACA,KAAKA,CACXA,aAAGA,CAACA,QAAQA,CAACA,QAAQA,CAACA,EACtBA,QAAQA,EACRA,6CAA6CA,CAACA,CAACA;YAGhDA,IAAIA,GAAGA,GAAGA,aAAGA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,KAAKA,CACXA,GAAGA,CAACA,QAAQA,EAAEA,EACdA,QAAQA,EACRA,0CAA0CA,CAACA,CAACA;YAE7CA,MAAMA,CAACA,KAAKA,CACXA,GAAGA,CAACA,WAAWA,EACfA,QAAQA,EACRA,2CAA2CA,CAACA,CAACA;YAE9CA,MAAMA,CAACA,KAAKA,CACXA,GAAGA,CAACA,YAAYA,EAChBA,GAAGA,CAACA,IAAIA,GAACA,GAAGA,CAACA,KAAKA,EAClBA,yCAAyCA,CAACA,CAACA;YAE5CA,MAAMA,CAACA,KAAKA,CACXA,GAAGA,CAACA,WAAWA,CAACA,OAAOA,CAACA,EACxBA,aAAaA,EACbA,6CAA6CA,CAACA,CAACA;YAEhDA,MAAMA,CAACA,KAAKA,CACXA,GAAGA,CAACA,WAAWA,CAACA,MAAMA,CAACA,EACvBA,KAAKA,EACLA,4DAA4DA,CAACA,CAACA;YAE/DA,MAAMA,CAACA,KAAKA,CACXA,GAAGA,CAACA,WAAWA,CAACA,MAAMA,CAACA,EACvBA,SAASA,EACTA,uCAAuCA,CAACA,CAACA;QAG3CA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,qBAAqBA,EAAEA,UAACA,MAAkBA;YAGpDA,MAAMA,CAACA,MAAMA,CAACA;gBACbA,aAAGA,CAACA,IAAIA,CAACA;oBACRA,MAAMA,EAACA,OAAOA;iBACdA,CAACA,CAACA;YACJA,CAACA,CAACA,CAACA;YAEHA,MAAMA,CAACA,MAAMA,CAACA;gBACbA,aAAGA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YACpBA,CAACA,CAACA,CAACA;YAGHA,MAAMA,CAACA,MAAMA,CAACA;gBACbA,aAAGA,CAACA,IAAIA,CAACA;oBACRA,MAAMA,EAACA,SAASA;iBAChBA,CAACA,CAACA;YACJA,CAACA,CAACA,CAACA;QAEJA,CAACA,CAACA,CAACA;QAEHA,KAAKA,CAACA,IAAIA,CAACA,wBAAwBA,EAAEA,UAACA,MAAkBA;YAGvDA,MAAMA,CAACA,MAAMA,CAACA;gBACbA,aAAGA,CAACA,IAAIA,CAACA;oBACRA,QAAQA,EAACA,QAAQA,CAACA,QAAQA;iBAC1BA,CAACA,CAAAA;YACHA,CAACA,CAACA,CAACA;YAEHA,MAAMA,CAACA,MAAMA,CAACA;gBACbA,aAAGA,CAACA,IAAIA,CAACA;oBACRA,IAAIA,EAACA,QAAQA,CAACA,IAAIA;iBAClBA,CAACA,CAAAA;YACHA,CAACA,CAACA,CAACA;QAGJA,CAACA,CAACA,CAACA;IACJA,CAACA;IAzHD;yBAyHC,CAAA","file":"Uri.js","sourcesContent":["///<reference path=\"../../typings/qunit/qunit.d.ts\"/>\r\n///<amd-dependency path='QUnit'/>\r\n\r\nimport Uri from 'source/System/Uri/Uri';\r\n\r\n\r\nexport default function run()\r\n{\r\n\r\n\tvar validUri:IUri = {\r\n\t\tscheme:'http',\r\n\t\tuserInfo:'username:password',\r\n\t\thost:'domain.com',\r\n\t\tport:1234,\r\n\t\tpath:'/tree/node/index.html',\r\n\t\tquery:'?param=hello%20there&flag=false&blah',\r\n\t\tfragment:'#home'\r\n\t};\r\n\tvar validUrl:string = ''\r\n\t\t+ validUri.scheme + '://'\r\n\t\t+ validUri.userInfo + '@'\r\n\t\t+ validUri.host\r\n\t\t+ ':' + validUri.port\r\n\t\t+ validUri.path\r\n\t\t+ validUri.query\r\n\t\t+ validUri.fragment;\r\n\r\n\tQUnit.test('Uri: parse valid', (assert:QUnitAssert)=>{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.from(validUrl).absoluteUri,\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.from(string) should parse correctly.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: parse equality', (assert:QUnitAssert)=>{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.from(validUrl).equals(validUri),\r\n\t\t\ttrue,\r\n\t\t\t'Uri.from(string) should equal derived values.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: valid', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.toString(validUri),\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.toString(uri) must match source values.');\r\n\r\n\r\n\t\tvar uri = Uri.from(validUri);\r\n\t\tassert.equal(\r\n\t\t\turi.toString(),\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.toString() must match source values.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.absoluteUri,\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.absoluteUri must match source values.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.pathAndQuery,\r\n\t\t\turi.path+uri.query,\r\n\t\t\t'Uri path and query must equal expected.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['param'],\r\n\t\t\t'hello there',\r\n\t\t\t'Uri must decode the query params correctly.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['flag'],\r\n\t\t\tfalse,\r\n\t\t\t'Uri must parse and deserialize the query params correctly.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['blah'],\r\n\t\t\tundefined,\r\n\t\t\t'Uri must ignore invalid query params.');\r\n\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: invalid scheme', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tscheme:'x y z'\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from('http//');\r\n\t\t});\r\n\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tscheme:'https:s'\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: invalid authority', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tuserInfo:validUri.userInfo\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tport:validUri.port\r\n\t\t\t})\r\n\t\t});\r\n\r\n\r\n\t});\r\n}\r\n"]}