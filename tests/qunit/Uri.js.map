{"version":3,"sources":["Uri.ts"],"names":[],"mappings":";;;;;;;;;IAAA,6BAA6B;IAC7B,iCAAiC;IACjC,qDAAgD;IAIhD;QAGC,IAAM,QAAQ,GAAQ;YACrB,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,mBAAmB;YAC7B,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,uBAAuB;YAC7B,KAAK,EAAE,sCAAsC;YAC7C,QAAQ,EAAE,OAAO;SACjB,CAAC;QACF,IAAM,QAAQ,GAAU,EAAE;cACvB,QAAQ,CAAC,MAAM,GAAG,KAAK;cACvB,QAAQ,CAAC,QAAQ,GAAG,GAAG;cACvB,QAAQ,CAAC,IAAI;cACb,GAAG,GAAG,QAAQ,CAAC,IAAI;cACnB,QAAQ,CAAC,IAAI;cACb,QAAQ,CAAC,KAAK;cACd,QAAQ,CAAC,QAAQ,CAAC;QAErB,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAA,MAAM;YAGpC,MAAM,CAAC,KAAK,CACX,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,WAAW,EAC9B,QAAQ,EACR,0CAA0C,CAAC,CAAC;QAE9C,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAA,MAAM;YAGvC,MAAM,CAAC,KAAK,CACX,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EACnC,IAAI,EACJ,+CAA+C,CAAC,CAAC;QAEnD,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,UAAA,MAAM;YAG9B,MAAM,CAAC,KAAK,CACX,aAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EACtB,QAAQ,EACR,6CAA6C,CAAC,CAAC;YAGhD,IAAM,GAAG,GAAG,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,QAAQ,EAAE,EACd,QAAQ,EACR,0CAA0C,CAAC,CAAC;YAE7C,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,EACf,QAAQ,EACR,2CAA2C,CAAC,CAAC;YAE9C,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,YAAY,EAChB,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,EACpB,yCAAyC,CAAC,CAAC;YAE5C,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,EACxB,aAAa,EACb,6CAA6C,CAAC,CAAC;YAEhD,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,EACvB,KAAK,EACL,4DAA4D,CAAC,CAAC;YAE/D,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,EACvB,SAAS,EACT,uCAAuC,CAAC,CAAC;QAG3C,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAA,MAAM;YAGvC,MAAM,CAAC,MAAM,CAAC;gBAEb,aAAG,CAAC,IAAI,CAAC;oBACR,MAAM,EAAO,OAAO;iBACpB,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC;gBAEb,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAGH,MAAM,CAAC,MAAM,CAAC;gBAEb,aAAG,CAAC,IAAI,CAAC;oBACR,MAAM,EAAO,SAAS;iBACtB,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,wBAAwB,EAAE,UAAA,MAAM;YAG1C,MAAM,CAAC,MAAM,CAAC;gBAEb,aAAG,CAAC,IAAI,CAAC;oBACR,QAAQ,EAAE,QAAQ,CAAC,QAAQ;iBAC3B,CAAC,CAAA;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC;gBAEb,aAAG,CAAC,IAAI,CAAC;oBACR,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACnB,CAAC,CAAA;YACH,CAAC,CAAC,CAAC;QAGJ,CAAC,CAAC,CAAC;IACJ,CAAC;;IAhID,sBAgIC","file":"Uri.js","sourcesContent":["///<reference types=\"qunit\"/>\r\n///<amd-dependency path='QUnit'/>\r\nimport Uri from \"../../dist/amd/System/Uri/Uri\";\r\nimport {IUri} from \"../../dist/amd/System/Uri/IUri\";\r\n\r\n\r\nexport default function run()\r\n{\r\n\r\n\tconst validUri:IUri = {\r\n\t\tscheme: 'http',\r\n\t\tuserInfo: 'username:password',\r\n\t\thost: 'domain.com',\r\n\t\tport: 1234,\r\n\t\tpath: '/tree/node/index.html',\r\n\t\tquery: '?param=hello%20there&flag=false&blah',\r\n\t\tfragment: '#home'\r\n\t};\r\n\tconst validUrl:string = ''\r\n\t\t+ validUri.scheme + '://'\r\n\t\t+ validUri.userInfo + '@'\r\n\t\t+ validUri.host\r\n\t\t+ ':' + validUri.port\r\n\t\t+ validUri.path\r\n\t\t+ validUri.query\r\n\t\t+ validUri.fragment;\r\n\r\n\tQUnit.test('Uri: parse valid', assert =>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.from(validUrl).absoluteUri,\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.from(string) should parse correctly.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: parse equality', assert =>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.from(validUrl).equals(validUri),\r\n\t\t\ttrue,\r\n\t\t\t'Uri.from(string) should equal derived values.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: valid', assert =>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.toString(validUri),\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.toString(uri) must match source values.');\r\n\r\n\r\n\t\tconst uri = Uri.from(validUri);\r\n\t\tassert.equal(\r\n\t\t\turi.toString(),\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.toString() must match source values.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.absoluteUri,\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.absoluteUri must match source values.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.pathAndQuery,\r\n\t\t\turi.path + uri.query,\r\n\t\t\t'Uri path and query must equal expected.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['param'],\r\n\t\t\t'hello there',\r\n\t\t\t'Uri must decode the query params correctly.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['flag'],\r\n\t\t\tfalse,\r\n\t\t\t'Uri must parse and deserialize the query params correctly.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['blah'],\r\n\t\t\tundefined,\r\n\t\t\t'Uri must ignore invalid query params.');\r\n\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: invalid scheme', assert =>\r\n\t{\r\n\r\n\t\tassert.throws(() =>\r\n\t\t{\r\n\t\t\tUri.from({\r\n\t\t\t\tscheme: <any>'x y z'\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tassert.throws(() =>\r\n\t\t{\r\n\t\t\tUri.from('http//');\r\n\t\t});\r\n\r\n\r\n\t\tassert.throws(() =>\r\n\t\t{\r\n\t\t\tUri.from({\r\n\t\t\t\tscheme: <any>'https:s'\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: invalid authority', assert =>\r\n\t{\r\n\r\n\t\tassert.throws(() =>\r\n\t\t{\r\n\t\t\tUri.from({\r\n\t\t\t\tuserInfo: validUri.userInfo\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tassert.throws(() =>\r\n\t\t{\r\n\t\t\tUri.from({\r\n\t\t\t\tport: validUri.port\r\n\t\t\t})\r\n\t\t});\r\n\r\n\r\n\t});\r\n}\r\n"]}