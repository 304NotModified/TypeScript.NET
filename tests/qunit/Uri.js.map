{
  "version": 3,
  "sources": [
    "Uri.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;IAGA,oBAAgB,uBAAuB,CAAC,CAAA;IAIxC;QAGC,IAAI,QAAQ,GAAQ;YACnB,MAAM,EAAC,MAAM;YACb,QAAQ,EAAC,mBAAmB;YAC5B,IAAI,EAAC,YAAY;YACjB,IAAI,EAAC,IAAI;YACT,IAAI,EAAC,uBAAuB;YAC5B,KAAK,EAAC,sCAAsC;YAC5C,QAAQ,EAAC,OAAO;SAChB,CAAC;QACF,IAAI,QAAQ,GAAU,EAAE;cACrB,QAAQ,CAAC,MAAM,GAAG,KAAK;cACvB,QAAQ,CAAC,QAAQ,GAAG,GAAG;cACvB,QAAQ,CAAC,IAAI;cACb,GAAG,GAAG,QAAQ,CAAC,IAAI;cACnB,QAAQ,CAAC,IAAI;cACb,QAAQ,CAAC,KAAK;cACd,QAAQ,CAAC,QAAQ,CAAC;QAErB,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAC,MAAkB;YAEjD,MAAM,CAAC,KAAK,CACX,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,WAAW,EAC9B,QAAQ,EACR,0CAA0C,CAAC,CAAC;QAE9C,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAC,MAAkB;YAEpD,MAAM,CAAC,KAAK,CACX,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EACnC,IAAI,EACJ,+CAA+C,CAAC,CAAC;QAEnD,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,UAAC,MAAkB;YAG3C,MAAM,CAAC,KAAK,CACX,aAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EACtB,QAAQ,EACR,6CAA6C,CAAC,CAAC;YAGhD,IAAI,GAAG,GAAG,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,QAAQ,EAAE,EACd,QAAQ,EACR,0CAA0C,CAAC,CAAC;YAE7C,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,EACf,QAAQ,EACR,2CAA2C,CAAC,CAAC;YAE9C,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,YAAY,EAChB,GAAG,CAAC,IAAI,GAAC,GAAG,CAAC,KAAK,EAClB,yCAAyC,CAAC,CAAC;YAE5C,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,EACxB,aAAa,EACb,6CAA6C,CAAC,CAAC;YAEhD,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,EACvB,KAAK,EACL,4DAA4D,CAAC,CAAC;YAE/D,MAAM,CAAC,KAAK,CACX,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,EACvB,SAAS,EACT,uCAAuC,CAAC,CAAC;QAG3C,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAC,MAAkB;YAGpD,MAAM,CAAC,MAAM,CAAC;gBACb,aAAG,CAAC,IAAI,CAAC;oBACR,MAAM,EAAM,OAAO;iBACnB,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC;gBACb,aAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAGH,MAAM,CAAC,MAAM,CAAC;gBACb,aAAG,CAAC,IAAI,CAAC;oBACR,MAAM,EAAM,SAAS;iBACrB,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,wBAAwB,EAAE,UAAC,MAAkB;YAGvD,MAAM,CAAC,MAAM,CAAC;gBACb,aAAG,CAAC,IAAI,CAAC;oBACR,QAAQ,EAAC,QAAQ,CAAC,QAAQ;iBAC1B,CAAC,CAAA;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC;gBACb,aAAG,CAAC,IAAI,CAAC;oBACR,IAAI,EAAC,QAAQ,CAAC,IAAI;iBAClB,CAAC,CAAA;YACH,CAAC,CAAC,CAAC;QAGJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAzHD;yBAyHC,CAAA",
  "file": "Uri.js",
  "sourcesContent": [
    "///<reference path=\"../../typings/qunit/qunit.d.ts\"/>\r\n///<amd-dependency path='QUnit'/>\r\n\r\nimport Uri from \"source/System/Uri/Uri\";\r\nimport {IUri} from \"../../source/System/Uri/IUri\";\r\n\r\n\r\nexport default function run()\r\n{\r\n\r\n\tvar validUri:IUri = {\r\n\t\tscheme:'http',\r\n\t\tuserInfo:'username:password',\r\n\t\thost:'domain.com',\r\n\t\tport:1234,\r\n\t\tpath:'/tree/node/index.html',\r\n\t\tquery:'?param=hello%20there&flag=false&blah',\r\n\t\tfragment:'#home'\r\n\t};\r\n\tvar validUrl:string = ''\r\n\t\t+ validUri.scheme + '://'\r\n\t\t+ validUri.userInfo + '@'\r\n\t\t+ validUri.host\r\n\t\t+ ':' + validUri.port\r\n\t\t+ validUri.path\r\n\t\t+ validUri.query\r\n\t\t+ validUri.fragment;\r\n\r\n\tQUnit.test('Uri: parse valid', (assert:QUnitAssert)=>{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.from(validUrl).absoluteUri,\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.from(string) should parse correctly.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: parse equality', (assert:QUnitAssert)=>{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.from(validUrl).equals(validUri),\r\n\t\t\ttrue,\r\n\t\t\t'Uri.from(string) should equal derived values.');\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: valid', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.equal(\r\n\t\t\tUri.toString(validUri),\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.toString(uri) must match source values.');\r\n\r\n\r\n\t\tvar uri = Uri.from(validUri);\r\n\t\tassert.equal(\r\n\t\t\turi.toString(),\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.toString() must match source values.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.absoluteUri,\r\n\t\t\tvalidUrl,\r\n\t\t\t'Uri.absoluteUri must match source values.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.pathAndQuery,\r\n\t\t\turi.path+uri.query,\r\n\t\t\t'Uri path and query must equal expected.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['param'],\r\n\t\t\t'hello there',\r\n\t\t\t'Uri must decode the query params correctly.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['flag'],\r\n\t\t\tfalse,\r\n\t\t\t'Uri must parse and deserialize the query params correctly.');\r\n\r\n\t\tassert.equal(\r\n\t\t\turi.queryParams['blah'],\r\n\t\t\tundefined,\r\n\t\t\t'Uri must ignore invalid query params.');\r\n\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: invalid scheme', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tscheme:<any>'x y z'\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from('http//');\r\n\t\t});\r\n\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tscheme:<any>'https:s'\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tQUnit.test('Uri: invalid authority', (assert:QUnitAssert)=>\r\n\t{\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tuserInfo:validUri.userInfo\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tassert.throws(()=>{\r\n\t\t\tUri.from({\r\n\t\t\t\tport:validUri.port\r\n\t\t\t})\r\n\t\t});\r\n\r\n\r\n\t});\r\n}\r\n"
  ]
}