{"version":3,"sources":["System/Compare.js","System/Compare.ts"],"names":["define","require","exports","Types_1","areEqual","a","b","strict","compare","isTrueNaN"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,WAAY,SAAUC,EAASC,EAASC,GCYtE,QAAAC,GAAyBC,EAAOC,EAAOC,GAEtCH,MAFsCA,UAAAA,IAAAA,GAAAA,GAE/BA,IAAIA,IAAMA,GAAUA,GAAGA,GAAKA,EAAUA,IAAMA,EAAUA,GAG9D,QAAAI,GAAwBH,EAAOC,EAAOC,GAGrCC,MAHqCA,UAAAA,IAAAA,GAAAA,GAGlCA,EAASA,EAAGA,EAAGA,GACVA,EAILA,EAAEA,GAAKA,IAAeA,IAAJA,GAAYA,GAAHA,GAAYA,OAAJA,GAAgBA,SAAJA,GAC1CA,EAELA,EAAEA,GAAKA,IAAeA,IAAJA,GAAYA,GAAHA,GAAYA,OAAJA,GAAgBA,SAAJA,GAC1CA,GAEDA,IA7BR,GAAOC,GAAYN,EAAAA,WAAKM,SAURP,GAAAE,SAAQA,EAKRF,EAAAM,QAAOA","file":"System/Compare.js","sourcesContent":["/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\ndefine([\"require\", \"exports\", './Types'], function (require, exports, Types_1) {\r\n    var isTrueNaN = Types_1.default.isTrueNaN;\r\n    function areEqual(a, b, strict) {\r\n        if (strict === void 0) { strict = true; }\r\n        return a === b || !strict && a == b || isTrueNaN(a) && isTrueNaN(b);\r\n    }\r\n    exports.areEqual = areEqual;\r\n    function compare(a, b, strict) {\r\n        if (strict === void 0) { strict = true; }\r\n        if (areEqual(a, b, strict))\r\n            return 0;\r\n        if (a > b || strict && (a === 0 && b == 0 || a === null && b === undefined))\r\n            return 1;\r\n        if (b > a || strict && (b === 0 && a == 0 || b === null && a === undefined))\r\n            return -1;\r\n        return NaN;\r\n    }\r\n    exports.compare = compare;\r\n});\r\n//# sourceMappingURL=Compare.js.map","/*\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport Type from './Types';\r\nimport isTrueNaN = Type.isTrueNaN;\r\n\r\nexport const enum CompareResult {\r\n\tEqual   = 0,\r\n\tGreater = 1,\r\n\tLess    = -1\r\n}\r\n\r\n\r\n// Used for special equals cases like NaN.\r\nexport function areEqual(a:any, b:any, strict:boolean = true):boolean\r\n{\r\n\treturn a===b || !strict && a==b || isTrueNaN(a) && isTrueNaN(b);\r\n}\r\n\r\nexport function compare(a:any, b:any, strict:boolean = true):CompareResult\r\n{\r\n\r\n\tif(areEqual(a, b, strict))\r\n\t\treturn CompareResult.Equal;\r\n\r\n\t// Allow for special inequality..\r\n\r\n\tif(a>b || strict && (a===0 && b==0 || a===null && b===undefined))\r\n\t\treturn CompareResult.Greater;\r\n\r\n\tif(b>a || strict && (b===0 && a==0 || b===null && a===undefined))\r\n\t\treturn CompareResult.Less;\r\n\r\n\treturn NaN;\r\n}\r\n"]}