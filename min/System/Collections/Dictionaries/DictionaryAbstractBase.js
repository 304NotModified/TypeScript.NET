/*
 * @author electricessence / https://github.com/electricessence/
 * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md
 */
define(["require","exports","../../Compare","../Enumeration/EnumeratorBase","../../Exceptions/NotImplementedException","../../Exceptions/ArgumentException","../../Exceptions/InvalidOperationException"],function(e,t,n,o,r,a,u){function i(e,t){return void 0===t&&(t=""),console.log("DictionaryAbstractBase sub-class has not overridden "+e+". "+t),new r("DictionaryAbstractBase."+e+": Not implemented.")}var c=function(){function e(){this._updateRecursion=0}return Object.defineProperty(e.prototype,"isUpdating",{get:function(){return 0!=this._updateRecursion},enumerable:!0,configurable:!0}),e.prototype._onValueUpdate=function(e,t,o){if(!n.areEqual(t,o,!0)){var r=this;r.onValueChanged&&r.onValueChanged(e,t,o),0==r._updateRecursion&&r._onUpdated()}},e.prototype._onUpdated=function(){var e=this;e.onUpdated&&e.onUpdated()},e.prototype.handleUpdate=function(e){var t,n=this;if(e){n._updateRecursion++;try{t=e()}finally{n._updateRecursion--}}else t=0==n._updateRecursion;return t&&0==n._updateRecursion&&n._onUpdated(),t},Object.defineProperty(e.prototype,"isReadOnly",{get:function(){return!1},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"count",{get:function(){throw i("count")},enumerable:!0,configurable:!0}),e.prototype.add=function(e){if(!e)throw new a("item","Dictionaries must use a valid key/value pair. '"+e+"' is not allowed.");this.addByKeyValue(e.key,e.value)},e.prototype.clear=function(){var e=this,t=e.keys,n=t.length;return n&&e.handleUpdate(function(){return t.forEach(function(t){e.removeByKey(t)}),!0}),0!=e.count&&console.warn("Dictionary clear() results in mismatched count."),n},e.prototype.contains=function(e){if(!e)return!1;var t=this.getValue(e.key);return n.areEqual(t,e.value)},e.prototype.copyTo=function(e,t){void 0===t&&(t=0);for(var n=this.getEnumerator();n.moveNext();)e[t++]=n.current},e.prototype.remove=function(e){var t=e.key,o=this.getValue(t);return n.areEqual(o,e.value)&&this.removeByKey(t)?1:0},Object.defineProperty(e.prototype,"keys",{get:function(){throw i("keys")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){throw i("values")},enumerable:!0,configurable:!0}),e.prototype.addByKeyValue=function(e,t){var n=this;if(n.containsKey(e)){var o=new u("Adding a key/value when the key already exists.");throw o.data.key=e,o.data.value=t,o}n.setValue(e,t)},e.prototype.getValue=function(e){throw i("getValue(key: TKey): TValue","When calling for key: "+e)},e.prototype.setValue=function(e,t){throw i("setValue(key: TKey, value: TValue): boolean","When setting "+e+":"+t+".")},e.prototype.containsKey=function(e){var t=this.getValue(e);return void 0!==t},e.prototype.containsValue=function(e){for(var t=this.getEnumerator(),o=n.areEqual;t.moveNext();)if(o(t.current,e,!0))return t.dispose(),!0;return!1},e.prototype.removeByKey=function(e){return this.setValue(e,void 0)},e.prototype.removeByValue=function(e){var t=this,o=0,r=n.areEqual;return t.keys.forEach(function(n){r(t.getValue(n),e,!0)&&(t.removeByKey(n),++o)}),o},e.prototype.importPairs=function(e){var t=this;return t.handleUpdate(function(){var n=!1;return e.forEach(function(e){t.setValue(e.key,e.value),n=!0}),n})},e.prototype.getEnumerator=function(){var e,t,n=this,r=0;return new o(function(){e=n.keys,t=e.length},function(o){for(;t>r;){var a=e[r++],u=n.getValue(a);if(void 0!==u)return o.yieldReturn({key:a,value:u})}return o.yieldBreak()})},e}();return c});
//# sourceMappingURL=DictionaryAbstractBase.js.map
