/*
 * @author electricessence / https://github.com/electricessence/
 * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md
 */
define(["require","exports","../../Compare","../Enumeration/EnumeratorBase","../../Exceptions/NotImplementedException"],function(e,t,n,r,o){function u(e,t){throw void 0===t&&(t=""),console.log("DictionaryAbstractBase sub-class has not overridden "+e+". "+t),new o("DictionaryAbstractBase."+e+": Not implemented.")}var a=function(){function e(){this._updateRecursion=0}return Object.defineProperty(e.prototype,"isUpdating",{get:function(){return 0!=this._updateRecursion},enumerable:!0,configurable:!0}),e.prototype._onValueUpdate=function(e,t,r){if(!n.areEqual(t,r,!0)){var o=this;o.onValueChanged&&o.onValueChanged(e,t,r),0==o._updateRecursion&&o._onUpdated()}},e.prototype._onUpdated=function(){var e=this;e.onUpdated&&e.onUpdated()},e.prototype.handleUpdate=function(e){var t,n=this;if(e){n._updateRecursion++;try{t=e()}finally{n._updateRecursion--}}else t=0==n._updateRecursion;return t&&0==n._updateRecursion&&n._onUpdated(),t},Object.defineProperty(e.prototype,"isReadOnly",{get:function(){return!1},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"count",{get:function(){return u("count")},enumerable:!0,configurable:!0}),e.prototype.add=function(e){this.addByKeyValue(e.key,e.value)},e.prototype.clear=function(){var e=this,t=e.keys,n=t.length;return n&&e.handleUpdate(function(){return t.forEach(function(t){e.removeByKey(t)}),!0}),0!=e.count&&console.warn("Dictionary clear() results in mismatched count."),n},e.prototype.contains=function(e){var t=this.getValue(e.key);return n.areEqual(t,e.value)},e.prototype.copyTo=function(e,t){void 0===t&&(t=0);for(var n=this.getEnumerator();n.moveNext();)e[t++]=n.current},e.prototype.remove=function(e){var t=e.key,r=this.getValue(t);return n.areEqual(r,e.value)&&this.removeByKey(t)?1:0},Object.defineProperty(e.prototype,"keys",{get:function(){return u("keys")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return u("values")},enumerable:!0,configurable:!0}),e.prototype.addByKeyValue=function(e,t){var n=this;if(n.containsKey(e))throw new Error("Adding key/value when one already exists.");n.setValue(e,t)},e.prototype.getValue=function(e){return u("getValue(key: TKey): TValue","When calling for key: "+e)},e.prototype.setValue=function(e,t){return u("setValue(key: TKey, value: TValue): boolean","When setting "+e+":"+t+".")},e.prototype.containsKey=function(e){var t=this.getValue(e);return void 0!==t},e.prototype.containsValue=function(e){for(var t=this.getEnumerator(),r=n.areEqual;t.moveNext();)if(r(t.current,e,!0))return t.dispose(),!0;return!1},e.prototype.removeByKey=function(e){return this.setValue(e,void 0)},e.prototype.removeByValue=function(e){var t=this,r=0,o=n.areEqual;return t.keys.forEach(function(n){o(t.getValue(n),e,!0)&&(t.removeByKey(n),++r)}),r},e.prototype.importPairs=function(e){var t=this;return t.handleUpdate(function(){var n=!1;return e.forEach(function(e){t.setValue(e.key,e.value),n=!0}),n})},e.prototype.getEnumerator=function(){var e,t,n=this,o=0;return new r(function(){e=n.keys,t=e.length},function(r){for(;t>o;){var u=e[o++],a=n.getValue(u);if(void 0!==a)return r.yieldReturn({key:u,value:a})}return r.yieldBreak()})},e}();return a});
//# sourceMappingURL=DictionaryAbstractBase.js.map
