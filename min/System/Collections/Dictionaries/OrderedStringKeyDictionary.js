/*
 * @author electricessence / https://github.com/electricessence/
 * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md
 */
var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)};define(["require","exports","./StringKeyDictionary","../Array/Utility","../../Exceptions/ArgumentOutOfRangeException"],function(t,e,r,n,o){var i=function(t){function e(){t.call(this),this._order=[]}return __extends(e,t),e.prototype.indexOfKey=function(t){return this._order.indexOf(t,0)},e.prototype.getValueByIndex=function(t){return this.getValue(this._order[t])},e.prototype.setValue=function(e,r,o){var i=this,u=-1!=i.indexOfKey(e);return u||void 0===r&&!o?u&&void 0===r&&!o&&n.remove(i._order,e):i._order.push(e),t.prototype.setValue.call(this,e,r)},e.prototype.setByIndex=function(t,e){var r=this,n=r._order;if(0>t)throw new o("index",t,"Is less than zero.");if(t>=n.length)throw new o("index",t,"Is greater than the count.");return r.setValue(n[t],e)},e.prototype.importValues=function(t){var e=this;return e.handleUpdate(function(){for(var r=!1,n=0;n<t.length;n++)e.setByIndex(n,t[n])&&(r=!0);return r})},e.prototype.setValues=function(){for(var t=[],e=0;e<arguments.length;e++)t[e-0]=arguments[e];return this.importValues(t)},e.prototype.removeByIndex=function(t){return this.setByIndex(t,void 0)},Object.defineProperty(e.prototype,"keys",{get:function(){var t=this;return t._order.filter(function(e){return t.containsKey(e)})},enumerable:!0,configurable:!0}),e}(r);return i});
//# sourceMappingURL=OrderedStringKeyDictionary.js.map
