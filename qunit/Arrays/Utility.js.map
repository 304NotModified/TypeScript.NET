{"version":3,"sources":["Arrays/Utility.ts"],"names":[],"mappings":"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","file":"Arrays/Utility.js","sourcesContent":["///<reference path=\"../../../typings/qunit/qunit.d.ts\"/>\r\n///<amd-dependency path=\"QUnit\"/>\r\n\r\nimport * as Arrays from 'source/System/Collections/Array/Compare';\r\nimport * as ArrayUtility from 'source/System/Collections/Array/Utility';\r\n\r\nexport default function run() {\r\n    // Min/Max tests...\r\n    var minA = -10, maxA = 2000;\r\n\r\n    var a = [5, minA, -1, maxA, -2, NaN, 20];\r\n\r\n    QUnit.test(\"Array/Utility.initialize\", (assert:QUnitAssert)=> {\r\n        var len:number;\r\n\r\n        len = 100;\r\n        var a = ArrayUtility.initialize(len);\r\n        assert.equal(a.length, len, \".length should be \" + len);\r\n\r\n        len = 100000;\r\n        var b = ArrayUtility.initialize(len);\r\n        assert.equal(b.length, len, \".length should be \" + len);\r\n\r\n    });\r\n\r\n\r\n    QUnit.test(\"Array/Utility.copy/equals\", (assert:QUnitAssert)=> {\r\n        var s1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n        var s2 = ArrayUtility.copy(s1);\r\n\r\n        assert.ok(Arrays.areEqual(s1, s2));\r\n    });\r\n\r\n    QUnit.test(\"Array/Utility.contains\", (assert:QUnitAssert)=> {\r\n        assert.ok(ArrayUtility.contains(a, -1));\r\n        assert.ok(!ArrayUtility.contains(a, -9876));\r\n    });\r\n\r\n    QUnit.test(\"Array/Utility.findIndex\", (assert:QUnitAssert)=> {\r\n        assert.equal(ArrayUtility.findIndex(a, (v:number)=> {\r\n            return v == -1;\r\n        }), 2);\r\n        assert.equal(ArrayUtility.findIndex(a, (v:number)=> {\r\n            return v == -9876;\r\n        }), -1);\r\n    });\r\n\r\n    QUnit.test(\"Array/Utility.register\", (assert:QUnitAssert)=> {\r\n        var s = ArrayUtility.copy(a), len = s.length;\r\n        assert.ok(ArrayUtility.register(s, -9876));\r\n        assert.equal(s.length, len + 1);\r\n        len = s.length;\r\n\r\n        assert.ok(!ArrayUtility.register(s, -1));\r\n        assert.equal(s.length, len);\r\n    });\r\n\r\n\r\n    /*\tUtility.applyTo skipped.\r\n     It has too many permutations while being a straight forward function. */\r\n\r\n    QUnit.test(\"Array/Utility.remove\", (assert:QUnitAssert)=> {\r\n        var s = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3];\r\n        var len = s.length;\r\n\r\n        assert.equal(ArrayUtility.remove(s, 9), 1, \"Only 9 removed once\");\r\n        assert.equal(s.length, len - 1, \".length should be less by one\");\r\n        assert.equal(s[1], 8, \"Index [1] is now 8\");\r\n        len = s.length;\r\n\r\n        assert.equal(ArrayUtility.remove(s, 2), 2, \"2 removed twice\");\r\n        assert.equal(s.length, len - 2, \".length should be less by two\");\r\n        assert.equal(s[7], 1, \"Index [7] is now 1\");\r\n        assert.equal(s[10], 3, \"Index [10] is now 3\");\r\n        len = s.length;\r\n\r\n        assert.equal(ArrayUtility.remove(s, 15), 0, \"15 does not exist\");\r\n        assert.equal(s.length, len, \".length should be the same\");\r\n        len = s.length;\r\n\r\n        assert.ok(ArrayUtility.removeIndex(s, 5), \"Index [5] removed\");\r\n        assert.equal(s.length, len - 1, \".length should be less by one\");\r\n        len = s.length;\r\n\r\n        assert.ok(!ArrayUtility.removeIndex(s, 15), \"Index [15] doesn't exist\");\r\n        assert.equal(s.length, len, \".length should be the same\");\r\n    });\r\n\r\n\r\n    QUnit.test(\"Array/Utility.repeat\", (assert:QUnitAssert)=> {\r\n        var value = 10, count = 3;\r\n        var r = ArrayUtility.repeat(value, count);\r\n        assert.ok(r.length == count, \".length should be 3\");\r\n        for(let i = 0; i < count; i++)\r\n            assert.equal(r[i], value);\r\n    });\r\n\r\n\r\n}\r\n"]}